/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.WAWeb = (function() {

    /**
     * Namespace WAWeb.
     * @exports WAWeb
     * @namespace
     */
    var WAWeb = {};

    WAWeb.WebMessageInfo = (function() {

        /**
         * Properties of a WebMessageInfo.
         * @memberof WAWeb
         * @interface IWebMessageInfo
         * @property {WAProtocol.IMessageKey} key WebMessageInfo key
         * @property {WAE2E.IMessage|null} [message] WebMessageInfo message
         * @property {number|Long|null} [messageTimestamp] WebMessageInfo messageTimestamp
         * @property {WAWeb.WebMessageInfo.Status|null} [status] WebMessageInfo status
         * @property {string|null} [participant] WebMessageInfo participant
         * @property {number|Long|null} [messageC2STimestamp] WebMessageInfo messageC2STimestamp
         * @property {boolean|null} [ignore] WebMessageInfo ignore
         * @property {boolean|null} [starred] WebMessageInfo starred
         * @property {boolean|null} [broadcast] WebMessageInfo broadcast
         * @property {string|null} [pushName] WebMessageInfo pushName
         * @property {Uint8Array|null} [mediaCiphertextSHA256] WebMessageInfo mediaCiphertextSHA256
         * @property {boolean|null} [multicast] WebMessageInfo multicast
         * @property {boolean|null} [urlText] WebMessageInfo urlText
         * @property {boolean|null} [urlNumber] WebMessageInfo urlNumber
         * @property {WAWeb.WebMessageInfo.StubType|null} [messageStubType] WebMessageInfo messageStubType
         * @property {boolean|null} [clearMedia] WebMessageInfo clearMedia
         * @property {Array.<string>|null} [messageStubParameters] WebMessageInfo messageStubParameters
         * @property {number|null} [duration] WebMessageInfo duration
         * @property {Array.<string>|null} [labels] WebMessageInfo labels
         * @property {WAWeb.IPaymentInfo|null} [paymentInfo] WebMessageInfo paymentInfo
         * @property {WAE2E.Message.ILiveLocationMessage|null} [finalLiveLocation] WebMessageInfo finalLiveLocation
         * @property {WAWeb.IPaymentInfo|null} [quotedPaymentInfo] WebMessageInfo quotedPaymentInfo
         * @property {number|Long|null} [ephemeralStartTimestamp] WebMessageInfo ephemeralStartTimestamp
         * @property {number|null} [ephemeralDuration] WebMessageInfo ephemeralDuration
         * @property {boolean|null} [ephemeralOffToOn] WebMessageInfo ephemeralOffToOn
         * @property {boolean|null} [ephemeralOutOfSync] WebMessageInfo ephemeralOutOfSync
         * @property {WAWeb.WebMessageInfo.BizPrivacyStatus|null} [bizPrivacyStatus] WebMessageInfo bizPrivacyStatus
         * @property {string|null} [verifiedBizName] WebMessageInfo verifiedBizName
         * @property {WAWeb.IMediaData|null} [mediaData] WebMessageInfo mediaData
         * @property {WAWeb.IPhotoChange|null} [photoChange] WebMessageInfo photoChange
         * @property {Array.<WAWeb.IUserReceipt>|null} [userReceipt] WebMessageInfo userReceipt
         * @property {Array.<WAWeb.IReaction>|null} [reactions] WebMessageInfo reactions
         * @property {WAWeb.IMediaData|null} [quotedStickerData] WebMessageInfo quotedStickerData
         * @property {Uint8Array|null} [futureproofData] WebMessageInfo futureproofData
         * @property {WAWeb.IStatusPSA|null} [statusPsa] WebMessageInfo statusPsa
         * @property {Array.<WAWeb.IPollUpdate>|null} [pollUpdates] WebMessageInfo pollUpdates
         * @property {WAWeb.IPollAdditionalMetadata|null} [pollAdditionalMetadata] WebMessageInfo pollAdditionalMetadata
         * @property {string|null} [agentID] WebMessageInfo agentID
         * @property {boolean|null} [statusAlreadyViewed] WebMessageInfo statusAlreadyViewed
         * @property {Uint8Array|null} [messageSecret] WebMessageInfo messageSecret
         * @property {WAWeb.IKeepInChat|null} [keepInChat] WebMessageInfo keepInChat
         * @property {string|null} [originalSelfAuthorUserJIDString] WebMessageInfo originalSelfAuthorUserJIDString
         * @property {number|Long|null} [revokeMessageTimestamp] WebMessageInfo revokeMessageTimestamp
         * @property {WAWeb.IPinInChat|null} [pinInChat] WebMessageInfo pinInChat
         * @property {WAWeb.IPremiumMessageInfo|null} [premiumMessageInfo] WebMessageInfo premiumMessageInfo
         * @property {boolean|null} [is1PBizBotMessage] WebMessageInfo is1PBizBotMessage
         * @property {boolean|null} [isGroupHistoryMessage] WebMessageInfo isGroupHistoryMessage
         * @property {string|null} [botMessageInvokerJID] WebMessageInfo botMessageInvokerJID
         * @property {WAWeb.ICommentMetadata|null} [commentMetadata] WebMessageInfo commentMetadata
         * @property {Array.<WAWeb.IEventResponse>|null} [eventResponses] WebMessageInfo eventResponses
         * @property {WAWeb.IReportingTokenInfo|null} [reportingTokenInfo] WebMessageInfo reportingTokenInfo
         * @property {number|Long|null} [newsletterServerID] WebMessageInfo newsletterServerID
         * @property {WAWeb.IEventAdditionalMetadata|null} [eventAdditionalMetadata] WebMessageInfo eventAdditionalMetadata
         * @property {boolean|null} [isMentionedInStatus] WebMessageInfo isMentionedInStatus
         * @property {Array.<string>|null} [statusMentions] WebMessageInfo statusMentions
         * @property {WAProtocol.IMessageKey|null} [targetMessageID] WebMessageInfo targetMessageID
         * @property {Array.<WAWeb.IMessageAddOn>|null} [messageAddOns] WebMessageInfo messageAddOns
         */

        /**
         * Constructs a new WebMessageInfo.
         * @memberof WAWeb
         * @classdesc Represents a WebMessageInfo.
         * @implements IWebMessageInfo
         * @constructor
         * @param {WAWeb.IWebMessageInfo=} [properties] Properties to set
         */
        function WebMessageInfo(properties) {
            this.messageStubParameters = [];
            this.labels = [];
            this.userReceipt = [];
            this.reactions = [];
            this.pollUpdates = [];
            this.eventResponses = [];
            this.statusMentions = [];
            this.messageAddOns = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * WebMessageInfo key.
         * @member {WAProtocol.IMessageKey} key
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.key = null;

        /**
         * WebMessageInfo message.
         * @member {WAE2E.IMessage|null|undefined} message
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.message = null;

        /**
         * WebMessageInfo messageTimestamp.
         * @member {number|Long} messageTimestamp
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.messageTimestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * WebMessageInfo status.
         * @member {WAWeb.WebMessageInfo.Status} status
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.status = 0;

        /**
         * WebMessageInfo participant.
         * @member {string} participant
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.participant = "";

        /**
         * WebMessageInfo messageC2STimestamp.
         * @member {number|Long} messageC2STimestamp
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.messageC2STimestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * WebMessageInfo ignore.
         * @member {boolean} ignore
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.ignore = false;

        /**
         * WebMessageInfo starred.
         * @member {boolean} starred
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.starred = false;

        /**
         * WebMessageInfo broadcast.
         * @member {boolean} broadcast
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.broadcast = false;

        /**
         * WebMessageInfo pushName.
         * @member {string} pushName
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.pushName = "";

        /**
         * WebMessageInfo mediaCiphertextSHA256.
         * @member {Uint8Array} mediaCiphertextSHA256
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.mediaCiphertextSHA256 = $util.newBuffer([]);

        /**
         * WebMessageInfo multicast.
         * @member {boolean} multicast
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.multicast = false;

        /**
         * WebMessageInfo urlText.
         * @member {boolean} urlText
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.urlText = false;

        /**
         * WebMessageInfo urlNumber.
         * @member {boolean} urlNumber
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.urlNumber = false;

        /**
         * WebMessageInfo messageStubType.
         * @member {WAWeb.WebMessageInfo.StubType} messageStubType
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.messageStubType = 0;

        /**
         * WebMessageInfo clearMedia.
         * @member {boolean} clearMedia
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.clearMedia = false;

        /**
         * WebMessageInfo messageStubParameters.
         * @member {Array.<string>} messageStubParameters
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.messageStubParameters = $util.emptyArray;

        /**
         * WebMessageInfo duration.
         * @member {number} duration
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.duration = 0;

        /**
         * WebMessageInfo labels.
         * @member {Array.<string>} labels
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.labels = $util.emptyArray;

        /**
         * WebMessageInfo paymentInfo.
         * @member {WAWeb.IPaymentInfo|null|undefined} paymentInfo
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.paymentInfo = null;

        /**
         * WebMessageInfo finalLiveLocation.
         * @member {WAE2E.Message.ILiveLocationMessage|null|undefined} finalLiveLocation
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.finalLiveLocation = null;

        /**
         * WebMessageInfo quotedPaymentInfo.
         * @member {WAWeb.IPaymentInfo|null|undefined} quotedPaymentInfo
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.quotedPaymentInfo = null;

        /**
         * WebMessageInfo ephemeralStartTimestamp.
         * @member {number|Long} ephemeralStartTimestamp
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.ephemeralStartTimestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * WebMessageInfo ephemeralDuration.
         * @member {number} ephemeralDuration
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.ephemeralDuration = 0;

        /**
         * WebMessageInfo ephemeralOffToOn.
         * @member {boolean} ephemeralOffToOn
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.ephemeralOffToOn = false;

        /**
         * WebMessageInfo ephemeralOutOfSync.
         * @member {boolean} ephemeralOutOfSync
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.ephemeralOutOfSync = false;

        /**
         * WebMessageInfo bizPrivacyStatus.
         * @member {WAWeb.WebMessageInfo.BizPrivacyStatus} bizPrivacyStatus
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.bizPrivacyStatus = 0;

        /**
         * WebMessageInfo verifiedBizName.
         * @member {string} verifiedBizName
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.verifiedBizName = "";

        /**
         * WebMessageInfo mediaData.
         * @member {WAWeb.IMediaData|null|undefined} mediaData
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.mediaData = null;

        /**
         * WebMessageInfo photoChange.
         * @member {WAWeb.IPhotoChange|null|undefined} photoChange
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.photoChange = null;

        /**
         * WebMessageInfo userReceipt.
         * @member {Array.<WAWeb.IUserReceipt>} userReceipt
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.userReceipt = $util.emptyArray;

        /**
         * WebMessageInfo reactions.
         * @member {Array.<WAWeb.IReaction>} reactions
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.reactions = $util.emptyArray;

        /**
         * WebMessageInfo quotedStickerData.
         * @member {WAWeb.IMediaData|null|undefined} quotedStickerData
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.quotedStickerData = null;

        /**
         * WebMessageInfo futureproofData.
         * @member {Uint8Array} futureproofData
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.futureproofData = $util.newBuffer([]);

        /**
         * WebMessageInfo statusPsa.
         * @member {WAWeb.IStatusPSA|null|undefined} statusPsa
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.statusPsa = null;

        /**
         * WebMessageInfo pollUpdates.
         * @member {Array.<WAWeb.IPollUpdate>} pollUpdates
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.pollUpdates = $util.emptyArray;

        /**
         * WebMessageInfo pollAdditionalMetadata.
         * @member {WAWeb.IPollAdditionalMetadata|null|undefined} pollAdditionalMetadata
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.pollAdditionalMetadata = null;

        /**
         * WebMessageInfo agentID.
         * @member {string} agentID
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.agentID = "";

        /**
         * WebMessageInfo statusAlreadyViewed.
         * @member {boolean} statusAlreadyViewed
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.statusAlreadyViewed = false;

        /**
         * WebMessageInfo messageSecret.
         * @member {Uint8Array} messageSecret
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.messageSecret = $util.newBuffer([]);

        /**
         * WebMessageInfo keepInChat.
         * @member {WAWeb.IKeepInChat|null|undefined} keepInChat
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.keepInChat = null;

        /**
         * WebMessageInfo originalSelfAuthorUserJIDString.
         * @member {string} originalSelfAuthorUserJIDString
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.originalSelfAuthorUserJIDString = "";

        /**
         * WebMessageInfo revokeMessageTimestamp.
         * @member {number|Long} revokeMessageTimestamp
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.revokeMessageTimestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * WebMessageInfo pinInChat.
         * @member {WAWeb.IPinInChat|null|undefined} pinInChat
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.pinInChat = null;

        /**
         * WebMessageInfo premiumMessageInfo.
         * @member {WAWeb.IPremiumMessageInfo|null|undefined} premiumMessageInfo
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.premiumMessageInfo = null;

        /**
         * WebMessageInfo is1PBizBotMessage.
         * @member {boolean} is1PBizBotMessage
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.is1PBizBotMessage = false;

        /**
         * WebMessageInfo isGroupHistoryMessage.
         * @member {boolean} isGroupHistoryMessage
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.isGroupHistoryMessage = false;

        /**
         * WebMessageInfo botMessageInvokerJID.
         * @member {string} botMessageInvokerJID
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.botMessageInvokerJID = "";

        /**
         * WebMessageInfo commentMetadata.
         * @member {WAWeb.ICommentMetadata|null|undefined} commentMetadata
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.commentMetadata = null;

        /**
         * WebMessageInfo eventResponses.
         * @member {Array.<WAWeb.IEventResponse>} eventResponses
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.eventResponses = $util.emptyArray;

        /**
         * WebMessageInfo reportingTokenInfo.
         * @member {WAWeb.IReportingTokenInfo|null|undefined} reportingTokenInfo
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.reportingTokenInfo = null;

        /**
         * WebMessageInfo newsletterServerID.
         * @member {number|Long} newsletterServerID
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.newsletterServerID = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * WebMessageInfo eventAdditionalMetadata.
         * @member {WAWeb.IEventAdditionalMetadata|null|undefined} eventAdditionalMetadata
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.eventAdditionalMetadata = null;

        /**
         * WebMessageInfo isMentionedInStatus.
         * @member {boolean} isMentionedInStatus
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.isMentionedInStatus = false;

        /**
         * WebMessageInfo statusMentions.
         * @member {Array.<string>} statusMentions
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.statusMentions = $util.emptyArray;

        /**
         * WebMessageInfo targetMessageID.
         * @member {WAProtocol.IMessageKey|null|undefined} targetMessageID
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.targetMessageID = null;

        /**
         * WebMessageInfo messageAddOns.
         * @member {Array.<WAWeb.IMessageAddOn>} messageAddOns
         * @memberof WAWeb.WebMessageInfo
         * @instance
         */
        WebMessageInfo.prototype.messageAddOns = $util.emptyArray;

        /**
         * Creates a new WebMessageInfo instance using the specified properties.
         * @function create
         * @memberof WAWeb.WebMessageInfo
         * @static
         * @param {WAWeb.IWebMessageInfo=} [properties] Properties to set
         * @returns {WAWeb.WebMessageInfo} WebMessageInfo instance
         */
        WebMessageInfo.create = function create(properties) {
            return new WebMessageInfo(properties);
        };

        /**
         * Encodes the specified WebMessageInfo message. Does not implicitly {@link WAWeb.WebMessageInfo.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.WebMessageInfo
         * @static
         * @param {WAWeb.IWebMessageInfo} message WebMessageInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WebMessageInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            $root.WAProtocol.MessageKey.encode(message.key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                $root.WAE2E.Message.encode(message.message, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.messageTimestamp != null && Object.hasOwnProperty.call(message, "messageTimestamp"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.messageTimestamp);
            if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.status);
            if (message.participant != null && Object.hasOwnProperty.call(message, "participant"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.participant);
            if (message.messageC2STimestamp != null && Object.hasOwnProperty.call(message, "messageC2STimestamp"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.messageC2STimestamp);
            if (message.ignore != null && Object.hasOwnProperty.call(message, "ignore"))
                writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ignore);
            if (message.starred != null && Object.hasOwnProperty.call(message, "starred"))
                writer.uint32(/* id 17, wireType 0 =*/136).bool(message.starred);
            if (message.broadcast != null && Object.hasOwnProperty.call(message, "broadcast"))
                writer.uint32(/* id 18, wireType 0 =*/144).bool(message.broadcast);
            if (message.pushName != null && Object.hasOwnProperty.call(message, "pushName"))
                writer.uint32(/* id 19, wireType 2 =*/154).string(message.pushName);
            if (message.mediaCiphertextSHA256 != null && Object.hasOwnProperty.call(message, "mediaCiphertextSHA256"))
                writer.uint32(/* id 20, wireType 2 =*/162).bytes(message.mediaCiphertextSHA256);
            if (message.multicast != null && Object.hasOwnProperty.call(message, "multicast"))
                writer.uint32(/* id 21, wireType 0 =*/168).bool(message.multicast);
            if (message.urlText != null && Object.hasOwnProperty.call(message, "urlText"))
                writer.uint32(/* id 22, wireType 0 =*/176).bool(message.urlText);
            if (message.urlNumber != null && Object.hasOwnProperty.call(message, "urlNumber"))
                writer.uint32(/* id 23, wireType 0 =*/184).bool(message.urlNumber);
            if (message.messageStubType != null && Object.hasOwnProperty.call(message, "messageStubType"))
                writer.uint32(/* id 24, wireType 0 =*/192).int32(message.messageStubType);
            if (message.clearMedia != null && Object.hasOwnProperty.call(message, "clearMedia"))
                writer.uint32(/* id 25, wireType 0 =*/200).bool(message.clearMedia);
            if (message.messageStubParameters != null && message.messageStubParameters.length)
                for (var i = 0; i < message.messageStubParameters.length; ++i)
                    writer.uint32(/* id 26, wireType 2 =*/210).string(message.messageStubParameters[i]);
            if (message.duration != null && Object.hasOwnProperty.call(message, "duration"))
                writer.uint32(/* id 27, wireType 0 =*/216).uint32(message.duration);
            if (message.labels != null && message.labels.length)
                for (var i = 0; i < message.labels.length; ++i)
                    writer.uint32(/* id 28, wireType 2 =*/226).string(message.labels[i]);
            if (message.paymentInfo != null && Object.hasOwnProperty.call(message, "paymentInfo"))
                $root.WAWeb.PaymentInfo.encode(message.paymentInfo, writer.uint32(/* id 29, wireType 2 =*/234).fork()).ldelim();
            if (message.finalLiveLocation != null && Object.hasOwnProperty.call(message, "finalLiveLocation"))
                $root.WAE2E.Message.LiveLocationMessage.encode(message.finalLiveLocation, writer.uint32(/* id 30, wireType 2 =*/242).fork()).ldelim();
            if (message.quotedPaymentInfo != null && Object.hasOwnProperty.call(message, "quotedPaymentInfo"))
                $root.WAWeb.PaymentInfo.encode(message.quotedPaymentInfo, writer.uint32(/* id 31, wireType 2 =*/250).fork()).ldelim();
            if (message.ephemeralStartTimestamp != null && Object.hasOwnProperty.call(message, "ephemeralStartTimestamp"))
                writer.uint32(/* id 32, wireType 0 =*/256).uint64(message.ephemeralStartTimestamp);
            if (message.ephemeralDuration != null && Object.hasOwnProperty.call(message, "ephemeralDuration"))
                writer.uint32(/* id 33, wireType 0 =*/264).uint32(message.ephemeralDuration);
            if (message.ephemeralOffToOn != null && Object.hasOwnProperty.call(message, "ephemeralOffToOn"))
                writer.uint32(/* id 34, wireType 0 =*/272).bool(message.ephemeralOffToOn);
            if (message.ephemeralOutOfSync != null && Object.hasOwnProperty.call(message, "ephemeralOutOfSync"))
                writer.uint32(/* id 35, wireType 0 =*/280).bool(message.ephemeralOutOfSync);
            if (message.bizPrivacyStatus != null && Object.hasOwnProperty.call(message, "bizPrivacyStatus"))
                writer.uint32(/* id 36, wireType 0 =*/288).int32(message.bizPrivacyStatus);
            if (message.verifiedBizName != null && Object.hasOwnProperty.call(message, "verifiedBizName"))
                writer.uint32(/* id 37, wireType 2 =*/298).string(message.verifiedBizName);
            if (message.mediaData != null && Object.hasOwnProperty.call(message, "mediaData"))
                $root.WAWeb.MediaData.encode(message.mediaData, writer.uint32(/* id 38, wireType 2 =*/306).fork()).ldelim();
            if (message.photoChange != null && Object.hasOwnProperty.call(message, "photoChange"))
                $root.WAWeb.PhotoChange.encode(message.photoChange, writer.uint32(/* id 39, wireType 2 =*/314).fork()).ldelim();
            if (message.userReceipt != null && message.userReceipt.length)
                for (var i = 0; i < message.userReceipt.length; ++i)
                    $root.WAWeb.UserReceipt.encode(message.userReceipt[i], writer.uint32(/* id 40, wireType 2 =*/322).fork()).ldelim();
            if (message.reactions != null && message.reactions.length)
                for (var i = 0; i < message.reactions.length; ++i)
                    $root.WAWeb.Reaction.encode(message.reactions[i], writer.uint32(/* id 41, wireType 2 =*/330).fork()).ldelim();
            if (message.quotedStickerData != null && Object.hasOwnProperty.call(message, "quotedStickerData"))
                $root.WAWeb.MediaData.encode(message.quotedStickerData, writer.uint32(/* id 42, wireType 2 =*/338).fork()).ldelim();
            if (message.futureproofData != null && Object.hasOwnProperty.call(message, "futureproofData"))
                writer.uint32(/* id 43, wireType 2 =*/346).bytes(message.futureproofData);
            if (message.statusPsa != null && Object.hasOwnProperty.call(message, "statusPsa"))
                $root.WAWeb.StatusPSA.encode(message.statusPsa, writer.uint32(/* id 44, wireType 2 =*/354).fork()).ldelim();
            if (message.pollUpdates != null && message.pollUpdates.length)
                for (var i = 0; i < message.pollUpdates.length; ++i)
                    $root.WAWeb.PollUpdate.encode(message.pollUpdates[i], writer.uint32(/* id 45, wireType 2 =*/362).fork()).ldelim();
            if (message.pollAdditionalMetadata != null && Object.hasOwnProperty.call(message, "pollAdditionalMetadata"))
                $root.WAWeb.PollAdditionalMetadata.encode(message.pollAdditionalMetadata, writer.uint32(/* id 46, wireType 2 =*/370).fork()).ldelim();
            if (message.agentID != null && Object.hasOwnProperty.call(message, "agentID"))
                writer.uint32(/* id 47, wireType 2 =*/378).string(message.agentID);
            if (message.statusAlreadyViewed != null && Object.hasOwnProperty.call(message, "statusAlreadyViewed"))
                writer.uint32(/* id 48, wireType 0 =*/384).bool(message.statusAlreadyViewed);
            if (message.messageSecret != null && Object.hasOwnProperty.call(message, "messageSecret"))
                writer.uint32(/* id 49, wireType 2 =*/394).bytes(message.messageSecret);
            if (message.keepInChat != null && Object.hasOwnProperty.call(message, "keepInChat"))
                $root.WAWeb.KeepInChat.encode(message.keepInChat, writer.uint32(/* id 50, wireType 2 =*/402).fork()).ldelim();
            if (message.originalSelfAuthorUserJIDString != null && Object.hasOwnProperty.call(message, "originalSelfAuthorUserJIDString"))
                writer.uint32(/* id 51, wireType 2 =*/410).string(message.originalSelfAuthorUserJIDString);
            if (message.revokeMessageTimestamp != null && Object.hasOwnProperty.call(message, "revokeMessageTimestamp"))
                writer.uint32(/* id 52, wireType 0 =*/416).uint64(message.revokeMessageTimestamp);
            if (message.pinInChat != null && Object.hasOwnProperty.call(message, "pinInChat"))
                $root.WAWeb.PinInChat.encode(message.pinInChat, writer.uint32(/* id 54, wireType 2 =*/434).fork()).ldelim();
            if (message.premiumMessageInfo != null && Object.hasOwnProperty.call(message, "premiumMessageInfo"))
                $root.WAWeb.PremiumMessageInfo.encode(message.premiumMessageInfo, writer.uint32(/* id 55, wireType 2 =*/442).fork()).ldelim();
            if (message.is1PBizBotMessage != null && Object.hasOwnProperty.call(message, "is1PBizBotMessage"))
                writer.uint32(/* id 56, wireType 0 =*/448).bool(message.is1PBizBotMessage);
            if (message.isGroupHistoryMessage != null && Object.hasOwnProperty.call(message, "isGroupHistoryMessage"))
                writer.uint32(/* id 57, wireType 0 =*/456).bool(message.isGroupHistoryMessage);
            if (message.botMessageInvokerJID != null && Object.hasOwnProperty.call(message, "botMessageInvokerJID"))
                writer.uint32(/* id 58, wireType 2 =*/466).string(message.botMessageInvokerJID);
            if (message.commentMetadata != null && Object.hasOwnProperty.call(message, "commentMetadata"))
                $root.WAWeb.CommentMetadata.encode(message.commentMetadata, writer.uint32(/* id 59, wireType 2 =*/474).fork()).ldelim();
            if (message.eventResponses != null && message.eventResponses.length)
                for (var i = 0; i < message.eventResponses.length; ++i)
                    $root.WAWeb.EventResponse.encode(message.eventResponses[i], writer.uint32(/* id 61, wireType 2 =*/490).fork()).ldelim();
            if (message.reportingTokenInfo != null && Object.hasOwnProperty.call(message, "reportingTokenInfo"))
                $root.WAWeb.ReportingTokenInfo.encode(message.reportingTokenInfo, writer.uint32(/* id 62, wireType 2 =*/498).fork()).ldelim();
            if (message.newsletterServerID != null && Object.hasOwnProperty.call(message, "newsletterServerID"))
                writer.uint32(/* id 63, wireType 0 =*/504).uint64(message.newsletterServerID);
            if (message.eventAdditionalMetadata != null && Object.hasOwnProperty.call(message, "eventAdditionalMetadata"))
                $root.WAWeb.EventAdditionalMetadata.encode(message.eventAdditionalMetadata, writer.uint32(/* id 64, wireType 2 =*/514).fork()).ldelim();
            if (message.isMentionedInStatus != null && Object.hasOwnProperty.call(message, "isMentionedInStatus"))
                writer.uint32(/* id 65, wireType 0 =*/520).bool(message.isMentionedInStatus);
            if (message.statusMentions != null && message.statusMentions.length)
                for (var i = 0; i < message.statusMentions.length; ++i)
                    writer.uint32(/* id 66, wireType 2 =*/530).string(message.statusMentions[i]);
            if (message.targetMessageID != null && Object.hasOwnProperty.call(message, "targetMessageID"))
                $root.WAProtocol.MessageKey.encode(message.targetMessageID, writer.uint32(/* id 67, wireType 2 =*/538).fork()).ldelim();
            if (message.messageAddOns != null && message.messageAddOns.length)
                for (var i = 0; i < message.messageAddOns.length; ++i)
                    $root.WAWeb.MessageAddOn.encode(message.messageAddOns[i], writer.uint32(/* id 68, wireType 2 =*/546).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified WebMessageInfo message, length delimited. Does not implicitly {@link WAWeb.WebMessageInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.WebMessageInfo
         * @static
         * @param {WAWeb.IWebMessageInfo} message WebMessageInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WebMessageInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a WebMessageInfo message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.WebMessageInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.WebMessageInfo} WebMessageInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WebMessageInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.WebMessageInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.key = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        message.message = $root.WAE2E.Message.decode(reader, reader.uint32());
                        break;
                    }
                case 3: {
                        message.messageTimestamp = reader.uint64();
                        break;
                    }
                case 4: {
                        message.status = reader.int32();
                        break;
                    }
                case 5: {
                        message.participant = reader.string();
                        break;
                    }
                case 6: {
                        message.messageC2STimestamp = reader.uint64();
                        break;
                    }
                case 16: {
                        message.ignore = reader.bool();
                        break;
                    }
                case 17: {
                        message.starred = reader.bool();
                        break;
                    }
                case 18: {
                        message.broadcast = reader.bool();
                        break;
                    }
                case 19: {
                        message.pushName = reader.string();
                        break;
                    }
                case 20: {
                        message.mediaCiphertextSHA256 = reader.bytes();
                        break;
                    }
                case 21: {
                        message.multicast = reader.bool();
                        break;
                    }
                case 22: {
                        message.urlText = reader.bool();
                        break;
                    }
                case 23: {
                        message.urlNumber = reader.bool();
                        break;
                    }
                case 24: {
                        message.messageStubType = reader.int32();
                        break;
                    }
                case 25: {
                        message.clearMedia = reader.bool();
                        break;
                    }
                case 26: {
                        if (!(message.messageStubParameters && message.messageStubParameters.length))
                            message.messageStubParameters = [];
                        message.messageStubParameters.push(reader.string());
                        break;
                    }
                case 27: {
                        message.duration = reader.uint32();
                        break;
                    }
                case 28: {
                        if (!(message.labels && message.labels.length))
                            message.labels = [];
                        message.labels.push(reader.string());
                        break;
                    }
                case 29: {
                        message.paymentInfo = $root.WAWeb.PaymentInfo.decode(reader, reader.uint32());
                        break;
                    }
                case 30: {
                        message.finalLiveLocation = $root.WAE2E.Message.LiveLocationMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 31: {
                        message.quotedPaymentInfo = $root.WAWeb.PaymentInfo.decode(reader, reader.uint32());
                        break;
                    }
                case 32: {
                        message.ephemeralStartTimestamp = reader.uint64();
                        break;
                    }
                case 33: {
                        message.ephemeralDuration = reader.uint32();
                        break;
                    }
                case 34: {
                        message.ephemeralOffToOn = reader.bool();
                        break;
                    }
                case 35: {
                        message.ephemeralOutOfSync = reader.bool();
                        break;
                    }
                case 36: {
                        message.bizPrivacyStatus = reader.int32();
                        break;
                    }
                case 37: {
                        message.verifiedBizName = reader.string();
                        break;
                    }
                case 38: {
                        message.mediaData = $root.WAWeb.MediaData.decode(reader, reader.uint32());
                        break;
                    }
                case 39: {
                        message.photoChange = $root.WAWeb.PhotoChange.decode(reader, reader.uint32());
                        break;
                    }
                case 40: {
                        if (!(message.userReceipt && message.userReceipt.length))
                            message.userReceipt = [];
                        message.userReceipt.push($root.WAWeb.UserReceipt.decode(reader, reader.uint32()));
                        break;
                    }
                case 41: {
                        if (!(message.reactions && message.reactions.length))
                            message.reactions = [];
                        message.reactions.push($root.WAWeb.Reaction.decode(reader, reader.uint32()));
                        break;
                    }
                case 42: {
                        message.quotedStickerData = $root.WAWeb.MediaData.decode(reader, reader.uint32());
                        break;
                    }
                case 43: {
                        message.futureproofData = reader.bytes();
                        break;
                    }
                case 44: {
                        message.statusPsa = $root.WAWeb.StatusPSA.decode(reader, reader.uint32());
                        break;
                    }
                case 45: {
                        if (!(message.pollUpdates && message.pollUpdates.length))
                            message.pollUpdates = [];
                        message.pollUpdates.push($root.WAWeb.PollUpdate.decode(reader, reader.uint32()));
                        break;
                    }
                case 46: {
                        message.pollAdditionalMetadata = $root.WAWeb.PollAdditionalMetadata.decode(reader, reader.uint32());
                        break;
                    }
                case 47: {
                        message.agentID = reader.string();
                        break;
                    }
                case 48: {
                        message.statusAlreadyViewed = reader.bool();
                        break;
                    }
                case 49: {
                        message.messageSecret = reader.bytes();
                        break;
                    }
                case 50: {
                        message.keepInChat = $root.WAWeb.KeepInChat.decode(reader, reader.uint32());
                        break;
                    }
                case 51: {
                        message.originalSelfAuthorUserJIDString = reader.string();
                        break;
                    }
                case 52: {
                        message.revokeMessageTimestamp = reader.uint64();
                        break;
                    }
                case 54: {
                        message.pinInChat = $root.WAWeb.PinInChat.decode(reader, reader.uint32());
                        break;
                    }
                case 55: {
                        message.premiumMessageInfo = $root.WAWeb.PremiumMessageInfo.decode(reader, reader.uint32());
                        break;
                    }
                case 56: {
                        message.is1PBizBotMessage = reader.bool();
                        break;
                    }
                case 57: {
                        message.isGroupHistoryMessage = reader.bool();
                        break;
                    }
                case 58: {
                        message.botMessageInvokerJID = reader.string();
                        break;
                    }
                case 59: {
                        message.commentMetadata = $root.WAWeb.CommentMetadata.decode(reader, reader.uint32());
                        break;
                    }
                case 61: {
                        if (!(message.eventResponses && message.eventResponses.length))
                            message.eventResponses = [];
                        message.eventResponses.push($root.WAWeb.EventResponse.decode(reader, reader.uint32()));
                        break;
                    }
                case 62: {
                        message.reportingTokenInfo = $root.WAWeb.ReportingTokenInfo.decode(reader, reader.uint32());
                        break;
                    }
                case 63: {
                        message.newsletterServerID = reader.uint64();
                        break;
                    }
                case 64: {
                        message.eventAdditionalMetadata = $root.WAWeb.EventAdditionalMetadata.decode(reader, reader.uint32());
                        break;
                    }
                case 65: {
                        message.isMentionedInStatus = reader.bool();
                        break;
                    }
                case 66: {
                        if (!(message.statusMentions && message.statusMentions.length))
                            message.statusMentions = [];
                        message.statusMentions.push(reader.string());
                        break;
                    }
                case 67: {
                        message.targetMessageID = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                        break;
                    }
                case 68: {
                        if (!(message.messageAddOns && message.messageAddOns.length))
                            message.messageAddOns = [];
                        message.messageAddOns.push($root.WAWeb.MessageAddOn.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("key"))
                throw $util.ProtocolError("missing required 'key'", { instance: message });
            return message;
        };

        /**
         * Decodes a WebMessageInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.WebMessageInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.WebMessageInfo} WebMessageInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WebMessageInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a WebMessageInfo message.
         * @function verify
         * @memberof WAWeb.WebMessageInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        WebMessageInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            {
                var error = $root.WAProtocol.MessageKey.verify(message.key);
                if (error)
                    return "key." + error;
            }
            if (message.message != null && message.hasOwnProperty("message")) {
                var error = $root.WAE2E.Message.verify(message.message);
                if (error)
                    return "message." + error;
            }
            if (message.messageTimestamp != null && message.hasOwnProperty("messageTimestamp"))
                if (!$util.isInteger(message.messageTimestamp) && !(message.messageTimestamp && $util.isInteger(message.messageTimestamp.low) && $util.isInteger(message.messageTimestamp.high)))
                    return "messageTimestamp: integer|Long expected";
            if (message.status != null && message.hasOwnProperty("status"))
                switch (message.status) {
                default:
                    return "status: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            if (message.participant != null && message.hasOwnProperty("participant"))
                if (!$util.isString(message.participant))
                    return "participant: string expected";
            if (message.messageC2STimestamp != null && message.hasOwnProperty("messageC2STimestamp"))
                if (!$util.isInteger(message.messageC2STimestamp) && !(message.messageC2STimestamp && $util.isInteger(message.messageC2STimestamp.low) && $util.isInteger(message.messageC2STimestamp.high)))
                    return "messageC2STimestamp: integer|Long expected";
            if (message.ignore != null && message.hasOwnProperty("ignore"))
                if (typeof message.ignore !== "boolean")
                    return "ignore: boolean expected";
            if (message.starred != null && message.hasOwnProperty("starred"))
                if (typeof message.starred !== "boolean")
                    return "starred: boolean expected";
            if (message.broadcast != null && message.hasOwnProperty("broadcast"))
                if (typeof message.broadcast !== "boolean")
                    return "broadcast: boolean expected";
            if (message.pushName != null && message.hasOwnProperty("pushName"))
                if (!$util.isString(message.pushName))
                    return "pushName: string expected";
            if (message.mediaCiphertextSHA256 != null && message.hasOwnProperty("mediaCiphertextSHA256"))
                if (!(message.mediaCiphertextSHA256 && typeof message.mediaCiphertextSHA256.length === "number" || $util.isString(message.mediaCiphertextSHA256)))
                    return "mediaCiphertextSHA256: buffer expected";
            if (message.multicast != null && message.hasOwnProperty("multicast"))
                if (typeof message.multicast !== "boolean")
                    return "multicast: boolean expected";
            if (message.urlText != null && message.hasOwnProperty("urlText"))
                if (typeof message.urlText !== "boolean")
                    return "urlText: boolean expected";
            if (message.urlNumber != null && message.hasOwnProperty("urlNumber"))
                if (typeof message.urlNumber !== "boolean")
                    return "urlNumber: boolean expected";
            if (message.messageStubType != null && message.hasOwnProperty("messageStubType"))
                switch (message.messageStubType) {
                default:
                    return "messageStubType: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                    break;
                }
            if (message.clearMedia != null && message.hasOwnProperty("clearMedia"))
                if (typeof message.clearMedia !== "boolean")
                    return "clearMedia: boolean expected";
            if (message.messageStubParameters != null && message.hasOwnProperty("messageStubParameters")) {
                if (!Array.isArray(message.messageStubParameters))
                    return "messageStubParameters: array expected";
                for (var i = 0; i < message.messageStubParameters.length; ++i)
                    if (!$util.isString(message.messageStubParameters[i]))
                        return "messageStubParameters: string[] expected";
            }
            if (message.duration != null && message.hasOwnProperty("duration"))
                if (!$util.isInteger(message.duration))
                    return "duration: integer expected";
            if (message.labels != null && message.hasOwnProperty("labels")) {
                if (!Array.isArray(message.labels))
                    return "labels: array expected";
                for (var i = 0; i < message.labels.length; ++i)
                    if (!$util.isString(message.labels[i]))
                        return "labels: string[] expected";
            }
            if (message.paymentInfo != null && message.hasOwnProperty("paymentInfo")) {
                var error = $root.WAWeb.PaymentInfo.verify(message.paymentInfo);
                if (error)
                    return "paymentInfo." + error;
            }
            if (message.finalLiveLocation != null && message.hasOwnProperty("finalLiveLocation")) {
                var error = $root.WAE2E.Message.LiveLocationMessage.verify(message.finalLiveLocation);
                if (error)
                    return "finalLiveLocation." + error;
            }
            if (message.quotedPaymentInfo != null && message.hasOwnProperty("quotedPaymentInfo")) {
                var error = $root.WAWeb.PaymentInfo.verify(message.quotedPaymentInfo);
                if (error)
                    return "quotedPaymentInfo." + error;
            }
            if (message.ephemeralStartTimestamp != null && message.hasOwnProperty("ephemeralStartTimestamp"))
                if (!$util.isInteger(message.ephemeralStartTimestamp) && !(message.ephemeralStartTimestamp && $util.isInteger(message.ephemeralStartTimestamp.low) && $util.isInteger(message.ephemeralStartTimestamp.high)))
                    return "ephemeralStartTimestamp: integer|Long expected";
            if (message.ephemeralDuration != null && message.hasOwnProperty("ephemeralDuration"))
                if (!$util.isInteger(message.ephemeralDuration))
                    return "ephemeralDuration: integer expected";
            if (message.ephemeralOffToOn != null && message.hasOwnProperty("ephemeralOffToOn"))
                if (typeof message.ephemeralOffToOn !== "boolean")
                    return "ephemeralOffToOn: boolean expected";
            if (message.ephemeralOutOfSync != null && message.hasOwnProperty("ephemeralOutOfSync"))
                if (typeof message.ephemeralOutOfSync !== "boolean")
                    return "ephemeralOutOfSync: boolean expected";
            if (message.bizPrivacyStatus != null && message.hasOwnProperty("bizPrivacyStatus"))
                switch (message.bizPrivacyStatus) {
                default:
                    return "bizPrivacyStatus: enum value expected";
                case 0:
                case 2:
                case 1:
                case 3:
                    break;
                }
            if (message.verifiedBizName != null && message.hasOwnProperty("verifiedBizName"))
                if (!$util.isString(message.verifiedBizName))
                    return "verifiedBizName: string expected";
            if (message.mediaData != null && message.hasOwnProperty("mediaData")) {
                var error = $root.WAWeb.MediaData.verify(message.mediaData);
                if (error)
                    return "mediaData." + error;
            }
            if (message.photoChange != null && message.hasOwnProperty("photoChange")) {
                var error = $root.WAWeb.PhotoChange.verify(message.photoChange);
                if (error)
                    return "photoChange." + error;
            }
            if (message.userReceipt != null && message.hasOwnProperty("userReceipt")) {
                if (!Array.isArray(message.userReceipt))
                    return "userReceipt: array expected";
                for (var i = 0; i < message.userReceipt.length; ++i) {
                    var error = $root.WAWeb.UserReceipt.verify(message.userReceipt[i]);
                    if (error)
                        return "userReceipt." + error;
                }
            }
            if (message.reactions != null && message.hasOwnProperty("reactions")) {
                if (!Array.isArray(message.reactions))
                    return "reactions: array expected";
                for (var i = 0; i < message.reactions.length; ++i) {
                    var error = $root.WAWeb.Reaction.verify(message.reactions[i]);
                    if (error)
                        return "reactions." + error;
                }
            }
            if (message.quotedStickerData != null && message.hasOwnProperty("quotedStickerData")) {
                var error = $root.WAWeb.MediaData.verify(message.quotedStickerData);
                if (error)
                    return "quotedStickerData." + error;
            }
            if (message.futureproofData != null && message.hasOwnProperty("futureproofData"))
                if (!(message.futureproofData && typeof message.futureproofData.length === "number" || $util.isString(message.futureproofData)))
                    return "futureproofData: buffer expected";
            if (message.statusPsa != null && message.hasOwnProperty("statusPsa")) {
                var error = $root.WAWeb.StatusPSA.verify(message.statusPsa);
                if (error)
                    return "statusPsa." + error;
            }
            if (message.pollUpdates != null && message.hasOwnProperty("pollUpdates")) {
                if (!Array.isArray(message.pollUpdates))
                    return "pollUpdates: array expected";
                for (var i = 0; i < message.pollUpdates.length; ++i) {
                    var error = $root.WAWeb.PollUpdate.verify(message.pollUpdates[i]);
                    if (error)
                        return "pollUpdates." + error;
                }
            }
            if (message.pollAdditionalMetadata != null && message.hasOwnProperty("pollAdditionalMetadata")) {
                var error = $root.WAWeb.PollAdditionalMetadata.verify(message.pollAdditionalMetadata);
                if (error)
                    return "pollAdditionalMetadata." + error;
            }
            if (message.agentID != null && message.hasOwnProperty("agentID"))
                if (!$util.isString(message.agentID))
                    return "agentID: string expected";
            if (message.statusAlreadyViewed != null && message.hasOwnProperty("statusAlreadyViewed"))
                if (typeof message.statusAlreadyViewed !== "boolean")
                    return "statusAlreadyViewed: boolean expected";
            if (message.messageSecret != null && message.hasOwnProperty("messageSecret"))
                if (!(message.messageSecret && typeof message.messageSecret.length === "number" || $util.isString(message.messageSecret)))
                    return "messageSecret: buffer expected";
            if (message.keepInChat != null && message.hasOwnProperty("keepInChat")) {
                var error = $root.WAWeb.KeepInChat.verify(message.keepInChat);
                if (error)
                    return "keepInChat." + error;
            }
            if (message.originalSelfAuthorUserJIDString != null && message.hasOwnProperty("originalSelfAuthorUserJIDString"))
                if (!$util.isString(message.originalSelfAuthorUserJIDString))
                    return "originalSelfAuthorUserJIDString: string expected";
            if (message.revokeMessageTimestamp != null && message.hasOwnProperty("revokeMessageTimestamp"))
                if (!$util.isInteger(message.revokeMessageTimestamp) && !(message.revokeMessageTimestamp && $util.isInteger(message.revokeMessageTimestamp.low) && $util.isInteger(message.revokeMessageTimestamp.high)))
                    return "revokeMessageTimestamp: integer|Long expected";
            if (message.pinInChat != null && message.hasOwnProperty("pinInChat")) {
                var error = $root.WAWeb.PinInChat.verify(message.pinInChat);
                if (error)
                    return "pinInChat." + error;
            }
            if (message.premiumMessageInfo != null && message.hasOwnProperty("premiumMessageInfo")) {
                var error = $root.WAWeb.PremiumMessageInfo.verify(message.premiumMessageInfo);
                if (error)
                    return "premiumMessageInfo." + error;
            }
            if (message.is1PBizBotMessage != null && message.hasOwnProperty("is1PBizBotMessage"))
                if (typeof message.is1PBizBotMessage !== "boolean")
                    return "is1PBizBotMessage: boolean expected";
            if (message.isGroupHistoryMessage != null && message.hasOwnProperty("isGroupHistoryMessage"))
                if (typeof message.isGroupHistoryMessage !== "boolean")
                    return "isGroupHistoryMessage: boolean expected";
            if (message.botMessageInvokerJID != null && message.hasOwnProperty("botMessageInvokerJID"))
                if (!$util.isString(message.botMessageInvokerJID))
                    return "botMessageInvokerJID: string expected";
            if (message.commentMetadata != null && message.hasOwnProperty("commentMetadata")) {
                var error = $root.WAWeb.CommentMetadata.verify(message.commentMetadata);
                if (error)
                    return "commentMetadata." + error;
            }
            if (message.eventResponses != null && message.hasOwnProperty("eventResponses")) {
                if (!Array.isArray(message.eventResponses))
                    return "eventResponses: array expected";
                for (var i = 0; i < message.eventResponses.length; ++i) {
                    var error = $root.WAWeb.EventResponse.verify(message.eventResponses[i]);
                    if (error)
                        return "eventResponses." + error;
                }
            }
            if (message.reportingTokenInfo != null && message.hasOwnProperty("reportingTokenInfo")) {
                var error = $root.WAWeb.ReportingTokenInfo.verify(message.reportingTokenInfo);
                if (error)
                    return "reportingTokenInfo." + error;
            }
            if (message.newsletterServerID != null && message.hasOwnProperty("newsletterServerID"))
                if (!$util.isInteger(message.newsletterServerID) && !(message.newsletterServerID && $util.isInteger(message.newsletterServerID.low) && $util.isInteger(message.newsletterServerID.high)))
                    return "newsletterServerID: integer|Long expected";
            if (message.eventAdditionalMetadata != null && message.hasOwnProperty("eventAdditionalMetadata")) {
                var error = $root.WAWeb.EventAdditionalMetadata.verify(message.eventAdditionalMetadata);
                if (error)
                    return "eventAdditionalMetadata." + error;
            }
            if (message.isMentionedInStatus != null && message.hasOwnProperty("isMentionedInStatus"))
                if (typeof message.isMentionedInStatus !== "boolean")
                    return "isMentionedInStatus: boolean expected";
            if (message.statusMentions != null && message.hasOwnProperty("statusMentions")) {
                if (!Array.isArray(message.statusMentions))
                    return "statusMentions: array expected";
                for (var i = 0; i < message.statusMentions.length; ++i)
                    if (!$util.isString(message.statusMentions[i]))
                        return "statusMentions: string[] expected";
            }
            if (message.targetMessageID != null && message.hasOwnProperty("targetMessageID")) {
                var error = $root.WAProtocol.MessageKey.verify(message.targetMessageID);
                if (error)
                    return "targetMessageID." + error;
            }
            if (message.messageAddOns != null && message.hasOwnProperty("messageAddOns")) {
                if (!Array.isArray(message.messageAddOns))
                    return "messageAddOns: array expected";
                for (var i = 0; i < message.messageAddOns.length; ++i) {
                    var error = $root.WAWeb.MessageAddOn.verify(message.messageAddOns[i]);
                    if (error)
                        return "messageAddOns." + error;
                }
            }
            return null;
        };

        /**
         * Creates a WebMessageInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.WebMessageInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.WebMessageInfo} WebMessageInfo
         */
        WebMessageInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.WebMessageInfo)
                return object;
            var message = new $root.WAWeb.WebMessageInfo();
            if (object.key != null) {
                if (typeof object.key !== "object")
                    throw TypeError(".WAWeb.WebMessageInfo.key: object expected");
                message.key = $root.WAProtocol.MessageKey.fromObject(object.key);
            }
            if (object.message != null) {
                if (typeof object.message !== "object")
                    throw TypeError(".WAWeb.WebMessageInfo.message: object expected");
                message.message = $root.WAE2E.Message.fromObject(object.message);
            }
            if (object.messageTimestamp != null)
                if ($util.Long)
                    (message.messageTimestamp = $util.Long.fromValue(object.messageTimestamp)).unsigned = true;
                else if (typeof object.messageTimestamp === "string")
                    message.messageTimestamp = parseInt(object.messageTimestamp, 10);
                else if (typeof object.messageTimestamp === "number")
                    message.messageTimestamp = object.messageTimestamp;
                else if (typeof object.messageTimestamp === "object")
                    message.messageTimestamp = new $util.LongBits(object.messageTimestamp.low >>> 0, object.messageTimestamp.high >>> 0).toNumber(true);
            switch (object.status) {
            default:
                if (typeof object.status === "number") {
                    message.status = object.status;
                    break;
                }
                break;
            case "ERROR":
            case 0:
                message.status = 0;
                break;
            case "PENDING":
            case 1:
                message.status = 1;
                break;
            case "SERVER_ACK":
            case 2:
                message.status = 2;
                break;
            case "DELIVERY_ACK":
            case 3:
                message.status = 3;
                break;
            case "READ":
            case 4:
                message.status = 4;
                break;
            case "PLAYED":
            case 5:
                message.status = 5;
                break;
            }
            if (object.participant != null)
                message.participant = String(object.participant);
            if (object.messageC2STimestamp != null)
                if ($util.Long)
                    (message.messageC2STimestamp = $util.Long.fromValue(object.messageC2STimestamp)).unsigned = true;
                else if (typeof object.messageC2STimestamp === "string")
                    message.messageC2STimestamp = parseInt(object.messageC2STimestamp, 10);
                else if (typeof object.messageC2STimestamp === "number")
                    message.messageC2STimestamp = object.messageC2STimestamp;
                else if (typeof object.messageC2STimestamp === "object")
                    message.messageC2STimestamp = new $util.LongBits(object.messageC2STimestamp.low >>> 0, object.messageC2STimestamp.high >>> 0).toNumber(true);
            if (object.ignore != null)
                message.ignore = Boolean(object.ignore);
            if (object.starred != null)
                message.starred = Boolean(object.starred);
            if (object.broadcast != null)
                message.broadcast = Boolean(object.broadcast);
            if (object.pushName != null)
                message.pushName = String(object.pushName);
            if (object.mediaCiphertextSHA256 != null)
                if (typeof object.mediaCiphertextSHA256 === "string")
                    $util.base64.decode(object.mediaCiphertextSHA256, message.mediaCiphertextSHA256 = $util.newBuffer($util.base64.length(object.mediaCiphertextSHA256)), 0);
                else if (object.mediaCiphertextSHA256.length >= 0)
                    message.mediaCiphertextSHA256 = object.mediaCiphertextSHA256;
            if (object.multicast != null)
                message.multicast = Boolean(object.multicast);
            if (object.urlText != null)
                message.urlText = Boolean(object.urlText);
            if (object.urlNumber != null)
                message.urlNumber = Boolean(object.urlNumber);
            switch (object.messageStubType) {
            default:
                if (typeof object.messageStubType === "number") {
                    message.messageStubType = object.messageStubType;
                    break;
                }
                break;
            case "UNKNOWN":
            case 0:
                message.messageStubType = 0;
                break;
            case "REVOKE":
            case 1:
                message.messageStubType = 1;
                break;
            case "CIPHERTEXT":
            case 2:
                message.messageStubType = 2;
                break;
            case "FUTUREPROOF":
            case 3:
                message.messageStubType = 3;
                break;
            case "NON_VERIFIED_TRANSITION":
            case 4:
                message.messageStubType = 4;
                break;
            case "UNVERIFIED_TRANSITION":
            case 5:
                message.messageStubType = 5;
                break;
            case "VERIFIED_TRANSITION":
            case 6:
                message.messageStubType = 6;
                break;
            case "VERIFIED_LOW_UNKNOWN":
            case 7:
                message.messageStubType = 7;
                break;
            case "VERIFIED_HIGH":
            case 8:
                message.messageStubType = 8;
                break;
            case "VERIFIED_INITIAL_UNKNOWN":
            case 9:
                message.messageStubType = 9;
                break;
            case "VERIFIED_INITIAL_LOW":
            case 10:
                message.messageStubType = 10;
                break;
            case "VERIFIED_INITIAL_HIGH":
            case 11:
                message.messageStubType = 11;
                break;
            case "VERIFIED_TRANSITION_ANY_TO_NONE":
            case 12:
                message.messageStubType = 12;
                break;
            case "VERIFIED_TRANSITION_ANY_TO_HIGH":
            case 13:
                message.messageStubType = 13;
                break;
            case "VERIFIED_TRANSITION_HIGH_TO_LOW":
            case 14:
                message.messageStubType = 14;
                break;
            case "VERIFIED_TRANSITION_HIGH_TO_UNKNOWN":
            case 15:
                message.messageStubType = 15;
                break;
            case "VERIFIED_TRANSITION_UNKNOWN_TO_LOW":
            case 16:
                message.messageStubType = 16;
                break;
            case "VERIFIED_TRANSITION_LOW_TO_UNKNOWN":
            case 17:
                message.messageStubType = 17;
                break;
            case "VERIFIED_TRANSITION_NONE_TO_LOW":
            case 18:
                message.messageStubType = 18;
                break;
            case "VERIFIED_TRANSITION_NONE_TO_UNKNOWN":
            case 19:
                message.messageStubType = 19;
                break;
            case "GROUP_CREATE":
            case 20:
                message.messageStubType = 20;
                break;
            case "GROUP_CHANGE_SUBJECT":
            case 21:
                message.messageStubType = 21;
                break;
            case "GROUP_CHANGE_ICON":
            case 22:
                message.messageStubType = 22;
                break;
            case "GROUP_CHANGE_INVITE_LINK":
            case 23:
                message.messageStubType = 23;
                break;
            case "GROUP_CHANGE_DESCRIPTION":
            case 24:
                message.messageStubType = 24;
                break;
            case "GROUP_CHANGE_RESTRICT":
            case 25:
                message.messageStubType = 25;
                break;
            case "GROUP_CHANGE_ANNOUNCE":
            case 26:
                message.messageStubType = 26;
                break;
            case "GROUP_PARTICIPANT_ADD":
            case 27:
                message.messageStubType = 27;
                break;
            case "GROUP_PARTICIPANT_REMOVE":
            case 28:
                message.messageStubType = 28;
                break;
            case "GROUP_PARTICIPANT_PROMOTE":
            case 29:
                message.messageStubType = 29;
                break;
            case "GROUP_PARTICIPANT_DEMOTE":
            case 30:
                message.messageStubType = 30;
                break;
            case "GROUP_PARTICIPANT_INVITE":
            case 31:
                message.messageStubType = 31;
                break;
            case "GROUP_PARTICIPANT_LEAVE":
            case 32:
                message.messageStubType = 32;
                break;
            case "GROUP_PARTICIPANT_CHANGE_NUMBER":
            case 33:
                message.messageStubType = 33;
                break;
            case "BROADCAST_CREATE":
            case 34:
                message.messageStubType = 34;
                break;
            case "BROADCAST_ADD":
            case 35:
                message.messageStubType = 35;
                break;
            case "BROADCAST_REMOVE":
            case 36:
                message.messageStubType = 36;
                break;
            case "GENERIC_NOTIFICATION":
            case 37:
                message.messageStubType = 37;
                break;
            case "E2E_IDENTITY_CHANGED":
            case 38:
                message.messageStubType = 38;
                break;
            case "E2E_ENCRYPTED":
            case 39:
                message.messageStubType = 39;
                break;
            case "CALL_MISSED_VOICE":
            case 40:
                message.messageStubType = 40;
                break;
            case "CALL_MISSED_VIDEO":
            case 41:
                message.messageStubType = 41;
                break;
            case "INDIVIDUAL_CHANGE_NUMBER":
            case 42:
                message.messageStubType = 42;
                break;
            case "GROUP_DELETE":
            case 43:
                message.messageStubType = 43;
                break;
            case "GROUP_ANNOUNCE_MODE_MESSAGE_BOUNCE":
            case 44:
                message.messageStubType = 44;
                break;
            case "CALL_MISSED_GROUP_VOICE":
            case 45:
                message.messageStubType = 45;
                break;
            case "CALL_MISSED_GROUP_VIDEO":
            case 46:
                message.messageStubType = 46;
                break;
            case "PAYMENT_CIPHERTEXT":
            case 47:
                message.messageStubType = 47;
                break;
            case "PAYMENT_FUTUREPROOF":
            case 48:
                message.messageStubType = 48;
                break;
            case "PAYMENT_TRANSACTION_STATUS_UPDATE_FAILED":
            case 49:
                message.messageStubType = 49;
                break;
            case "PAYMENT_TRANSACTION_STATUS_UPDATE_REFUNDED":
            case 50:
                message.messageStubType = 50;
                break;
            case "PAYMENT_TRANSACTION_STATUS_UPDATE_REFUND_FAILED":
            case 51:
                message.messageStubType = 51;
                break;
            case "PAYMENT_TRANSACTION_STATUS_RECEIVER_PENDING_SETUP":
            case 52:
                message.messageStubType = 52;
                break;
            case "PAYMENT_TRANSACTION_STATUS_RECEIVER_SUCCESS_AFTER_HICCUP":
            case 53:
                message.messageStubType = 53;
                break;
            case "PAYMENT_ACTION_ACCOUNT_SETUP_REMINDER":
            case 54:
                message.messageStubType = 54;
                break;
            case "PAYMENT_ACTION_SEND_PAYMENT_REMINDER":
            case 55:
                message.messageStubType = 55;
                break;
            case "PAYMENT_ACTION_SEND_PAYMENT_INVITATION":
            case 56:
                message.messageStubType = 56;
                break;
            case "PAYMENT_ACTION_REQUEST_DECLINED":
            case 57:
                message.messageStubType = 57;
                break;
            case "PAYMENT_ACTION_REQUEST_EXPIRED":
            case 58:
                message.messageStubType = 58;
                break;
            case "PAYMENT_ACTION_REQUEST_CANCELLED":
            case 59:
                message.messageStubType = 59;
                break;
            case "BIZ_VERIFIED_TRANSITION_TOP_TO_BOTTOM":
            case 60:
                message.messageStubType = 60;
                break;
            case "BIZ_VERIFIED_TRANSITION_BOTTOM_TO_TOP":
            case 61:
                message.messageStubType = 61;
                break;
            case "BIZ_INTRO_TOP":
            case 62:
                message.messageStubType = 62;
                break;
            case "BIZ_INTRO_BOTTOM":
            case 63:
                message.messageStubType = 63;
                break;
            case "BIZ_NAME_CHANGE":
            case 64:
                message.messageStubType = 64;
                break;
            case "BIZ_MOVE_TO_CONSUMER_APP":
            case 65:
                message.messageStubType = 65;
                break;
            case "BIZ_TWO_TIER_MIGRATION_TOP":
            case 66:
                message.messageStubType = 66;
                break;
            case "BIZ_TWO_TIER_MIGRATION_BOTTOM":
            case 67:
                message.messageStubType = 67;
                break;
            case "OVERSIZED":
            case 68:
                message.messageStubType = 68;
                break;
            case "GROUP_CHANGE_NO_FREQUENTLY_FORWARDED":
            case 69:
                message.messageStubType = 69;
                break;
            case "GROUP_V4_ADD_INVITE_SENT":
            case 70:
                message.messageStubType = 70;
                break;
            case "GROUP_PARTICIPANT_ADD_REQUEST_JOIN":
            case 71:
                message.messageStubType = 71;
                break;
            case "CHANGE_EPHEMERAL_SETTING":
            case 72:
                message.messageStubType = 72;
                break;
            case "E2E_DEVICE_CHANGED":
            case 73:
                message.messageStubType = 73;
                break;
            case "VIEWED_ONCE":
            case 74:
                message.messageStubType = 74;
                break;
            case "E2E_ENCRYPTED_NOW":
            case 75:
                message.messageStubType = 75;
                break;
            case "BLUE_MSG_BSP_FB_TO_BSP_PREMISE":
            case 76:
                message.messageStubType = 76;
                break;
            case "BLUE_MSG_BSP_FB_TO_SELF_FB":
            case 77:
                message.messageStubType = 77;
                break;
            case "BLUE_MSG_BSP_FB_TO_SELF_PREMISE":
            case 78:
                message.messageStubType = 78;
                break;
            case "BLUE_MSG_BSP_FB_UNVERIFIED":
            case 79:
                message.messageStubType = 79;
                break;
            case "BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED":
            case 80:
                message.messageStubType = 80;
                break;
            case "BLUE_MSG_BSP_FB_VERIFIED":
            case 81:
                message.messageStubType = 81;
                break;
            case "BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED":
            case 82:
                message.messageStubType = 82;
                break;
            case "BLUE_MSG_BSP_PREMISE_TO_SELF_PREMISE":
            case 83:
                message.messageStubType = 83;
                break;
            case "BLUE_MSG_BSP_PREMISE_UNVERIFIED":
            case 84:
                message.messageStubType = 84;
                break;
            case "BLUE_MSG_BSP_PREMISE_UNVERIFIED_TO_SELF_PREMISE_VERIFIED":
            case 85:
                message.messageStubType = 85;
                break;
            case "BLUE_MSG_BSP_PREMISE_VERIFIED":
            case 86:
                message.messageStubType = 86;
                break;
            case "BLUE_MSG_BSP_PREMISE_VERIFIED_TO_SELF_PREMISE_UNVERIFIED":
            case 87:
                message.messageStubType = 87;
                break;
            case "BLUE_MSG_CONSUMER_TO_BSP_FB_UNVERIFIED":
            case 88:
                message.messageStubType = 88;
                break;
            case "BLUE_MSG_CONSUMER_TO_BSP_PREMISE_UNVERIFIED":
            case 89:
                message.messageStubType = 89;
                break;
            case "BLUE_MSG_CONSUMER_TO_SELF_FB_UNVERIFIED":
            case 90:
                message.messageStubType = 90;
                break;
            case "BLUE_MSG_CONSUMER_TO_SELF_PREMISE_UNVERIFIED":
            case 91:
                message.messageStubType = 91;
                break;
            case "BLUE_MSG_SELF_FB_TO_BSP_PREMISE":
            case 92:
                message.messageStubType = 92;
                break;
            case "BLUE_MSG_SELF_FB_TO_SELF_PREMISE":
            case 93:
                message.messageStubType = 93;
                break;
            case "BLUE_MSG_SELF_FB_UNVERIFIED":
            case 94:
                message.messageStubType = 94;
                break;
            case "BLUE_MSG_SELF_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED":
            case 95:
                message.messageStubType = 95;
                break;
            case "BLUE_MSG_SELF_FB_VERIFIED":
            case 96:
                message.messageStubType = 96;
                break;
            case "BLUE_MSG_SELF_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED":
            case 97:
                message.messageStubType = 97;
                break;
            case "BLUE_MSG_SELF_PREMISE_TO_BSP_PREMISE":
            case 98:
                message.messageStubType = 98;
                break;
            case "BLUE_MSG_SELF_PREMISE_UNVERIFIED":
            case 99:
                message.messageStubType = 99;
                break;
            case "BLUE_MSG_SELF_PREMISE_VERIFIED":
            case 100:
                message.messageStubType = 100;
                break;
            case "BLUE_MSG_TO_BSP_FB":
            case 101:
                message.messageStubType = 101;
                break;
            case "BLUE_MSG_TO_CONSUMER":
            case 102:
                message.messageStubType = 102;
                break;
            case "BLUE_MSG_TO_SELF_FB":
            case 103:
                message.messageStubType = 103;
                break;
            case "BLUE_MSG_UNVERIFIED_TO_BSP_FB_VERIFIED":
            case 104:
                message.messageStubType = 104;
                break;
            case "BLUE_MSG_UNVERIFIED_TO_BSP_PREMISE_VERIFIED":
            case 105:
                message.messageStubType = 105;
                break;
            case "BLUE_MSG_UNVERIFIED_TO_SELF_FB_VERIFIED":
            case 106:
                message.messageStubType = 106;
                break;
            case "BLUE_MSG_UNVERIFIED_TO_VERIFIED":
            case 107:
                message.messageStubType = 107;
                break;
            case "BLUE_MSG_VERIFIED_TO_BSP_FB_UNVERIFIED":
            case 108:
                message.messageStubType = 108;
                break;
            case "BLUE_MSG_VERIFIED_TO_BSP_PREMISE_UNVERIFIED":
            case 109:
                message.messageStubType = 109;
                break;
            case "BLUE_MSG_VERIFIED_TO_SELF_FB_UNVERIFIED":
            case 110:
                message.messageStubType = 110;
                break;
            case "BLUE_MSG_VERIFIED_TO_UNVERIFIED":
            case 111:
                message.messageStubType = 111;
                break;
            case "BLUE_MSG_BSP_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED":
            case 112:
                message.messageStubType = 112;
                break;
            case "BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_FB_VERIFIED":
            case 113:
                message.messageStubType = 113;
                break;
            case "BLUE_MSG_BSP_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED":
            case 114:
                message.messageStubType = 114;
                break;
            case "BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_FB_UNVERIFIED":
            case 115:
                message.messageStubType = 115;
                break;
            case "BLUE_MSG_SELF_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED":
            case 116:
                message.messageStubType = 116;
                break;
            case "BLUE_MSG_SELF_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED":
            case 117:
                message.messageStubType = 117;
                break;
            case "E2E_IDENTITY_UNAVAILABLE":
            case 118:
                message.messageStubType = 118;
                break;
            case "GROUP_CREATING":
            case 119:
                message.messageStubType = 119;
                break;
            case "GROUP_CREATE_FAILED":
            case 120:
                message.messageStubType = 120;
                break;
            case "GROUP_BOUNCED":
            case 121:
                message.messageStubType = 121;
                break;
            case "BLOCK_CONTACT":
            case 122:
                message.messageStubType = 122;
                break;
            case "EPHEMERAL_SETTING_NOT_APPLIED":
            case 123:
                message.messageStubType = 123;
                break;
            case "SYNC_FAILED":
            case 124:
                message.messageStubType = 124;
                break;
            case "SYNCING":
            case 125:
                message.messageStubType = 125;
                break;
            case "BIZ_PRIVACY_MODE_INIT_FB":
            case 126:
                message.messageStubType = 126;
                break;
            case "BIZ_PRIVACY_MODE_INIT_BSP":
            case 127:
                message.messageStubType = 127;
                break;
            case "BIZ_PRIVACY_MODE_TO_FB":
            case 128:
                message.messageStubType = 128;
                break;
            case "BIZ_PRIVACY_MODE_TO_BSP":
            case 129:
                message.messageStubType = 129;
                break;
            case "DISAPPEARING_MODE":
            case 130:
                message.messageStubType = 130;
                break;
            case "E2E_DEVICE_FETCH_FAILED":
            case 131:
                message.messageStubType = 131;
                break;
            case "ADMIN_REVOKE":
            case 132:
                message.messageStubType = 132;
                break;
            case "GROUP_INVITE_LINK_GROWTH_LOCKED":
            case 133:
                message.messageStubType = 133;
                break;
            case "COMMUNITY_LINK_PARENT_GROUP":
            case 134:
                message.messageStubType = 134;
                break;
            case "COMMUNITY_LINK_SIBLING_GROUP":
            case 135:
                message.messageStubType = 135;
                break;
            case "COMMUNITY_LINK_SUB_GROUP":
            case 136:
                message.messageStubType = 136;
                break;
            case "COMMUNITY_UNLINK_PARENT_GROUP":
            case 137:
                message.messageStubType = 137;
                break;
            case "COMMUNITY_UNLINK_SIBLING_GROUP":
            case 138:
                message.messageStubType = 138;
                break;
            case "COMMUNITY_UNLINK_SUB_GROUP":
            case 139:
                message.messageStubType = 139;
                break;
            case "GROUP_PARTICIPANT_ACCEPT":
            case 140:
                message.messageStubType = 140;
                break;
            case "GROUP_PARTICIPANT_LINKED_GROUP_JOIN":
            case 141:
                message.messageStubType = 141;
                break;
            case "COMMUNITY_CREATE":
            case 142:
                message.messageStubType = 142;
                break;
            case "EPHEMERAL_KEEP_IN_CHAT":
            case 143:
                message.messageStubType = 143;
                break;
            case "GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST":
            case 144:
                message.messageStubType = 144;
                break;
            case "GROUP_MEMBERSHIP_JOIN_APPROVAL_MODE":
            case 145:
                message.messageStubType = 145;
                break;
            case "INTEGRITY_UNLINK_PARENT_GROUP":
            case 146:
                message.messageStubType = 146;
                break;
            case "COMMUNITY_PARTICIPANT_PROMOTE":
            case 147:
                message.messageStubType = 147;
                break;
            case "COMMUNITY_PARTICIPANT_DEMOTE":
            case 148:
                message.messageStubType = 148;
                break;
            case "COMMUNITY_PARENT_GROUP_DELETED":
            case 149:
                message.messageStubType = 149;
                break;
            case "COMMUNITY_LINK_PARENT_GROUP_MEMBERSHIP_APPROVAL":
            case 150:
                message.messageStubType = 150;
                break;
            case "GROUP_PARTICIPANT_JOINED_GROUP_AND_PARENT_GROUP":
            case 151:
                message.messageStubType = 151;
                break;
            case "MASKED_THREAD_CREATED":
            case 152:
                message.messageStubType = 152;
                break;
            case "MASKED_THREAD_UNMASKED":
            case 153:
                message.messageStubType = 153;
                break;
            case "BIZ_CHAT_ASSIGNMENT":
            case 154:
                message.messageStubType = 154;
                break;
            case "CHAT_PSA":
            case 155:
                message.messageStubType = 155;
                break;
            case "CHAT_POLL_CREATION_MESSAGE":
            case 156:
                message.messageStubType = 156;
                break;
            case "CAG_MASKED_THREAD_CREATED":
            case 157:
                message.messageStubType = 157;
                break;
            case "COMMUNITY_PARENT_GROUP_SUBJECT_CHANGED":
            case 158:
                message.messageStubType = 158;
                break;
            case "CAG_INVITE_AUTO_ADD":
            case 159:
                message.messageStubType = 159;
                break;
            case "BIZ_CHAT_ASSIGNMENT_UNASSIGN":
            case 160:
                message.messageStubType = 160;
                break;
            case "CAG_INVITE_AUTO_JOINED":
            case 161:
                message.messageStubType = 161;
                break;
            case "SCHEDULED_CALL_START_MESSAGE":
            case 162:
                message.messageStubType = 162;
                break;
            case "COMMUNITY_INVITE_RICH":
            case 163:
                message.messageStubType = 163;
                break;
            case "COMMUNITY_INVITE_AUTO_ADD_RICH":
            case 164:
                message.messageStubType = 164;
                break;
            case "SUB_GROUP_INVITE_RICH":
            case 165:
                message.messageStubType = 165;
                break;
            case "SUB_GROUP_PARTICIPANT_ADD_RICH":
            case 166:
                message.messageStubType = 166;
                break;
            case "COMMUNITY_LINK_PARENT_GROUP_RICH":
            case 167:
                message.messageStubType = 167;
                break;
            case "COMMUNITY_PARTICIPANT_ADD_RICH":
            case 168:
                message.messageStubType = 168;
                break;
            case "SILENCED_UNKNOWN_CALLER_AUDIO":
            case 169:
                message.messageStubType = 169;
                break;
            case "SILENCED_UNKNOWN_CALLER_VIDEO":
            case 170:
                message.messageStubType = 170;
                break;
            case "GROUP_MEMBER_ADD_MODE":
            case 171:
                message.messageStubType = 171;
                break;
            case "GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST_NON_ADMIN_ADD":
            case 172:
                message.messageStubType = 172;
                break;
            case "COMMUNITY_CHANGE_DESCRIPTION":
            case 173:
                message.messageStubType = 173;
                break;
            case "SENDER_INVITE":
            case 174:
                message.messageStubType = 174;
                break;
            case "RECEIVER_INVITE":
            case 175:
                message.messageStubType = 175;
                break;
            case "COMMUNITY_ALLOW_MEMBER_ADDED_GROUPS":
            case 176:
                message.messageStubType = 176;
                break;
            case "PINNED_MESSAGE_IN_CHAT":
            case 177:
                message.messageStubType = 177;
                break;
            case "PAYMENT_INVITE_SETUP_INVITER":
            case 178:
                message.messageStubType = 178;
                break;
            case "PAYMENT_INVITE_SETUP_INVITEE_RECEIVE_ONLY":
            case 179:
                message.messageStubType = 179;
                break;
            case "PAYMENT_INVITE_SETUP_INVITEE_SEND_AND_RECEIVE":
            case 180:
                message.messageStubType = 180;
                break;
            case "LINKED_GROUP_CALL_START":
            case 181:
                message.messageStubType = 181;
                break;
            case "REPORT_TO_ADMIN_ENABLED_STATUS":
            case 182:
                message.messageStubType = 182;
                break;
            case "EMPTY_SUBGROUP_CREATE":
            case 183:
                message.messageStubType = 183;
                break;
            case "SCHEDULED_CALL_CANCEL":
            case 184:
                message.messageStubType = 184;
                break;
            case "SUBGROUP_ADMIN_TRIGGERED_AUTO_ADD_RICH":
            case 185:
                message.messageStubType = 185;
                break;
            case "GROUP_CHANGE_RECENT_HISTORY_SHARING":
            case 186:
                message.messageStubType = 186;
                break;
            case "PAID_MESSAGE_SERVER_CAMPAIGN_ID":
            case 187:
                message.messageStubType = 187;
                break;
            case "GENERAL_CHAT_CREATE":
            case 188:
                message.messageStubType = 188;
                break;
            case "GENERAL_CHAT_ADD":
            case 189:
                message.messageStubType = 189;
                break;
            case "GENERAL_CHAT_AUTO_ADD_DISABLED":
            case 190:
                message.messageStubType = 190;
                break;
            case "SUGGESTED_SUBGROUP_ANNOUNCE":
            case 191:
                message.messageStubType = 191;
                break;
            case "BIZ_BOT_1P_MESSAGING_ENABLED":
            case 192:
                message.messageStubType = 192;
                break;
            case "CHANGE_USERNAME":
            case 193:
                message.messageStubType = 193;
                break;
            case "BIZ_COEX_PRIVACY_INIT_SELF":
            case 194:
                message.messageStubType = 194;
                break;
            case "BIZ_COEX_PRIVACY_TRANSITION_SELF":
            case 195:
                message.messageStubType = 195;
                break;
            case "SUPPORT_AI_EDUCATION":
            case 196:
                message.messageStubType = 196;
                break;
            case "BIZ_BOT_3P_MESSAGING_ENABLED":
            case 197:
                message.messageStubType = 197;
                break;
            case "REMINDER_SETUP_MESSAGE":
            case 198:
                message.messageStubType = 198;
                break;
            case "REMINDER_SENT_MESSAGE":
            case 199:
                message.messageStubType = 199;
                break;
            case "REMINDER_CANCEL_MESSAGE":
            case 200:
                message.messageStubType = 200;
                break;
            case "BIZ_COEX_PRIVACY_INIT":
            case 201:
                message.messageStubType = 201;
                break;
            case "BIZ_COEX_PRIVACY_TRANSITION":
            case 202:
                message.messageStubType = 202;
                break;
            case "GROUP_DEACTIVATED":
            case 203:
                message.messageStubType = 203;
                break;
            case "COMMUNITY_DEACTIVATE_SIBLING_GROUP":
            case 204:
                message.messageStubType = 204;
                break;
            case "EVENT_UPDATED":
            case 205:
                message.messageStubType = 205;
                break;
            case "EVENT_CANCELED":
            case 206:
                message.messageStubType = 206;
                break;
            case "COMMUNITY_OWNER_UPDATED":
            case 207:
                message.messageStubType = 207;
                break;
            case "COMMUNITY_SUB_GROUP_VISIBILITY_HIDDEN":
            case 208:
                message.messageStubType = 208;
                break;
            }
            if (object.clearMedia != null)
                message.clearMedia = Boolean(object.clearMedia);
            if (object.messageStubParameters) {
                if (!Array.isArray(object.messageStubParameters))
                    throw TypeError(".WAWeb.WebMessageInfo.messageStubParameters: array expected");
                message.messageStubParameters = [];
                for (var i = 0; i < object.messageStubParameters.length; ++i)
                    message.messageStubParameters[i] = String(object.messageStubParameters[i]);
            }
            if (object.duration != null)
                message.duration = object.duration >>> 0;
            if (object.labels) {
                if (!Array.isArray(object.labels))
                    throw TypeError(".WAWeb.WebMessageInfo.labels: array expected");
                message.labels = [];
                for (var i = 0; i < object.labels.length; ++i)
                    message.labels[i] = String(object.labels[i]);
            }
            if (object.paymentInfo != null) {
                if (typeof object.paymentInfo !== "object")
                    throw TypeError(".WAWeb.WebMessageInfo.paymentInfo: object expected");
                message.paymentInfo = $root.WAWeb.PaymentInfo.fromObject(object.paymentInfo);
            }
            if (object.finalLiveLocation != null) {
                if (typeof object.finalLiveLocation !== "object")
                    throw TypeError(".WAWeb.WebMessageInfo.finalLiveLocation: object expected");
                message.finalLiveLocation = $root.WAE2E.Message.LiveLocationMessage.fromObject(object.finalLiveLocation);
            }
            if (object.quotedPaymentInfo != null) {
                if (typeof object.quotedPaymentInfo !== "object")
                    throw TypeError(".WAWeb.WebMessageInfo.quotedPaymentInfo: object expected");
                message.quotedPaymentInfo = $root.WAWeb.PaymentInfo.fromObject(object.quotedPaymentInfo);
            }
            if (object.ephemeralStartTimestamp != null)
                if ($util.Long)
                    (message.ephemeralStartTimestamp = $util.Long.fromValue(object.ephemeralStartTimestamp)).unsigned = true;
                else if (typeof object.ephemeralStartTimestamp === "string")
                    message.ephemeralStartTimestamp = parseInt(object.ephemeralStartTimestamp, 10);
                else if (typeof object.ephemeralStartTimestamp === "number")
                    message.ephemeralStartTimestamp = object.ephemeralStartTimestamp;
                else if (typeof object.ephemeralStartTimestamp === "object")
                    message.ephemeralStartTimestamp = new $util.LongBits(object.ephemeralStartTimestamp.low >>> 0, object.ephemeralStartTimestamp.high >>> 0).toNumber(true);
            if (object.ephemeralDuration != null)
                message.ephemeralDuration = object.ephemeralDuration >>> 0;
            if (object.ephemeralOffToOn != null)
                message.ephemeralOffToOn = Boolean(object.ephemeralOffToOn);
            if (object.ephemeralOutOfSync != null)
                message.ephemeralOutOfSync = Boolean(object.ephemeralOutOfSync);
            switch (object.bizPrivacyStatus) {
            default:
                if (typeof object.bizPrivacyStatus === "number") {
                    message.bizPrivacyStatus = object.bizPrivacyStatus;
                    break;
                }
                break;
            case "E2EE":
            case 0:
                message.bizPrivacyStatus = 0;
                break;
            case "FB":
            case 2:
                message.bizPrivacyStatus = 2;
                break;
            case "BSP":
            case 1:
                message.bizPrivacyStatus = 1;
                break;
            case "BSP_AND_FB":
            case 3:
                message.bizPrivacyStatus = 3;
                break;
            }
            if (object.verifiedBizName != null)
                message.verifiedBizName = String(object.verifiedBizName);
            if (object.mediaData != null) {
                if (typeof object.mediaData !== "object")
                    throw TypeError(".WAWeb.WebMessageInfo.mediaData: object expected");
                message.mediaData = $root.WAWeb.MediaData.fromObject(object.mediaData);
            }
            if (object.photoChange != null) {
                if (typeof object.photoChange !== "object")
                    throw TypeError(".WAWeb.WebMessageInfo.photoChange: object expected");
                message.photoChange = $root.WAWeb.PhotoChange.fromObject(object.photoChange);
            }
            if (object.userReceipt) {
                if (!Array.isArray(object.userReceipt))
                    throw TypeError(".WAWeb.WebMessageInfo.userReceipt: array expected");
                message.userReceipt = [];
                for (var i = 0; i < object.userReceipt.length; ++i) {
                    if (typeof object.userReceipt[i] !== "object")
                        throw TypeError(".WAWeb.WebMessageInfo.userReceipt: object expected");
                    message.userReceipt[i] = $root.WAWeb.UserReceipt.fromObject(object.userReceipt[i]);
                }
            }
            if (object.reactions) {
                if (!Array.isArray(object.reactions))
                    throw TypeError(".WAWeb.WebMessageInfo.reactions: array expected");
                message.reactions = [];
                for (var i = 0; i < object.reactions.length; ++i) {
                    if (typeof object.reactions[i] !== "object")
                        throw TypeError(".WAWeb.WebMessageInfo.reactions: object expected");
                    message.reactions[i] = $root.WAWeb.Reaction.fromObject(object.reactions[i]);
                }
            }
            if (object.quotedStickerData != null) {
                if (typeof object.quotedStickerData !== "object")
                    throw TypeError(".WAWeb.WebMessageInfo.quotedStickerData: object expected");
                message.quotedStickerData = $root.WAWeb.MediaData.fromObject(object.quotedStickerData);
            }
            if (object.futureproofData != null)
                if (typeof object.futureproofData === "string")
                    $util.base64.decode(object.futureproofData, message.futureproofData = $util.newBuffer($util.base64.length(object.futureproofData)), 0);
                else if (object.futureproofData.length >= 0)
                    message.futureproofData = object.futureproofData;
            if (object.statusPsa != null) {
                if (typeof object.statusPsa !== "object")
                    throw TypeError(".WAWeb.WebMessageInfo.statusPsa: object expected");
                message.statusPsa = $root.WAWeb.StatusPSA.fromObject(object.statusPsa);
            }
            if (object.pollUpdates) {
                if (!Array.isArray(object.pollUpdates))
                    throw TypeError(".WAWeb.WebMessageInfo.pollUpdates: array expected");
                message.pollUpdates = [];
                for (var i = 0; i < object.pollUpdates.length; ++i) {
                    if (typeof object.pollUpdates[i] !== "object")
                        throw TypeError(".WAWeb.WebMessageInfo.pollUpdates: object expected");
                    message.pollUpdates[i] = $root.WAWeb.PollUpdate.fromObject(object.pollUpdates[i]);
                }
            }
            if (object.pollAdditionalMetadata != null) {
                if (typeof object.pollAdditionalMetadata !== "object")
                    throw TypeError(".WAWeb.WebMessageInfo.pollAdditionalMetadata: object expected");
                message.pollAdditionalMetadata = $root.WAWeb.PollAdditionalMetadata.fromObject(object.pollAdditionalMetadata);
            }
            if (object.agentID != null)
                message.agentID = String(object.agentID);
            if (object.statusAlreadyViewed != null)
                message.statusAlreadyViewed = Boolean(object.statusAlreadyViewed);
            if (object.messageSecret != null)
                if (typeof object.messageSecret === "string")
                    $util.base64.decode(object.messageSecret, message.messageSecret = $util.newBuffer($util.base64.length(object.messageSecret)), 0);
                else if (object.messageSecret.length >= 0)
                    message.messageSecret = object.messageSecret;
            if (object.keepInChat != null) {
                if (typeof object.keepInChat !== "object")
                    throw TypeError(".WAWeb.WebMessageInfo.keepInChat: object expected");
                message.keepInChat = $root.WAWeb.KeepInChat.fromObject(object.keepInChat);
            }
            if (object.originalSelfAuthorUserJIDString != null)
                message.originalSelfAuthorUserJIDString = String(object.originalSelfAuthorUserJIDString);
            if (object.revokeMessageTimestamp != null)
                if ($util.Long)
                    (message.revokeMessageTimestamp = $util.Long.fromValue(object.revokeMessageTimestamp)).unsigned = true;
                else if (typeof object.revokeMessageTimestamp === "string")
                    message.revokeMessageTimestamp = parseInt(object.revokeMessageTimestamp, 10);
                else if (typeof object.revokeMessageTimestamp === "number")
                    message.revokeMessageTimestamp = object.revokeMessageTimestamp;
                else if (typeof object.revokeMessageTimestamp === "object")
                    message.revokeMessageTimestamp = new $util.LongBits(object.revokeMessageTimestamp.low >>> 0, object.revokeMessageTimestamp.high >>> 0).toNumber(true);
            if (object.pinInChat != null) {
                if (typeof object.pinInChat !== "object")
                    throw TypeError(".WAWeb.WebMessageInfo.pinInChat: object expected");
                message.pinInChat = $root.WAWeb.PinInChat.fromObject(object.pinInChat);
            }
            if (object.premiumMessageInfo != null) {
                if (typeof object.premiumMessageInfo !== "object")
                    throw TypeError(".WAWeb.WebMessageInfo.premiumMessageInfo: object expected");
                message.premiumMessageInfo = $root.WAWeb.PremiumMessageInfo.fromObject(object.premiumMessageInfo);
            }
            if (object.is1PBizBotMessage != null)
                message.is1PBizBotMessage = Boolean(object.is1PBizBotMessage);
            if (object.isGroupHistoryMessage != null)
                message.isGroupHistoryMessage = Boolean(object.isGroupHistoryMessage);
            if (object.botMessageInvokerJID != null)
                message.botMessageInvokerJID = String(object.botMessageInvokerJID);
            if (object.commentMetadata != null) {
                if (typeof object.commentMetadata !== "object")
                    throw TypeError(".WAWeb.WebMessageInfo.commentMetadata: object expected");
                message.commentMetadata = $root.WAWeb.CommentMetadata.fromObject(object.commentMetadata);
            }
            if (object.eventResponses) {
                if (!Array.isArray(object.eventResponses))
                    throw TypeError(".WAWeb.WebMessageInfo.eventResponses: array expected");
                message.eventResponses = [];
                for (var i = 0; i < object.eventResponses.length; ++i) {
                    if (typeof object.eventResponses[i] !== "object")
                        throw TypeError(".WAWeb.WebMessageInfo.eventResponses: object expected");
                    message.eventResponses[i] = $root.WAWeb.EventResponse.fromObject(object.eventResponses[i]);
                }
            }
            if (object.reportingTokenInfo != null) {
                if (typeof object.reportingTokenInfo !== "object")
                    throw TypeError(".WAWeb.WebMessageInfo.reportingTokenInfo: object expected");
                message.reportingTokenInfo = $root.WAWeb.ReportingTokenInfo.fromObject(object.reportingTokenInfo);
            }
            if (object.newsletterServerID != null)
                if ($util.Long)
                    (message.newsletterServerID = $util.Long.fromValue(object.newsletterServerID)).unsigned = true;
                else if (typeof object.newsletterServerID === "string")
                    message.newsletterServerID = parseInt(object.newsletterServerID, 10);
                else if (typeof object.newsletterServerID === "number")
                    message.newsletterServerID = object.newsletterServerID;
                else if (typeof object.newsletterServerID === "object")
                    message.newsletterServerID = new $util.LongBits(object.newsletterServerID.low >>> 0, object.newsletterServerID.high >>> 0).toNumber(true);
            if (object.eventAdditionalMetadata != null) {
                if (typeof object.eventAdditionalMetadata !== "object")
                    throw TypeError(".WAWeb.WebMessageInfo.eventAdditionalMetadata: object expected");
                message.eventAdditionalMetadata = $root.WAWeb.EventAdditionalMetadata.fromObject(object.eventAdditionalMetadata);
            }
            if (object.isMentionedInStatus != null)
                message.isMentionedInStatus = Boolean(object.isMentionedInStatus);
            if (object.statusMentions) {
                if (!Array.isArray(object.statusMentions))
                    throw TypeError(".WAWeb.WebMessageInfo.statusMentions: array expected");
                message.statusMentions = [];
                for (var i = 0; i < object.statusMentions.length; ++i)
                    message.statusMentions[i] = String(object.statusMentions[i]);
            }
            if (object.targetMessageID != null) {
                if (typeof object.targetMessageID !== "object")
                    throw TypeError(".WAWeb.WebMessageInfo.targetMessageID: object expected");
                message.targetMessageID = $root.WAProtocol.MessageKey.fromObject(object.targetMessageID);
            }
            if (object.messageAddOns) {
                if (!Array.isArray(object.messageAddOns))
                    throw TypeError(".WAWeb.WebMessageInfo.messageAddOns: array expected");
                message.messageAddOns = [];
                for (var i = 0; i < object.messageAddOns.length; ++i) {
                    if (typeof object.messageAddOns[i] !== "object")
                        throw TypeError(".WAWeb.WebMessageInfo.messageAddOns: object expected");
                    message.messageAddOns[i] = $root.WAWeb.MessageAddOn.fromObject(object.messageAddOns[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a WebMessageInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.WebMessageInfo
         * @static
         * @param {WAWeb.WebMessageInfo} message WebMessageInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        WebMessageInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.messageStubParameters = [];
                object.labels = [];
                object.userReceipt = [];
                object.reactions = [];
                object.pollUpdates = [];
                object.eventResponses = [];
                object.statusMentions = [];
                object.messageAddOns = [];
            }
            if (options.defaults) {
                object.key = null;
                object.message = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.messageTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.messageTimestamp = options.longs === String ? "0" : 0;
                object.status = options.enums === String ? "ERROR" : 0;
                object.participant = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.messageC2STimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.messageC2STimestamp = options.longs === String ? "0" : 0;
                object.ignore = false;
                object.starred = false;
                object.broadcast = false;
                object.pushName = "";
                if (options.bytes === String)
                    object.mediaCiphertextSHA256 = "";
                else {
                    object.mediaCiphertextSHA256 = [];
                    if (options.bytes !== Array)
                        object.mediaCiphertextSHA256 = $util.newBuffer(object.mediaCiphertextSHA256);
                }
                object.multicast = false;
                object.urlText = false;
                object.urlNumber = false;
                object.messageStubType = options.enums === String ? "UNKNOWN" : 0;
                object.clearMedia = false;
                object.duration = 0;
                object.paymentInfo = null;
                object.finalLiveLocation = null;
                object.quotedPaymentInfo = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.ephemeralStartTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ephemeralStartTimestamp = options.longs === String ? "0" : 0;
                object.ephemeralDuration = 0;
                object.ephemeralOffToOn = false;
                object.ephemeralOutOfSync = false;
                object.bizPrivacyStatus = options.enums === String ? "E2EE" : 0;
                object.verifiedBizName = "";
                object.mediaData = null;
                object.photoChange = null;
                object.quotedStickerData = null;
                if (options.bytes === String)
                    object.futureproofData = "";
                else {
                    object.futureproofData = [];
                    if (options.bytes !== Array)
                        object.futureproofData = $util.newBuffer(object.futureproofData);
                }
                object.statusPsa = null;
                object.pollAdditionalMetadata = null;
                object.agentID = "";
                object.statusAlreadyViewed = false;
                if (options.bytes === String)
                    object.messageSecret = "";
                else {
                    object.messageSecret = [];
                    if (options.bytes !== Array)
                        object.messageSecret = $util.newBuffer(object.messageSecret);
                }
                object.keepInChat = null;
                object.originalSelfAuthorUserJIDString = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.revokeMessageTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.revokeMessageTimestamp = options.longs === String ? "0" : 0;
                object.pinInChat = null;
                object.premiumMessageInfo = null;
                object.is1PBizBotMessage = false;
                object.isGroupHistoryMessage = false;
                object.botMessageInvokerJID = "";
                object.commentMetadata = null;
                object.reportingTokenInfo = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.newsletterServerID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.newsletterServerID = options.longs === String ? "0" : 0;
                object.eventAdditionalMetadata = null;
                object.isMentionedInStatus = false;
                object.targetMessageID = null;
            }
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = $root.WAProtocol.MessageKey.toObject(message.key, options);
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = $root.WAE2E.Message.toObject(message.message, options);
            if (message.messageTimestamp != null && message.hasOwnProperty("messageTimestamp"))
                if (typeof message.messageTimestamp === "number")
                    object.messageTimestamp = options.longs === String ? String(message.messageTimestamp) : message.messageTimestamp;
                else
                    object.messageTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.messageTimestamp) : options.longs === Number ? new $util.LongBits(message.messageTimestamp.low >>> 0, message.messageTimestamp.high >>> 0).toNumber(true) : message.messageTimestamp;
            if (message.status != null && message.hasOwnProperty("status"))
                object.status = options.enums === String ? $root.WAWeb.WebMessageInfo.Status[message.status] === undefined ? message.status : $root.WAWeb.WebMessageInfo.Status[message.status] : message.status;
            if (message.participant != null && message.hasOwnProperty("participant"))
                object.participant = message.participant;
            if (message.messageC2STimestamp != null && message.hasOwnProperty("messageC2STimestamp"))
                if (typeof message.messageC2STimestamp === "number")
                    object.messageC2STimestamp = options.longs === String ? String(message.messageC2STimestamp) : message.messageC2STimestamp;
                else
                    object.messageC2STimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.messageC2STimestamp) : options.longs === Number ? new $util.LongBits(message.messageC2STimestamp.low >>> 0, message.messageC2STimestamp.high >>> 0).toNumber(true) : message.messageC2STimestamp;
            if (message.ignore != null && message.hasOwnProperty("ignore"))
                object.ignore = message.ignore;
            if (message.starred != null && message.hasOwnProperty("starred"))
                object.starred = message.starred;
            if (message.broadcast != null && message.hasOwnProperty("broadcast"))
                object.broadcast = message.broadcast;
            if (message.pushName != null && message.hasOwnProperty("pushName"))
                object.pushName = message.pushName;
            if (message.mediaCiphertextSHA256 != null && message.hasOwnProperty("mediaCiphertextSHA256"))
                object.mediaCiphertextSHA256 = options.bytes === String ? $util.base64.encode(message.mediaCiphertextSHA256, 0, message.mediaCiphertextSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.mediaCiphertextSHA256) : message.mediaCiphertextSHA256;
            if (message.multicast != null && message.hasOwnProperty("multicast"))
                object.multicast = message.multicast;
            if (message.urlText != null && message.hasOwnProperty("urlText"))
                object.urlText = message.urlText;
            if (message.urlNumber != null && message.hasOwnProperty("urlNumber"))
                object.urlNumber = message.urlNumber;
            if (message.messageStubType != null && message.hasOwnProperty("messageStubType"))
                object.messageStubType = options.enums === String ? $root.WAWeb.WebMessageInfo.StubType[message.messageStubType] === undefined ? message.messageStubType : $root.WAWeb.WebMessageInfo.StubType[message.messageStubType] : message.messageStubType;
            if (message.clearMedia != null && message.hasOwnProperty("clearMedia"))
                object.clearMedia = message.clearMedia;
            if (message.messageStubParameters && message.messageStubParameters.length) {
                object.messageStubParameters = [];
                for (var j = 0; j < message.messageStubParameters.length; ++j)
                    object.messageStubParameters[j] = message.messageStubParameters[j];
            }
            if (message.duration != null && message.hasOwnProperty("duration"))
                object.duration = message.duration;
            if (message.labels && message.labels.length) {
                object.labels = [];
                for (var j = 0; j < message.labels.length; ++j)
                    object.labels[j] = message.labels[j];
            }
            if (message.paymentInfo != null && message.hasOwnProperty("paymentInfo"))
                object.paymentInfo = $root.WAWeb.PaymentInfo.toObject(message.paymentInfo, options);
            if (message.finalLiveLocation != null && message.hasOwnProperty("finalLiveLocation"))
                object.finalLiveLocation = $root.WAE2E.Message.LiveLocationMessage.toObject(message.finalLiveLocation, options);
            if (message.quotedPaymentInfo != null && message.hasOwnProperty("quotedPaymentInfo"))
                object.quotedPaymentInfo = $root.WAWeb.PaymentInfo.toObject(message.quotedPaymentInfo, options);
            if (message.ephemeralStartTimestamp != null && message.hasOwnProperty("ephemeralStartTimestamp"))
                if (typeof message.ephemeralStartTimestamp === "number")
                    object.ephemeralStartTimestamp = options.longs === String ? String(message.ephemeralStartTimestamp) : message.ephemeralStartTimestamp;
                else
                    object.ephemeralStartTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.ephemeralStartTimestamp) : options.longs === Number ? new $util.LongBits(message.ephemeralStartTimestamp.low >>> 0, message.ephemeralStartTimestamp.high >>> 0).toNumber(true) : message.ephemeralStartTimestamp;
            if (message.ephemeralDuration != null && message.hasOwnProperty("ephemeralDuration"))
                object.ephemeralDuration = message.ephemeralDuration;
            if (message.ephemeralOffToOn != null && message.hasOwnProperty("ephemeralOffToOn"))
                object.ephemeralOffToOn = message.ephemeralOffToOn;
            if (message.ephemeralOutOfSync != null && message.hasOwnProperty("ephemeralOutOfSync"))
                object.ephemeralOutOfSync = message.ephemeralOutOfSync;
            if (message.bizPrivacyStatus != null && message.hasOwnProperty("bizPrivacyStatus"))
                object.bizPrivacyStatus = options.enums === String ? $root.WAWeb.WebMessageInfo.BizPrivacyStatus[message.bizPrivacyStatus] === undefined ? message.bizPrivacyStatus : $root.WAWeb.WebMessageInfo.BizPrivacyStatus[message.bizPrivacyStatus] : message.bizPrivacyStatus;
            if (message.verifiedBizName != null && message.hasOwnProperty("verifiedBizName"))
                object.verifiedBizName = message.verifiedBizName;
            if (message.mediaData != null && message.hasOwnProperty("mediaData"))
                object.mediaData = $root.WAWeb.MediaData.toObject(message.mediaData, options);
            if (message.photoChange != null && message.hasOwnProperty("photoChange"))
                object.photoChange = $root.WAWeb.PhotoChange.toObject(message.photoChange, options);
            if (message.userReceipt && message.userReceipt.length) {
                object.userReceipt = [];
                for (var j = 0; j < message.userReceipt.length; ++j)
                    object.userReceipt[j] = $root.WAWeb.UserReceipt.toObject(message.userReceipt[j], options);
            }
            if (message.reactions && message.reactions.length) {
                object.reactions = [];
                for (var j = 0; j < message.reactions.length; ++j)
                    object.reactions[j] = $root.WAWeb.Reaction.toObject(message.reactions[j], options);
            }
            if (message.quotedStickerData != null && message.hasOwnProperty("quotedStickerData"))
                object.quotedStickerData = $root.WAWeb.MediaData.toObject(message.quotedStickerData, options);
            if (message.futureproofData != null && message.hasOwnProperty("futureproofData"))
                object.futureproofData = options.bytes === String ? $util.base64.encode(message.futureproofData, 0, message.futureproofData.length) : options.bytes === Array ? Array.prototype.slice.call(message.futureproofData) : message.futureproofData;
            if (message.statusPsa != null && message.hasOwnProperty("statusPsa"))
                object.statusPsa = $root.WAWeb.StatusPSA.toObject(message.statusPsa, options);
            if (message.pollUpdates && message.pollUpdates.length) {
                object.pollUpdates = [];
                for (var j = 0; j < message.pollUpdates.length; ++j)
                    object.pollUpdates[j] = $root.WAWeb.PollUpdate.toObject(message.pollUpdates[j], options);
            }
            if (message.pollAdditionalMetadata != null && message.hasOwnProperty("pollAdditionalMetadata"))
                object.pollAdditionalMetadata = $root.WAWeb.PollAdditionalMetadata.toObject(message.pollAdditionalMetadata, options);
            if (message.agentID != null && message.hasOwnProperty("agentID"))
                object.agentID = message.agentID;
            if (message.statusAlreadyViewed != null && message.hasOwnProperty("statusAlreadyViewed"))
                object.statusAlreadyViewed = message.statusAlreadyViewed;
            if (message.messageSecret != null && message.hasOwnProperty("messageSecret"))
                object.messageSecret = options.bytes === String ? $util.base64.encode(message.messageSecret, 0, message.messageSecret.length) : options.bytes === Array ? Array.prototype.slice.call(message.messageSecret) : message.messageSecret;
            if (message.keepInChat != null && message.hasOwnProperty("keepInChat"))
                object.keepInChat = $root.WAWeb.KeepInChat.toObject(message.keepInChat, options);
            if (message.originalSelfAuthorUserJIDString != null && message.hasOwnProperty("originalSelfAuthorUserJIDString"))
                object.originalSelfAuthorUserJIDString = message.originalSelfAuthorUserJIDString;
            if (message.revokeMessageTimestamp != null && message.hasOwnProperty("revokeMessageTimestamp"))
                if (typeof message.revokeMessageTimestamp === "number")
                    object.revokeMessageTimestamp = options.longs === String ? String(message.revokeMessageTimestamp) : message.revokeMessageTimestamp;
                else
                    object.revokeMessageTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.revokeMessageTimestamp) : options.longs === Number ? new $util.LongBits(message.revokeMessageTimestamp.low >>> 0, message.revokeMessageTimestamp.high >>> 0).toNumber(true) : message.revokeMessageTimestamp;
            if (message.pinInChat != null && message.hasOwnProperty("pinInChat"))
                object.pinInChat = $root.WAWeb.PinInChat.toObject(message.pinInChat, options);
            if (message.premiumMessageInfo != null && message.hasOwnProperty("premiumMessageInfo"))
                object.premiumMessageInfo = $root.WAWeb.PremiumMessageInfo.toObject(message.premiumMessageInfo, options);
            if (message.is1PBizBotMessage != null && message.hasOwnProperty("is1PBizBotMessage"))
                object.is1PBizBotMessage = message.is1PBizBotMessage;
            if (message.isGroupHistoryMessage != null && message.hasOwnProperty("isGroupHistoryMessage"))
                object.isGroupHistoryMessage = message.isGroupHistoryMessage;
            if (message.botMessageInvokerJID != null && message.hasOwnProperty("botMessageInvokerJID"))
                object.botMessageInvokerJID = message.botMessageInvokerJID;
            if (message.commentMetadata != null && message.hasOwnProperty("commentMetadata"))
                object.commentMetadata = $root.WAWeb.CommentMetadata.toObject(message.commentMetadata, options);
            if (message.eventResponses && message.eventResponses.length) {
                object.eventResponses = [];
                for (var j = 0; j < message.eventResponses.length; ++j)
                    object.eventResponses[j] = $root.WAWeb.EventResponse.toObject(message.eventResponses[j], options);
            }
            if (message.reportingTokenInfo != null && message.hasOwnProperty("reportingTokenInfo"))
                object.reportingTokenInfo = $root.WAWeb.ReportingTokenInfo.toObject(message.reportingTokenInfo, options);
            if (message.newsletterServerID != null && message.hasOwnProperty("newsletterServerID"))
                if (typeof message.newsletterServerID === "number")
                    object.newsletterServerID = options.longs === String ? String(message.newsletterServerID) : message.newsletterServerID;
                else
                    object.newsletterServerID = options.longs === String ? $util.Long.prototype.toString.call(message.newsletterServerID) : options.longs === Number ? new $util.LongBits(message.newsletterServerID.low >>> 0, message.newsletterServerID.high >>> 0).toNumber(true) : message.newsletterServerID;
            if (message.eventAdditionalMetadata != null && message.hasOwnProperty("eventAdditionalMetadata"))
                object.eventAdditionalMetadata = $root.WAWeb.EventAdditionalMetadata.toObject(message.eventAdditionalMetadata, options);
            if (message.isMentionedInStatus != null && message.hasOwnProperty("isMentionedInStatus"))
                object.isMentionedInStatus = message.isMentionedInStatus;
            if (message.statusMentions && message.statusMentions.length) {
                object.statusMentions = [];
                for (var j = 0; j < message.statusMentions.length; ++j)
                    object.statusMentions[j] = message.statusMentions[j];
            }
            if (message.targetMessageID != null && message.hasOwnProperty("targetMessageID"))
                object.targetMessageID = $root.WAProtocol.MessageKey.toObject(message.targetMessageID, options);
            if (message.messageAddOns && message.messageAddOns.length) {
                object.messageAddOns = [];
                for (var j = 0; j < message.messageAddOns.length; ++j)
                    object.messageAddOns[j] = $root.WAWeb.MessageAddOn.toObject(message.messageAddOns[j], options);
            }
            return object;
        };

        /**
         * Converts this WebMessageInfo to JSON.
         * @function toJSON
         * @memberof WAWeb.WebMessageInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        WebMessageInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for WebMessageInfo
         * @function getTypeUrl
         * @memberof WAWeb.WebMessageInfo
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        WebMessageInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.WebMessageInfo";
        };

        /**
         * BizPrivacyStatus enum.
         * @name WAWeb.WebMessageInfo.BizPrivacyStatus
         * @enum {number}
         * @property {number} E2EE=0 E2EE value
         * @property {number} FB=2 FB value
         * @property {number} BSP=1 BSP value
         * @property {number} BSP_AND_FB=3 BSP_AND_FB value
         */
        WebMessageInfo.BizPrivacyStatus = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "E2EE"] = 0;
            values[valuesById[2] = "FB"] = 2;
            values[valuesById[1] = "BSP"] = 1;
            values[valuesById[3] = "BSP_AND_FB"] = 3;
            return values;
        })();

        /**
         * StubType enum.
         * @name WAWeb.WebMessageInfo.StubType
         * @enum {number}
         * @property {number} UNKNOWN=0 UNKNOWN value
         * @property {number} REVOKE=1 REVOKE value
         * @property {number} CIPHERTEXT=2 CIPHERTEXT value
         * @property {number} FUTUREPROOF=3 FUTUREPROOF value
         * @property {number} NON_VERIFIED_TRANSITION=4 NON_VERIFIED_TRANSITION value
         * @property {number} UNVERIFIED_TRANSITION=5 UNVERIFIED_TRANSITION value
         * @property {number} VERIFIED_TRANSITION=6 VERIFIED_TRANSITION value
         * @property {number} VERIFIED_LOW_UNKNOWN=7 VERIFIED_LOW_UNKNOWN value
         * @property {number} VERIFIED_HIGH=8 VERIFIED_HIGH value
         * @property {number} VERIFIED_INITIAL_UNKNOWN=9 VERIFIED_INITIAL_UNKNOWN value
         * @property {number} VERIFIED_INITIAL_LOW=10 VERIFIED_INITIAL_LOW value
         * @property {number} VERIFIED_INITIAL_HIGH=11 VERIFIED_INITIAL_HIGH value
         * @property {number} VERIFIED_TRANSITION_ANY_TO_NONE=12 VERIFIED_TRANSITION_ANY_TO_NONE value
         * @property {number} VERIFIED_TRANSITION_ANY_TO_HIGH=13 VERIFIED_TRANSITION_ANY_TO_HIGH value
         * @property {number} VERIFIED_TRANSITION_HIGH_TO_LOW=14 VERIFIED_TRANSITION_HIGH_TO_LOW value
         * @property {number} VERIFIED_TRANSITION_HIGH_TO_UNKNOWN=15 VERIFIED_TRANSITION_HIGH_TO_UNKNOWN value
         * @property {number} VERIFIED_TRANSITION_UNKNOWN_TO_LOW=16 VERIFIED_TRANSITION_UNKNOWN_TO_LOW value
         * @property {number} VERIFIED_TRANSITION_LOW_TO_UNKNOWN=17 VERIFIED_TRANSITION_LOW_TO_UNKNOWN value
         * @property {number} VERIFIED_TRANSITION_NONE_TO_LOW=18 VERIFIED_TRANSITION_NONE_TO_LOW value
         * @property {number} VERIFIED_TRANSITION_NONE_TO_UNKNOWN=19 VERIFIED_TRANSITION_NONE_TO_UNKNOWN value
         * @property {number} GROUP_CREATE=20 GROUP_CREATE value
         * @property {number} GROUP_CHANGE_SUBJECT=21 GROUP_CHANGE_SUBJECT value
         * @property {number} GROUP_CHANGE_ICON=22 GROUP_CHANGE_ICON value
         * @property {number} GROUP_CHANGE_INVITE_LINK=23 GROUP_CHANGE_INVITE_LINK value
         * @property {number} GROUP_CHANGE_DESCRIPTION=24 GROUP_CHANGE_DESCRIPTION value
         * @property {number} GROUP_CHANGE_RESTRICT=25 GROUP_CHANGE_RESTRICT value
         * @property {number} GROUP_CHANGE_ANNOUNCE=26 GROUP_CHANGE_ANNOUNCE value
         * @property {number} GROUP_PARTICIPANT_ADD=27 GROUP_PARTICIPANT_ADD value
         * @property {number} GROUP_PARTICIPANT_REMOVE=28 GROUP_PARTICIPANT_REMOVE value
         * @property {number} GROUP_PARTICIPANT_PROMOTE=29 GROUP_PARTICIPANT_PROMOTE value
         * @property {number} GROUP_PARTICIPANT_DEMOTE=30 GROUP_PARTICIPANT_DEMOTE value
         * @property {number} GROUP_PARTICIPANT_INVITE=31 GROUP_PARTICIPANT_INVITE value
         * @property {number} GROUP_PARTICIPANT_LEAVE=32 GROUP_PARTICIPANT_LEAVE value
         * @property {number} GROUP_PARTICIPANT_CHANGE_NUMBER=33 GROUP_PARTICIPANT_CHANGE_NUMBER value
         * @property {number} BROADCAST_CREATE=34 BROADCAST_CREATE value
         * @property {number} BROADCAST_ADD=35 BROADCAST_ADD value
         * @property {number} BROADCAST_REMOVE=36 BROADCAST_REMOVE value
         * @property {number} GENERIC_NOTIFICATION=37 GENERIC_NOTIFICATION value
         * @property {number} E2E_IDENTITY_CHANGED=38 E2E_IDENTITY_CHANGED value
         * @property {number} E2E_ENCRYPTED=39 E2E_ENCRYPTED value
         * @property {number} CALL_MISSED_VOICE=40 CALL_MISSED_VOICE value
         * @property {number} CALL_MISSED_VIDEO=41 CALL_MISSED_VIDEO value
         * @property {number} INDIVIDUAL_CHANGE_NUMBER=42 INDIVIDUAL_CHANGE_NUMBER value
         * @property {number} GROUP_DELETE=43 GROUP_DELETE value
         * @property {number} GROUP_ANNOUNCE_MODE_MESSAGE_BOUNCE=44 GROUP_ANNOUNCE_MODE_MESSAGE_BOUNCE value
         * @property {number} CALL_MISSED_GROUP_VOICE=45 CALL_MISSED_GROUP_VOICE value
         * @property {number} CALL_MISSED_GROUP_VIDEO=46 CALL_MISSED_GROUP_VIDEO value
         * @property {number} PAYMENT_CIPHERTEXT=47 PAYMENT_CIPHERTEXT value
         * @property {number} PAYMENT_FUTUREPROOF=48 PAYMENT_FUTUREPROOF value
         * @property {number} PAYMENT_TRANSACTION_STATUS_UPDATE_FAILED=49 PAYMENT_TRANSACTION_STATUS_UPDATE_FAILED value
         * @property {number} PAYMENT_TRANSACTION_STATUS_UPDATE_REFUNDED=50 PAYMENT_TRANSACTION_STATUS_UPDATE_REFUNDED value
         * @property {number} PAYMENT_TRANSACTION_STATUS_UPDATE_REFUND_FAILED=51 PAYMENT_TRANSACTION_STATUS_UPDATE_REFUND_FAILED value
         * @property {number} PAYMENT_TRANSACTION_STATUS_RECEIVER_PENDING_SETUP=52 PAYMENT_TRANSACTION_STATUS_RECEIVER_PENDING_SETUP value
         * @property {number} PAYMENT_TRANSACTION_STATUS_RECEIVER_SUCCESS_AFTER_HICCUP=53 PAYMENT_TRANSACTION_STATUS_RECEIVER_SUCCESS_AFTER_HICCUP value
         * @property {number} PAYMENT_ACTION_ACCOUNT_SETUP_REMINDER=54 PAYMENT_ACTION_ACCOUNT_SETUP_REMINDER value
         * @property {number} PAYMENT_ACTION_SEND_PAYMENT_REMINDER=55 PAYMENT_ACTION_SEND_PAYMENT_REMINDER value
         * @property {number} PAYMENT_ACTION_SEND_PAYMENT_INVITATION=56 PAYMENT_ACTION_SEND_PAYMENT_INVITATION value
         * @property {number} PAYMENT_ACTION_REQUEST_DECLINED=57 PAYMENT_ACTION_REQUEST_DECLINED value
         * @property {number} PAYMENT_ACTION_REQUEST_EXPIRED=58 PAYMENT_ACTION_REQUEST_EXPIRED value
         * @property {number} PAYMENT_ACTION_REQUEST_CANCELLED=59 PAYMENT_ACTION_REQUEST_CANCELLED value
         * @property {number} BIZ_VERIFIED_TRANSITION_TOP_TO_BOTTOM=60 BIZ_VERIFIED_TRANSITION_TOP_TO_BOTTOM value
         * @property {number} BIZ_VERIFIED_TRANSITION_BOTTOM_TO_TOP=61 BIZ_VERIFIED_TRANSITION_BOTTOM_TO_TOP value
         * @property {number} BIZ_INTRO_TOP=62 BIZ_INTRO_TOP value
         * @property {number} BIZ_INTRO_BOTTOM=63 BIZ_INTRO_BOTTOM value
         * @property {number} BIZ_NAME_CHANGE=64 BIZ_NAME_CHANGE value
         * @property {number} BIZ_MOVE_TO_CONSUMER_APP=65 BIZ_MOVE_TO_CONSUMER_APP value
         * @property {number} BIZ_TWO_TIER_MIGRATION_TOP=66 BIZ_TWO_TIER_MIGRATION_TOP value
         * @property {number} BIZ_TWO_TIER_MIGRATION_BOTTOM=67 BIZ_TWO_TIER_MIGRATION_BOTTOM value
         * @property {number} OVERSIZED=68 OVERSIZED value
         * @property {number} GROUP_CHANGE_NO_FREQUENTLY_FORWARDED=69 GROUP_CHANGE_NO_FREQUENTLY_FORWARDED value
         * @property {number} GROUP_V4_ADD_INVITE_SENT=70 GROUP_V4_ADD_INVITE_SENT value
         * @property {number} GROUP_PARTICIPANT_ADD_REQUEST_JOIN=71 GROUP_PARTICIPANT_ADD_REQUEST_JOIN value
         * @property {number} CHANGE_EPHEMERAL_SETTING=72 CHANGE_EPHEMERAL_SETTING value
         * @property {number} E2E_DEVICE_CHANGED=73 E2E_DEVICE_CHANGED value
         * @property {number} VIEWED_ONCE=74 VIEWED_ONCE value
         * @property {number} E2E_ENCRYPTED_NOW=75 E2E_ENCRYPTED_NOW value
         * @property {number} BLUE_MSG_BSP_FB_TO_BSP_PREMISE=76 BLUE_MSG_BSP_FB_TO_BSP_PREMISE value
         * @property {number} BLUE_MSG_BSP_FB_TO_SELF_FB=77 BLUE_MSG_BSP_FB_TO_SELF_FB value
         * @property {number} BLUE_MSG_BSP_FB_TO_SELF_PREMISE=78 BLUE_MSG_BSP_FB_TO_SELF_PREMISE value
         * @property {number} BLUE_MSG_BSP_FB_UNVERIFIED=79 BLUE_MSG_BSP_FB_UNVERIFIED value
         * @property {number} BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED=80 BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED value
         * @property {number} BLUE_MSG_BSP_FB_VERIFIED=81 BLUE_MSG_BSP_FB_VERIFIED value
         * @property {number} BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED=82 BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED value
         * @property {number} BLUE_MSG_BSP_PREMISE_TO_SELF_PREMISE=83 BLUE_MSG_BSP_PREMISE_TO_SELF_PREMISE value
         * @property {number} BLUE_MSG_BSP_PREMISE_UNVERIFIED=84 BLUE_MSG_BSP_PREMISE_UNVERIFIED value
         * @property {number} BLUE_MSG_BSP_PREMISE_UNVERIFIED_TO_SELF_PREMISE_VERIFIED=85 BLUE_MSG_BSP_PREMISE_UNVERIFIED_TO_SELF_PREMISE_VERIFIED value
         * @property {number} BLUE_MSG_BSP_PREMISE_VERIFIED=86 BLUE_MSG_BSP_PREMISE_VERIFIED value
         * @property {number} BLUE_MSG_BSP_PREMISE_VERIFIED_TO_SELF_PREMISE_UNVERIFIED=87 BLUE_MSG_BSP_PREMISE_VERIFIED_TO_SELF_PREMISE_UNVERIFIED value
         * @property {number} BLUE_MSG_CONSUMER_TO_BSP_FB_UNVERIFIED=88 BLUE_MSG_CONSUMER_TO_BSP_FB_UNVERIFIED value
         * @property {number} BLUE_MSG_CONSUMER_TO_BSP_PREMISE_UNVERIFIED=89 BLUE_MSG_CONSUMER_TO_BSP_PREMISE_UNVERIFIED value
         * @property {number} BLUE_MSG_CONSUMER_TO_SELF_FB_UNVERIFIED=90 BLUE_MSG_CONSUMER_TO_SELF_FB_UNVERIFIED value
         * @property {number} BLUE_MSG_CONSUMER_TO_SELF_PREMISE_UNVERIFIED=91 BLUE_MSG_CONSUMER_TO_SELF_PREMISE_UNVERIFIED value
         * @property {number} BLUE_MSG_SELF_FB_TO_BSP_PREMISE=92 BLUE_MSG_SELF_FB_TO_BSP_PREMISE value
         * @property {number} BLUE_MSG_SELF_FB_TO_SELF_PREMISE=93 BLUE_MSG_SELF_FB_TO_SELF_PREMISE value
         * @property {number} BLUE_MSG_SELF_FB_UNVERIFIED=94 BLUE_MSG_SELF_FB_UNVERIFIED value
         * @property {number} BLUE_MSG_SELF_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED=95 BLUE_MSG_SELF_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED value
         * @property {number} BLUE_MSG_SELF_FB_VERIFIED=96 BLUE_MSG_SELF_FB_VERIFIED value
         * @property {number} BLUE_MSG_SELF_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED=97 BLUE_MSG_SELF_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED value
         * @property {number} BLUE_MSG_SELF_PREMISE_TO_BSP_PREMISE=98 BLUE_MSG_SELF_PREMISE_TO_BSP_PREMISE value
         * @property {number} BLUE_MSG_SELF_PREMISE_UNVERIFIED=99 BLUE_MSG_SELF_PREMISE_UNVERIFIED value
         * @property {number} BLUE_MSG_SELF_PREMISE_VERIFIED=100 BLUE_MSG_SELF_PREMISE_VERIFIED value
         * @property {number} BLUE_MSG_TO_BSP_FB=101 BLUE_MSG_TO_BSP_FB value
         * @property {number} BLUE_MSG_TO_CONSUMER=102 BLUE_MSG_TO_CONSUMER value
         * @property {number} BLUE_MSG_TO_SELF_FB=103 BLUE_MSG_TO_SELF_FB value
         * @property {number} BLUE_MSG_UNVERIFIED_TO_BSP_FB_VERIFIED=104 BLUE_MSG_UNVERIFIED_TO_BSP_FB_VERIFIED value
         * @property {number} BLUE_MSG_UNVERIFIED_TO_BSP_PREMISE_VERIFIED=105 BLUE_MSG_UNVERIFIED_TO_BSP_PREMISE_VERIFIED value
         * @property {number} BLUE_MSG_UNVERIFIED_TO_SELF_FB_VERIFIED=106 BLUE_MSG_UNVERIFIED_TO_SELF_FB_VERIFIED value
         * @property {number} BLUE_MSG_UNVERIFIED_TO_VERIFIED=107 BLUE_MSG_UNVERIFIED_TO_VERIFIED value
         * @property {number} BLUE_MSG_VERIFIED_TO_BSP_FB_UNVERIFIED=108 BLUE_MSG_VERIFIED_TO_BSP_FB_UNVERIFIED value
         * @property {number} BLUE_MSG_VERIFIED_TO_BSP_PREMISE_UNVERIFIED=109 BLUE_MSG_VERIFIED_TO_BSP_PREMISE_UNVERIFIED value
         * @property {number} BLUE_MSG_VERIFIED_TO_SELF_FB_UNVERIFIED=110 BLUE_MSG_VERIFIED_TO_SELF_FB_UNVERIFIED value
         * @property {number} BLUE_MSG_VERIFIED_TO_UNVERIFIED=111 BLUE_MSG_VERIFIED_TO_UNVERIFIED value
         * @property {number} BLUE_MSG_BSP_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED=112 BLUE_MSG_BSP_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED value
         * @property {number} BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_FB_VERIFIED=113 BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_FB_VERIFIED value
         * @property {number} BLUE_MSG_BSP_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED=114 BLUE_MSG_BSP_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED value
         * @property {number} BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_FB_UNVERIFIED=115 BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_FB_UNVERIFIED value
         * @property {number} BLUE_MSG_SELF_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED=116 BLUE_MSG_SELF_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED value
         * @property {number} BLUE_MSG_SELF_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED=117 BLUE_MSG_SELF_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED value
         * @property {number} E2E_IDENTITY_UNAVAILABLE=118 E2E_IDENTITY_UNAVAILABLE value
         * @property {number} GROUP_CREATING=119 GROUP_CREATING value
         * @property {number} GROUP_CREATE_FAILED=120 GROUP_CREATE_FAILED value
         * @property {number} GROUP_BOUNCED=121 GROUP_BOUNCED value
         * @property {number} BLOCK_CONTACT=122 BLOCK_CONTACT value
         * @property {number} EPHEMERAL_SETTING_NOT_APPLIED=123 EPHEMERAL_SETTING_NOT_APPLIED value
         * @property {number} SYNC_FAILED=124 SYNC_FAILED value
         * @property {number} SYNCING=125 SYNCING value
         * @property {number} BIZ_PRIVACY_MODE_INIT_FB=126 BIZ_PRIVACY_MODE_INIT_FB value
         * @property {number} BIZ_PRIVACY_MODE_INIT_BSP=127 BIZ_PRIVACY_MODE_INIT_BSP value
         * @property {number} BIZ_PRIVACY_MODE_TO_FB=128 BIZ_PRIVACY_MODE_TO_FB value
         * @property {number} BIZ_PRIVACY_MODE_TO_BSP=129 BIZ_PRIVACY_MODE_TO_BSP value
         * @property {number} DISAPPEARING_MODE=130 DISAPPEARING_MODE value
         * @property {number} E2E_DEVICE_FETCH_FAILED=131 E2E_DEVICE_FETCH_FAILED value
         * @property {number} ADMIN_REVOKE=132 ADMIN_REVOKE value
         * @property {number} GROUP_INVITE_LINK_GROWTH_LOCKED=133 GROUP_INVITE_LINK_GROWTH_LOCKED value
         * @property {number} COMMUNITY_LINK_PARENT_GROUP=134 COMMUNITY_LINK_PARENT_GROUP value
         * @property {number} COMMUNITY_LINK_SIBLING_GROUP=135 COMMUNITY_LINK_SIBLING_GROUP value
         * @property {number} COMMUNITY_LINK_SUB_GROUP=136 COMMUNITY_LINK_SUB_GROUP value
         * @property {number} COMMUNITY_UNLINK_PARENT_GROUP=137 COMMUNITY_UNLINK_PARENT_GROUP value
         * @property {number} COMMUNITY_UNLINK_SIBLING_GROUP=138 COMMUNITY_UNLINK_SIBLING_GROUP value
         * @property {number} COMMUNITY_UNLINK_SUB_GROUP=139 COMMUNITY_UNLINK_SUB_GROUP value
         * @property {number} GROUP_PARTICIPANT_ACCEPT=140 GROUP_PARTICIPANT_ACCEPT value
         * @property {number} GROUP_PARTICIPANT_LINKED_GROUP_JOIN=141 GROUP_PARTICIPANT_LINKED_GROUP_JOIN value
         * @property {number} COMMUNITY_CREATE=142 COMMUNITY_CREATE value
         * @property {number} EPHEMERAL_KEEP_IN_CHAT=143 EPHEMERAL_KEEP_IN_CHAT value
         * @property {number} GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST=144 GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST value
         * @property {number} GROUP_MEMBERSHIP_JOIN_APPROVAL_MODE=145 GROUP_MEMBERSHIP_JOIN_APPROVAL_MODE value
         * @property {number} INTEGRITY_UNLINK_PARENT_GROUP=146 INTEGRITY_UNLINK_PARENT_GROUP value
         * @property {number} COMMUNITY_PARTICIPANT_PROMOTE=147 COMMUNITY_PARTICIPANT_PROMOTE value
         * @property {number} COMMUNITY_PARTICIPANT_DEMOTE=148 COMMUNITY_PARTICIPANT_DEMOTE value
         * @property {number} COMMUNITY_PARENT_GROUP_DELETED=149 COMMUNITY_PARENT_GROUP_DELETED value
         * @property {number} COMMUNITY_LINK_PARENT_GROUP_MEMBERSHIP_APPROVAL=150 COMMUNITY_LINK_PARENT_GROUP_MEMBERSHIP_APPROVAL value
         * @property {number} GROUP_PARTICIPANT_JOINED_GROUP_AND_PARENT_GROUP=151 GROUP_PARTICIPANT_JOINED_GROUP_AND_PARENT_GROUP value
         * @property {number} MASKED_THREAD_CREATED=152 MASKED_THREAD_CREATED value
         * @property {number} MASKED_THREAD_UNMASKED=153 MASKED_THREAD_UNMASKED value
         * @property {number} BIZ_CHAT_ASSIGNMENT=154 BIZ_CHAT_ASSIGNMENT value
         * @property {number} CHAT_PSA=155 CHAT_PSA value
         * @property {number} CHAT_POLL_CREATION_MESSAGE=156 CHAT_POLL_CREATION_MESSAGE value
         * @property {number} CAG_MASKED_THREAD_CREATED=157 CAG_MASKED_THREAD_CREATED value
         * @property {number} COMMUNITY_PARENT_GROUP_SUBJECT_CHANGED=158 COMMUNITY_PARENT_GROUP_SUBJECT_CHANGED value
         * @property {number} CAG_INVITE_AUTO_ADD=159 CAG_INVITE_AUTO_ADD value
         * @property {number} BIZ_CHAT_ASSIGNMENT_UNASSIGN=160 BIZ_CHAT_ASSIGNMENT_UNASSIGN value
         * @property {number} CAG_INVITE_AUTO_JOINED=161 CAG_INVITE_AUTO_JOINED value
         * @property {number} SCHEDULED_CALL_START_MESSAGE=162 SCHEDULED_CALL_START_MESSAGE value
         * @property {number} COMMUNITY_INVITE_RICH=163 COMMUNITY_INVITE_RICH value
         * @property {number} COMMUNITY_INVITE_AUTO_ADD_RICH=164 COMMUNITY_INVITE_AUTO_ADD_RICH value
         * @property {number} SUB_GROUP_INVITE_RICH=165 SUB_GROUP_INVITE_RICH value
         * @property {number} SUB_GROUP_PARTICIPANT_ADD_RICH=166 SUB_GROUP_PARTICIPANT_ADD_RICH value
         * @property {number} COMMUNITY_LINK_PARENT_GROUP_RICH=167 COMMUNITY_LINK_PARENT_GROUP_RICH value
         * @property {number} COMMUNITY_PARTICIPANT_ADD_RICH=168 COMMUNITY_PARTICIPANT_ADD_RICH value
         * @property {number} SILENCED_UNKNOWN_CALLER_AUDIO=169 SILENCED_UNKNOWN_CALLER_AUDIO value
         * @property {number} SILENCED_UNKNOWN_CALLER_VIDEO=170 SILENCED_UNKNOWN_CALLER_VIDEO value
         * @property {number} GROUP_MEMBER_ADD_MODE=171 GROUP_MEMBER_ADD_MODE value
         * @property {number} GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST_NON_ADMIN_ADD=172 GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST_NON_ADMIN_ADD value
         * @property {number} COMMUNITY_CHANGE_DESCRIPTION=173 COMMUNITY_CHANGE_DESCRIPTION value
         * @property {number} SENDER_INVITE=174 SENDER_INVITE value
         * @property {number} RECEIVER_INVITE=175 RECEIVER_INVITE value
         * @property {number} COMMUNITY_ALLOW_MEMBER_ADDED_GROUPS=176 COMMUNITY_ALLOW_MEMBER_ADDED_GROUPS value
         * @property {number} PINNED_MESSAGE_IN_CHAT=177 PINNED_MESSAGE_IN_CHAT value
         * @property {number} PAYMENT_INVITE_SETUP_INVITER=178 PAYMENT_INVITE_SETUP_INVITER value
         * @property {number} PAYMENT_INVITE_SETUP_INVITEE_RECEIVE_ONLY=179 PAYMENT_INVITE_SETUP_INVITEE_RECEIVE_ONLY value
         * @property {number} PAYMENT_INVITE_SETUP_INVITEE_SEND_AND_RECEIVE=180 PAYMENT_INVITE_SETUP_INVITEE_SEND_AND_RECEIVE value
         * @property {number} LINKED_GROUP_CALL_START=181 LINKED_GROUP_CALL_START value
         * @property {number} REPORT_TO_ADMIN_ENABLED_STATUS=182 REPORT_TO_ADMIN_ENABLED_STATUS value
         * @property {number} EMPTY_SUBGROUP_CREATE=183 EMPTY_SUBGROUP_CREATE value
         * @property {number} SCHEDULED_CALL_CANCEL=184 SCHEDULED_CALL_CANCEL value
         * @property {number} SUBGROUP_ADMIN_TRIGGERED_AUTO_ADD_RICH=185 SUBGROUP_ADMIN_TRIGGERED_AUTO_ADD_RICH value
         * @property {number} GROUP_CHANGE_RECENT_HISTORY_SHARING=186 GROUP_CHANGE_RECENT_HISTORY_SHARING value
         * @property {number} PAID_MESSAGE_SERVER_CAMPAIGN_ID=187 PAID_MESSAGE_SERVER_CAMPAIGN_ID value
         * @property {number} GENERAL_CHAT_CREATE=188 GENERAL_CHAT_CREATE value
         * @property {number} GENERAL_CHAT_ADD=189 GENERAL_CHAT_ADD value
         * @property {number} GENERAL_CHAT_AUTO_ADD_DISABLED=190 GENERAL_CHAT_AUTO_ADD_DISABLED value
         * @property {number} SUGGESTED_SUBGROUP_ANNOUNCE=191 SUGGESTED_SUBGROUP_ANNOUNCE value
         * @property {number} BIZ_BOT_1P_MESSAGING_ENABLED=192 BIZ_BOT_1P_MESSAGING_ENABLED value
         * @property {number} CHANGE_USERNAME=193 CHANGE_USERNAME value
         * @property {number} BIZ_COEX_PRIVACY_INIT_SELF=194 BIZ_COEX_PRIVACY_INIT_SELF value
         * @property {number} BIZ_COEX_PRIVACY_TRANSITION_SELF=195 BIZ_COEX_PRIVACY_TRANSITION_SELF value
         * @property {number} SUPPORT_AI_EDUCATION=196 SUPPORT_AI_EDUCATION value
         * @property {number} BIZ_BOT_3P_MESSAGING_ENABLED=197 BIZ_BOT_3P_MESSAGING_ENABLED value
         * @property {number} REMINDER_SETUP_MESSAGE=198 REMINDER_SETUP_MESSAGE value
         * @property {number} REMINDER_SENT_MESSAGE=199 REMINDER_SENT_MESSAGE value
         * @property {number} REMINDER_CANCEL_MESSAGE=200 REMINDER_CANCEL_MESSAGE value
         * @property {number} BIZ_COEX_PRIVACY_INIT=201 BIZ_COEX_PRIVACY_INIT value
         * @property {number} BIZ_COEX_PRIVACY_TRANSITION=202 BIZ_COEX_PRIVACY_TRANSITION value
         * @property {number} GROUP_DEACTIVATED=203 GROUP_DEACTIVATED value
         * @property {number} COMMUNITY_DEACTIVATE_SIBLING_GROUP=204 COMMUNITY_DEACTIVATE_SIBLING_GROUP value
         * @property {number} EVENT_UPDATED=205 EVENT_UPDATED value
         * @property {number} EVENT_CANCELED=206 EVENT_CANCELED value
         * @property {number} COMMUNITY_OWNER_UPDATED=207 COMMUNITY_OWNER_UPDATED value
         * @property {number} COMMUNITY_SUB_GROUP_VISIBILITY_HIDDEN=208 COMMUNITY_SUB_GROUP_VISIBILITY_HIDDEN value
         */
        WebMessageInfo.StubType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "UNKNOWN"] = 0;
            values[valuesById[1] = "REVOKE"] = 1;
            values[valuesById[2] = "CIPHERTEXT"] = 2;
            values[valuesById[3] = "FUTUREPROOF"] = 3;
            values[valuesById[4] = "NON_VERIFIED_TRANSITION"] = 4;
            values[valuesById[5] = "UNVERIFIED_TRANSITION"] = 5;
            values[valuesById[6] = "VERIFIED_TRANSITION"] = 6;
            values[valuesById[7] = "VERIFIED_LOW_UNKNOWN"] = 7;
            values[valuesById[8] = "VERIFIED_HIGH"] = 8;
            values[valuesById[9] = "VERIFIED_INITIAL_UNKNOWN"] = 9;
            values[valuesById[10] = "VERIFIED_INITIAL_LOW"] = 10;
            values[valuesById[11] = "VERIFIED_INITIAL_HIGH"] = 11;
            values[valuesById[12] = "VERIFIED_TRANSITION_ANY_TO_NONE"] = 12;
            values[valuesById[13] = "VERIFIED_TRANSITION_ANY_TO_HIGH"] = 13;
            values[valuesById[14] = "VERIFIED_TRANSITION_HIGH_TO_LOW"] = 14;
            values[valuesById[15] = "VERIFIED_TRANSITION_HIGH_TO_UNKNOWN"] = 15;
            values[valuesById[16] = "VERIFIED_TRANSITION_UNKNOWN_TO_LOW"] = 16;
            values[valuesById[17] = "VERIFIED_TRANSITION_LOW_TO_UNKNOWN"] = 17;
            values[valuesById[18] = "VERIFIED_TRANSITION_NONE_TO_LOW"] = 18;
            values[valuesById[19] = "VERIFIED_TRANSITION_NONE_TO_UNKNOWN"] = 19;
            values[valuesById[20] = "GROUP_CREATE"] = 20;
            values[valuesById[21] = "GROUP_CHANGE_SUBJECT"] = 21;
            values[valuesById[22] = "GROUP_CHANGE_ICON"] = 22;
            values[valuesById[23] = "GROUP_CHANGE_INVITE_LINK"] = 23;
            values[valuesById[24] = "GROUP_CHANGE_DESCRIPTION"] = 24;
            values[valuesById[25] = "GROUP_CHANGE_RESTRICT"] = 25;
            values[valuesById[26] = "GROUP_CHANGE_ANNOUNCE"] = 26;
            values[valuesById[27] = "GROUP_PARTICIPANT_ADD"] = 27;
            values[valuesById[28] = "GROUP_PARTICIPANT_REMOVE"] = 28;
            values[valuesById[29] = "GROUP_PARTICIPANT_PROMOTE"] = 29;
            values[valuesById[30] = "GROUP_PARTICIPANT_DEMOTE"] = 30;
            values[valuesById[31] = "GROUP_PARTICIPANT_INVITE"] = 31;
            values[valuesById[32] = "GROUP_PARTICIPANT_LEAVE"] = 32;
            values[valuesById[33] = "GROUP_PARTICIPANT_CHANGE_NUMBER"] = 33;
            values[valuesById[34] = "BROADCAST_CREATE"] = 34;
            values[valuesById[35] = "BROADCAST_ADD"] = 35;
            values[valuesById[36] = "BROADCAST_REMOVE"] = 36;
            values[valuesById[37] = "GENERIC_NOTIFICATION"] = 37;
            values[valuesById[38] = "E2E_IDENTITY_CHANGED"] = 38;
            values[valuesById[39] = "E2E_ENCRYPTED"] = 39;
            values[valuesById[40] = "CALL_MISSED_VOICE"] = 40;
            values[valuesById[41] = "CALL_MISSED_VIDEO"] = 41;
            values[valuesById[42] = "INDIVIDUAL_CHANGE_NUMBER"] = 42;
            values[valuesById[43] = "GROUP_DELETE"] = 43;
            values[valuesById[44] = "GROUP_ANNOUNCE_MODE_MESSAGE_BOUNCE"] = 44;
            values[valuesById[45] = "CALL_MISSED_GROUP_VOICE"] = 45;
            values[valuesById[46] = "CALL_MISSED_GROUP_VIDEO"] = 46;
            values[valuesById[47] = "PAYMENT_CIPHERTEXT"] = 47;
            values[valuesById[48] = "PAYMENT_FUTUREPROOF"] = 48;
            values[valuesById[49] = "PAYMENT_TRANSACTION_STATUS_UPDATE_FAILED"] = 49;
            values[valuesById[50] = "PAYMENT_TRANSACTION_STATUS_UPDATE_REFUNDED"] = 50;
            values[valuesById[51] = "PAYMENT_TRANSACTION_STATUS_UPDATE_REFUND_FAILED"] = 51;
            values[valuesById[52] = "PAYMENT_TRANSACTION_STATUS_RECEIVER_PENDING_SETUP"] = 52;
            values[valuesById[53] = "PAYMENT_TRANSACTION_STATUS_RECEIVER_SUCCESS_AFTER_HICCUP"] = 53;
            values[valuesById[54] = "PAYMENT_ACTION_ACCOUNT_SETUP_REMINDER"] = 54;
            values[valuesById[55] = "PAYMENT_ACTION_SEND_PAYMENT_REMINDER"] = 55;
            values[valuesById[56] = "PAYMENT_ACTION_SEND_PAYMENT_INVITATION"] = 56;
            values[valuesById[57] = "PAYMENT_ACTION_REQUEST_DECLINED"] = 57;
            values[valuesById[58] = "PAYMENT_ACTION_REQUEST_EXPIRED"] = 58;
            values[valuesById[59] = "PAYMENT_ACTION_REQUEST_CANCELLED"] = 59;
            values[valuesById[60] = "BIZ_VERIFIED_TRANSITION_TOP_TO_BOTTOM"] = 60;
            values[valuesById[61] = "BIZ_VERIFIED_TRANSITION_BOTTOM_TO_TOP"] = 61;
            values[valuesById[62] = "BIZ_INTRO_TOP"] = 62;
            values[valuesById[63] = "BIZ_INTRO_BOTTOM"] = 63;
            values[valuesById[64] = "BIZ_NAME_CHANGE"] = 64;
            values[valuesById[65] = "BIZ_MOVE_TO_CONSUMER_APP"] = 65;
            values[valuesById[66] = "BIZ_TWO_TIER_MIGRATION_TOP"] = 66;
            values[valuesById[67] = "BIZ_TWO_TIER_MIGRATION_BOTTOM"] = 67;
            values[valuesById[68] = "OVERSIZED"] = 68;
            values[valuesById[69] = "GROUP_CHANGE_NO_FREQUENTLY_FORWARDED"] = 69;
            values[valuesById[70] = "GROUP_V4_ADD_INVITE_SENT"] = 70;
            values[valuesById[71] = "GROUP_PARTICIPANT_ADD_REQUEST_JOIN"] = 71;
            values[valuesById[72] = "CHANGE_EPHEMERAL_SETTING"] = 72;
            values[valuesById[73] = "E2E_DEVICE_CHANGED"] = 73;
            values[valuesById[74] = "VIEWED_ONCE"] = 74;
            values[valuesById[75] = "E2E_ENCRYPTED_NOW"] = 75;
            values[valuesById[76] = "BLUE_MSG_BSP_FB_TO_BSP_PREMISE"] = 76;
            values[valuesById[77] = "BLUE_MSG_BSP_FB_TO_SELF_FB"] = 77;
            values[valuesById[78] = "BLUE_MSG_BSP_FB_TO_SELF_PREMISE"] = 78;
            values[valuesById[79] = "BLUE_MSG_BSP_FB_UNVERIFIED"] = 79;
            values[valuesById[80] = "BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED"] = 80;
            values[valuesById[81] = "BLUE_MSG_BSP_FB_VERIFIED"] = 81;
            values[valuesById[82] = "BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED"] = 82;
            values[valuesById[83] = "BLUE_MSG_BSP_PREMISE_TO_SELF_PREMISE"] = 83;
            values[valuesById[84] = "BLUE_MSG_BSP_PREMISE_UNVERIFIED"] = 84;
            values[valuesById[85] = "BLUE_MSG_BSP_PREMISE_UNVERIFIED_TO_SELF_PREMISE_VERIFIED"] = 85;
            values[valuesById[86] = "BLUE_MSG_BSP_PREMISE_VERIFIED"] = 86;
            values[valuesById[87] = "BLUE_MSG_BSP_PREMISE_VERIFIED_TO_SELF_PREMISE_UNVERIFIED"] = 87;
            values[valuesById[88] = "BLUE_MSG_CONSUMER_TO_BSP_FB_UNVERIFIED"] = 88;
            values[valuesById[89] = "BLUE_MSG_CONSUMER_TO_BSP_PREMISE_UNVERIFIED"] = 89;
            values[valuesById[90] = "BLUE_MSG_CONSUMER_TO_SELF_FB_UNVERIFIED"] = 90;
            values[valuesById[91] = "BLUE_MSG_CONSUMER_TO_SELF_PREMISE_UNVERIFIED"] = 91;
            values[valuesById[92] = "BLUE_MSG_SELF_FB_TO_BSP_PREMISE"] = 92;
            values[valuesById[93] = "BLUE_MSG_SELF_FB_TO_SELF_PREMISE"] = 93;
            values[valuesById[94] = "BLUE_MSG_SELF_FB_UNVERIFIED"] = 94;
            values[valuesById[95] = "BLUE_MSG_SELF_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED"] = 95;
            values[valuesById[96] = "BLUE_MSG_SELF_FB_VERIFIED"] = 96;
            values[valuesById[97] = "BLUE_MSG_SELF_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED"] = 97;
            values[valuesById[98] = "BLUE_MSG_SELF_PREMISE_TO_BSP_PREMISE"] = 98;
            values[valuesById[99] = "BLUE_MSG_SELF_PREMISE_UNVERIFIED"] = 99;
            values[valuesById[100] = "BLUE_MSG_SELF_PREMISE_VERIFIED"] = 100;
            values[valuesById[101] = "BLUE_MSG_TO_BSP_FB"] = 101;
            values[valuesById[102] = "BLUE_MSG_TO_CONSUMER"] = 102;
            values[valuesById[103] = "BLUE_MSG_TO_SELF_FB"] = 103;
            values[valuesById[104] = "BLUE_MSG_UNVERIFIED_TO_BSP_FB_VERIFIED"] = 104;
            values[valuesById[105] = "BLUE_MSG_UNVERIFIED_TO_BSP_PREMISE_VERIFIED"] = 105;
            values[valuesById[106] = "BLUE_MSG_UNVERIFIED_TO_SELF_FB_VERIFIED"] = 106;
            values[valuesById[107] = "BLUE_MSG_UNVERIFIED_TO_VERIFIED"] = 107;
            values[valuesById[108] = "BLUE_MSG_VERIFIED_TO_BSP_FB_UNVERIFIED"] = 108;
            values[valuesById[109] = "BLUE_MSG_VERIFIED_TO_BSP_PREMISE_UNVERIFIED"] = 109;
            values[valuesById[110] = "BLUE_MSG_VERIFIED_TO_SELF_FB_UNVERIFIED"] = 110;
            values[valuesById[111] = "BLUE_MSG_VERIFIED_TO_UNVERIFIED"] = 111;
            values[valuesById[112] = "BLUE_MSG_BSP_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED"] = 112;
            values[valuesById[113] = "BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_FB_VERIFIED"] = 113;
            values[valuesById[114] = "BLUE_MSG_BSP_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED"] = 114;
            values[valuesById[115] = "BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_FB_UNVERIFIED"] = 115;
            values[valuesById[116] = "BLUE_MSG_SELF_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED"] = 116;
            values[valuesById[117] = "BLUE_MSG_SELF_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED"] = 117;
            values[valuesById[118] = "E2E_IDENTITY_UNAVAILABLE"] = 118;
            values[valuesById[119] = "GROUP_CREATING"] = 119;
            values[valuesById[120] = "GROUP_CREATE_FAILED"] = 120;
            values[valuesById[121] = "GROUP_BOUNCED"] = 121;
            values[valuesById[122] = "BLOCK_CONTACT"] = 122;
            values[valuesById[123] = "EPHEMERAL_SETTING_NOT_APPLIED"] = 123;
            values[valuesById[124] = "SYNC_FAILED"] = 124;
            values[valuesById[125] = "SYNCING"] = 125;
            values[valuesById[126] = "BIZ_PRIVACY_MODE_INIT_FB"] = 126;
            values[valuesById[127] = "BIZ_PRIVACY_MODE_INIT_BSP"] = 127;
            values[valuesById[128] = "BIZ_PRIVACY_MODE_TO_FB"] = 128;
            values[valuesById[129] = "BIZ_PRIVACY_MODE_TO_BSP"] = 129;
            values[valuesById[130] = "DISAPPEARING_MODE"] = 130;
            values[valuesById[131] = "E2E_DEVICE_FETCH_FAILED"] = 131;
            values[valuesById[132] = "ADMIN_REVOKE"] = 132;
            values[valuesById[133] = "GROUP_INVITE_LINK_GROWTH_LOCKED"] = 133;
            values[valuesById[134] = "COMMUNITY_LINK_PARENT_GROUP"] = 134;
            values[valuesById[135] = "COMMUNITY_LINK_SIBLING_GROUP"] = 135;
            values[valuesById[136] = "COMMUNITY_LINK_SUB_GROUP"] = 136;
            values[valuesById[137] = "COMMUNITY_UNLINK_PARENT_GROUP"] = 137;
            values[valuesById[138] = "COMMUNITY_UNLINK_SIBLING_GROUP"] = 138;
            values[valuesById[139] = "COMMUNITY_UNLINK_SUB_GROUP"] = 139;
            values[valuesById[140] = "GROUP_PARTICIPANT_ACCEPT"] = 140;
            values[valuesById[141] = "GROUP_PARTICIPANT_LINKED_GROUP_JOIN"] = 141;
            values[valuesById[142] = "COMMUNITY_CREATE"] = 142;
            values[valuesById[143] = "EPHEMERAL_KEEP_IN_CHAT"] = 143;
            values[valuesById[144] = "GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST"] = 144;
            values[valuesById[145] = "GROUP_MEMBERSHIP_JOIN_APPROVAL_MODE"] = 145;
            values[valuesById[146] = "INTEGRITY_UNLINK_PARENT_GROUP"] = 146;
            values[valuesById[147] = "COMMUNITY_PARTICIPANT_PROMOTE"] = 147;
            values[valuesById[148] = "COMMUNITY_PARTICIPANT_DEMOTE"] = 148;
            values[valuesById[149] = "COMMUNITY_PARENT_GROUP_DELETED"] = 149;
            values[valuesById[150] = "COMMUNITY_LINK_PARENT_GROUP_MEMBERSHIP_APPROVAL"] = 150;
            values[valuesById[151] = "GROUP_PARTICIPANT_JOINED_GROUP_AND_PARENT_GROUP"] = 151;
            values[valuesById[152] = "MASKED_THREAD_CREATED"] = 152;
            values[valuesById[153] = "MASKED_THREAD_UNMASKED"] = 153;
            values[valuesById[154] = "BIZ_CHAT_ASSIGNMENT"] = 154;
            values[valuesById[155] = "CHAT_PSA"] = 155;
            values[valuesById[156] = "CHAT_POLL_CREATION_MESSAGE"] = 156;
            values[valuesById[157] = "CAG_MASKED_THREAD_CREATED"] = 157;
            values[valuesById[158] = "COMMUNITY_PARENT_GROUP_SUBJECT_CHANGED"] = 158;
            values[valuesById[159] = "CAG_INVITE_AUTO_ADD"] = 159;
            values[valuesById[160] = "BIZ_CHAT_ASSIGNMENT_UNASSIGN"] = 160;
            values[valuesById[161] = "CAG_INVITE_AUTO_JOINED"] = 161;
            values[valuesById[162] = "SCHEDULED_CALL_START_MESSAGE"] = 162;
            values[valuesById[163] = "COMMUNITY_INVITE_RICH"] = 163;
            values[valuesById[164] = "COMMUNITY_INVITE_AUTO_ADD_RICH"] = 164;
            values[valuesById[165] = "SUB_GROUP_INVITE_RICH"] = 165;
            values[valuesById[166] = "SUB_GROUP_PARTICIPANT_ADD_RICH"] = 166;
            values[valuesById[167] = "COMMUNITY_LINK_PARENT_GROUP_RICH"] = 167;
            values[valuesById[168] = "COMMUNITY_PARTICIPANT_ADD_RICH"] = 168;
            values[valuesById[169] = "SILENCED_UNKNOWN_CALLER_AUDIO"] = 169;
            values[valuesById[170] = "SILENCED_UNKNOWN_CALLER_VIDEO"] = 170;
            values[valuesById[171] = "GROUP_MEMBER_ADD_MODE"] = 171;
            values[valuesById[172] = "GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST_NON_ADMIN_ADD"] = 172;
            values[valuesById[173] = "COMMUNITY_CHANGE_DESCRIPTION"] = 173;
            values[valuesById[174] = "SENDER_INVITE"] = 174;
            values[valuesById[175] = "RECEIVER_INVITE"] = 175;
            values[valuesById[176] = "COMMUNITY_ALLOW_MEMBER_ADDED_GROUPS"] = 176;
            values[valuesById[177] = "PINNED_MESSAGE_IN_CHAT"] = 177;
            values[valuesById[178] = "PAYMENT_INVITE_SETUP_INVITER"] = 178;
            values[valuesById[179] = "PAYMENT_INVITE_SETUP_INVITEE_RECEIVE_ONLY"] = 179;
            values[valuesById[180] = "PAYMENT_INVITE_SETUP_INVITEE_SEND_AND_RECEIVE"] = 180;
            values[valuesById[181] = "LINKED_GROUP_CALL_START"] = 181;
            values[valuesById[182] = "REPORT_TO_ADMIN_ENABLED_STATUS"] = 182;
            values[valuesById[183] = "EMPTY_SUBGROUP_CREATE"] = 183;
            values[valuesById[184] = "SCHEDULED_CALL_CANCEL"] = 184;
            values[valuesById[185] = "SUBGROUP_ADMIN_TRIGGERED_AUTO_ADD_RICH"] = 185;
            values[valuesById[186] = "GROUP_CHANGE_RECENT_HISTORY_SHARING"] = 186;
            values[valuesById[187] = "PAID_MESSAGE_SERVER_CAMPAIGN_ID"] = 187;
            values[valuesById[188] = "GENERAL_CHAT_CREATE"] = 188;
            values[valuesById[189] = "GENERAL_CHAT_ADD"] = 189;
            values[valuesById[190] = "GENERAL_CHAT_AUTO_ADD_DISABLED"] = 190;
            values[valuesById[191] = "SUGGESTED_SUBGROUP_ANNOUNCE"] = 191;
            values[valuesById[192] = "BIZ_BOT_1P_MESSAGING_ENABLED"] = 192;
            values[valuesById[193] = "CHANGE_USERNAME"] = 193;
            values[valuesById[194] = "BIZ_COEX_PRIVACY_INIT_SELF"] = 194;
            values[valuesById[195] = "BIZ_COEX_PRIVACY_TRANSITION_SELF"] = 195;
            values[valuesById[196] = "SUPPORT_AI_EDUCATION"] = 196;
            values[valuesById[197] = "BIZ_BOT_3P_MESSAGING_ENABLED"] = 197;
            values[valuesById[198] = "REMINDER_SETUP_MESSAGE"] = 198;
            values[valuesById[199] = "REMINDER_SENT_MESSAGE"] = 199;
            values[valuesById[200] = "REMINDER_CANCEL_MESSAGE"] = 200;
            values[valuesById[201] = "BIZ_COEX_PRIVACY_INIT"] = 201;
            values[valuesById[202] = "BIZ_COEX_PRIVACY_TRANSITION"] = 202;
            values[valuesById[203] = "GROUP_DEACTIVATED"] = 203;
            values[valuesById[204] = "COMMUNITY_DEACTIVATE_SIBLING_GROUP"] = 204;
            values[valuesById[205] = "EVENT_UPDATED"] = 205;
            values[valuesById[206] = "EVENT_CANCELED"] = 206;
            values[valuesById[207] = "COMMUNITY_OWNER_UPDATED"] = 207;
            values[valuesById[208] = "COMMUNITY_SUB_GROUP_VISIBILITY_HIDDEN"] = 208;
            return values;
        })();

        /**
         * Status enum.
         * @name WAWeb.WebMessageInfo.Status
         * @enum {number}
         * @property {number} ERROR=0 ERROR value
         * @property {number} PENDING=1 PENDING value
         * @property {number} SERVER_ACK=2 SERVER_ACK value
         * @property {number} DELIVERY_ACK=3 DELIVERY_ACK value
         * @property {number} READ=4 READ value
         * @property {number} PLAYED=5 PLAYED value
         */
        WebMessageInfo.Status = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "ERROR"] = 0;
            values[valuesById[1] = "PENDING"] = 1;
            values[valuesById[2] = "SERVER_ACK"] = 2;
            values[valuesById[3] = "DELIVERY_ACK"] = 3;
            values[valuesById[4] = "READ"] = 4;
            values[valuesById[5] = "PLAYED"] = 5;
            return values;
        })();

        return WebMessageInfo;
    })();

    WAWeb.PaymentInfo = (function() {

        /**
         * Properties of a PaymentInfo.
         * @memberof WAWeb
         * @interface IPaymentInfo
         * @property {WAWeb.PaymentInfo.Currency|null} [currencyDeprecated] PaymentInfo currencyDeprecated
         * @property {number|Long|null} [amount1000] PaymentInfo amount1000
         * @property {string|null} [receiverJID] PaymentInfo receiverJID
         * @property {WAWeb.PaymentInfo.Status|null} [status] PaymentInfo status
         * @property {number|Long|null} [transactionTimestamp] PaymentInfo transactionTimestamp
         * @property {WAProtocol.IMessageKey|null} [requestMessageKey] PaymentInfo requestMessageKey
         * @property {number|Long|null} [expiryTimestamp] PaymentInfo expiryTimestamp
         * @property {boolean|null} [futureproofed] PaymentInfo futureproofed
         * @property {string|null} [currency] PaymentInfo currency
         * @property {WAWeb.PaymentInfo.TxnStatus|null} [txnStatus] PaymentInfo txnStatus
         * @property {boolean|null} [useNoviFiatFormat] PaymentInfo useNoviFiatFormat
         * @property {WAE2E.IMoney|null} [primaryAmount] PaymentInfo primaryAmount
         * @property {WAE2E.IMoney|null} [exchangeAmount] PaymentInfo exchangeAmount
         */

        /**
         * Constructs a new PaymentInfo.
         * @memberof WAWeb
         * @classdesc Represents a PaymentInfo.
         * @implements IPaymentInfo
         * @constructor
         * @param {WAWeb.IPaymentInfo=} [properties] Properties to set
         */
        function PaymentInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PaymentInfo currencyDeprecated.
         * @member {WAWeb.PaymentInfo.Currency} currencyDeprecated
         * @memberof WAWeb.PaymentInfo
         * @instance
         */
        PaymentInfo.prototype.currencyDeprecated = 0;

        /**
         * PaymentInfo amount1000.
         * @member {number|Long} amount1000
         * @memberof WAWeb.PaymentInfo
         * @instance
         */
        PaymentInfo.prototype.amount1000 = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * PaymentInfo receiverJID.
         * @member {string} receiverJID
         * @memberof WAWeb.PaymentInfo
         * @instance
         */
        PaymentInfo.prototype.receiverJID = "";

        /**
         * PaymentInfo status.
         * @member {WAWeb.PaymentInfo.Status} status
         * @memberof WAWeb.PaymentInfo
         * @instance
         */
        PaymentInfo.prototype.status = 0;

        /**
         * PaymentInfo transactionTimestamp.
         * @member {number|Long} transactionTimestamp
         * @memberof WAWeb.PaymentInfo
         * @instance
         */
        PaymentInfo.prototype.transactionTimestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * PaymentInfo requestMessageKey.
         * @member {WAProtocol.IMessageKey|null|undefined} requestMessageKey
         * @memberof WAWeb.PaymentInfo
         * @instance
         */
        PaymentInfo.prototype.requestMessageKey = null;

        /**
         * PaymentInfo expiryTimestamp.
         * @member {number|Long} expiryTimestamp
         * @memberof WAWeb.PaymentInfo
         * @instance
         */
        PaymentInfo.prototype.expiryTimestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * PaymentInfo futureproofed.
         * @member {boolean} futureproofed
         * @memberof WAWeb.PaymentInfo
         * @instance
         */
        PaymentInfo.prototype.futureproofed = false;

        /**
         * PaymentInfo currency.
         * @member {string} currency
         * @memberof WAWeb.PaymentInfo
         * @instance
         */
        PaymentInfo.prototype.currency = "";

        /**
         * PaymentInfo txnStatus.
         * @member {WAWeb.PaymentInfo.TxnStatus} txnStatus
         * @memberof WAWeb.PaymentInfo
         * @instance
         */
        PaymentInfo.prototype.txnStatus = 0;

        /**
         * PaymentInfo useNoviFiatFormat.
         * @member {boolean} useNoviFiatFormat
         * @memberof WAWeb.PaymentInfo
         * @instance
         */
        PaymentInfo.prototype.useNoviFiatFormat = false;

        /**
         * PaymentInfo primaryAmount.
         * @member {WAE2E.IMoney|null|undefined} primaryAmount
         * @memberof WAWeb.PaymentInfo
         * @instance
         */
        PaymentInfo.prototype.primaryAmount = null;

        /**
         * PaymentInfo exchangeAmount.
         * @member {WAE2E.IMoney|null|undefined} exchangeAmount
         * @memberof WAWeb.PaymentInfo
         * @instance
         */
        PaymentInfo.prototype.exchangeAmount = null;

        /**
         * Creates a new PaymentInfo instance using the specified properties.
         * @function create
         * @memberof WAWeb.PaymentInfo
         * @static
         * @param {WAWeb.IPaymentInfo=} [properties] Properties to set
         * @returns {WAWeb.PaymentInfo} PaymentInfo instance
         */
        PaymentInfo.create = function create(properties) {
            return new PaymentInfo(properties);
        };

        /**
         * Encodes the specified PaymentInfo message. Does not implicitly {@link WAWeb.PaymentInfo.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.PaymentInfo
         * @static
         * @param {WAWeb.IPaymentInfo} message PaymentInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PaymentInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.currencyDeprecated != null && Object.hasOwnProperty.call(message, "currencyDeprecated"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.currencyDeprecated);
            if (message.amount1000 != null && Object.hasOwnProperty.call(message, "amount1000"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.amount1000);
            if (message.receiverJID != null && Object.hasOwnProperty.call(message, "receiverJID"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.receiverJID);
            if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.status);
            if (message.transactionTimestamp != null && Object.hasOwnProperty.call(message, "transactionTimestamp"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.transactionTimestamp);
            if (message.requestMessageKey != null && Object.hasOwnProperty.call(message, "requestMessageKey"))
                $root.WAProtocol.MessageKey.encode(message.requestMessageKey, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.expiryTimestamp != null && Object.hasOwnProperty.call(message, "expiryTimestamp"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.expiryTimestamp);
            if (message.futureproofed != null && Object.hasOwnProperty.call(message, "futureproofed"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.futureproofed);
            if (message.currency != null && Object.hasOwnProperty.call(message, "currency"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.currency);
            if (message.txnStatus != null && Object.hasOwnProperty.call(message, "txnStatus"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.txnStatus);
            if (message.useNoviFiatFormat != null && Object.hasOwnProperty.call(message, "useNoviFiatFormat"))
                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.useNoviFiatFormat);
            if (message.primaryAmount != null && Object.hasOwnProperty.call(message, "primaryAmount"))
                $root.WAE2E.Money.encode(message.primaryAmount, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.exchangeAmount != null && Object.hasOwnProperty.call(message, "exchangeAmount"))
                $root.WAE2E.Money.encode(message.exchangeAmount, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified PaymentInfo message, length delimited. Does not implicitly {@link WAWeb.PaymentInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.PaymentInfo
         * @static
         * @param {WAWeb.IPaymentInfo} message PaymentInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PaymentInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PaymentInfo message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.PaymentInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.PaymentInfo} PaymentInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PaymentInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.PaymentInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.currencyDeprecated = reader.int32();
                        break;
                    }
                case 2: {
                        message.amount1000 = reader.uint64();
                        break;
                    }
                case 3: {
                        message.receiverJID = reader.string();
                        break;
                    }
                case 4: {
                        message.status = reader.int32();
                        break;
                    }
                case 5: {
                        message.transactionTimestamp = reader.uint64();
                        break;
                    }
                case 6: {
                        message.requestMessageKey = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                        break;
                    }
                case 7: {
                        message.expiryTimestamp = reader.uint64();
                        break;
                    }
                case 8: {
                        message.futureproofed = reader.bool();
                        break;
                    }
                case 9: {
                        message.currency = reader.string();
                        break;
                    }
                case 10: {
                        message.txnStatus = reader.int32();
                        break;
                    }
                case 11: {
                        message.useNoviFiatFormat = reader.bool();
                        break;
                    }
                case 12: {
                        message.primaryAmount = $root.WAE2E.Money.decode(reader, reader.uint32());
                        break;
                    }
                case 13: {
                        message.exchangeAmount = $root.WAE2E.Money.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PaymentInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.PaymentInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.PaymentInfo} PaymentInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PaymentInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PaymentInfo message.
         * @function verify
         * @memberof WAWeb.PaymentInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PaymentInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.currencyDeprecated != null && message.hasOwnProperty("currencyDeprecated"))
                switch (message.currencyDeprecated) {
                default:
                    return "currencyDeprecated: enum value expected";
                case 0:
                case 1:
                    break;
                }
            if (message.amount1000 != null && message.hasOwnProperty("amount1000"))
                if (!$util.isInteger(message.amount1000) && !(message.amount1000 && $util.isInteger(message.amount1000.low) && $util.isInteger(message.amount1000.high)))
                    return "amount1000: integer|Long expected";
            if (message.receiverJID != null && message.hasOwnProperty("receiverJID"))
                if (!$util.isString(message.receiverJID))
                    return "receiverJID: string expected";
            if (message.status != null && message.hasOwnProperty("status"))
                switch (message.status) {
                default:
                    return "status: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
            if (message.transactionTimestamp != null && message.hasOwnProperty("transactionTimestamp"))
                if (!$util.isInteger(message.transactionTimestamp) && !(message.transactionTimestamp && $util.isInteger(message.transactionTimestamp.low) && $util.isInteger(message.transactionTimestamp.high)))
                    return "transactionTimestamp: integer|Long expected";
            if (message.requestMessageKey != null && message.hasOwnProperty("requestMessageKey")) {
                var error = $root.WAProtocol.MessageKey.verify(message.requestMessageKey);
                if (error)
                    return "requestMessageKey." + error;
            }
            if (message.expiryTimestamp != null && message.hasOwnProperty("expiryTimestamp"))
                if (!$util.isInteger(message.expiryTimestamp) && !(message.expiryTimestamp && $util.isInteger(message.expiryTimestamp.low) && $util.isInteger(message.expiryTimestamp.high)))
                    return "expiryTimestamp: integer|Long expected";
            if (message.futureproofed != null && message.hasOwnProperty("futureproofed"))
                if (typeof message.futureproofed !== "boolean")
                    return "futureproofed: boolean expected";
            if (message.currency != null && message.hasOwnProperty("currency"))
                if (!$util.isString(message.currency))
                    return "currency: string expected";
            if (message.txnStatus != null && message.hasOwnProperty("txnStatus"))
                switch (message.txnStatus) {
                default:
                    return "txnStatus: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                    break;
                }
            if (message.useNoviFiatFormat != null && message.hasOwnProperty("useNoviFiatFormat"))
                if (typeof message.useNoviFiatFormat !== "boolean")
                    return "useNoviFiatFormat: boolean expected";
            if (message.primaryAmount != null && message.hasOwnProperty("primaryAmount")) {
                var error = $root.WAE2E.Money.verify(message.primaryAmount);
                if (error)
                    return "primaryAmount." + error;
            }
            if (message.exchangeAmount != null && message.hasOwnProperty("exchangeAmount")) {
                var error = $root.WAE2E.Money.verify(message.exchangeAmount);
                if (error)
                    return "exchangeAmount." + error;
            }
            return null;
        };

        /**
         * Creates a PaymentInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.PaymentInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.PaymentInfo} PaymentInfo
         */
        PaymentInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.PaymentInfo)
                return object;
            var message = new $root.WAWeb.PaymentInfo();
            switch (object.currencyDeprecated) {
            default:
                if (typeof object.currencyDeprecated === "number") {
                    message.currencyDeprecated = object.currencyDeprecated;
                    break;
                }
                break;
            case "UNKNOWN_CURRENCY":
            case 0:
                message.currencyDeprecated = 0;
                break;
            case "INR":
            case 1:
                message.currencyDeprecated = 1;
                break;
            }
            if (object.amount1000 != null)
                if ($util.Long)
                    (message.amount1000 = $util.Long.fromValue(object.amount1000)).unsigned = true;
                else if (typeof object.amount1000 === "string")
                    message.amount1000 = parseInt(object.amount1000, 10);
                else if (typeof object.amount1000 === "number")
                    message.amount1000 = object.amount1000;
                else if (typeof object.amount1000 === "object")
                    message.amount1000 = new $util.LongBits(object.amount1000.low >>> 0, object.amount1000.high >>> 0).toNumber(true);
            if (object.receiverJID != null)
                message.receiverJID = String(object.receiverJID);
            switch (object.status) {
            default:
                if (typeof object.status === "number") {
                    message.status = object.status;
                    break;
                }
                break;
            case "UNKNOWN_STATUS":
            case 0:
                message.status = 0;
                break;
            case "PROCESSING":
            case 1:
                message.status = 1;
                break;
            case "SENT":
            case 2:
                message.status = 2;
                break;
            case "NEED_TO_ACCEPT":
            case 3:
                message.status = 3;
                break;
            case "COMPLETE":
            case 4:
                message.status = 4;
                break;
            case "COULD_NOT_COMPLETE":
            case 5:
                message.status = 5;
                break;
            case "REFUNDED":
            case 6:
                message.status = 6;
                break;
            case "EXPIRED":
            case 7:
                message.status = 7;
                break;
            case "REJECTED":
            case 8:
                message.status = 8;
                break;
            case "CANCELLED":
            case 9:
                message.status = 9;
                break;
            case "WAITING_FOR_PAYER":
            case 10:
                message.status = 10;
                break;
            case "WAITING":
            case 11:
                message.status = 11;
                break;
            }
            if (object.transactionTimestamp != null)
                if ($util.Long)
                    (message.transactionTimestamp = $util.Long.fromValue(object.transactionTimestamp)).unsigned = true;
                else if (typeof object.transactionTimestamp === "string")
                    message.transactionTimestamp = parseInt(object.transactionTimestamp, 10);
                else if (typeof object.transactionTimestamp === "number")
                    message.transactionTimestamp = object.transactionTimestamp;
                else if (typeof object.transactionTimestamp === "object")
                    message.transactionTimestamp = new $util.LongBits(object.transactionTimestamp.low >>> 0, object.transactionTimestamp.high >>> 0).toNumber(true);
            if (object.requestMessageKey != null) {
                if (typeof object.requestMessageKey !== "object")
                    throw TypeError(".WAWeb.PaymentInfo.requestMessageKey: object expected");
                message.requestMessageKey = $root.WAProtocol.MessageKey.fromObject(object.requestMessageKey);
            }
            if (object.expiryTimestamp != null)
                if ($util.Long)
                    (message.expiryTimestamp = $util.Long.fromValue(object.expiryTimestamp)).unsigned = true;
                else if (typeof object.expiryTimestamp === "string")
                    message.expiryTimestamp = parseInt(object.expiryTimestamp, 10);
                else if (typeof object.expiryTimestamp === "number")
                    message.expiryTimestamp = object.expiryTimestamp;
                else if (typeof object.expiryTimestamp === "object")
                    message.expiryTimestamp = new $util.LongBits(object.expiryTimestamp.low >>> 0, object.expiryTimestamp.high >>> 0).toNumber(true);
            if (object.futureproofed != null)
                message.futureproofed = Boolean(object.futureproofed);
            if (object.currency != null)
                message.currency = String(object.currency);
            switch (object.txnStatus) {
            default:
                if (typeof object.txnStatus === "number") {
                    message.txnStatus = object.txnStatus;
                    break;
                }
                break;
            case "UNKNOWN":
            case 0:
                message.txnStatus = 0;
                break;
            case "PENDING_SETUP":
            case 1:
                message.txnStatus = 1;
                break;
            case "PENDING_RECEIVER_SETUP":
            case 2:
                message.txnStatus = 2;
                break;
            case "INIT":
            case 3:
                message.txnStatus = 3;
                break;
            case "SUCCESS":
            case 4:
                message.txnStatus = 4;
                break;
            case "COMPLETED":
            case 5:
                message.txnStatus = 5;
                break;
            case "FAILED":
            case 6:
                message.txnStatus = 6;
                break;
            case "FAILED_RISK":
            case 7:
                message.txnStatus = 7;
                break;
            case "FAILED_PROCESSING":
            case 8:
                message.txnStatus = 8;
                break;
            case "FAILED_RECEIVER_PROCESSING":
            case 9:
                message.txnStatus = 9;
                break;
            case "FAILED_DA":
            case 10:
                message.txnStatus = 10;
                break;
            case "FAILED_DA_FINAL":
            case 11:
                message.txnStatus = 11;
                break;
            case "REFUNDED_TXN":
            case 12:
                message.txnStatus = 12;
                break;
            case "REFUND_FAILED":
            case 13:
                message.txnStatus = 13;
                break;
            case "REFUND_FAILED_PROCESSING":
            case 14:
                message.txnStatus = 14;
                break;
            case "REFUND_FAILED_DA":
            case 15:
                message.txnStatus = 15;
                break;
            case "EXPIRED_TXN":
            case 16:
                message.txnStatus = 16;
                break;
            case "AUTH_CANCELED":
            case 17:
                message.txnStatus = 17;
                break;
            case "AUTH_CANCEL_FAILED_PROCESSING":
            case 18:
                message.txnStatus = 18;
                break;
            case "AUTH_CANCEL_FAILED":
            case 19:
                message.txnStatus = 19;
                break;
            case "COLLECT_INIT":
            case 20:
                message.txnStatus = 20;
                break;
            case "COLLECT_SUCCESS":
            case 21:
                message.txnStatus = 21;
                break;
            case "COLLECT_FAILED":
            case 22:
                message.txnStatus = 22;
                break;
            case "COLLECT_FAILED_RISK":
            case 23:
                message.txnStatus = 23;
                break;
            case "COLLECT_REJECTED":
            case 24:
                message.txnStatus = 24;
                break;
            case "COLLECT_EXPIRED":
            case 25:
                message.txnStatus = 25;
                break;
            case "COLLECT_CANCELED":
            case 26:
                message.txnStatus = 26;
                break;
            case "COLLECT_CANCELLING":
            case 27:
                message.txnStatus = 27;
                break;
            case "IN_REVIEW":
            case 28:
                message.txnStatus = 28;
                break;
            case "REVERSAL_SUCCESS":
            case 29:
                message.txnStatus = 29;
                break;
            case "REVERSAL_PENDING":
            case 30:
                message.txnStatus = 30;
                break;
            case "REFUND_PENDING":
            case 31:
                message.txnStatus = 31;
                break;
            }
            if (object.useNoviFiatFormat != null)
                message.useNoviFiatFormat = Boolean(object.useNoviFiatFormat);
            if (object.primaryAmount != null) {
                if (typeof object.primaryAmount !== "object")
                    throw TypeError(".WAWeb.PaymentInfo.primaryAmount: object expected");
                message.primaryAmount = $root.WAE2E.Money.fromObject(object.primaryAmount);
            }
            if (object.exchangeAmount != null) {
                if (typeof object.exchangeAmount !== "object")
                    throw TypeError(".WAWeb.PaymentInfo.exchangeAmount: object expected");
                message.exchangeAmount = $root.WAE2E.Money.fromObject(object.exchangeAmount);
            }
            return message;
        };

        /**
         * Creates a plain object from a PaymentInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.PaymentInfo
         * @static
         * @param {WAWeb.PaymentInfo} message PaymentInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PaymentInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.currencyDeprecated = options.enums === String ? "UNKNOWN_CURRENCY" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.amount1000 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.amount1000 = options.longs === String ? "0" : 0;
                object.receiverJID = "";
                object.status = options.enums === String ? "UNKNOWN_STATUS" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.transactionTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.transactionTimestamp = options.longs === String ? "0" : 0;
                object.requestMessageKey = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.expiryTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.expiryTimestamp = options.longs === String ? "0" : 0;
                object.futureproofed = false;
                object.currency = "";
                object.txnStatus = options.enums === String ? "UNKNOWN" : 0;
                object.useNoviFiatFormat = false;
                object.primaryAmount = null;
                object.exchangeAmount = null;
            }
            if (message.currencyDeprecated != null && message.hasOwnProperty("currencyDeprecated"))
                object.currencyDeprecated = options.enums === String ? $root.WAWeb.PaymentInfo.Currency[message.currencyDeprecated] === undefined ? message.currencyDeprecated : $root.WAWeb.PaymentInfo.Currency[message.currencyDeprecated] : message.currencyDeprecated;
            if (message.amount1000 != null && message.hasOwnProperty("amount1000"))
                if (typeof message.amount1000 === "number")
                    object.amount1000 = options.longs === String ? String(message.amount1000) : message.amount1000;
                else
                    object.amount1000 = options.longs === String ? $util.Long.prototype.toString.call(message.amount1000) : options.longs === Number ? new $util.LongBits(message.amount1000.low >>> 0, message.amount1000.high >>> 0).toNumber(true) : message.amount1000;
            if (message.receiverJID != null && message.hasOwnProperty("receiverJID"))
                object.receiverJID = message.receiverJID;
            if (message.status != null && message.hasOwnProperty("status"))
                object.status = options.enums === String ? $root.WAWeb.PaymentInfo.Status[message.status] === undefined ? message.status : $root.WAWeb.PaymentInfo.Status[message.status] : message.status;
            if (message.transactionTimestamp != null && message.hasOwnProperty("transactionTimestamp"))
                if (typeof message.transactionTimestamp === "number")
                    object.transactionTimestamp = options.longs === String ? String(message.transactionTimestamp) : message.transactionTimestamp;
                else
                    object.transactionTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.transactionTimestamp) : options.longs === Number ? new $util.LongBits(message.transactionTimestamp.low >>> 0, message.transactionTimestamp.high >>> 0).toNumber(true) : message.transactionTimestamp;
            if (message.requestMessageKey != null && message.hasOwnProperty("requestMessageKey"))
                object.requestMessageKey = $root.WAProtocol.MessageKey.toObject(message.requestMessageKey, options);
            if (message.expiryTimestamp != null && message.hasOwnProperty("expiryTimestamp"))
                if (typeof message.expiryTimestamp === "number")
                    object.expiryTimestamp = options.longs === String ? String(message.expiryTimestamp) : message.expiryTimestamp;
                else
                    object.expiryTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.expiryTimestamp) : options.longs === Number ? new $util.LongBits(message.expiryTimestamp.low >>> 0, message.expiryTimestamp.high >>> 0).toNumber(true) : message.expiryTimestamp;
            if (message.futureproofed != null && message.hasOwnProperty("futureproofed"))
                object.futureproofed = message.futureproofed;
            if (message.currency != null && message.hasOwnProperty("currency"))
                object.currency = message.currency;
            if (message.txnStatus != null && message.hasOwnProperty("txnStatus"))
                object.txnStatus = options.enums === String ? $root.WAWeb.PaymentInfo.TxnStatus[message.txnStatus] === undefined ? message.txnStatus : $root.WAWeb.PaymentInfo.TxnStatus[message.txnStatus] : message.txnStatus;
            if (message.useNoviFiatFormat != null && message.hasOwnProperty("useNoviFiatFormat"))
                object.useNoviFiatFormat = message.useNoviFiatFormat;
            if (message.primaryAmount != null && message.hasOwnProperty("primaryAmount"))
                object.primaryAmount = $root.WAE2E.Money.toObject(message.primaryAmount, options);
            if (message.exchangeAmount != null && message.hasOwnProperty("exchangeAmount"))
                object.exchangeAmount = $root.WAE2E.Money.toObject(message.exchangeAmount, options);
            return object;
        };

        /**
         * Converts this PaymentInfo to JSON.
         * @function toJSON
         * @memberof WAWeb.PaymentInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PaymentInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for PaymentInfo
         * @function getTypeUrl
         * @memberof WAWeb.PaymentInfo
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        PaymentInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.PaymentInfo";
        };

        /**
         * TxnStatus enum.
         * @name WAWeb.PaymentInfo.TxnStatus
         * @enum {number}
         * @property {number} UNKNOWN=0 UNKNOWN value
         * @property {number} PENDING_SETUP=1 PENDING_SETUP value
         * @property {number} PENDING_RECEIVER_SETUP=2 PENDING_RECEIVER_SETUP value
         * @property {number} INIT=3 INIT value
         * @property {number} SUCCESS=4 SUCCESS value
         * @property {number} COMPLETED=5 COMPLETED value
         * @property {number} FAILED=6 FAILED value
         * @property {number} FAILED_RISK=7 FAILED_RISK value
         * @property {number} FAILED_PROCESSING=8 FAILED_PROCESSING value
         * @property {number} FAILED_RECEIVER_PROCESSING=9 FAILED_RECEIVER_PROCESSING value
         * @property {number} FAILED_DA=10 FAILED_DA value
         * @property {number} FAILED_DA_FINAL=11 FAILED_DA_FINAL value
         * @property {number} REFUNDED_TXN=12 REFUNDED_TXN value
         * @property {number} REFUND_FAILED=13 REFUND_FAILED value
         * @property {number} REFUND_FAILED_PROCESSING=14 REFUND_FAILED_PROCESSING value
         * @property {number} REFUND_FAILED_DA=15 REFUND_FAILED_DA value
         * @property {number} EXPIRED_TXN=16 EXPIRED_TXN value
         * @property {number} AUTH_CANCELED=17 AUTH_CANCELED value
         * @property {number} AUTH_CANCEL_FAILED_PROCESSING=18 AUTH_CANCEL_FAILED_PROCESSING value
         * @property {number} AUTH_CANCEL_FAILED=19 AUTH_CANCEL_FAILED value
         * @property {number} COLLECT_INIT=20 COLLECT_INIT value
         * @property {number} COLLECT_SUCCESS=21 COLLECT_SUCCESS value
         * @property {number} COLLECT_FAILED=22 COLLECT_FAILED value
         * @property {number} COLLECT_FAILED_RISK=23 COLLECT_FAILED_RISK value
         * @property {number} COLLECT_REJECTED=24 COLLECT_REJECTED value
         * @property {number} COLLECT_EXPIRED=25 COLLECT_EXPIRED value
         * @property {number} COLLECT_CANCELED=26 COLLECT_CANCELED value
         * @property {number} COLLECT_CANCELLING=27 COLLECT_CANCELLING value
         * @property {number} IN_REVIEW=28 IN_REVIEW value
         * @property {number} REVERSAL_SUCCESS=29 REVERSAL_SUCCESS value
         * @property {number} REVERSAL_PENDING=30 REVERSAL_PENDING value
         * @property {number} REFUND_PENDING=31 REFUND_PENDING value
         */
        PaymentInfo.TxnStatus = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "UNKNOWN"] = 0;
            values[valuesById[1] = "PENDING_SETUP"] = 1;
            values[valuesById[2] = "PENDING_RECEIVER_SETUP"] = 2;
            values[valuesById[3] = "INIT"] = 3;
            values[valuesById[4] = "SUCCESS"] = 4;
            values[valuesById[5] = "COMPLETED"] = 5;
            values[valuesById[6] = "FAILED"] = 6;
            values[valuesById[7] = "FAILED_RISK"] = 7;
            values[valuesById[8] = "FAILED_PROCESSING"] = 8;
            values[valuesById[9] = "FAILED_RECEIVER_PROCESSING"] = 9;
            values[valuesById[10] = "FAILED_DA"] = 10;
            values[valuesById[11] = "FAILED_DA_FINAL"] = 11;
            values[valuesById[12] = "REFUNDED_TXN"] = 12;
            values[valuesById[13] = "REFUND_FAILED"] = 13;
            values[valuesById[14] = "REFUND_FAILED_PROCESSING"] = 14;
            values[valuesById[15] = "REFUND_FAILED_DA"] = 15;
            values[valuesById[16] = "EXPIRED_TXN"] = 16;
            values[valuesById[17] = "AUTH_CANCELED"] = 17;
            values[valuesById[18] = "AUTH_CANCEL_FAILED_PROCESSING"] = 18;
            values[valuesById[19] = "AUTH_CANCEL_FAILED"] = 19;
            values[valuesById[20] = "COLLECT_INIT"] = 20;
            values[valuesById[21] = "COLLECT_SUCCESS"] = 21;
            values[valuesById[22] = "COLLECT_FAILED"] = 22;
            values[valuesById[23] = "COLLECT_FAILED_RISK"] = 23;
            values[valuesById[24] = "COLLECT_REJECTED"] = 24;
            values[valuesById[25] = "COLLECT_EXPIRED"] = 25;
            values[valuesById[26] = "COLLECT_CANCELED"] = 26;
            values[valuesById[27] = "COLLECT_CANCELLING"] = 27;
            values[valuesById[28] = "IN_REVIEW"] = 28;
            values[valuesById[29] = "REVERSAL_SUCCESS"] = 29;
            values[valuesById[30] = "REVERSAL_PENDING"] = 30;
            values[valuesById[31] = "REFUND_PENDING"] = 31;
            return values;
        })();

        /**
         * Status enum.
         * @name WAWeb.PaymentInfo.Status
         * @enum {number}
         * @property {number} UNKNOWN_STATUS=0 UNKNOWN_STATUS value
         * @property {number} PROCESSING=1 PROCESSING value
         * @property {number} SENT=2 SENT value
         * @property {number} NEED_TO_ACCEPT=3 NEED_TO_ACCEPT value
         * @property {number} COMPLETE=4 COMPLETE value
         * @property {number} COULD_NOT_COMPLETE=5 COULD_NOT_COMPLETE value
         * @property {number} REFUNDED=6 REFUNDED value
         * @property {number} EXPIRED=7 EXPIRED value
         * @property {number} REJECTED=8 REJECTED value
         * @property {number} CANCELLED=9 CANCELLED value
         * @property {number} WAITING_FOR_PAYER=10 WAITING_FOR_PAYER value
         * @property {number} WAITING=11 WAITING value
         */
        PaymentInfo.Status = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "UNKNOWN_STATUS"] = 0;
            values[valuesById[1] = "PROCESSING"] = 1;
            values[valuesById[2] = "SENT"] = 2;
            values[valuesById[3] = "NEED_TO_ACCEPT"] = 3;
            values[valuesById[4] = "COMPLETE"] = 4;
            values[valuesById[5] = "COULD_NOT_COMPLETE"] = 5;
            values[valuesById[6] = "REFUNDED"] = 6;
            values[valuesById[7] = "EXPIRED"] = 7;
            values[valuesById[8] = "REJECTED"] = 8;
            values[valuesById[9] = "CANCELLED"] = 9;
            values[valuesById[10] = "WAITING_FOR_PAYER"] = 10;
            values[valuesById[11] = "WAITING"] = 11;
            return values;
        })();

        /**
         * Currency enum.
         * @name WAWeb.PaymentInfo.Currency
         * @enum {number}
         * @property {number} UNKNOWN_CURRENCY=0 UNKNOWN_CURRENCY value
         * @property {number} INR=1 INR value
         */
        PaymentInfo.Currency = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "UNKNOWN_CURRENCY"] = 0;
            values[valuesById[1] = "INR"] = 1;
            return values;
        })();

        return PaymentInfo;
    })();

    WAWeb.WebFeatures = (function() {

        /**
         * Properties of a WebFeatures.
         * @memberof WAWeb
         * @interface IWebFeatures
         * @property {WAWeb.WebFeatures.Flag|null} [labelsDisplay] WebFeatures labelsDisplay
         * @property {WAWeb.WebFeatures.Flag|null} [voipIndividualOutgoing] WebFeatures voipIndividualOutgoing
         * @property {WAWeb.WebFeatures.Flag|null} [groupsV3] WebFeatures groupsV3
         * @property {WAWeb.WebFeatures.Flag|null} [groupsV3Create] WebFeatures groupsV3Create
         * @property {WAWeb.WebFeatures.Flag|null} [changeNumberV2] WebFeatures changeNumberV2
         * @property {WAWeb.WebFeatures.Flag|null} [queryStatusV3Thumbnail] WebFeatures queryStatusV3Thumbnail
         * @property {WAWeb.WebFeatures.Flag|null} [liveLocations] WebFeatures liveLocations
         * @property {WAWeb.WebFeatures.Flag|null} [queryVname] WebFeatures queryVname
         * @property {WAWeb.WebFeatures.Flag|null} [voipIndividualIncoming] WebFeatures voipIndividualIncoming
         * @property {WAWeb.WebFeatures.Flag|null} [quickRepliesQuery] WebFeatures quickRepliesQuery
         * @property {WAWeb.WebFeatures.Flag|null} [payments] WebFeatures payments
         * @property {WAWeb.WebFeatures.Flag|null} [stickerPackQuery] WebFeatures stickerPackQuery
         * @property {WAWeb.WebFeatures.Flag|null} [liveLocationsFinal] WebFeatures liveLocationsFinal
         * @property {WAWeb.WebFeatures.Flag|null} [labelsEdit] WebFeatures labelsEdit
         * @property {WAWeb.WebFeatures.Flag|null} [mediaUpload] WebFeatures mediaUpload
         * @property {WAWeb.WebFeatures.Flag|null} [mediaUploadRichQuickReplies] WebFeatures mediaUploadRichQuickReplies
         * @property {WAWeb.WebFeatures.Flag|null} [vnameV2] WebFeatures vnameV2
         * @property {WAWeb.WebFeatures.Flag|null} [videoPlaybackURL] WebFeatures videoPlaybackURL
         * @property {WAWeb.WebFeatures.Flag|null} [statusRanking] WebFeatures statusRanking
         * @property {WAWeb.WebFeatures.Flag|null} [voipIndividualVideo] WebFeatures voipIndividualVideo
         * @property {WAWeb.WebFeatures.Flag|null} [thirdPartyStickers] WebFeatures thirdPartyStickers
         * @property {WAWeb.WebFeatures.Flag|null} [frequentlyForwardedSetting] WebFeatures frequentlyForwardedSetting
         * @property {WAWeb.WebFeatures.Flag|null} [groupsV4JoinPermission] WebFeatures groupsV4JoinPermission
         * @property {WAWeb.WebFeatures.Flag|null} [recentStickers] WebFeatures recentStickers
         * @property {WAWeb.WebFeatures.Flag|null} [catalog] WebFeatures catalog
         * @property {WAWeb.WebFeatures.Flag|null} [starredStickers] WebFeatures starredStickers
         * @property {WAWeb.WebFeatures.Flag|null} [voipGroupCall] WebFeatures voipGroupCall
         * @property {WAWeb.WebFeatures.Flag|null} [templateMessage] WebFeatures templateMessage
         * @property {WAWeb.WebFeatures.Flag|null} [templateMessageInteractivity] WebFeatures templateMessageInteractivity
         * @property {WAWeb.WebFeatures.Flag|null} [ephemeralMessages] WebFeatures ephemeralMessages
         * @property {WAWeb.WebFeatures.Flag|null} [e2ENotificationSync] WebFeatures e2ENotificationSync
         * @property {WAWeb.WebFeatures.Flag|null} [recentStickersV2] WebFeatures recentStickersV2
         * @property {WAWeb.WebFeatures.Flag|null} [recentStickersV3] WebFeatures recentStickersV3
         * @property {WAWeb.WebFeatures.Flag|null} [userNotice] WebFeatures userNotice
         * @property {WAWeb.WebFeatures.Flag|null} [support] WebFeatures support
         * @property {WAWeb.WebFeatures.Flag|null} [groupUiiCleanup] WebFeatures groupUiiCleanup
         * @property {WAWeb.WebFeatures.Flag|null} [groupDogfoodingInternalOnly] WebFeatures groupDogfoodingInternalOnly
         * @property {WAWeb.WebFeatures.Flag|null} [settingsSync] WebFeatures settingsSync
         * @property {WAWeb.WebFeatures.Flag|null} [archiveV2] WebFeatures archiveV2
         * @property {WAWeb.WebFeatures.Flag|null} [ephemeralAllowGroupMembers] WebFeatures ephemeralAllowGroupMembers
         * @property {WAWeb.WebFeatures.Flag|null} [ephemeral24HDuration] WebFeatures ephemeral24HDuration
         * @property {WAWeb.WebFeatures.Flag|null} [mdForceUpgrade] WebFeatures mdForceUpgrade
         * @property {WAWeb.WebFeatures.Flag|null} [disappearingMode] WebFeatures disappearingMode
         * @property {WAWeb.WebFeatures.Flag|null} [externalMdOptInAvailable] WebFeatures externalMdOptInAvailable
         * @property {WAWeb.WebFeatures.Flag|null} [noDeleteMessageTimeLimit] WebFeatures noDeleteMessageTimeLimit
         */

        /**
         * Constructs a new WebFeatures.
         * @memberof WAWeb
         * @classdesc Represents a WebFeatures.
         * @implements IWebFeatures
         * @constructor
         * @param {WAWeb.IWebFeatures=} [properties] Properties to set
         */
        function WebFeatures(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * WebFeatures labelsDisplay.
         * @member {WAWeb.WebFeatures.Flag} labelsDisplay
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.labelsDisplay = 0;

        /**
         * WebFeatures voipIndividualOutgoing.
         * @member {WAWeb.WebFeatures.Flag} voipIndividualOutgoing
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.voipIndividualOutgoing = 0;

        /**
         * WebFeatures groupsV3.
         * @member {WAWeb.WebFeatures.Flag} groupsV3
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.groupsV3 = 0;

        /**
         * WebFeatures groupsV3Create.
         * @member {WAWeb.WebFeatures.Flag} groupsV3Create
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.groupsV3Create = 0;

        /**
         * WebFeatures changeNumberV2.
         * @member {WAWeb.WebFeatures.Flag} changeNumberV2
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.changeNumberV2 = 0;

        /**
         * WebFeatures queryStatusV3Thumbnail.
         * @member {WAWeb.WebFeatures.Flag} queryStatusV3Thumbnail
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.queryStatusV3Thumbnail = 0;

        /**
         * WebFeatures liveLocations.
         * @member {WAWeb.WebFeatures.Flag} liveLocations
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.liveLocations = 0;

        /**
         * WebFeatures queryVname.
         * @member {WAWeb.WebFeatures.Flag} queryVname
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.queryVname = 0;

        /**
         * WebFeatures voipIndividualIncoming.
         * @member {WAWeb.WebFeatures.Flag} voipIndividualIncoming
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.voipIndividualIncoming = 0;

        /**
         * WebFeatures quickRepliesQuery.
         * @member {WAWeb.WebFeatures.Flag} quickRepliesQuery
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.quickRepliesQuery = 0;

        /**
         * WebFeatures payments.
         * @member {WAWeb.WebFeatures.Flag} payments
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.payments = 0;

        /**
         * WebFeatures stickerPackQuery.
         * @member {WAWeb.WebFeatures.Flag} stickerPackQuery
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.stickerPackQuery = 0;

        /**
         * WebFeatures liveLocationsFinal.
         * @member {WAWeb.WebFeatures.Flag} liveLocationsFinal
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.liveLocationsFinal = 0;

        /**
         * WebFeatures labelsEdit.
         * @member {WAWeb.WebFeatures.Flag} labelsEdit
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.labelsEdit = 0;

        /**
         * WebFeatures mediaUpload.
         * @member {WAWeb.WebFeatures.Flag} mediaUpload
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.mediaUpload = 0;

        /**
         * WebFeatures mediaUploadRichQuickReplies.
         * @member {WAWeb.WebFeatures.Flag} mediaUploadRichQuickReplies
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.mediaUploadRichQuickReplies = 0;

        /**
         * WebFeatures vnameV2.
         * @member {WAWeb.WebFeatures.Flag} vnameV2
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.vnameV2 = 0;

        /**
         * WebFeatures videoPlaybackURL.
         * @member {WAWeb.WebFeatures.Flag} videoPlaybackURL
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.videoPlaybackURL = 0;

        /**
         * WebFeatures statusRanking.
         * @member {WAWeb.WebFeatures.Flag} statusRanking
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.statusRanking = 0;

        /**
         * WebFeatures voipIndividualVideo.
         * @member {WAWeb.WebFeatures.Flag} voipIndividualVideo
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.voipIndividualVideo = 0;

        /**
         * WebFeatures thirdPartyStickers.
         * @member {WAWeb.WebFeatures.Flag} thirdPartyStickers
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.thirdPartyStickers = 0;

        /**
         * WebFeatures frequentlyForwardedSetting.
         * @member {WAWeb.WebFeatures.Flag} frequentlyForwardedSetting
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.frequentlyForwardedSetting = 0;

        /**
         * WebFeatures groupsV4JoinPermission.
         * @member {WAWeb.WebFeatures.Flag} groupsV4JoinPermission
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.groupsV4JoinPermission = 0;

        /**
         * WebFeatures recentStickers.
         * @member {WAWeb.WebFeatures.Flag} recentStickers
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.recentStickers = 0;

        /**
         * WebFeatures catalog.
         * @member {WAWeb.WebFeatures.Flag} catalog
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.catalog = 0;

        /**
         * WebFeatures starredStickers.
         * @member {WAWeb.WebFeatures.Flag} starredStickers
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.starredStickers = 0;

        /**
         * WebFeatures voipGroupCall.
         * @member {WAWeb.WebFeatures.Flag} voipGroupCall
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.voipGroupCall = 0;

        /**
         * WebFeatures templateMessage.
         * @member {WAWeb.WebFeatures.Flag} templateMessage
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.templateMessage = 0;

        /**
         * WebFeatures templateMessageInteractivity.
         * @member {WAWeb.WebFeatures.Flag} templateMessageInteractivity
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.templateMessageInteractivity = 0;

        /**
         * WebFeatures ephemeralMessages.
         * @member {WAWeb.WebFeatures.Flag} ephemeralMessages
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.ephemeralMessages = 0;

        /**
         * WebFeatures e2ENotificationSync.
         * @member {WAWeb.WebFeatures.Flag} e2ENotificationSync
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.e2ENotificationSync = 0;

        /**
         * WebFeatures recentStickersV2.
         * @member {WAWeb.WebFeatures.Flag} recentStickersV2
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.recentStickersV2 = 0;

        /**
         * WebFeatures recentStickersV3.
         * @member {WAWeb.WebFeatures.Flag} recentStickersV3
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.recentStickersV3 = 0;

        /**
         * WebFeatures userNotice.
         * @member {WAWeb.WebFeatures.Flag} userNotice
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.userNotice = 0;

        /**
         * WebFeatures support.
         * @member {WAWeb.WebFeatures.Flag} support
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.support = 0;

        /**
         * WebFeatures groupUiiCleanup.
         * @member {WAWeb.WebFeatures.Flag} groupUiiCleanup
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.groupUiiCleanup = 0;

        /**
         * WebFeatures groupDogfoodingInternalOnly.
         * @member {WAWeb.WebFeatures.Flag} groupDogfoodingInternalOnly
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.groupDogfoodingInternalOnly = 0;

        /**
         * WebFeatures settingsSync.
         * @member {WAWeb.WebFeatures.Flag} settingsSync
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.settingsSync = 0;

        /**
         * WebFeatures archiveV2.
         * @member {WAWeb.WebFeatures.Flag} archiveV2
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.archiveV2 = 0;

        /**
         * WebFeatures ephemeralAllowGroupMembers.
         * @member {WAWeb.WebFeatures.Flag} ephemeralAllowGroupMembers
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.ephemeralAllowGroupMembers = 0;

        /**
         * WebFeatures ephemeral24HDuration.
         * @member {WAWeb.WebFeatures.Flag} ephemeral24HDuration
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.ephemeral24HDuration = 0;

        /**
         * WebFeatures mdForceUpgrade.
         * @member {WAWeb.WebFeatures.Flag} mdForceUpgrade
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.mdForceUpgrade = 0;

        /**
         * WebFeatures disappearingMode.
         * @member {WAWeb.WebFeatures.Flag} disappearingMode
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.disappearingMode = 0;

        /**
         * WebFeatures externalMdOptInAvailable.
         * @member {WAWeb.WebFeatures.Flag} externalMdOptInAvailable
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.externalMdOptInAvailable = 0;

        /**
         * WebFeatures noDeleteMessageTimeLimit.
         * @member {WAWeb.WebFeatures.Flag} noDeleteMessageTimeLimit
         * @memberof WAWeb.WebFeatures
         * @instance
         */
        WebFeatures.prototype.noDeleteMessageTimeLimit = 0;

        /**
         * Creates a new WebFeatures instance using the specified properties.
         * @function create
         * @memberof WAWeb.WebFeatures
         * @static
         * @param {WAWeb.IWebFeatures=} [properties] Properties to set
         * @returns {WAWeb.WebFeatures} WebFeatures instance
         */
        WebFeatures.create = function create(properties) {
            return new WebFeatures(properties);
        };

        /**
         * Encodes the specified WebFeatures message. Does not implicitly {@link WAWeb.WebFeatures.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.WebFeatures
         * @static
         * @param {WAWeb.IWebFeatures} message WebFeatures message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WebFeatures.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.labelsDisplay != null && Object.hasOwnProperty.call(message, "labelsDisplay"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.labelsDisplay);
            if (message.voipIndividualOutgoing != null && Object.hasOwnProperty.call(message, "voipIndividualOutgoing"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.voipIndividualOutgoing);
            if (message.groupsV3 != null && Object.hasOwnProperty.call(message, "groupsV3"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.groupsV3);
            if (message.groupsV3Create != null && Object.hasOwnProperty.call(message, "groupsV3Create"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.groupsV3Create);
            if (message.changeNumberV2 != null && Object.hasOwnProperty.call(message, "changeNumberV2"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.changeNumberV2);
            if (message.queryStatusV3Thumbnail != null && Object.hasOwnProperty.call(message, "queryStatusV3Thumbnail"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.queryStatusV3Thumbnail);
            if (message.liveLocations != null && Object.hasOwnProperty.call(message, "liveLocations"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.liveLocations);
            if (message.queryVname != null && Object.hasOwnProperty.call(message, "queryVname"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.queryVname);
            if (message.voipIndividualIncoming != null && Object.hasOwnProperty.call(message, "voipIndividualIncoming"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.voipIndividualIncoming);
            if (message.quickRepliesQuery != null && Object.hasOwnProperty.call(message, "quickRepliesQuery"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.quickRepliesQuery);
            if (message.payments != null && Object.hasOwnProperty.call(message, "payments"))
                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.payments);
            if (message.stickerPackQuery != null && Object.hasOwnProperty.call(message, "stickerPackQuery"))
                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.stickerPackQuery);
            if (message.liveLocationsFinal != null && Object.hasOwnProperty.call(message, "liveLocationsFinal"))
                writer.uint32(/* id 13, wireType 0 =*/104).int32(message.liveLocationsFinal);
            if (message.labelsEdit != null && Object.hasOwnProperty.call(message, "labelsEdit"))
                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.labelsEdit);
            if (message.mediaUpload != null && Object.hasOwnProperty.call(message, "mediaUpload"))
                writer.uint32(/* id 15, wireType 0 =*/120).int32(message.mediaUpload);
            if (message.mediaUploadRichQuickReplies != null && Object.hasOwnProperty.call(message, "mediaUploadRichQuickReplies"))
                writer.uint32(/* id 18, wireType 0 =*/144).int32(message.mediaUploadRichQuickReplies);
            if (message.vnameV2 != null && Object.hasOwnProperty.call(message, "vnameV2"))
                writer.uint32(/* id 19, wireType 0 =*/152).int32(message.vnameV2);
            if (message.videoPlaybackURL != null && Object.hasOwnProperty.call(message, "videoPlaybackURL"))
                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.videoPlaybackURL);
            if (message.statusRanking != null && Object.hasOwnProperty.call(message, "statusRanking"))
                writer.uint32(/* id 21, wireType 0 =*/168).int32(message.statusRanking);
            if (message.voipIndividualVideo != null && Object.hasOwnProperty.call(message, "voipIndividualVideo"))
                writer.uint32(/* id 22, wireType 0 =*/176).int32(message.voipIndividualVideo);
            if (message.thirdPartyStickers != null && Object.hasOwnProperty.call(message, "thirdPartyStickers"))
                writer.uint32(/* id 23, wireType 0 =*/184).int32(message.thirdPartyStickers);
            if (message.frequentlyForwardedSetting != null && Object.hasOwnProperty.call(message, "frequentlyForwardedSetting"))
                writer.uint32(/* id 24, wireType 0 =*/192).int32(message.frequentlyForwardedSetting);
            if (message.groupsV4JoinPermission != null && Object.hasOwnProperty.call(message, "groupsV4JoinPermission"))
                writer.uint32(/* id 25, wireType 0 =*/200).int32(message.groupsV4JoinPermission);
            if (message.recentStickers != null && Object.hasOwnProperty.call(message, "recentStickers"))
                writer.uint32(/* id 26, wireType 0 =*/208).int32(message.recentStickers);
            if (message.catalog != null && Object.hasOwnProperty.call(message, "catalog"))
                writer.uint32(/* id 27, wireType 0 =*/216).int32(message.catalog);
            if (message.starredStickers != null && Object.hasOwnProperty.call(message, "starredStickers"))
                writer.uint32(/* id 28, wireType 0 =*/224).int32(message.starredStickers);
            if (message.voipGroupCall != null && Object.hasOwnProperty.call(message, "voipGroupCall"))
                writer.uint32(/* id 29, wireType 0 =*/232).int32(message.voipGroupCall);
            if (message.templateMessage != null && Object.hasOwnProperty.call(message, "templateMessage"))
                writer.uint32(/* id 30, wireType 0 =*/240).int32(message.templateMessage);
            if (message.templateMessageInteractivity != null && Object.hasOwnProperty.call(message, "templateMessageInteractivity"))
                writer.uint32(/* id 31, wireType 0 =*/248).int32(message.templateMessageInteractivity);
            if (message.ephemeralMessages != null && Object.hasOwnProperty.call(message, "ephemeralMessages"))
                writer.uint32(/* id 32, wireType 0 =*/256).int32(message.ephemeralMessages);
            if (message.e2ENotificationSync != null && Object.hasOwnProperty.call(message, "e2ENotificationSync"))
                writer.uint32(/* id 33, wireType 0 =*/264).int32(message.e2ENotificationSync);
            if (message.recentStickersV2 != null && Object.hasOwnProperty.call(message, "recentStickersV2"))
                writer.uint32(/* id 34, wireType 0 =*/272).int32(message.recentStickersV2);
            if (message.recentStickersV3 != null && Object.hasOwnProperty.call(message, "recentStickersV3"))
                writer.uint32(/* id 36, wireType 0 =*/288).int32(message.recentStickersV3);
            if (message.userNotice != null && Object.hasOwnProperty.call(message, "userNotice"))
                writer.uint32(/* id 37, wireType 0 =*/296).int32(message.userNotice);
            if (message.support != null && Object.hasOwnProperty.call(message, "support"))
                writer.uint32(/* id 39, wireType 0 =*/312).int32(message.support);
            if (message.groupUiiCleanup != null && Object.hasOwnProperty.call(message, "groupUiiCleanup"))
                writer.uint32(/* id 40, wireType 0 =*/320).int32(message.groupUiiCleanup);
            if (message.groupDogfoodingInternalOnly != null && Object.hasOwnProperty.call(message, "groupDogfoodingInternalOnly"))
                writer.uint32(/* id 41, wireType 0 =*/328).int32(message.groupDogfoodingInternalOnly);
            if (message.settingsSync != null && Object.hasOwnProperty.call(message, "settingsSync"))
                writer.uint32(/* id 42, wireType 0 =*/336).int32(message.settingsSync);
            if (message.archiveV2 != null && Object.hasOwnProperty.call(message, "archiveV2"))
                writer.uint32(/* id 43, wireType 0 =*/344).int32(message.archiveV2);
            if (message.ephemeralAllowGroupMembers != null && Object.hasOwnProperty.call(message, "ephemeralAllowGroupMembers"))
                writer.uint32(/* id 44, wireType 0 =*/352).int32(message.ephemeralAllowGroupMembers);
            if (message.ephemeral24HDuration != null && Object.hasOwnProperty.call(message, "ephemeral24HDuration"))
                writer.uint32(/* id 45, wireType 0 =*/360).int32(message.ephemeral24HDuration);
            if (message.mdForceUpgrade != null && Object.hasOwnProperty.call(message, "mdForceUpgrade"))
                writer.uint32(/* id 46, wireType 0 =*/368).int32(message.mdForceUpgrade);
            if (message.disappearingMode != null && Object.hasOwnProperty.call(message, "disappearingMode"))
                writer.uint32(/* id 47, wireType 0 =*/376).int32(message.disappearingMode);
            if (message.externalMdOptInAvailable != null && Object.hasOwnProperty.call(message, "externalMdOptInAvailable"))
                writer.uint32(/* id 48, wireType 0 =*/384).int32(message.externalMdOptInAvailable);
            if (message.noDeleteMessageTimeLimit != null && Object.hasOwnProperty.call(message, "noDeleteMessageTimeLimit"))
                writer.uint32(/* id 49, wireType 0 =*/392).int32(message.noDeleteMessageTimeLimit);
            return writer;
        };

        /**
         * Encodes the specified WebFeatures message, length delimited. Does not implicitly {@link WAWeb.WebFeatures.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.WebFeatures
         * @static
         * @param {WAWeb.IWebFeatures} message WebFeatures message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WebFeatures.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a WebFeatures message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.WebFeatures
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.WebFeatures} WebFeatures
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WebFeatures.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.WebFeatures();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.labelsDisplay = reader.int32();
                        break;
                    }
                case 2: {
                        message.voipIndividualOutgoing = reader.int32();
                        break;
                    }
                case 3: {
                        message.groupsV3 = reader.int32();
                        break;
                    }
                case 4: {
                        message.groupsV3Create = reader.int32();
                        break;
                    }
                case 5: {
                        message.changeNumberV2 = reader.int32();
                        break;
                    }
                case 6: {
                        message.queryStatusV3Thumbnail = reader.int32();
                        break;
                    }
                case 7: {
                        message.liveLocations = reader.int32();
                        break;
                    }
                case 8: {
                        message.queryVname = reader.int32();
                        break;
                    }
                case 9: {
                        message.voipIndividualIncoming = reader.int32();
                        break;
                    }
                case 10: {
                        message.quickRepliesQuery = reader.int32();
                        break;
                    }
                case 11: {
                        message.payments = reader.int32();
                        break;
                    }
                case 12: {
                        message.stickerPackQuery = reader.int32();
                        break;
                    }
                case 13: {
                        message.liveLocationsFinal = reader.int32();
                        break;
                    }
                case 14: {
                        message.labelsEdit = reader.int32();
                        break;
                    }
                case 15: {
                        message.mediaUpload = reader.int32();
                        break;
                    }
                case 18: {
                        message.mediaUploadRichQuickReplies = reader.int32();
                        break;
                    }
                case 19: {
                        message.vnameV2 = reader.int32();
                        break;
                    }
                case 20: {
                        message.videoPlaybackURL = reader.int32();
                        break;
                    }
                case 21: {
                        message.statusRanking = reader.int32();
                        break;
                    }
                case 22: {
                        message.voipIndividualVideo = reader.int32();
                        break;
                    }
                case 23: {
                        message.thirdPartyStickers = reader.int32();
                        break;
                    }
                case 24: {
                        message.frequentlyForwardedSetting = reader.int32();
                        break;
                    }
                case 25: {
                        message.groupsV4JoinPermission = reader.int32();
                        break;
                    }
                case 26: {
                        message.recentStickers = reader.int32();
                        break;
                    }
                case 27: {
                        message.catalog = reader.int32();
                        break;
                    }
                case 28: {
                        message.starredStickers = reader.int32();
                        break;
                    }
                case 29: {
                        message.voipGroupCall = reader.int32();
                        break;
                    }
                case 30: {
                        message.templateMessage = reader.int32();
                        break;
                    }
                case 31: {
                        message.templateMessageInteractivity = reader.int32();
                        break;
                    }
                case 32: {
                        message.ephemeralMessages = reader.int32();
                        break;
                    }
                case 33: {
                        message.e2ENotificationSync = reader.int32();
                        break;
                    }
                case 34: {
                        message.recentStickersV2 = reader.int32();
                        break;
                    }
                case 36: {
                        message.recentStickersV3 = reader.int32();
                        break;
                    }
                case 37: {
                        message.userNotice = reader.int32();
                        break;
                    }
                case 39: {
                        message.support = reader.int32();
                        break;
                    }
                case 40: {
                        message.groupUiiCleanup = reader.int32();
                        break;
                    }
                case 41: {
                        message.groupDogfoodingInternalOnly = reader.int32();
                        break;
                    }
                case 42: {
                        message.settingsSync = reader.int32();
                        break;
                    }
                case 43: {
                        message.archiveV2 = reader.int32();
                        break;
                    }
                case 44: {
                        message.ephemeralAllowGroupMembers = reader.int32();
                        break;
                    }
                case 45: {
                        message.ephemeral24HDuration = reader.int32();
                        break;
                    }
                case 46: {
                        message.mdForceUpgrade = reader.int32();
                        break;
                    }
                case 47: {
                        message.disappearingMode = reader.int32();
                        break;
                    }
                case 48: {
                        message.externalMdOptInAvailable = reader.int32();
                        break;
                    }
                case 49: {
                        message.noDeleteMessageTimeLimit = reader.int32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a WebFeatures message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.WebFeatures
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.WebFeatures} WebFeatures
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WebFeatures.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a WebFeatures message.
         * @function verify
         * @memberof WAWeb.WebFeatures
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        WebFeatures.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.labelsDisplay != null && message.hasOwnProperty("labelsDisplay"))
                switch (message.labelsDisplay) {
                default:
                    return "labelsDisplay: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.voipIndividualOutgoing != null && message.hasOwnProperty("voipIndividualOutgoing"))
                switch (message.voipIndividualOutgoing) {
                default:
                    return "voipIndividualOutgoing: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.groupsV3 != null && message.hasOwnProperty("groupsV3"))
                switch (message.groupsV3) {
                default:
                    return "groupsV3: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.groupsV3Create != null && message.hasOwnProperty("groupsV3Create"))
                switch (message.groupsV3Create) {
                default:
                    return "groupsV3Create: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.changeNumberV2 != null && message.hasOwnProperty("changeNumberV2"))
                switch (message.changeNumberV2) {
                default:
                    return "changeNumberV2: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.queryStatusV3Thumbnail != null && message.hasOwnProperty("queryStatusV3Thumbnail"))
                switch (message.queryStatusV3Thumbnail) {
                default:
                    return "queryStatusV3Thumbnail: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.liveLocations != null && message.hasOwnProperty("liveLocations"))
                switch (message.liveLocations) {
                default:
                    return "liveLocations: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.queryVname != null && message.hasOwnProperty("queryVname"))
                switch (message.queryVname) {
                default:
                    return "queryVname: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.voipIndividualIncoming != null && message.hasOwnProperty("voipIndividualIncoming"))
                switch (message.voipIndividualIncoming) {
                default:
                    return "voipIndividualIncoming: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.quickRepliesQuery != null && message.hasOwnProperty("quickRepliesQuery"))
                switch (message.quickRepliesQuery) {
                default:
                    return "quickRepliesQuery: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.payments != null && message.hasOwnProperty("payments"))
                switch (message.payments) {
                default:
                    return "payments: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.stickerPackQuery != null && message.hasOwnProperty("stickerPackQuery"))
                switch (message.stickerPackQuery) {
                default:
                    return "stickerPackQuery: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.liveLocationsFinal != null && message.hasOwnProperty("liveLocationsFinal"))
                switch (message.liveLocationsFinal) {
                default:
                    return "liveLocationsFinal: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.labelsEdit != null && message.hasOwnProperty("labelsEdit"))
                switch (message.labelsEdit) {
                default:
                    return "labelsEdit: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.mediaUpload != null && message.hasOwnProperty("mediaUpload"))
                switch (message.mediaUpload) {
                default:
                    return "mediaUpload: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.mediaUploadRichQuickReplies != null && message.hasOwnProperty("mediaUploadRichQuickReplies"))
                switch (message.mediaUploadRichQuickReplies) {
                default:
                    return "mediaUploadRichQuickReplies: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.vnameV2 != null && message.hasOwnProperty("vnameV2"))
                switch (message.vnameV2) {
                default:
                    return "vnameV2: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.videoPlaybackURL != null && message.hasOwnProperty("videoPlaybackURL"))
                switch (message.videoPlaybackURL) {
                default:
                    return "videoPlaybackURL: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.statusRanking != null && message.hasOwnProperty("statusRanking"))
                switch (message.statusRanking) {
                default:
                    return "statusRanking: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.voipIndividualVideo != null && message.hasOwnProperty("voipIndividualVideo"))
                switch (message.voipIndividualVideo) {
                default:
                    return "voipIndividualVideo: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.thirdPartyStickers != null && message.hasOwnProperty("thirdPartyStickers"))
                switch (message.thirdPartyStickers) {
                default:
                    return "thirdPartyStickers: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.frequentlyForwardedSetting != null && message.hasOwnProperty("frequentlyForwardedSetting"))
                switch (message.frequentlyForwardedSetting) {
                default:
                    return "frequentlyForwardedSetting: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.groupsV4JoinPermission != null && message.hasOwnProperty("groupsV4JoinPermission"))
                switch (message.groupsV4JoinPermission) {
                default:
                    return "groupsV4JoinPermission: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.recentStickers != null && message.hasOwnProperty("recentStickers"))
                switch (message.recentStickers) {
                default:
                    return "recentStickers: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.catalog != null && message.hasOwnProperty("catalog"))
                switch (message.catalog) {
                default:
                    return "catalog: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.starredStickers != null && message.hasOwnProperty("starredStickers"))
                switch (message.starredStickers) {
                default:
                    return "starredStickers: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.voipGroupCall != null && message.hasOwnProperty("voipGroupCall"))
                switch (message.voipGroupCall) {
                default:
                    return "voipGroupCall: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.templateMessage != null && message.hasOwnProperty("templateMessage"))
                switch (message.templateMessage) {
                default:
                    return "templateMessage: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.templateMessageInteractivity != null && message.hasOwnProperty("templateMessageInteractivity"))
                switch (message.templateMessageInteractivity) {
                default:
                    return "templateMessageInteractivity: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.ephemeralMessages != null && message.hasOwnProperty("ephemeralMessages"))
                switch (message.ephemeralMessages) {
                default:
                    return "ephemeralMessages: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.e2ENotificationSync != null && message.hasOwnProperty("e2ENotificationSync"))
                switch (message.e2ENotificationSync) {
                default:
                    return "e2ENotificationSync: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.recentStickersV2 != null && message.hasOwnProperty("recentStickersV2"))
                switch (message.recentStickersV2) {
                default:
                    return "recentStickersV2: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.recentStickersV3 != null && message.hasOwnProperty("recentStickersV3"))
                switch (message.recentStickersV3) {
                default:
                    return "recentStickersV3: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.userNotice != null && message.hasOwnProperty("userNotice"))
                switch (message.userNotice) {
                default:
                    return "userNotice: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.support != null && message.hasOwnProperty("support"))
                switch (message.support) {
                default:
                    return "support: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.groupUiiCleanup != null && message.hasOwnProperty("groupUiiCleanup"))
                switch (message.groupUiiCleanup) {
                default:
                    return "groupUiiCleanup: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.groupDogfoodingInternalOnly != null && message.hasOwnProperty("groupDogfoodingInternalOnly"))
                switch (message.groupDogfoodingInternalOnly) {
                default:
                    return "groupDogfoodingInternalOnly: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.settingsSync != null && message.hasOwnProperty("settingsSync"))
                switch (message.settingsSync) {
                default:
                    return "settingsSync: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.archiveV2 != null && message.hasOwnProperty("archiveV2"))
                switch (message.archiveV2) {
                default:
                    return "archiveV2: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.ephemeralAllowGroupMembers != null && message.hasOwnProperty("ephemeralAllowGroupMembers"))
                switch (message.ephemeralAllowGroupMembers) {
                default:
                    return "ephemeralAllowGroupMembers: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.ephemeral24HDuration != null && message.hasOwnProperty("ephemeral24HDuration"))
                switch (message.ephemeral24HDuration) {
                default:
                    return "ephemeral24HDuration: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.mdForceUpgrade != null && message.hasOwnProperty("mdForceUpgrade"))
                switch (message.mdForceUpgrade) {
                default:
                    return "mdForceUpgrade: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.disappearingMode != null && message.hasOwnProperty("disappearingMode"))
                switch (message.disappearingMode) {
                default:
                    return "disappearingMode: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.externalMdOptInAvailable != null && message.hasOwnProperty("externalMdOptInAvailable"))
                switch (message.externalMdOptInAvailable) {
                default:
                    return "externalMdOptInAvailable: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.noDeleteMessageTimeLimit != null && message.hasOwnProperty("noDeleteMessageTimeLimit"))
                switch (message.noDeleteMessageTimeLimit) {
                default:
                    return "noDeleteMessageTimeLimit: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            return null;
        };

        /**
         * Creates a WebFeatures message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.WebFeatures
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.WebFeatures} WebFeatures
         */
        WebFeatures.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.WebFeatures)
                return object;
            var message = new $root.WAWeb.WebFeatures();
            switch (object.labelsDisplay) {
            default:
                if (typeof object.labelsDisplay === "number") {
                    message.labelsDisplay = object.labelsDisplay;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.labelsDisplay = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.labelsDisplay = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.labelsDisplay = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.labelsDisplay = 3;
                break;
            }
            switch (object.voipIndividualOutgoing) {
            default:
                if (typeof object.voipIndividualOutgoing === "number") {
                    message.voipIndividualOutgoing = object.voipIndividualOutgoing;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.voipIndividualOutgoing = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.voipIndividualOutgoing = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.voipIndividualOutgoing = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.voipIndividualOutgoing = 3;
                break;
            }
            switch (object.groupsV3) {
            default:
                if (typeof object.groupsV3 === "number") {
                    message.groupsV3 = object.groupsV3;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.groupsV3 = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.groupsV3 = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.groupsV3 = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.groupsV3 = 3;
                break;
            }
            switch (object.groupsV3Create) {
            default:
                if (typeof object.groupsV3Create === "number") {
                    message.groupsV3Create = object.groupsV3Create;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.groupsV3Create = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.groupsV3Create = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.groupsV3Create = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.groupsV3Create = 3;
                break;
            }
            switch (object.changeNumberV2) {
            default:
                if (typeof object.changeNumberV2 === "number") {
                    message.changeNumberV2 = object.changeNumberV2;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.changeNumberV2 = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.changeNumberV2 = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.changeNumberV2 = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.changeNumberV2 = 3;
                break;
            }
            switch (object.queryStatusV3Thumbnail) {
            default:
                if (typeof object.queryStatusV3Thumbnail === "number") {
                    message.queryStatusV3Thumbnail = object.queryStatusV3Thumbnail;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.queryStatusV3Thumbnail = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.queryStatusV3Thumbnail = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.queryStatusV3Thumbnail = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.queryStatusV3Thumbnail = 3;
                break;
            }
            switch (object.liveLocations) {
            default:
                if (typeof object.liveLocations === "number") {
                    message.liveLocations = object.liveLocations;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.liveLocations = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.liveLocations = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.liveLocations = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.liveLocations = 3;
                break;
            }
            switch (object.queryVname) {
            default:
                if (typeof object.queryVname === "number") {
                    message.queryVname = object.queryVname;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.queryVname = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.queryVname = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.queryVname = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.queryVname = 3;
                break;
            }
            switch (object.voipIndividualIncoming) {
            default:
                if (typeof object.voipIndividualIncoming === "number") {
                    message.voipIndividualIncoming = object.voipIndividualIncoming;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.voipIndividualIncoming = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.voipIndividualIncoming = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.voipIndividualIncoming = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.voipIndividualIncoming = 3;
                break;
            }
            switch (object.quickRepliesQuery) {
            default:
                if (typeof object.quickRepliesQuery === "number") {
                    message.quickRepliesQuery = object.quickRepliesQuery;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.quickRepliesQuery = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.quickRepliesQuery = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.quickRepliesQuery = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.quickRepliesQuery = 3;
                break;
            }
            switch (object.payments) {
            default:
                if (typeof object.payments === "number") {
                    message.payments = object.payments;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.payments = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.payments = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.payments = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.payments = 3;
                break;
            }
            switch (object.stickerPackQuery) {
            default:
                if (typeof object.stickerPackQuery === "number") {
                    message.stickerPackQuery = object.stickerPackQuery;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.stickerPackQuery = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.stickerPackQuery = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.stickerPackQuery = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.stickerPackQuery = 3;
                break;
            }
            switch (object.liveLocationsFinal) {
            default:
                if (typeof object.liveLocationsFinal === "number") {
                    message.liveLocationsFinal = object.liveLocationsFinal;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.liveLocationsFinal = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.liveLocationsFinal = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.liveLocationsFinal = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.liveLocationsFinal = 3;
                break;
            }
            switch (object.labelsEdit) {
            default:
                if (typeof object.labelsEdit === "number") {
                    message.labelsEdit = object.labelsEdit;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.labelsEdit = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.labelsEdit = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.labelsEdit = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.labelsEdit = 3;
                break;
            }
            switch (object.mediaUpload) {
            default:
                if (typeof object.mediaUpload === "number") {
                    message.mediaUpload = object.mediaUpload;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.mediaUpload = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.mediaUpload = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.mediaUpload = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.mediaUpload = 3;
                break;
            }
            switch (object.mediaUploadRichQuickReplies) {
            default:
                if (typeof object.mediaUploadRichQuickReplies === "number") {
                    message.mediaUploadRichQuickReplies = object.mediaUploadRichQuickReplies;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.mediaUploadRichQuickReplies = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.mediaUploadRichQuickReplies = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.mediaUploadRichQuickReplies = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.mediaUploadRichQuickReplies = 3;
                break;
            }
            switch (object.vnameV2) {
            default:
                if (typeof object.vnameV2 === "number") {
                    message.vnameV2 = object.vnameV2;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.vnameV2 = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.vnameV2 = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.vnameV2 = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.vnameV2 = 3;
                break;
            }
            switch (object.videoPlaybackURL) {
            default:
                if (typeof object.videoPlaybackURL === "number") {
                    message.videoPlaybackURL = object.videoPlaybackURL;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.videoPlaybackURL = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.videoPlaybackURL = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.videoPlaybackURL = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.videoPlaybackURL = 3;
                break;
            }
            switch (object.statusRanking) {
            default:
                if (typeof object.statusRanking === "number") {
                    message.statusRanking = object.statusRanking;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.statusRanking = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.statusRanking = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.statusRanking = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.statusRanking = 3;
                break;
            }
            switch (object.voipIndividualVideo) {
            default:
                if (typeof object.voipIndividualVideo === "number") {
                    message.voipIndividualVideo = object.voipIndividualVideo;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.voipIndividualVideo = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.voipIndividualVideo = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.voipIndividualVideo = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.voipIndividualVideo = 3;
                break;
            }
            switch (object.thirdPartyStickers) {
            default:
                if (typeof object.thirdPartyStickers === "number") {
                    message.thirdPartyStickers = object.thirdPartyStickers;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.thirdPartyStickers = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.thirdPartyStickers = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.thirdPartyStickers = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.thirdPartyStickers = 3;
                break;
            }
            switch (object.frequentlyForwardedSetting) {
            default:
                if (typeof object.frequentlyForwardedSetting === "number") {
                    message.frequentlyForwardedSetting = object.frequentlyForwardedSetting;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.frequentlyForwardedSetting = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.frequentlyForwardedSetting = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.frequentlyForwardedSetting = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.frequentlyForwardedSetting = 3;
                break;
            }
            switch (object.groupsV4JoinPermission) {
            default:
                if (typeof object.groupsV4JoinPermission === "number") {
                    message.groupsV4JoinPermission = object.groupsV4JoinPermission;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.groupsV4JoinPermission = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.groupsV4JoinPermission = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.groupsV4JoinPermission = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.groupsV4JoinPermission = 3;
                break;
            }
            switch (object.recentStickers) {
            default:
                if (typeof object.recentStickers === "number") {
                    message.recentStickers = object.recentStickers;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.recentStickers = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.recentStickers = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.recentStickers = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.recentStickers = 3;
                break;
            }
            switch (object.catalog) {
            default:
                if (typeof object.catalog === "number") {
                    message.catalog = object.catalog;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.catalog = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.catalog = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.catalog = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.catalog = 3;
                break;
            }
            switch (object.starredStickers) {
            default:
                if (typeof object.starredStickers === "number") {
                    message.starredStickers = object.starredStickers;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.starredStickers = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.starredStickers = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.starredStickers = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.starredStickers = 3;
                break;
            }
            switch (object.voipGroupCall) {
            default:
                if (typeof object.voipGroupCall === "number") {
                    message.voipGroupCall = object.voipGroupCall;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.voipGroupCall = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.voipGroupCall = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.voipGroupCall = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.voipGroupCall = 3;
                break;
            }
            switch (object.templateMessage) {
            default:
                if (typeof object.templateMessage === "number") {
                    message.templateMessage = object.templateMessage;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.templateMessage = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.templateMessage = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.templateMessage = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.templateMessage = 3;
                break;
            }
            switch (object.templateMessageInteractivity) {
            default:
                if (typeof object.templateMessageInteractivity === "number") {
                    message.templateMessageInteractivity = object.templateMessageInteractivity;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.templateMessageInteractivity = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.templateMessageInteractivity = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.templateMessageInteractivity = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.templateMessageInteractivity = 3;
                break;
            }
            switch (object.ephemeralMessages) {
            default:
                if (typeof object.ephemeralMessages === "number") {
                    message.ephemeralMessages = object.ephemeralMessages;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.ephemeralMessages = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.ephemeralMessages = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.ephemeralMessages = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.ephemeralMessages = 3;
                break;
            }
            switch (object.e2ENotificationSync) {
            default:
                if (typeof object.e2ENotificationSync === "number") {
                    message.e2ENotificationSync = object.e2ENotificationSync;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.e2ENotificationSync = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.e2ENotificationSync = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.e2ENotificationSync = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.e2ENotificationSync = 3;
                break;
            }
            switch (object.recentStickersV2) {
            default:
                if (typeof object.recentStickersV2 === "number") {
                    message.recentStickersV2 = object.recentStickersV2;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.recentStickersV2 = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.recentStickersV2 = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.recentStickersV2 = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.recentStickersV2 = 3;
                break;
            }
            switch (object.recentStickersV3) {
            default:
                if (typeof object.recentStickersV3 === "number") {
                    message.recentStickersV3 = object.recentStickersV3;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.recentStickersV3 = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.recentStickersV3 = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.recentStickersV3 = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.recentStickersV3 = 3;
                break;
            }
            switch (object.userNotice) {
            default:
                if (typeof object.userNotice === "number") {
                    message.userNotice = object.userNotice;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.userNotice = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.userNotice = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.userNotice = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.userNotice = 3;
                break;
            }
            switch (object.support) {
            default:
                if (typeof object.support === "number") {
                    message.support = object.support;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.support = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.support = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.support = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.support = 3;
                break;
            }
            switch (object.groupUiiCleanup) {
            default:
                if (typeof object.groupUiiCleanup === "number") {
                    message.groupUiiCleanup = object.groupUiiCleanup;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.groupUiiCleanup = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.groupUiiCleanup = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.groupUiiCleanup = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.groupUiiCleanup = 3;
                break;
            }
            switch (object.groupDogfoodingInternalOnly) {
            default:
                if (typeof object.groupDogfoodingInternalOnly === "number") {
                    message.groupDogfoodingInternalOnly = object.groupDogfoodingInternalOnly;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.groupDogfoodingInternalOnly = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.groupDogfoodingInternalOnly = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.groupDogfoodingInternalOnly = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.groupDogfoodingInternalOnly = 3;
                break;
            }
            switch (object.settingsSync) {
            default:
                if (typeof object.settingsSync === "number") {
                    message.settingsSync = object.settingsSync;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.settingsSync = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.settingsSync = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.settingsSync = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.settingsSync = 3;
                break;
            }
            switch (object.archiveV2) {
            default:
                if (typeof object.archiveV2 === "number") {
                    message.archiveV2 = object.archiveV2;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.archiveV2 = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.archiveV2 = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.archiveV2 = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.archiveV2 = 3;
                break;
            }
            switch (object.ephemeralAllowGroupMembers) {
            default:
                if (typeof object.ephemeralAllowGroupMembers === "number") {
                    message.ephemeralAllowGroupMembers = object.ephemeralAllowGroupMembers;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.ephemeralAllowGroupMembers = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.ephemeralAllowGroupMembers = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.ephemeralAllowGroupMembers = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.ephemeralAllowGroupMembers = 3;
                break;
            }
            switch (object.ephemeral24HDuration) {
            default:
                if (typeof object.ephemeral24HDuration === "number") {
                    message.ephemeral24HDuration = object.ephemeral24HDuration;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.ephemeral24HDuration = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.ephemeral24HDuration = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.ephemeral24HDuration = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.ephemeral24HDuration = 3;
                break;
            }
            switch (object.mdForceUpgrade) {
            default:
                if (typeof object.mdForceUpgrade === "number") {
                    message.mdForceUpgrade = object.mdForceUpgrade;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.mdForceUpgrade = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.mdForceUpgrade = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.mdForceUpgrade = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.mdForceUpgrade = 3;
                break;
            }
            switch (object.disappearingMode) {
            default:
                if (typeof object.disappearingMode === "number") {
                    message.disappearingMode = object.disappearingMode;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.disappearingMode = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.disappearingMode = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.disappearingMode = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.disappearingMode = 3;
                break;
            }
            switch (object.externalMdOptInAvailable) {
            default:
                if (typeof object.externalMdOptInAvailable === "number") {
                    message.externalMdOptInAvailable = object.externalMdOptInAvailable;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.externalMdOptInAvailable = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.externalMdOptInAvailable = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.externalMdOptInAvailable = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.externalMdOptInAvailable = 3;
                break;
            }
            switch (object.noDeleteMessageTimeLimit) {
            default:
                if (typeof object.noDeleteMessageTimeLimit === "number") {
                    message.noDeleteMessageTimeLimit = object.noDeleteMessageTimeLimit;
                    break;
                }
                break;
            case "NOT_STARTED":
            case 0:
                message.noDeleteMessageTimeLimit = 0;
                break;
            case "FORCE_UPGRADE":
            case 1:
                message.noDeleteMessageTimeLimit = 1;
                break;
            case "DEVELOPMENT":
            case 2:
                message.noDeleteMessageTimeLimit = 2;
                break;
            case "PRODUCTION":
            case 3:
                message.noDeleteMessageTimeLimit = 3;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a WebFeatures message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.WebFeatures
         * @static
         * @param {WAWeb.WebFeatures} message WebFeatures
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        WebFeatures.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.labelsDisplay = options.enums === String ? "NOT_STARTED" : 0;
                object.voipIndividualOutgoing = options.enums === String ? "NOT_STARTED" : 0;
                object.groupsV3 = options.enums === String ? "NOT_STARTED" : 0;
                object.groupsV3Create = options.enums === String ? "NOT_STARTED" : 0;
                object.changeNumberV2 = options.enums === String ? "NOT_STARTED" : 0;
                object.queryStatusV3Thumbnail = options.enums === String ? "NOT_STARTED" : 0;
                object.liveLocations = options.enums === String ? "NOT_STARTED" : 0;
                object.queryVname = options.enums === String ? "NOT_STARTED" : 0;
                object.voipIndividualIncoming = options.enums === String ? "NOT_STARTED" : 0;
                object.quickRepliesQuery = options.enums === String ? "NOT_STARTED" : 0;
                object.payments = options.enums === String ? "NOT_STARTED" : 0;
                object.stickerPackQuery = options.enums === String ? "NOT_STARTED" : 0;
                object.liveLocationsFinal = options.enums === String ? "NOT_STARTED" : 0;
                object.labelsEdit = options.enums === String ? "NOT_STARTED" : 0;
                object.mediaUpload = options.enums === String ? "NOT_STARTED" : 0;
                object.mediaUploadRichQuickReplies = options.enums === String ? "NOT_STARTED" : 0;
                object.vnameV2 = options.enums === String ? "NOT_STARTED" : 0;
                object.videoPlaybackURL = options.enums === String ? "NOT_STARTED" : 0;
                object.statusRanking = options.enums === String ? "NOT_STARTED" : 0;
                object.voipIndividualVideo = options.enums === String ? "NOT_STARTED" : 0;
                object.thirdPartyStickers = options.enums === String ? "NOT_STARTED" : 0;
                object.frequentlyForwardedSetting = options.enums === String ? "NOT_STARTED" : 0;
                object.groupsV4JoinPermission = options.enums === String ? "NOT_STARTED" : 0;
                object.recentStickers = options.enums === String ? "NOT_STARTED" : 0;
                object.catalog = options.enums === String ? "NOT_STARTED" : 0;
                object.starredStickers = options.enums === String ? "NOT_STARTED" : 0;
                object.voipGroupCall = options.enums === String ? "NOT_STARTED" : 0;
                object.templateMessage = options.enums === String ? "NOT_STARTED" : 0;
                object.templateMessageInteractivity = options.enums === String ? "NOT_STARTED" : 0;
                object.ephemeralMessages = options.enums === String ? "NOT_STARTED" : 0;
                object.e2ENotificationSync = options.enums === String ? "NOT_STARTED" : 0;
                object.recentStickersV2 = options.enums === String ? "NOT_STARTED" : 0;
                object.recentStickersV3 = options.enums === String ? "NOT_STARTED" : 0;
                object.userNotice = options.enums === String ? "NOT_STARTED" : 0;
                object.support = options.enums === String ? "NOT_STARTED" : 0;
                object.groupUiiCleanup = options.enums === String ? "NOT_STARTED" : 0;
                object.groupDogfoodingInternalOnly = options.enums === String ? "NOT_STARTED" : 0;
                object.settingsSync = options.enums === String ? "NOT_STARTED" : 0;
                object.archiveV2 = options.enums === String ? "NOT_STARTED" : 0;
                object.ephemeralAllowGroupMembers = options.enums === String ? "NOT_STARTED" : 0;
                object.ephemeral24HDuration = options.enums === String ? "NOT_STARTED" : 0;
                object.mdForceUpgrade = options.enums === String ? "NOT_STARTED" : 0;
                object.disappearingMode = options.enums === String ? "NOT_STARTED" : 0;
                object.externalMdOptInAvailable = options.enums === String ? "NOT_STARTED" : 0;
                object.noDeleteMessageTimeLimit = options.enums === String ? "NOT_STARTED" : 0;
            }
            if (message.labelsDisplay != null && message.hasOwnProperty("labelsDisplay"))
                object.labelsDisplay = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.labelsDisplay] === undefined ? message.labelsDisplay : $root.WAWeb.WebFeatures.Flag[message.labelsDisplay] : message.labelsDisplay;
            if (message.voipIndividualOutgoing != null && message.hasOwnProperty("voipIndividualOutgoing"))
                object.voipIndividualOutgoing = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.voipIndividualOutgoing] === undefined ? message.voipIndividualOutgoing : $root.WAWeb.WebFeatures.Flag[message.voipIndividualOutgoing] : message.voipIndividualOutgoing;
            if (message.groupsV3 != null && message.hasOwnProperty("groupsV3"))
                object.groupsV3 = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.groupsV3] === undefined ? message.groupsV3 : $root.WAWeb.WebFeatures.Flag[message.groupsV3] : message.groupsV3;
            if (message.groupsV3Create != null && message.hasOwnProperty("groupsV3Create"))
                object.groupsV3Create = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.groupsV3Create] === undefined ? message.groupsV3Create : $root.WAWeb.WebFeatures.Flag[message.groupsV3Create] : message.groupsV3Create;
            if (message.changeNumberV2 != null && message.hasOwnProperty("changeNumberV2"))
                object.changeNumberV2 = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.changeNumberV2] === undefined ? message.changeNumberV2 : $root.WAWeb.WebFeatures.Flag[message.changeNumberV2] : message.changeNumberV2;
            if (message.queryStatusV3Thumbnail != null && message.hasOwnProperty("queryStatusV3Thumbnail"))
                object.queryStatusV3Thumbnail = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.queryStatusV3Thumbnail] === undefined ? message.queryStatusV3Thumbnail : $root.WAWeb.WebFeatures.Flag[message.queryStatusV3Thumbnail] : message.queryStatusV3Thumbnail;
            if (message.liveLocations != null && message.hasOwnProperty("liveLocations"))
                object.liveLocations = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.liveLocations] === undefined ? message.liveLocations : $root.WAWeb.WebFeatures.Flag[message.liveLocations] : message.liveLocations;
            if (message.queryVname != null && message.hasOwnProperty("queryVname"))
                object.queryVname = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.queryVname] === undefined ? message.queryVname : $root.WAWeb.WebFeatures.Flag[message.queryVname] : message.queryVname;
            if (message.voipIndividualIncoming != null && message.hasOwnProperty("voipIndividualIncoming"))
                object.voipIndividualIncoming = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.voipIndividualIncoming] === undefined ? message.voipIndividualIncoming : $root.WAWeb.WebFeatures.Flag[message.voipIndividualIncoming] : message.voipIndividualIncoming;
            if (message.quickRepliesQuery != null && message.hasOwnProperty("quickRepliesQuery"))
                object.quickRepliesQuery = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.quickRepliesQuery] === undefined ? message.quickRepliesQuery : $root.WAWeb.WebFeatures.Flag[message.quickRepliesQuery] : message.quickRepliesQuery;
            if (message.payments != null && message.hasOwnProperty("payments"))
                object.payments = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.payments] === undefined ? message.payments : $root.WAWeb.WebFeatures.Flag[message.payments] : message.payments;
            if (message.stickerPackQuery != null && message.hasOwnProperty("stickerPackQuery"))
                object.stickerPackQuery = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.stickerPackQuery] === undefined ? message.stickerPackQuery : $root.WAWeb.WebFeatures.Flag[message.stickerPackQuery] : message.stickerPackQuery;
            if (message.liveLocationsFinal != null && message.hasOwnProperty("liveLocationsFinal"))
                object.liveLocationsFinal = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.liveLocationsFinal] === undefined ? message.liveLocationsFinal : $root.WAWeb.WebFeatures.Flag[message.liveLocationsFinal] : message.liveLocationsFinal;
            if (message.labelsEdit != null && message.hasOwnProperty("labelsEdit"))
                object.labelsEdit = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.labelsEdit] === undefined ? message.labelsEdit : $root.WAWeb.WebFeatures.Flag[message.labelsEdit] : message.labelsEdit;
            if (message.mediaUpload != null && message.hasOwnProperty("mediaUpload"))
                object.mediaUpload = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.mediaUpload] === undefined ? message.mediaUpload : $root.WAWeb.WebFeatures.Flag[message.mediaUpload] : message.mediaUpload;
            if (message.mediaUploadRichQuickReplies != null && message.hasOwnProperty("mediaUploadRichQuickReplies"))
                object.mediaUploadRichQuickReplies = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.mediaUploadRichQuickReplies] === undefined ? message.mediaUploadRichQuickReplies : $root.WAWeb.WebFeatures.Flag[message.mediaUploadRichQuickReplies] : message.mediaUploadRichQuickReplies;
            if (message.vnameV2 != null && message.hasOwnProperty("vnameV2"))
                object.vnameV2 = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.vnameV2] === undefined ? message.vnameV2 : $root.WAWeb.WebFeatures.Flag[message.vnameV2] : message.vnameV2;
            if (message.videoPlaybackURL != null && message.hasOwnProperty("videoPlaybackURL"))
                object.videoPlaybackURL = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.videoPlaybackURL] === undefined ? message.videoPlaybackURL : $root.WAWeb.WebFeatures.Flag[message.videoPlaybackURL] : message.videoPlaybackURL;
            if (message.statusRanking != null && message.hasOwnProperty("statusRanking"))
                object.statusRanking = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.statusRanking] === undefined ? message.statusRanking : $root.WAWeb.WebFeatures.Flag[message.statusRanking] : message.statusRanking;
            if (message.voipIndividualVideo != null && message.hasOwnProperty("voipIndividualVideo"))
                object.voipIndividualVideo = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.voipIndividualVideo] === undefined ? message.voipIndividualVideo : $root.WAWeb.WebFeatures.Flag[message.voipIndividualVideo] : message.voipIndividualVideo;
            if (message.thirdPartyStickers != null && message.hasOwnProperty("thirdPartyStickers"))
                object.thirdPartyStickers = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.thirdPartyStickers] === undefined ? message.thirdPartyStickers : $root.WAWeb.WebFeatures.Flag[message.thirdPartyStickers] : message.thirdPartyStickers;
            if (message.frequentlyForwardedSetting != null && message.hasOwnProperty("frequentlyForwardedSetting"))
                object.frequentlyForwardedSetting = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.frequentlyForwardedSetting] === undefined ? message.frequentlyForwardedSetting : $root.WAWeb.WebFeatures.Flag[message.frequentlyForwardedSetting] : message.frequentlyForwardedSetting;
            if (message.groupsV4JoinPermission != null && message.hasOwnProperty("groupsV4JoinPermission"))
                object.groupsV4JoinPermission = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.groupsV4JoinPermission] === undefined ? message.groupsV4JoinPermission : $root.WAWeb.WebFeatures.Flag[message.groupsV4JoinPermission] : message.groupsV4JoinPermission;
            if (message.recentStickers != null && message.hasOwnProperty("recentStickers"))
                object.recentStickers = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.recentStickers] === undefined ? message.recentStickers : $root.WAWeb.WebFeatures.Flag[message.recentStickers] : message.recentStickers;
            if (message.catalog != null && message.hasOwnProperty("catalog"))
                object.catalog = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.catalog] === undefined ? message.catalog : $root.WAWeb.WebFeatures.Flag[message.catalog] : message.catalog;
            if (message.starredStickers != null && message.hasOwnProperty("starredStickers"))
                object.starredStickers = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.starredStickers] === undefined ? message.starredStickers : $root.WAWeb.WebFeatures.Flag[message.starredStickers] : message.starredStickers;
            if (message.voipGroupCall != null && message.hasOwnProperty("voipGroupCall"))
                object.voipGroupCall = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.voipGroupCall] === undefined ? message.voipGroupCall : $root.WAWeb.WebFeatures.Flag[message.voipGroupCall] : message.voipGroupCall;
            if (message.templateMessage != null && message.hasOwnProperty("templateMessage"))
                object.templateMessage = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.templateMessage] === undefined ? message.templateMessage : $root.WAWeb.WebFeatures.Flag[message.templateMessage] : message.templateMessage;
            if (message.templateMessageInteractivity != null && message.hasOwnProperty("templateMessageInteractivity"))
                object.templateMessageInteractivity = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.templateMessageInteractivity] === undefined ? message.templateMessageInteractivity : $root.WAWeb.WebFeatures.Flag[message.templateMessageInteractivity] : message.templateMessageInteractivity;
            if (message.ephemeralMessages != null && message.hasOwnProperty("ephemeralMessages"))
                object.ephemeralMessages = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.ephemeralMessages] === undefined ? message.ephemeralMessages : $root.WAWeb.WebFeatures.Flag[message.ephemeralMessages] : message.ephemeralMessages;
            if (message.e2ENotificationSync != null && message.hasOwnProperty("e2ENotificationSync"))
                object.e2ENotificationSync = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.e2ENotificationSync] === undefined ? message.e2ENotificationSync : $root.WAWeb.WebFeatures.Flag[message.e2ENotificationSync] : message.e2ENotificationSync;
            if (message.recentStickersV2 != null && message.hasOwnProperty("recentStickersV2"))
                object.recentStickersV2 = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.recentStickersV2] === undefined ? message.recentStickersV2 : $root.WAWeb.WebFeatures.Flag[message.recentStickersV2] : message.recentStickersV2;
            if (message.recentStickersV3 != null && message.hasOwnProperty("recentStickersV3"))
                object.recentStickersV3 = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.recentStickersV3] === undefined ? message.recentStickersV3 : $root.WAWeb.WebFeatures.Flag[message.recentStickersV3] : message.recentStickersV3;
            if (message.userNotice != null && message.hasOwnProperty("userNotice"))
                object.userNotice = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.userNotice] === undefined ? message.userNotice : $root.WAWeb.WebFeatures.Flag[message.userNotice] : message.userNotice;
            if (message.support != null && message.hasOwnProperty("support"))
                object.support = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.support] === undefined ? message.support : $root.WAWeb.WebFeatures.Flag[message.support] : message.support;
            if (message.groupUiiCleanup != null && message.hasOwnProperty("groupUiiCleanup"))
                object.groupUiiCleanup = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.groupUiiCleanup] === undefined ? message.groupUiiCleanup : $root.WAWeb.WebFeatures.Flag[message.groupUiiCleanup] : message.groupUiiCleanup;
            if (message.groupDogfoodingInternalOnly != null && message.hasOwnProperty("groupDogfoodingInternalOnly"))
                object.groupDogfoodingInternalOnly = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.groupDogfoodingInternalOnly] === undefined ? message.groupDogfoodingInternalOnly : $root.WAWeb.WebFeatures.Flag[message.groupDogfoodingInternalOnly] : message.groupDogfoodingInternalOnly;
            if (message.settingsSync != null && message.hasOwnProperty("settingsSync"))
                object.settingsSync = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.settingsSync] === undefined ? message.settingsSync : $root.WAWeb.WebFeatures.Flag[message.settingsSync] : message.settingsSync;
            if (message.archiveV2 != null && message.hasOwnProperty("archiveV2"))
                object.archiveV2 = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.archiveV2] === undefined ? message.archiveV2 : $root.WAWeb.WebFeatures.Flag[message.archiveV2] : message.archiveV2;
            if (message.ephemeralAllowGroupMembers != null && message.hasOwnProperty("ephemeralAllowGroupMembers"))
                object.ephemeralAllowGroupMembers = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.ephemeralAllowGroupMembers] === undefined ? message.ephemeralAllowGroupMembers : $root.WAWeb.WebFeatures.Flag[message.ephemeralAllowGroupMembers] : message.ephemeralAllowGroupMembers;
            if (message.ephemeral24HDuration != null && message.hasOwnProperty("ephemeral24HDuration"))
                object.ephemeral24HDuration = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.ephemeral24HDuration] === undefined ? message.ephemeral24HDuration : $root.WAWeb.WebFeatures.Flag[message.ephemeral24HDuration] : message.ephemeral24HDuration;
            if (message.mdForceUpgrade != null && message.hasOwnProperty("mdForceUpgrade"))
                object.mdForceUpgrade = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.mdForceUpgrade] === undefined ? message.mdForceUpgrade : $root.WAWeb.WebFeatures.Flag[message.mdForceUpgrade] : message.mdForceUpgrade;
            if (message.disappearingMode != null && message.hasOwnProperty("disappearingMode"))
                object.disappearingMode = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.disappearingMode] === undefined ? message.disappearingMode : $root.WAWeb.WebFeatures.Flag[message.disappearingMode] : message.disappearingMode;
            if (message.externalMdOptInAvailable != null && message.hasOwnProperty("externalMdOptInAvailable"))
                object.externalMdOptInAvailable = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.externalMdOptInAvailable] === undefined ? message.externalMdOptInAvailable : $root.WAWeb.WebFeatures.Flag[message.externalMdOptInAvailable] : message.externalMdOptInAvailable;
            if (message.noDeleteMessageTimeLimit != null && message.hasOwnProperty("noDeleteMessageTimeLimit"))
                object.noDeleteMessageTimeLimit = options.enums === String ? $root.WAWeb.WebFeatures.Flag[message.noDeleteMessageTimeLimit] === undefined ? message.noDeleteMessageTimeLimit : $root.WAWeb.WebFeatures.Flag[message.noDeleteMessageTimeLimit] : message.noDeleteMessageTimeLimit;
            return object;
        };

        /**
         * Converts this WebFeatures to JSON.
         * @function toJSON
         * @memberof WAWeb.WebFeatures
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        WebFeatures.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for WebFeatures
         * @function getTypeUrl
         * @memberof WAWeb.WebFeatures
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        WebFeatures.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.WebFeatures";
        };

        /**
         * Flag enum.
         * @name WAWeb.WebFeatures.Flag
         * @enum {number}
         * @property {number} NOT_STARTED=0 NOT_STARTED value
         * @property {number} FORCE_UPGRADE=1 FORCE_UPGRADE value
         * @property {number} DEVELOPMENT=2 DEVELOPMENT value
         * @property {number} PRODUCTION=3 PRODUCTION value
         */
        WebFeatures.Flag = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "NOT_STARTED"] = 0;
            values[valuesById[1] = "FORCE_UPGRADE"] = 1;
            values[valuesById[2] = "DEVELOPMENT"] = 2;
            values[valuesById[3] = "PRODUCTION"] = 3;
            return values;
        })();

        return WebFeatures;
    })();

    WAWeb.PinInChat = (function() {

        /**
         * Properties of a PinInChat.
         * @memberof WAWeb
         * @interface IPinInChat
         * @property {WAWeb.PinInChat.Type|null} [type] PinInChat type
         * @property {WAProtocol.IMessageKey|null} [key] PinInChat key
         * @property {number|Long|null} [senderTimestampMS] PinInChat senderTimestampMS
         * @property {number|Long|null} [serverTimestampMS] PinInChat serverTimestampMS
         * @property {WAWeb.IMessageAddOnContextInfo|null} [messageAddOnContextInfo] PinInChat messageAddOnContextInfo
         */

        /**
         * Constructs a new PinInChat.
         * @memberof WAWeb
         * @classdesc Represents a PinInChat.
         * @implements IPinInChat
         * @constructor
         * @param {WAWeb.IPinInChat=} [properties] Properties to set
         */
        function PinInChat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PinInChat type.
         * @member {WAWeb.PinInChat.Type} type
         * @memberof WAWeb.PinInChat
         * @instance
         */
        PinInChat.prototype.type = 0;

        /**
         * PinInChat key.
         * @member {WAProtocol.IMessageKey|null|undefined} key
         * @memberof WAWeb.PinInChat
         * @instance
         */
        PinInChat.prototype.key = null;

        /**
         * PinInChat senderTimestampMS.
         * @member {number|Long} senderTimestampMS
         * @memberof WAWeb.PinInChat
         * @instance
         */
        PinInChat.prototype.senderTimestampMS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * PinInChat serverTimestampMS.
         * @member {number|Long} serverTimestampMS
         * @memberof WAWeb.PinInChat
         * @instance
         */
        PinInChat.prototype.serverTimestampMS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * PinInChat messageAddOnContextInfo.
         * @member {WAWeb.IMessageAddOnContextInfo|null|undefined} messageAddOnContextInfo
         * @memberof WAWeb.PinInChat
         * @instance
         */
        PinInChat.prototype.messageAddOnContextInfo = null;

        /**
         * Creates a new PinInChat instance using the specified properties.
         * @function create
         * @memberof WAWeb.PinInChat
         * @static
         * @param {WAWeb.IPinInChat=} [properties] Properties to set
         * @returns {WAWeb.PinInChat} PinInChat instance
         */
        PinInChat.create = function create(properties) {
            return new PinInChat(properties);
        };

        /**
         * Encodes the specified PinInChat message. Does not implicitly {@link WAWeb.PinInChat.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.PinInChat
         * @static
         * @param {WAWeb.IPinInChat} message PinInChat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PinInChat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
            if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                $root.WAProtocol.MessageKey.encode(message.key, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.senderTimestampMS != null && Object.hasOwnProperty.call(message, "senderTimestampMS"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.senderTimestampMS);
            if (message.serverTimestampMS != null && Object.hasOwnProperty.call(message, "serverTimestampMS"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.serverTimestampMS);
            if (message.messageAddOnContextInfo != null && Object.hasOwnProperty.call(message, "messageAddOnContextInfo"))
                $root.WAWeb.MessageAddOnContextInfo.encode(message.messageAddOnContextInfo, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified PinInChat message, length delimited. Does not implicitly {@link WAWeb.PinInChat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.PinInChat
         * @static
         * @param {WAWeb.IPinInChat} message PinInChat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PinInChat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PinInChat message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.PinInChat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.PinInChat} PinInChat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PinInChat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.PinInChat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.type = reader.int32();
                        break;
                    }
                case 2: {
                        message.key = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                        break;
                    }
                case 3: {
                        message.senderTimestampMS = reader.int64();
                        break;
                    }
                case 4: {
                        message.serverTimestampMS = reader.int64();
                        break;
                    }
                case 5: {
                        message.messageAddOnContextInfo = $root.WAWeb.MessageAddOnContextInfo.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PinInChat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.PinInChat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.PinInChat} PinInChat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PinInChat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PinInChat message.
         * @function verify
         * @memberof WAWeb.PinInChat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PinInChat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                default:
                    return "type: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            if (message.key != null && message.hasOwnProperty("key")) {
                var error = $root.WAProtocol.MessageKey.verify(message.key);
                if (error)
                    return "key." + error;
            }
            if (message.senderTimestampMS != null && message.hasOwnProperty("senderTimestampMS"))
                if (!$util.isInteger(message.senderTimestampMS) && !(message.senderTimestampMS && $util.isInteger(message.senderTimestampMS.low) && $util.isInteger(message.senderTimestampMS.high)))
                    return "senderTimestampMS: integer|Long expected";
            if (message.serverTimestampMS != null && message.hasOwnProperty("serverTimestampMS"))
                if (!$util.isInteger(message.serverTimestampMS) && !(message.serverTimestampMS && $util.isInteger(message.serverTimestampMS.low) && $util.isInteger(message.serverTimestampMS.high)))
                    return "serverTimestampMS: integer|Long expected";
            if (message.messageAddOnContextInfo != null && message.hasOwnProperty("messageAddOnContextInfo")) {
                var error = $root.WAWeb.MessageAddOnContextInfo.verify(message.messageAddOnContextInfo);
                if (error)
                    return "messageAddOnContextInfo." + error;
            }
            return null;
        };

        /**
         * Creates a PinInChat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.PinInChat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.PinInChat} PinInChat
         */
        PinInChat.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.PinInChat)
                return object;
            var message = new $root.WAWeb.PinInChat();
            switch (object.type) {
            default:
                if (typeof object.type === "number") {
                    message.type = object.type;
                    break;
                }
                break;
            case "UNKNOWN_TYPE":
            case 0:
                message.type = 0;
                break;
            case "PIN_FOR_ALL":
            case 1:
                message.type = 1;
                break;
            case "UNPIN_FOR_ALL":
            case 2:
                message.type = 2;
                break;
            }
            if (object.key != null) {
                if (typeof object.key !== "object")
                    throw TypeError(".WAWeb.PinInChat.key: object expected");
                message.key = $root.WAProtocol.MessageKey.fromObject(object.key);
            }
            if (object.senderTimestampMS != null)
                if ($util.Long)
                    (message.senderTimestampMS = $util.Long.fromValue(object.senderTimestampMS)).unsigned = false;
                else if (typeof object.senderTimestampMS === "string")
                    message.senderTimestampMS = parseInt(object.senderTimestampMS, 10);
                else if (typeof object.senderTimestampMS === "number")
                    message.senderTimestampMS = object.senderTimestampMS;
                else if (typeof object.senderTimestampMS === "object")
                    message.senderTimestampMS = new $util.LongBits(object.senderTimestampMS.low >>> 0, object.senderTimestampMS.high >>> 0).toNumber();
            if (object.serverTimestampMS != null)
                if ($util.Long)
                    (message.serverTimestampMS = $util.Long.fromValue(object.serverTimestampMS)).unsigned = false;
                else if (typeof object.serverTimestampMS === "string")
                    message.serverTimestampMS = parseInt(object.serverTimestampMS, 10);
                else if (typeof object.serverTimestampMS === "number")
                    message.serverTimestampMS = object.serverTimestampMS;
                else if (typeof object.serverTimestampMS === "object")
                    message.serverTimestampMS = new $util.LongBits(object.serverTimestampMS.low >>> 0, object.serverTimestampMS.high >>> 0).toNumber();
            if (object.messageAddOnContextInfo != null) {
                if (typeof object.messageAddOnContextInfo !== "object")
                    throw TypeError(".WAWeb.PinInChat.messageAddOnContextInfo: object expected");
                message.messageAddOnContextInfo = $root.WAWeb.MessageAddOnContextInfo.fromObject(object.messageAddOnContextInfo);
            }
            return message;
        };

        /**
         * Creates a plain object from a PinInChat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.PinInChat
         * @static
         * @param {WAWeb.PinInChat} message PinInChat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PinInChat.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.type = options.enums === String ? "UNKNOWN_TYPE" : 0;
                object.key = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.senderTimestampMS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.senderTimestampMS = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.serverTimestampMS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.serverTimestampMS = options.longs === String ? "0" : 0;
                object.messageAddOnContextInfo = null;
            }
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.WAWeb.PinInChat.Type[message.type] === undefined ? message.type : $root.WAWeb.PinInChat.Type[message.type] : message.type;
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = $root.WAProtocol.MessageKey.toObject(message.key, options);
            if (message.senderTimestampMS != null && message.hasOwnProperty("senderTimestampMS"))
                if (typeof message.senderTimestampMS === "number")
                    object.senderTimestampMS = options.longs === String ? String(message.senderTimestampMS) : message.senderTimestampMS;
                else
                    object.senderTimestampMS = options.longs === String ? $util.Long.prototype.toString.call(message.senderTimestampMS) : options.longs === Number ? new $util.LongBits(message.senderTimestampMS.low >>> 0, message.senderTimestampMS.high >>> 0).toNumber() : message.senderTimestampMS;
            if (message.serverTimestampMS != null && message.hasOwnProperty("serverTimestampMS"))
                if (typeof message.serverTimestampMS === "number")
                    object.serverTimestampMS = options.longs === String ? String(message.serverTimestampMS) : message.serverTimestampMS;
                else
                    object.serverTimestampMS = options.longs === String ? $util.Long.prototype.toString.call(message.serverTimestampMS) : options.longs === Number ? new $util.LongBits(message.serverTimestampMS.low >>> 0, message.serverTimestampMS.high >>> 0).toNumber() : message.serverTimestampMS;
            if (message.messageAddOnContextInfo != null && message.hasOwnProperty("messageAddOnContextInfo"))
                object.messageAddOnContextInfo = $root.WAWeb.MessageAddOnContextInfo.toObject(message.messageAddOnContextInfo, options);
            return object;
        };

        /**
         * Converts this PinInChat to JSON.
         * @function toJSON
         * @memberof WAWeb.PinInChat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PinInChat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for PinInChat
         * @function getTypeUrl
         * @memberof WAWeb.PinInChat
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        PinInChat.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.PinInChat";
        };

        /**
         * Type enum.
         * @name WAWeb.PinInChat.Type
         * @enum {number}
         * @property {number} UNKNOWN_TYPE=0 UNKNOWN_TYPE value
         * @property {number} PIN_FOR_ALL=1 PIN_FOR_ALL value
         * @property {number} UNPIN_FOR_ALL=2 UNPIN_FOR_ALL value
         */
        PinInChat.Type = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "UNKNOWN_TYPE"] = 0;
            values[valuesById[1] = "PIN_FOR_ALL"] = 1;
            values[valuesById[2] = "UNPIN_FOR_ALL"] = 2;
            return values;
        })();

        return PinInChat;
    })();

    WAWeb.MessageAddOn = (function() {

        /**
         * Properties of a MessageAddOn.
         * @memberof WAWeb
         * @interface IMessageAddOn
         * @property {WAWeb.MessageAddOn.MessageAddOnType|null} [messageAddOnType] MessageAddOn messageAddOnType
         * @property {WAE2E.IMessage|null} [messageAddOn] MessageAddOn messageAddOn
         * @property {number|Long|null} [senderTimestampMS] MessageAddOn senderTimestampMS
         * @property {number|Long|null} [serverTimestampMS] MessageAddOn serverTimestampMS
         * @property {WAWeb.WebMessageInfo.Status|null} [status] MessageAddOn status
         * @property {WAWeb.IMessageAddOnContextInfo|null} [addOnContextInfo] MessageAddOn addOnContextInfo
         * @property {WAProtocol.IMessageKey|null} [messageAddOnKey] MessageAddOn messageAddOnKey
         */

        /**
         * Constructs a new MessageAddOn.
         * @memberof WAWeb
         * @classdesc Represents a MessageAddOn.
         * @implements IMessageAddOn
         * @constructor
         * @param {WAWeb.IMessageAddOn=} [properties] Properties to set
         */
        function MessageAddOn(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MessageAddOn messageAddOnType.
         * @member {WAWeb.MessageAddOn.MessageAddOnType} messageAddOnType
         * @memberof WAWeb.MessageAddOn
         * @instance
         */
        MessageAddOn.prototype.messageAddOnType = 0;

        /**
         * MessageAddOn messageAddOn.
         * @member {WAE2E.IMessage|null|undefined} messageAddOn
         * @memberof WAWeb.MessageAddOn
         * @instance
         */
        MessageAddOn.prototype.messageAddOn = null;

        /**
         * MessageAddOn senderTimestampMS.
         * @member {number|Long} senderTimestampMS
         * @memberof WAWeb.MessageAddOn
         * @instance
         */
        MessageAddOn.prototype.senderTimestampMS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * MessageAddOn serverTimestampMS.
         * @member {number|Long} serverTimestampMS
         * @memberof WAWeb.MessageAddOn
         * @instance
         */
        MessageAddOn.prototype.serverTimestampMS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * MessageAddOn status.
         * @member {WAWeb.WebMessageInfo.Status} status
         * @memberof WAWeb.MessageAddOn
         * @instance
         */
        MessageAddOn.prototype.status = 0;

        /**
         * MessageAddOn addOnContextInfo.
         * @member {WAWeb.IMessageAddOnContextInfo|null|undefined} addOnContextInfo
         * @memberof WAWeb.MessageAddOn
         * @instance
         */
        MessageAddOn.prototype.addOnContextInfo = null;

        /**
         * MessageAddOn messageAddOnKey.
         * @member {WAProtocol.IMessageKey|null|undefined} messageAddOnKey
         * @memberof WAWeb.MessageAddOn
         * @instance
         */
        MessageAddOn.prototype.messageAddOnKey = null;

        /**
         * Creates a new MessageAddOn instance using the specified properties.
         * @function create
         * @memberof WAWeb.MessageAddOn
         * @static
         * @param {WAWeb.IMessageAddOn=} [properties] Properties to set
         * @returns {WAWeb.MessageAddOn} MessageAddOn instance
         */
        MessageAddOn.create = function create(properties) {
            return new MessageAddOn(properties);
        };

        /**
         * Encodes the specified MessageAddOn message. Does not implicitly {@link WAWeb.MessageAddOn.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.MessageAddOn
         * @static
         * @param {WAWeb.IMessageAddOn} message MessageAddOn message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MessageAddOn.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.messageAddOnType != null && Object.hasOwnProperty.call(message, "messageAddOnType"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.messageAddOnType);
            if (message.messageAddOn != null && Object.hasOwnProperty.call(message, "messageAddOn"))
                $root.WAE2E.Message.encode(message.messageAddOn, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.senderTimestampMS != null && Object.hasOwnProperty.call(message, "senderTimestampMS"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.senderTimestampMS);
            if (message.serverTimestampMS != null && Object.hasOwnProperty.call(message, "serverTimestampMS"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.serverTimestampMS);
            if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.status);
            if (message.addOnContextInfo != null && Object.hasOwnProperty.call(message, "addOnContextInfo"))
                $root.WAWeb.MessageAddOnContextInfo.encode(message.addOnContextInfo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.messageAddOnKey != null && Object.hasOwnProperty.call(message, "messageAddOnKey"))
                $root.WAProtocol.MessageKey.encode(message.messageAddOnKey, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MessageAddOn message, length delimited. Does not implicitly {@link WAWeb.MessageAddOn.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.MessageAddOn
         * @static
         * @param {WAWeb.IMessageAddOn} message MessageAddOn message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MessageAddOn.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MessageAddOn message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.MessageAddOn
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.MessageAddOn} MessageAddOn
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MessageAddOn.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.MessageAddOn();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.messageAddOnType = reader.int32();
                        break;
                    }
                case 2: {
                        message.messageAddOn = $root.WAE2E.Message.decode(reader, reader.uint32());
                        break;
                    }
                case 3: {
                        message.senderTimestampMS = reader.int64();
                        break;
                    }
                case 4: {
                        message.serverTimestampMS = reader.int64();
                        break;
                    }
                case 5: {
                        message.status = reader.int32();
                        break;
                    }
                case 6: {
                        message.addOnContextInfo = $root.WAWeb.MessageAddOnContextInfo.decode(reader, reader.uint32());
                        break;
                    }
                case 7: {
                        message.messageAddOnKey = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MessageAddOn message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.MessageAddOn
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.MessageAddOn} MessageAddOn
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MessageAddOn.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MessageAddOn message.
         * @function verify
         * @memberof WAWeb.MessageAddOn
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MessageAddOn.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.messageAddOnType != null && message.hasOwnProperty("messageAddOnType"))
                switch (message.messageAddOnType) {
                default:
                    return "messageAddOnType: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            if (message.messageAddOn != null && message.hasOwnProperty("messageAddOn")) {
                var error = $root.WAE2E.Message.verify(message.messageAddOn);
                if (error)
                    return "messageAddOn." + error;
            }
            if (message.senderTimestampMS != null && message.hasOwnProperty("senderTimestampMS"))
                if (!$util.isInteger(message.senderTimestampMS) && !(message.senderTimestampMS && $util.isInteger(message.senderTimestampMS.low) && $util.isInteger(message.senderTimestampMS.high)))
                    return "senderTimestampMS: integer|Long expected";
            if (message.serverTimestampMS != null && message.hasOwnProperty("serverTimestampMS"))
                if (!$util.isInteger(message.serverTimestampMS) && !(message.serverTimestampMS && $util.isInteger(message.serverTimestampMS.low) && $util.isInteger(message.serverTimestampMS.high)))
                    return "serverTimestampMS: integer|Long expected";
            if (message.status != null && message.hasOwnProperty("status"))
                switch (message.status) {
                default:
                    return "status: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            if (message.addOnContextInfo != null && message.hasOwnProperty("addOnContextInfo")) {
                var error = $root.WAWeb.MessageAddOnContextInfo.verify(message.addOnContextInfo);
                if (error)
                    return "addOnContextInfo." + error;
            }
            if (message.messageAddOnKey != null && message.hasOwnProperty("messageAddOnKey")) {
                var error = $root.WAProtocol.MessageKey.verify(message.messageAddOnKey);
                if (error)
                    return "messageAddOnKey." + error;
            }
            return null;
        };

        /**
         * Creates a MessageAddOn message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.MessageAddOn
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.MessageAddOn} MessageAddOn
         */
        MessageAddOn.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.MessageAddOn)
                return object;
            var message = new $root.WAWeb.MessageAddOn();
            switch (object.messageAddOnType) {
            default:
                if (typeof object.messageAddOnType === "number") {
                    message.messageAddOnType = object.messageAddOnType;
                    break;
                }
                break;
            case "UNDEFINED":
            case 0:
                message.messageAddOnType = 0;
                break;
            case "REACTION":
            case 1:
                message.messageAddOnType = 1;
                break;
            case "EVENT_RESPONSE":
            case 2:
                message.messageAddOnType = 2;
                break;
            case "POLL_UPDATE":
            case 3:
                message.messageAddOnType = 3;
                break;
            case "PIN_IN_CHAT":
            case 4:
                message.messageAddOnType = 4;
                break;
            }
            if (object.messageAddOn != null) {
                if (typeof object.messageAddOn !== "object")
                    throw TypeError(".WAWeb.MessageAddOn.messageAddOn: object expected");
                message.messageAddOn = $root.WAE2E.Message.fromObject(object.messageAddOn);
            }
            if (object.senderTimestampMS != null)
                if ($util.Long)
                    (message.senderTimestampMS = $util.Long.fromValue(object.senderTimestampMS)).unsigned = false;
                else if (typeof object.senderTimestampMS === "string")
                    message.senderTimestampMS = parseInt(object.senderTimestampMS, 10);
                else if (typeof object.senderTimestampMS === "number")
                    message.senderTimestampMS = object.senderTimestampMS;
                else if (typeof object.senderTimestampMS === "object")
                    message.senderTimestampMS = new $util.LongBits(object.senderTimestampMS.low >>> 0, object.senderTimestampMS.high >>> 0).toNumber();
            if (object.serverTimestampMS != null)
                if ($util.Long)
                    (message.serverTimestampMS = $util.Long.fromValue(object.serverTimestampMS)).unsigned = false;
                else if (typeof object.serverTimestampMS === "string")
                    message.serverTimestampMS = parseInt(object.serverTimestampMS, 10);
                else if (typeof object.serverTimestampMS === "number")
                    message.serverTimestampMS = object.serverTimestampMS;
                else if (typeof object.serverTimestampMS === "object")
                    message.serverTimestampMS = new $util.LongBits(object.serverTimestampMS.low >>> 0, object.serverTimestampMS.high >>> 0).toNumber();
            switch (object.status) {
            default:
                if (typeof object.status === "number") {
                    message.status = object.status;
                    break;
                }
                break;
            case "ERROR":
            case 0:
                message.status = 0;
                break;
            case "PENDING":
            case 1:
                message.status = 1;
                break;
            case "SERVER_ACK":
            case 2:
                message.status = 2;
                break;
            case "DELIVERY_ACK":
            case 3:
                message.status = 3;
                break;
            case "READ":
            case 4:
                message.status = 4;
                break;
            case "PLAYED":
            case 5:
                message.status = 5;
                break;
            }
            if (object.addOnContextInfo != null) {
                if (typeof object.addOnContextInfo !== "object")
                    throw TypeError(".WAWeb.MessageAddOn.addOnContextInfo: object expected");
                message.addOnContextInfo = $root.WAWeb.MessageAddOnContextInfo.fromObject(object.addOnContextInfo);
            }
            if (object.messageAddOnKey != null) {
                if (typeof object.messageAddOnKey !== "object")
                    throw TypeError(".WAWeb.MessageAddOn.messageAddOnKey: object expected");
                message.messageAddOnKey = $root.WAProtocol.MessageKey.fromObject(object.messageAddOnKey);
            }
            return message;
        };

        /**
         * Creates a plain object from a MessageAddOn message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.MessageAddOn
         * @static
         * @param {WAWeb.MessageAddOn} message MessageAddOn
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MessageAddOn.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.messageAddOnType = options.enums === String ? "UNDEFINED" : 0;
                object.messageAddOn = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.senderTimestampMS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.senderTimestampMS = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.serverTimestampMS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.serverTimestampMS = options.longs === String ? "0" : 0;
                object.status = options.enums === String ? "ERROR" : 0;
                object.addOnContextInfo = null;
                object.messageAddOnKey = null;
            }
            if (message.messageAddOnType != null && message.hasOwnProperty("messageAddOnType"))
                object.messageAddOnType = options.enums === String ? $root.WAWeb.MessageAddOn.MessageAddOnType[message.messageAddOnType] === undefined ? message.messageAddOnType : $root.WAWeb.MessageAddOn.MessageAddOnType[message.messageAddOnType] : message.messageAddOnType;
            if (message.messageAddOn != null && message.hasOwnProperty("messageAddOn"))
                object.messageAddOn = $root.WAE2E.Message.toObject(message.messageAddOn, options);
            if (message.senderTimestampMS != null && message.hasOwnProperty("senderTimestampMS"))
                if (typeof message.senderTimestampMS === "number")
                    object.senderTimestampMS = options.longs === String ? String(message.senderTimestampMS) : message.senderTimestampMS;
                else
                    object.senderTimestampMS = options.longs === String ? $util.Long.prototype.toString.call(message.senderTimestampMS) : options.longs === Number ? new $util.LongBits(message.senderTimestampMS.low >>> 0, message.senderTimestampMS.high >>> 0).toNumber() : message.senderTimestampMS;
            if (message.serverTimestampMS != null && message.hasOwnProperty("serverTimestampMS"))
                if (typeof message.serverTimestampMS === "number")
                    object.serverTimestampMS = options.longs === String ? String(message.serverTimestampMS) : message.serverTimestampMS;
                else
                    object.serverTimestampMS = options.longs === String ? $util.Long.prototype.toString.call(message.serverTimestampMS) : options.longs === Number ? new $util.LongBits(message.serverTimestampMS.low >>> 0, message.serverTimestampMS.high >>> 0).toNumber() : message.serverTimestampMS;
            if (message.status != null && message.hasOwnProperty("status"))
                object.status = options.enums === String ? $root.WAWeb.WebMessageInfo.Status[message.status] === undefined ? message.status : $root.WAWeb.WebMessageInfo.Status[message.status] : message.status;
            if (message.addOnContextInfo != null && message.hasOwnProperty("addOnContextInfo"))
                object.addOnContextInfo = $root.WAWeb.MessageAddOnContextInfo.toObject(message.addOnContextInfo, options);
            if (message.messageAddOnKey != null && message.hasOwnProperty("messageAddOnKey"))
                object.messageAddOnKey = $root.WAProtocol.MessageKey.toObject(message.messageAddOnKey, options);
            return object;
        };

        /**
         * Converts this MessageAddOn to JSON.
         * @function toJSON
         * @memberof WAWeb.MessageAddOn
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MessageAddOn.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for MessageAddOn
         * @function getTypeUrl
         * @memberof WAWeb.MessageAddOn
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        MessageAddOn.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.MessageAddOn";
        };

        /**
         * MessageAddOnType enum.
         * @name WAWeb.MessageAddOn.MessageAddOnType
         * @enum {number}
         * @property {number} UNDEFINED=0 UNDEFINED value
         * @property {number} REACTION=1 REACTION value
         * @property {number} EVENT_RESPONSE=2 EVENT_RESPONSE value
         * @property {number} POLL_UPDATE=3 POLL_UPDATE value
         * @property {number} PIN_IN_CHAT=4 PIN_IN_CHAT value
         */
        MessageAddOn.MessageAddOnType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "UNDEFINED"] = 0;
            values[valuesById[1] = "REACTION"] = 1;
            values[valuesById[2] = "EVENT_RESPONSE"] = 2;
            values[valuesById[3] = "POLL_UPDATE"] = 3;
            values[valuesById[4] = "PIN_IN_CHAT"] = 4;
            return values;
        })();

        return MessageAddOn;
    })();

    WAWeb.CommentMetadata = (function() {

        /**
         * Properties of a CommentMetadata.
         * @memberof WAWeb
         * @interface ICommentMetadata
         * @property {WAProtocol.IMessageKey|null} [commentParentKey] CommentMetadata commentParentKey
         * @property {number|null} [replyCount] CommentMetadata replyCount
         */

        /**
         * Constructs a new CommentMetadata.
         * @memberof WAWeb
         * @classdesc Represents a CommentMetadata.
         * @implements ICommentMetadata
         * @constructor
         * @param {WAWeb.ICommentMetadata=} [properties] Properties to set
         */
        function CommentMetadata(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CommentMetadata commentParentKey.
         * @member {WAProtocol.IMessageKey|null|undefined} commentParentKey
         * @memberof WAWeb.CommentMetadata
         * @instance
         */
        CommentMetadata.prototype.commentParentKey = null;

        /**
         * CommentMetadata replyCount.
         * @member {number} replyCount
         * @memberof WAWeb.CommentMetadata
         * @instance
         */
        CommentMetadata.prototype.replyCount = 0;

        /**
         * Creates a new CommentMetadata instance using the specified properties.
         * @function create
         * @memberof WAWeb.CommentMetadata
         * @static
         * @param {WAWeb.ICommentMetadata=} [properties] Properties to set
         * @returns {WAWeb.CommentMetadata} CommentMetadata instance
         */
        CommentMetadata.create = function create(properties) {
            return new CommentMetadata(properties);
        };

        /**
         * Encodes the specified CommentMetadata message. Does not implicitly {@link WAWeb.CommentMetadata.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.CommentMetadata
         * @static
         * @param {WAWeb.ICommentMetadata} message CommentMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CommentMetadata.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commentParentKey != null && Object.hasOwnProperty.call(message, "commentParentKey"))
                $root.WAProtocol.MessageKey.encode(message.commentParentKey, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.replyCount != null && Object.hasOwnProperty.call(message, "replyCount"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.replyCount);
            return writer;
        };

        /**
         * Encodes the specified CommentMetadata message, length delimited. Does not implicitly {@link WAWeb.CommentMetadata.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.CommentMetadata
         * @static
         * @param {WAWeb.ICommentMetadata} message CommentMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CommentMetadata.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CommentMetadata message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.CommentMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.CommentMetadata} CommentMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CommentMetadata.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.CommentMetadata();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.commentParentKey = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        message.replyCount = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CommentMetadata message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.CommentMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.CommentMetadata} CommentMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CommentMetadata.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CommentMetadata message.
         * @function verify
         * @memberof WAWeb.CommentMetadata
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CommentMetadata.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commentParentKey != null && message.hasOwnProperty("commentParentKey")) {
                var error = $root.WAProtocol.MessageKey.verify(message.commentParentKey);
                if (error)
                    return "commentParentKey." + error;
            }
            if (message.replyCount != null && message.hasOwnProperty("replyCount"))
                if (!$util.isInteger(message.replyCount))
                    return "replyCount: integer expected";
            return null;
        };

        /**
         * Creates a CommentMetadata message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.CommentMetadata
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.CommentMetadata} CommentMetadata
         */
        CommentMetadata.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.CommentMetadata)
                return object;
            var message = new $root.WAWeb.CommentMetadata();
            if (object.commentParentKey != null) {
                if (typeof object.commentParentKey !== "object")
                    throw TypeError(".WAWeb.CommentMetadata.commentParentKey: object expected");
                message.commentParentKey = $root.WAProtocol.MessageKey.fromObject(object.commentParentKey);
            }
            if (object.replyCount != null)
                message.replyCount = object.replyCount >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a CommentMetadata message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.CommentMetadata
         * @static
         * @param {WAWeb.CommentMetadata} message CommentMetadata
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CommentMetadata.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commentParentKey = null;
                object.replyCount = 0;
            }
            if (message.commentParentKey != null && message.hasOwnProperty("commentParentKey"))
                object.commentParentKey = $root.WAProtocol.MessageKey.toObject(message.commentParentKey, options);
            if (message.replyCount != null && message.hasOwnProperty("replyCount"))
                object.replyCount = message.replyCount;
            return object;
        };

        /**
         * Converts this CommentMetadata to JSON.
         * @function toJSON
         * @memberof WAWeb.CommentMetadata
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CommentMetadata.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for CommentMetadata
         * @function getTypeUrl
         * @memberof WAWeb.CommentMetadata
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CommentMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.CommentMetadata";
        };

        return CommentMetadata;
    })();

    WAWeb.WebNotificationsInfo = (function() {

        /**
         * Properties of a WebNotificationsInfo.
         * @memberof WAWeb
         * @interface IWebNotificationsInfo
         * @property {number|Long|null} [timestamp] WebNotificationsInfo timestamp
         * @property {number|null} [unreadChats] WebNotificationsInfo unreadChats
         * @property {number|null} [notifyMessageCount] WebNotificationsInfo notifyMessageCount
         * @property {Array.<WAWeb.IWebMessageInfo>|null} [notifyMessages] WebNotificationsInfo notifyMessages
         */

        /**
         * Constructs a new WebNotificationsInfo.
         * @memberof WAWeb
         * @classdesc Represents a WebNotificationsInfo.
         * @implements IWebNotificationsInfo
         * @constructor
         * @param {WAWeb.IWebNotificationsInfo=} [properties] Properties to set
         */
        function WebNotificationsInfo(properties) {
            this.notifyMessages = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * WebNotificationsInfo timestamp.
         * @member {number|Long} timestamp
         * @memberof WAWeb.WebNotificationsInfo
         * @instance
         */
        WebNotificationsInfo.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * WebNotificationsInfo unreadChats.
         * @member {number} unreadChats
         * @memberof WAWeb.WebNotificationsInfo
         * @instance
         */
        WebNotificationsInfo.prototype.unreadChats = 0;

        /**
         * WebNotificationsInfo notifyMessageCount.
         * @member {number} notifyMessageCount
         * @memberof WAWeb.WebNotificationsInfo
         * @instance
         */
        WebNotificationsInfo.prototype.notifyMessageCount = 0;

        /**
         * WebNotificationsInfo notifyMessages.
         * @member {Array.<WAWeb.IWebMessageInfo>} notifyMessages
         * @memberof WAWeb.WebNotificationsInfo
         * @instance
         */
        WebNotificationsInfo.prototype.notifyMessages = $util.emptyArray;

        /**
         * Creates a new WebNotificationsInfo instance using the specified properties.
         * @function create
         * @memberof WAWeb.WebNotificationsInfo
         * @static
         * @param {WAWeb.IWebNotificationsInfo=} [properties] Properties to set
         * @returns {WAWeb.WebNotificationsInfo} WebNotificationsInfo instance
         */
        WebNotificationsInfo.create = function create(properties) {
            return new WebNotificationsInfo(properties);
        };

        /**
         * Encodes the specified WebNotificationsInfo message. Does not implicitly {@link WAWeb.WebNotificationsInfo.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.WebNotificationsInfo
         * @static
         * @param {WAWeb.IWebNotificationsInfo} message WebNotificationsInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WebNotificationsInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.timestamp);
            if (message.unreadChats != null && Object.hasOwnProperty.call(message, "unreadChats"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.unreadChats);
            if (message.notifyMessageCount != null && Object.hasOwnProperty.call(message, "notifyMessageCount"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.notifyMessageCount);
            if (message.notifyMessages != null && message.notifyMessages.length)
                for (var i = 0; i < message.notifyMessages.length; ++i)
                    $root.WAWeb.WebMessageInfo.encode(message.notifyMessages[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified WebNotificationsInfo message, length delimited. Does not implicitly {@link WAWeb.WebNotificationsInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.WebNotificationsInfo
         * @static
         * @param {WAWeb.IWebNotificationsInfo} message WebNotificationsInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WebNotificationsInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a WebNotificationsInfo message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.WebNotificationsInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.WebNotificationsInfo} WebNotificationsInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WebNotificationsInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.WebNotificationsInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2: {
                        message.timestamp = reader.uint64();
                        break;
                    }
                case 3: {
                        message.unreadChats = reader.uint32();
                        break;
                    }
                case 4: {
                        message.notifyMessageCount = reader.uint32();
                        break;
                    }
                case 5: {
                        if (!(message.notifyMessages && message.notifyMessages.length))
                            message.notifyMessages = [];
                        message.notifyMessages.push($root.WAWeb.WebMessageInfo.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a WebNotificationsInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.WebNotificationsInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.WebNotificationsInfo} WebNotificationsInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WebNotificationsInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a WebNotificationsInfo message.
         * @function verify
         * @memberof WAWeb.WebNotificationsInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        WebNotificationsInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                    return "timestamp: integer|Long expected";
            if (message.unreadChats != null && message.hasOwnProperty("unreadChats"))
                if (!$util.isInteger(message.unreadChats))
                    return "unreadChats: integer expected";
            if (message.notifyMessageCount != null && message.hasOwnProperty("notifyMessageCount"))
                if (!$util.isInteger(message.notifyMessageCount))
                    return "notifyMessageCount: integer expected";
            if (message.notifyMessages != null && message.hasOwnProperty("notifyMessages")) {
                if (!Array.isArray(message.notifyMessages))
                    return "notifyMessages: array expected";
                for (var i = 0; i < message.notifyMessages.length; ++i) {
                    var error = $root.WAWeb.WebMessageInfo.verify(message.notifyMessages[i]);
                    if (error)
                        return "notifyMessages." + error;
                }
            }
            return null;
        };

        /**
         * Creates a WebNotificationsInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.WebNotificationsInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.WebNotificationsInfo} WebNotificationsInfo
         */
        WebNotificationsInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.WebNotificationsInfo)
                return object;
            var message = new $root.WAWeb.WebNotificationsInfo();
            if (object.timestamp != null)
                if ($util.Long)
                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                else if (typeof object.timestamp === "string")
                    message.timestamp = parseInt(object.timestamp, 10);
                else if (typeof object.timestamp === "number")
                    message.timestamp = object.timestamp;
                else if (typeof object.timestamp === "object")
                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
            if (object.unreadChats != null)
                message.unreadChats = object.unreadChats >>> 0;
            if (object.notifyMessageCount != null)
                message.notifyMessageCount = object.notifyMessageCount >>> 0;
            if (object.notifyMessages) {
                if (!Array.isArray(object.notifyMessages))
                    throw TypeError(".WAWeb.WebNotificationsInfo.notifyMessages: array expected");
                message.notifyMessages = [];
                for (var i = 0; i < object.notifyMessages.length; ++i) {
                    if (typeof object.notifyMessages[i] !== "object")
                        throw TypeError(".WAWeb.WebNotificationsInfo.notifyMessages: object expected");
                    message.notifyMessages[i] = $root.WAWeb.WebMessageInfo.fromObject(object.notifyMessages[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a WebNotificationsInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.WebNotificationsInfo
         * @static
         * @param {WAWeb.WebNotificationsInfo} message WebNotificationsInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        WebNotificationsInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.notifyMessages = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.timestamp = options.longs === String ? "0" : 0;
                object.unreadChats = 0;
                object.notifyMessageCount = 0;
            }
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (typeof message.timestamp === "number")
                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                else
                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
            if (message.unreadChats != null && message.hasOwnProperty("unreadChats"))
                object.unreadChats = message.unreadChats;
            if (message.notifyMessageCount != null && message.hasOwnProperty("notifyMessageCount"))
                object.notifyMessageCount = message.notifyMessageCount;
            if (message.notifyMessages && message.notifyMessages.length) {
                object.notifyMessages = [];
                for (var j = 0; j < message.notifyMessages.length; ++j)
                    object.notifyMessages[j] = $root.WAWeb.WebMessageInfo.toObject(message.notifyMessages[j], options);
            }
            return object;
        };

        /**
         * Converts this WebNotificationsInfo to JSON.
         * @function toJSON
         * @memberof WAWeb.WebNotificationsInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        WebNotificationsInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for WebNotificationsInfo
         * @function getTypeUrl
         * @memberof WAWeb.WebNotificationsInfo
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        WebNotificationsInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.WebNotificationsInfo";
        };

        return WebNotificationsInfo;
    })();

    WAWeb.NotificationMessageInfo = (function() {

        /**
         * Properties of a NotificationMessageInfo.
         * @memberof WAWeb
         * @interface INotificationMessageInfo
         * @property {WAProtocol.IMessageKey|null} [key] NotificationMessageInfo key
         * @property {WAE2E.IMessage|null} [message] NotificationMessageInfo message
         * @property {number|Long|null} [messageTimestamp] NotificationMessageInfo messageTimestamp
         * @property {string|null} [participant] NotificationMessageInfo participant
         */

        /**
         * Constructs a new NotificationMessageInfo.
         * @memberof WAWeb
         * @classdesc Represents a NotificationMessageInfo.
         * @implements INotificationMessageInfo
         * @constructor
         * @param {WAWeb.INotificationMessageInfo=} [properties] Properties to set
         */
        function NotificationMessageInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * NotificationMessageInfo key.
         * @member {WAProtocol.IMessageKey|null|undefined} key
         * @memberof WAWeb.NotificationMessageInfo
         * @instance
         */
        NotificationMessageInfo.prototype.key = null;

        /**
         * NotificationMessageInfo message.
         * @member {WAE2E.IMessage|null|undefined} message
         * @memberof WAWeb.NotificationMessageInfo
         * @instance
         */
        NotificationMessageInfo.prototype.message = null;

        /**
         * NotificationMessageInfo messageTimestamp.
         * @member {number|Long} messageTimestamp
         * @memberof WAWeb.NotificationMessageInfo
         * @instance
         */
        NotificationMessageInfo.prototype.messageTimestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * NotificationMessageInfo participant.
         * @member {string} participant
         * @memberof WAWeb.NotificationMessageInfo
         * @instance
         */
        NotificationMessageInfo.prototype.participant = "";

        /**
         * Creates a new NotificationMessageInfo instance using the specified properties.
         * @function create
         * @memberof WAWeb.NotificationMessageInfo
         * @static
         * @param {WAWeb.INotificationMessageInfo=} [properties] Properties to set
         * @returns {WAWeb.NotificationMessageInfo} NotificationMessageInfo instance
         */
        NotificationMessageInfo.create = function create(properties) {
            return new NotificationMessageInfo(properties);
        };

        /**
         * Encodes the specified NotificationMessageInfo message. Does not implicitly {@link WAWeb.NotificationMessageInfo.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.NotificationMessageInfo
         * @static
         * @param {WAWeb.INotificationMessageInfo} message NotificationMessageInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NotificationMessageInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                $root.WAProtocol.MessageKey.encode(message.key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                $root.WAE2E.Message.encode(message.message, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.messageTimestamp != null && Object.hasOwnProperty.call(message, "messageTimestamp"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.messageTimestamp);
            if (message.participant != null && Object.hasOwnProperty.call(message, "participant"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.participant);
            return writer;
        };

        /**
         * Encodes the specified NotificationMessageInfo message, length delimited. Does not implicitly {@link WAWeb.NotificationMessageInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.NotificationMessageInfo
         * @static
         * @param {WAWeb.INotificationMessageInfo} message NotificationMessageInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NotificationMessageInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a NotificationMessageInfo message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.NotificationMessageInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.NotificationMessageInfo} NotificationMessageInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NotificationMessageInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.NotificationMessageInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.key = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        message.message = $root.WAE2E.Message.decode(reader, reader.uint32());
                        break;
                    }
                case 3: {
                        message.messageTimestamp = reader.uint64();
                        break;
                    }
                case 4: {
                        message.participant = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a NotificationMessageInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.NotificationMessageInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.NotificationMessageInfo} NotificationMessageInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NotificationMessageInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a NotificationMessageInfo message.
         * @function verify
         * @memberof WAWeb.NotificationMessageInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        NotificationMessageInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.key != null && message.hasOwnProperty("key")) {
                var error = $root.WAProtocol.MessageKey.verify(message.key);
                if (error)
                    return "key." + error;
            }
            if (message.message != null && message.hasOwnProperty("message")) {
                var error = $root.WAE2E.Message.verify(message.message);
                if (error)
                    return "message." + error;
            }
            if (message.messageTimestamp != null && message.hasOwnProperty("messageTimestamp"))
                if (!$util.isInteger(message.messageTimestamp) && !(message.messageTimestamp && $util.isInteger(message.messageTimestamp.low) && $util.isInteger(message.messageTimestamp.high)))
                    return "messageTimestamp: integer|Long expected";
            if (message.participant != null && message.hasOwnProperty("participant"))
                if (!$util.isString(message.participant))
                    return "participant: string expected";
            return null;
        };

        /**
         * Creates a NotificationMessageInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.NotificationMessageInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.NotificationMessageInfo} NotificationMessageInfo
         */
        NotificationMessageInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.NotificationMessageInfo)
                return object;
            var message = new $root.WAWeb.NotificationMessageInfo();
            if (object.key != null) {
                if (typeof object.key !== "object")
                    throw TypeError(".WAWeb.NotificationMessageInfo.key: object expected");
                message.key = $root.WAProtocol.MessageKey.fromObject(object.key);
            }
            if (object.message != null) {
                if (typeof object.message !== "object")
                    throw TypeError(".WAWeb.NotificationMessageInfo.message: object expected");
                message.message = $root.WAE2E.Message.fromObject(object.message);
            }
            if (object.messageTimestamp != null)
                if ($util.Long)
                    (message.messageTimestamp = $util.Long.fromValue(object.messageTimestamp)).unsigned = true;
                else if (typeof object.messageTimestamp === "string")
                    message.messageTimestamp = parseInt(object.messageTimestamp, 10);
                else if (typeof object.messageTimestamp === "number")
                    message.messageTimestamp = object.messageTimestamp;
                else if (typeof object.messageTimestamp === "object")
                    message.messageTimestamp = new $util.LongBits(object.messageTimestamp.low >>> 0, object.messageTimestamp.high >>> 0).toNumber(true);
            if (object.participant != null)
                message.participant = String(object.participant);
            return message;
        };

        /**
         * Creates a plain object from a NotificationMessageInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.NotificationMessageInfo
         * @static
         * @param {WAWeb.NotificationMessageInfo} message NotificationMessageInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        NotificationMessageInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.key = null;
                object.message = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.messageTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.messageTimestamp = options.longs === String ? "0" : 0;
                object.participant = "";
            }
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = $root.WAProtocol.MessageKey.toObject(message.key, options);
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = $root.WAE2E.Message.toObject(message.message, options);
            if (message.messageTimestamp != null && message.hasOwnProperty("messageTimestamp"))
                if (typeof message.messageTimestamp === "number")
                    object.messageTimestamp = options.longs === String ? String(message.messageTimestamp) : message.messageTimestamp;
                else
                    object.messageTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.messageTimestamp) : options.longs === Number ? new $util.LongBits(message.messageTimestamp.low >>> 0, message.messageTimestamp.high >>> 0).toNumber(true) : message.messageTimestamp;
            if (message.participant != null && message.hasOwnProperty("participant"))
                object.participant = message.participant;
            return object;
        };

        /**
         * Converts this NotificationMessageInfo to JSON.
         * @function toJSON
         * @memberof WAWeb.NotificationMessageInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        NotificationMessageInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for NotificationMessageInfo
         * @function getTypeUrl
         * @memberof WAWeb.NotificationMessageInfo
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        NotificationMessageInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.NotificationMessageInfo";
        };

        return NotificationMessageInfo;
    })();

    WAWeb.ReportingTokenInfo = (function() {

        /**
         * Properties of a ReportingTokenInfo.
         * @memberof WAWeb
         * @interface IReportingTokenInfo
         * @property {Uint8Array|null} [reportingTag] ReportingTokenInfo reportingTag
         */

        /**
         * Constructs a new ReportingTokenInfo.
         * @memberof WAWeb
         * @classdesc Represents a ReportingTokenInfo.
         * @implements IReportingTokenInfo
         * @constructor
         * @param {WAWeb.IReportingTokenInfo=} [properties] Properties to set
         */
        function ReportingTokenInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ReportingTokenInfo reportingTag.
         * @member {Uint8Array} reportingTag
         * @memberof WAWeb.ReportingTokenInfo
         * @instance
         */
        ReportingTokenInfo.prototype.reportingTag = $util.newBuffer([]);

        /**
         * Creates a new ReportingTokenInfo instance using the specified properties.
         * @function create
         * @memberof WAWeb.ReportingTokenInfo
         * @static
         * @param {WAWeb.IReportingTokenInfo=} [properties] Properties to set
         * @returns {WAWeb.ReportingTokenInfo} ReportingTokenInfo instance
         */
        ReportingTokenInfo.create = function create(properties) {
            return new ReportingTokenInfo(properties);
        };

        /**
         * Encodes the specified ReportingTokenInfo message. Does not implicitly {@link WAWeb.ReportingTokenInfo.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.ReportingTokenInfo
         * @static
         * @param {WAWeb.IReportingTokenInfo} message ReportingTokenInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ReportingTokenInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.reportingTag != null && Object.hasOwnProperty.call(message, "reportingTag"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.reportingTag);
            return writer;
        };

        /**
         * Encodes the specified ReportingTokenInfo message, length delimited. Does not implicitly {@link WAWeb.ReportingTokenInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.ReportingTokenInfo
         * @static
         * @param {WAWeb.IReportingTokenInfo} message ReportingTokenInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ReportingTokenInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ReportingTokenInfo message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.ReportingTokenInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.ReportingTokenInfo} ReportingTokenInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ReportingTokenInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.ReportingTokenInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.reportingTag = reader.bytes();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ReportingTokenInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.ReportingTokenInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.ReportingTokenInfo} ReportingTokenInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ReportingTokenInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ReportingTokenInfo message.
         * @function verify
         * @memberof WAWeb.ReportingTokenInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ReportingTokenInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.reportingTag != null && message.hasOwnProperty("reportingTag"))
                if (!(message.reportingTag && typeof message.reportingTag.length === "number" || $util.isString(message.reportingTag)))
                    return "reportingTag: buffer expected";
            return null;
        };

        /**
         * Creates a ReportingTokenInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.ReportingTokenInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.ReportingTokenInfo} ReportingTokenInfo
         */
        ReportingTokenInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.ReportingTokenInfo)
                return object;
            var message = new $root.WAWeb.ReportingTokenInfo();
            if (object.reportingTag != null)
                if (typeof object.reportingTag === "string")
                    $util.base64.decode(object.reportingTag, message.reportingTag = $util.newBuffer($util.base64.length(object.reportingTag)), 0);
                else if (object.reportingTag.length >= 0)
                    message.reportingTag = object.reportingTag;
            return message;
        };

        /**
         * Creates a plain object from a ReportingTokenInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.ReportingTokenInfo
         * @static
         * @param {WAWeb.ReportingTokenInfo} message ReportingTokenInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ReportingTokenInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if (options.bytes === String)
                    object.reportingTag = "";
                else {
                    object.reportingTag = [];
                    if (options.bytes !== Array)
                        object.reportingTag = $util.newBuffer(object.reportingTag);
                }
            if (message.reportingTag != null && message.hasOwnProperty("reportingTag"))
                object.reportingTag = options.bytes === String ? $util.base64.encode(message.reportingTag, 0, message.reportingTag.length) : options.bytes === Array ? Array.prototype.slice.call(message.reportingTag) : message.reportingTag;
            return object;
        };

        /**
         * Converts this ReportingTokenInfo to JSON.
         * @function toJSON
         * @memberof WAWeb.ReportingTokenInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ReportingTokenInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for ReportingTokenInfo
         * @function getTypeUrl
         * @memberof WAWeb.ReportingTokenInfo
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        ReportingTokenInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.ReportingTokenInfo";
        };

        return ReportingTokenInfo;
    })();

    WAWeb.MediaData = (function() {

        /**
         * Properties of a MediaData.
         * @memberof WAWeb
         * @interface IMediaData
         * @property {string|null} [localPath] MediaData localPath
         */

        /**
         * Constructs a new MediaData.
         * @memberof WAWeb
         * @classdesc Represents a MediaData.
         * @implements IMediaData
         * @constructor
         * @param {WAWeb.IMediaData=} [properties] Properties to set
         */
        function MediaData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MediaData localPath.
         * @member {string} localPath
         * @memberof WAWeb.MediaData
         * @instance
         */
        MediaData.prototype.localPath = "";

        /**
         * Creates a new MediaData instance using the specified properties.
         * @function create
         * @memberof WAWeb.MediaData
         * @static
         * @param {WAWeb.IMediaData=} [properties] Properties to set
         * @returns {WAWeb.MediaData} MediaData instance
         */
        MediaData.create = function create(properties) {
            return new MediaData(properties);
        };

        /**
         * Encodes the specified MediaData message. Does not implicitly {@link WAWeb.MediaData.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.MediaData
         * @static
         * @param {WAWeb.IMediaData} message MediaData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MediaData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.localPath != null && Object.hasOwnProperty.call(message, "localPath"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.localPath);
            return writer;
        };

        /**
         * Encodes the specified MediaData message, length delimited. Does not implicitly {@link WAWeb.MediaData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.MediaData
         * @static
         * @param {WAWeb.IMediaData} message MediaData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MediaData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MediaData message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.MediaData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.MediaData} MediaData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MediaData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.MediaData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.localPath = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MediaData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.MediaData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.MediaData} MediaData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MediaData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MediaData message.
         * @function verify
         * @memberof WAWeb.MediaData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MediaData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.localPath != null && message.hasOwnProperty("localPath"))
                if (!$util.isString(message.localPath))
                    return "localPath: string expected";
            return null;
        };

        /**
         * Creates a MediaData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.MediaData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.MediaData} MediaData
         */
        MediaData.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.MediaData)
                return object;
            var message = new $root.WAWeb.MediaData();
            if (object.localPath != null)
                message.localPath = String(object.localPath);
            return message;
        };

        /**
         * Creates a plain object from a MediaData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.MediaData
         * @static
         * @param {WAWeb.MediaData} message MediaData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MediaData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.localPath = "";
            if (message.localPath != null && message.hasOwnProperty("localPath"))
                object.localPath = message.localPath;
            return object;
        };

        /**
         * Converts this MediaData to JSON.
         * @function toJSON
         * @memberof WAWeb.MediaData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MediaData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for MediaData
         * @function getTypeUrl
         * @memberof WAWeb.MediaData
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        MediaData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.MediaData";
        };

        return MediaData;
    })();

    WAWeb.PhotoChange = (function() {

        /**
         * Properties of a PhotoChange.
         * @memberof WAWeb
         * @interface IPhotoChange
         * @property {Uint8Array|null} [oldPhoto] PhotoChange oldPhoto
         * @property {Uint8Array|null} [newPhoto] PhotoChange newPhoto
         * @property {number|null} [newPhotoID] PhotoChange newPhotoID
         */

        /**
         * Constructs a new PhotoChange.
         * @memberof WAWeb
         * @classdesc Represents a PhotoChange.
         * @implements IPhotoChange
         * @constructor
         * @param {WAWeb.IPhotoChange=} [properties] Properties to set
         */
        function PhotoChange(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PhotoChange oldPhoto.
         * @member {Uint8Array} oldPhoto
         * @memberof WAWeb.PhotoChange
         * @instance
         */
        PhotoChange.prototype.oldPhoto = $util.newBuffer([]);

        /**
         * PhotoChange newPhoto.
         * @member {Uint8Array} newPhoto
         * @memberof WAWeb.PhotoChange
         * @instance
         */
        PhotoChange.prototype.newPhoto = $util.newBuffer([]);

        /**
         * PhotoChange newPhotoID.
         * @member {number} newPhotoID
         * @memberof WAWeb.PhotoChange
         * @instance
         */
        PhotoChange.prototype.newPhotoID = 0;

        /**
         * Creates a new PhotoChange instance using the specified properties.
         * @function create
         * @memberof WAWeb.PhotoChange
         * @static
         * @param {WAWeb.IPhotoChange=} [properties] Properties to set
         * @returns {WAWeb.PhotoChange} PhotoChange instance
         */
        PhotoChange.create = function create(properties) {
            return new PhotoChange(properties);
        };

        /**
         * Encodes the specified PhotoChange message. Does not implicitly {@link WAWeb.PhotoChange.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.PhotoChange
         * @static
         * @param {WAWeb.IPhotoChange} message PhotoChange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PhotoChange.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.oldPhoto != null && Object.hasOwnProperty.call(message, "oldPhoto"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.oldPhoto);
            if (message.newPhoto != null && Object.hasOwnProperty.call(message, "newPhoto"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.newPhoto);
            if (message.newPhotoID != null && Object.hasOwnProperty.call(message, "newPhotoID"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.newPhotoID);
            return writer;
        };

        /**
         * Encodes the specified PhotoChange message, length delimited. Does not implicitly {@link WAWeb.PhotoChange.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.PhotoChange
         * @static
         * @param {WAWeb.IPhotoChange} message PhotoChange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PhotoChange.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PhotoChange message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.PhotoChange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.PhotoChange} PhotoChange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PhotoChange.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.PhotoChange();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.oldPhoto = reader.bytes();
                        break;
                    }
                case 2: {
                        message.newPhoto = reader.bytes();
                        break;
                    }
                case 3: {
                        message.newPhotoID = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PhotoChange message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.PhotoChange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.PhotoChange} PhotoChange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PhotoChange.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PhotoChange message.
         * @function verify
         * @memberof WAWeb.PhotoChange
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PhotoChange.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.oldPhoto != null && message.hasOwnProperty("oldPhoto"))
                if (!(message.oldPhoto && typeof message.oldPhoto.length === "number" || $util.isString(message.oldPhoto)))
                    return "oldPhoto: buffer expected";
            if (message.newPhoto != null && message.hasOwnProperty("newPhoto"))
                if (!(message.newPhoto && typeof message.newPhoto.length === "number" || $util.isString(message.newPhoto)))
                    return "newPhoto: buffer expected";
            if (message.newPhotoID != null && message.hasOwnProperty("newPhotoID"))
                if (!$util.isInteger(message.newPhotoID))
                    return "newPhotoID: integer expected";
            return null;
        };

        /**
         * Creates a PhotoChange message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.PhotoChange
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.PhotoChange} PhotoChange
         */
        PhotoChange.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.PhotoChange)
                return object;
            var message = new $root.WAWeb.PhotoChange();
            if (object.oldPhoto != null)
                if (typeof object.oldPhoto === "string")
                    $util.base64.decode(object.oldPhoto, message.oldPhoto = $util.newBuffer($util.base64.length(object.oldPhoto)), 0);
                else if (object.oldPhoto.length >= 0)
                    message.oldPhoto = object.oldPhoto;
            if (object.newPhoto != null)
                if (typeof object.newPhoto === "string")
                    $util.base64.decode(object.newPhoto, message.newPhoto = $util.newBuffer($util.base64.length(object.newPhoto)), 0);
                else if (object.newPhoto.length >= 0)
                    message.newPhoto = object.newPhoto;
            if (object.newPhotoID != null)
                message.newPhotoID = object.newPhotoID >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a PhotoChange message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.PhotoChange
         * @static
         * @param {WAWeb.PhotoChange} message PhotoChange
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PhotoChange.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if (options.bytes === String)
                    object.oldPhoto = "";
                else {
                    object.oldPhoto = [];
                    if (options.bytes !== Array)
                        object.oldPhoto = $util.newBuffer(object.oldPhoto);
                }
                if (options.bytes === String)
                    object.newPhoto = "";
                else {
                    object.newPhoto = [];
                    if (options.bytes !== Array)
                        object.newPhoto = $util.newBuffer(object.newPhoto);
                }
                object.newPhotoID = 0;
            }
            if (message.oldPhoto != null && message.hasOwnProperty("oldPhoto"))
                object.oldPhoto = options.bytes === String ? $util.base64.encode(message.oldPhoto, 0, message.oldPhoto.length) : options.bytes === Array ? Array.prototype.slice.call(message.oldPhoto) : message.oldPhoto;
            if (message.newPhoto != null && message.hasOwnProperty("newPhoto"))
                object.newPhoto = options.bytes === String ? $util.base64.encode(message.newPhoto, 0, message.newPhoto.length) : options.bytes === Array ? Array.prototype.slice.call(message.newPhoto) : message.newPhoto;
            if (message.newPhotoID != null && message.hasOwnProperty("newPhotoID"))
                object.newPhotoID = message.newPhotoID;
            return object;
        };

        /**
         * Converts this PhotoChange to JSON.
         * @function toJSON
         * @memberof WAWeb.PhotoChange
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PhotoChange.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for PhotoChange
         * @function getTypeUrl
         * @memberof WAWeb.PhotoChange
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        PhotoChange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.PhotoChange";
        };

        return PhotoChange;
    })();

    WAWeb.StatusPSA = (function() {

        /**
         * Properties of a StatusPSA.
         * @memberof WAWeb
         * @interface IStatusPSA
         * @property {number|Long} campaignID StatusPSA campaignID
         * @property {number|Long|null} [campaignExpirationTimestamp] StatusPSA campaignExpirationTimestamp
         */

        /**
         * Constructs a new StatusPSA.
         * @memberof WAWeb
         * @classdesc Represents a StatusPSA.
         * @implements IStatusPSA
         * @constructor
         * @param {WAWeb.IStatusPSA=} [properties] Properties to set
         */
        function StatusPSA(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StatusPSA campaignID.
         * @member {number|Long} campaignID
         * @memberof WAWeb.StatusPSA
         * @instance
         */
        StatusPSA.prototype.campaignID = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * StatusPSA campaignExpirationTimestamp.
         * @member {number|Long} campaignExpirationTimestamp
         * @memberof WAWeb.StatusPSA
         * @instance
         */
        StatusPSA.prototype.campaignExpirationTimestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new StatusPSA instance using the specified properties.
         * @function create
         * @memberof WAWeb.StatusPSA
         * @static
         * @param {WAWeb.IStatusPSA=} [properties] Properties to set
         * @returns {WAWeb.StatusPSA} StatusPSA instance
         */
        StatusPSA.create = function create(properties) {
            return new StatusPSA(properties);
        };

        /**
         * Encodes the specified StatusPSA message. Does not implicitly {@link WAWeb.StatusPSA.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.StatusPSA
         * @static
         * @param {WAWeb.IStatusPSA} message StatusPSA message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StatusPSA.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 44, wireType 0 =*/352).uint64(message.campaignID);
            if (message.campaignExpirationTimestamp != null && Object.hasOwnProperty.call(message, "campaignExpirationTimestamp"))
                writer.uint32(/* id 45, wireType 0 =*/360).uint64(message.campaignExpirationTimestamp);
            return writer;
        };

        /**
         * Encodes the specified StatusPSA message, length delimited. Does not implicitly {@link WAWeb.StatusPSA.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.StatusPSA
         * @static
         * @param {WAWeb.IStatusPSA} message StatusPSA message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StatusPSA.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a StatusPSA message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.StatusPSA
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.StatusPSA} StatusPSA
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StatusPSA.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.StatusPSA();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 44: {
                        message.campaignID = reader.uint64();
                        break;
                    }
                case 45: {
                        message.campaignExpirationTimestamp = reader.uint64();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("campaignID"))
                throw $util.ProtocolError("missing required 'campaignID'", { instance: message });
            return message;
        };

        /**
         * Decodes a StatusPSA message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.StatusPSA
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.StatusPSA} StatusPSA
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StatusPSA.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a StatusPSA message.
         * @function verify
         * @memberof WAWeb.StatusPSA
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StatusPSA.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.campaignID) && !(message.campaignID && $util.isInteger(message.campaignID.low) && $util.isInteger(message.campaignID.high)))
                return "campaignID: integer|Long expected";
            if (message.campaignExpirationTimestamp != null && message.hasOwnProperty("campaignExpirationTimestamp"))
                if (!$util.isInteger(message.campaignExpirationTimestamp) && !(message.campaignExpirationTimestamp && $util.isInteger(message.campaignExpirationTimestamp.low) && $util.isInteger(message.campaignExpirationTimestamp.high)))
                    return "campaignExpirationTimestamp: integer|Long expected";
            return null;
        };

        /**
         * Creates a StatusPSA message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.StatusPSA
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.StatusPSA} StatusPSA
         */
        StatusPSA.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.StatusPSA)
                return object;
            var message = new $root.WAWeb.StatusPSA();
            if (object.campaignID != null)
                if ($util.Long)
                    (message.campaignID = $util.Long.fromValue(object.campaignID)).unsigned = true;
                else if (typeof object.campaignID === "string")
                    message.campaignID = parseInt(object.campaignID, 10);
                else if (typeof object.campaignID === "number")
                    message.campaignID = object.campaignID;
                else if (typeof object.campaignID === "object")
                    message.campaignID = new $util.LongBits(object.campaignID.low >>> 0, object.campaignID.high >>> 0).toNumber(true);
            if (object.campaignExpirationTimestamp != null)
                if ($util.Long)
                    (message.campaignExpirationTimestamp = $util.Long.fromValue(object.campaignExpirationTimestamp)).unsigned = true;
                else if (typeof object.campaignExpirationTimestamp === "string")
                    message.campaignExpirationTimestamp = parseInt(object.campaignExpirationTimestamp, 10);
                else if (typeof object.campaignExpirationTimestamp === "number")
                    message.campaignExpirationTimestamp = object.campaignExpirationTimestamp;
                else if (typeof object.campaignExpirationTimestamp === "object")
                    message.campaignExpirationTimestamp = new $util.LongBits(object.campaignExpirationTimestamp.low >>> 0, object.campaignExpirationTimestamp.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a StatusPSA message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.StatusPSA
         * @static
         * @param {WAWeb.StatusPSA} message StatusPSA
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StatusPSA.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.campaignID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.campaignID = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.campaignExpirationTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.campaignExpirationTimestamp = options.longs === String ? "0" : 0;
            }
            if (message.campaignID != null && message.hasOwnProperty("campaignID"))
                if (typeof message.campaignID === "number")
                    object.campaignID = options.longs === String ? String(message.campaignID) : message.campaignID;
                else
                    object.campaignID = options.longs === String ? $util.Long.prototype.toString.call(message.campaignID) : options.longs === Number ? new $util.LongBits(message.campaignID.low >>> 0, message.campaignID.high >>> 0).toNumber(true) : message.campaignID;
            if (message.campaignExpirationTimestamp != null && message.hasOwnProperty("campaignExpirationTimestamp"))
                if (typeof message.campaignExpirationTimestamp === "number")
                    object.campaignExpirationTimestamp = options.longs === String ? String(message.campaignExpirationTimestamp) : message.campaignExpirationTimestamp;
                else
                    object.campaignExpirationTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.campaignExpirationTimestamp) : options.longs === Number ? new $util.LongBits(message.campaignExpirationTimestamp.low >>> 0, message.campaignExpirationTimestamp.high >>> 0).toNumber(true) : message.campaignExpirationTimestamp;
            return object;
        };

        /**
         * Converts this StatusPSA to JSON.
         * @function toJSON
         * @memberof WAWeb.StatusPSA
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StatusPSA.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for StatusPSA
         * @function getTypeUrl
         * @memberof WAWeb.StatusPSA
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        StatusPSA.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.StatusPSA";
        };

        return StatusPSA;
    })();

    WAWeb.UserReceipt = (function() {

        /**
         * Properties of a UserReceipt.
         * @memberof WAWeb
         * @interface IUserReceipt
         * @property {string} userJID UserReceipt userJID
         * @property {number|Long|null} [receiptTimestamp] UserReceipt receiptTimestamp
         * @property {number|Long|null} [readTimestamp] UserReceipt readTimestamp
         * @property {number|Long|null} [playedTimestamp] UserReceipt playedTimestamp
         * @property {Array.<string>|null} [pendingDeviceJID] UserReceipt pendingDeviceJID
         * @property {Array.<string>|null} [deliveredDeviceJID] UserReceipt deliveredDeviceJID
         */

        /**
         * Constructs a new UserReceipt.
         * @memberof WAWeb
         * @classdesc Represents a UserReceipt.
         * @implements IUserReceipt
         * @constructor
         * @param {WAWeb.IUserReceipt=} [properties] Properties to set
         */
        function UserReceipt(properties) {
            this.pendingDeviceJID = [];
            this.deliveredDeviceJID = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserReceipt userJID.
         * @member {string} userJID
         * @memberof WAWeb.UserReceipt
         * @instance
         */
        UserReceipt.prototype.userJID = "";

        /**
         * UserReceipt receiptTimestamp.
         * @member {number|Long} receiptTimestamp
         * @memberof WAWeb.UserReceipt
         * @instance
         */
        UserReceipt.prototype.receiptTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * UserReceipt readTimestamp.
         * @member {number|Long} readTimestamp
         * @memberof WAWeb.UserReceipt
         * @instance
         */
        UserReceipt.prototype.readTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * UserReceipt playedTimestamp.
         * @member {number|Long} playedTimestamp
         * @memberof WAWeb.UserReceipt
         * @instance
         */
        UserReceipt.prototype.playedTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * UserReceipt pendingDeviceJID.
         * @member {Array.<string>} pendingDeviceJID
         * @memberof WAWeb.UserReceipt
         * @instance
         */
        UserReceipt.prototype.pendingDeviceJID = $util.emptyArray;

        /**
         * UserReceipt deliveredDeviceJID.
         * @member {Array.<string>} deliveredDeviceJID
         * @memberof WAWeb.UserReceipt
         * @instance
         */
        UserReceipt.prototype.deliveredDeviceJID = $util.emptyArray;

        /**
         * Creates a new UserReceipt instance using the specified properties.
         * @function create
         * @memberof WAWeb.UserReceipt
         * @static
         * @param {WAWeb.IUserReceipt=} [properties] Properties to set
         * @returns {WAWeb.UserReceipt} UserReceipt instance
         */
        UserReceipt.create = function create(properties) {
            return new UserReceipt(properties);
        };

        /**
         * Encodes the specified UserReceipt message. Does not implicitly {@link WAWeb.UserReceipt.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.UserReceipt
         * @static
         * @param {WAWeb.IUserReceipt} message UserReceipt message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserReceipt.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.userJID);
            if (message.receiptTimestamp != null && Object.hasOwnProperty.call(message, "receiptTimestamp"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.receiptTimestamp);
            if (message.readTimestamp != null && Object.hasOwnProperty.call(message, "readTimestamp"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.readTimestamp);
            if (message.playedTimestamp != null && Object.hasOwnProperty.call(message, "playedTimestamp"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.playedTimestamp);
            if (message.pendingDeviceJID != null && message.pendingDeviceJID.length)
                for (var i = 0; i < message.pendingDeviceJID.length; ++i)
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.pendingDeviceJID[i]);
            if (message.deliveredDeviceJID != null && message.deliveredDeviceJID.length)
                for (var i = 0; i < message.deliveredDeviceJID.length; ++i)
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.deliveredDeviceJID[i]);
            return writer;
        };

        /**
         * Encodes the specified UserReceipt message, length delimited. Does not implicitly {@link WAWeb.UserReceipt.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.UserReceipt
         * @static
         * @param {WAWeb.IUserReceipt} message UserReceipt message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserReceipt.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserReceipt message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.UserReceipt
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.UserReceipt} UserReceipt
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserReceipt.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.UserReceipt();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.userJID = reader.string();
                        break;
                    }
                case 2: {
                        message.receiptTimestamp = reader.int64();
                        break;
                    }
                case 3: {
                        message.readTimestamp = reader.int64();
                        break;
                    }
                case 4: {
                        message.playedTimestamp = reader.int64();
                        break;
                    }
                case 5: {
                        if (!(message.pendingDeviceJID && message.pendingDeviceJID.length))
                            message.pendingDeviceJID = [];
                        message.pendingDeviceJID.push(reader.string());
                        break;
                    }
                case 6: {
                        if (!(message.deliveredDeviceJID && message.deliveredDeviceJID.length))
                            message.deliveredDeviceJID = [];
                        message.deliveredDeviceJID.push(reader.string());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userJID"))
                throw $util.ProtocolError("missing required 'userJID'", { instance: message });
            return message;
        };

        /**
         * Decodes a UserReceipt message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.UserReceipt
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.UserReceipt} UserReceipt
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserReceipt.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserReceipt message.
         * @function verify
         * @memberof WAWeb.UserReceipt
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserReceipt.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isString(message.userJID))
                return "userJID: string expected";
            if (message.receiptTimestamp != null && message.hasOwnProperty("receiptTimestamp"))
                if (!$util.isInteger(message.receiptTimestamp) && !(message.receiptTimestamp && $util.isInteger(message.receiptTimestamp.low) && $util.isInteger(message.receiptTimestamp.high)))
                    return "receiptTimestamp: integer|Long expected";
            if (message.readTimestamp != null && message.hasOwnProperty("readTimestamp"))
                if (!$util.isInteger(message.readTimestamp) && !(message.readTimestamp && $util.isInteger(message.readTimestamp.low) && $util.isInteger(message.readTimestamp.high)))
                    return "readTimestamp: integer|Long expected";
            if (message.playedTimestamp != null && message.hasOwnProperty("playedTimestamp"))
                if (!$util.isInteger(message.playedTimestamp) && !(message.playedTimestamp && $util.isInteger(message.playedTimestamp.low) && $util.isInteger(message.playedTimestamp.high)))
                    return "playedTimestamp: integer|Long expected";
            if (message.pendingDeviceJID != null && message.hasOwnProperty("pendingDeviceJID")) {
                if (!Array.isArray(message.pendingDeviceJID))
                    return "pendingDeviceJID: array expected";
                for (var i = 0; i < message.pendingDeviceJID.length; ++i)
                    if (!$util.isString(message.pendingDeviceJID[i]))
                        return "pendingDeviceJID: string[] expected";
            }
            if (message.deliveredDeviceJID != null && message.hasOwnProperty("deliveredDeviceJID")) {
                if (!Array.isArray(message.deliveredDeviceJID))
                    return "deliveredDeviceJID: array expected";
                for (var i = 0; i < message.deliveredDeviceJID.length; ++i)
                    if (!$util.isString(message.deliveredDeviceJID[i]))
                        return "deliveredDeviceJID: string[] expected";
            }
            return null;
        };

        /**
         * Creates a UserReceipt message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.UserReceipt
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.UserReceipt} UserReceipt
         */
        UserReceipt.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.UserReceipt)
                return object;
            var message = new $root.WAWeb.UserReceipt();
            if (object.userJID != null)
                message.userJID = String(object.userJID);
            if (object.receiptTimestamp != null)
                if ($util.Long)
                    (message.receiptTimestamp = $util.Long.fromValue(object.receiptTimestamp)).unsigned = false;
                else if (typeof object.receiptTimestamp === "string")
                    message.receiptTimestamp = parseInt(object.receiptTimestamp, 10);
                else if (typeof object.receiptTimestamp === "number")
                    message.receiptTimestamp = object.receiptTimestamp;
                else if (typeof object.receiptTimestamp === "object")
                    message.receiptTimestamp = new $util.LongBits(object.receiptTimestamp.low >>> 0, object.receiptTimestamp.high >>> 0).toNumber();
            if (object.readTimestamp != null)
                if ($util.Long)
                    (message.readTimestamp = $util.Long.fromValue(object.readTimestamp)).unsigned = false;
                else if (typeof object.readTimestamp === "string")
                    message.readTimestamp = parseInt(object.readTimestamp, 10);
                else if (typeof object.readTimestamp === "number")
                    message.readTimestamp = object.readTimestamp;
                else if (typeof object.readTimestamp === "object")
                    message.readTimestamp = new $util.LongBits(object.readTimestamp.low >>> 0, object.readTimestamp.high >>> 0).toNumber();
            if (object.playedTimestamp != null)
                if ($util.Long)
                    (message.playedTimestamp = $util.Long.fromValue(object.playedTimestamp)).unsigned = false;
                else if (typeof object.playedTimestamp === "string")
                    message.playedTimestamp = parseInt(object.playedTimestamp, 10);
                else if (typeof object.playedTimestamp === "number")
                    message.playedTimestamp = object.playedTimestamp;
                else if (typeof object.playedTimestamp === "object")
                    message.playedTimestamp = new $util.LongBits(object.playedTimestamp.low >>> 0, object.playedTimestamp.high >>> 0).toNumber();
            if (object.pendingDeviceJID) {
                if (!Array.isArray(object.pendingDeviceJID))
                    throw TypeError(".WAWeb.UserReceipt.pendingDeviceJID: array expected");
                message.pendingDeviceJID = [];
                for (var i = 0; i < object.pendingDeviceJID.length; ++i)
                    message.pendingDeviceJID[i] = String(object.pendingDeviceJID[i]);
            }
            if (object.deliveredDeviceJID) {
                if (!Array.isArray(object.deliveredDeviceJID))
                    throw TypeError(".WAWeb.UserReceipt.deliveredDeviceJID: array expected");
                message.deliveredDeviceJID = [];
                for (var i = 0; i < object.deliveredDeviceJID.length; ++i)
                    message.deliveredDeviceJID[i] = String(object.deliveredDeviceJID[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from a UserReceipt message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.UserReceipt
         * @static
         * @param {WAWeb.UserReceipt} message UserReceipt
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserReceipt.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.pendingDeviceJID = [];
                object.deliveredDeviceJID = [];
            }
            if (options.defaults) {
                object.userJID = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.receiptTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.receiptTimestamp = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.readTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.readTimestamp = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.playedTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.playedTimestamp = options.longs === String ? "0" : 0;
            }
            if (message.userJID != null && message.hasOwnProperty("userJID"))
                object.userJID = message.userJID;
            if (message.receiptTimestamp != null && message.hasOwnProperty("receiptTimestamp"))
                if (typeof message.receiptTimestamp === "number")
                    object.receiptTimestamp = options.longs === String ? String(message.receiptTimestamp) : message.receiptTimestamp;
                else
                    object.receiptTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.receiptTimestamp) : options.longs === Number ? new $util.LongBits(message.receiptTimestamp.low >>> 0, message.receiptTimestamp.high >>> 0).toNumber() : message.receiptTimestamp;
            if (message.readTimestamp != null && message.hasOwnProperty("readTimestamp"))
                if (typeof message.readTimestamp === "number")
                    object.readTimestamp = options.longs === String ? String(message.readTimestamp) : message.readTimestamp;
                else
                    object.readTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.readTimestamp) : options.longs === Number ? new $util.LongBits(message.readTimestamp.low >>> 0, message.readTimestamp.high >>> 0).toNumber() : message.readTimestamp;
            if (message.playedTimestamp != null && message.hasOwnProperty("playedTimestamp"))
                if (typeof message.playedTimestamp === "number")
                    object.playedTimestamp = options.longs === String ? String(message.playedTimestamp) : message.playedTimestamp;
                else
                    object.playedTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.playedTimestamp) : options.longs === Number ? new $util.LongBits(message.playedTimestamp.low >>> 0, message.playedTimestamp.high >>> 0).toNumber() : message.playedTimestamp;
            if (message.pendingDeviceJID && message.pendingDeviceJID.length) {
                object.pendingDeviceJID = [];
                for (var j = 0; j < message.pendingDeviceJID.length; ++j)
                    object.pendingDeviceJID[j] = message.pendingDeviceJID[j];
            }
            if (message.deliveredDeviceJID && message.deliveredDeviceJID.length) {
                object.deliveredDeviceJID = [];
                for (var j = 0; j < message.deliveredDeviceJID.length; ++j)
                    object.deliveredDeviceJID[j] = message.deliveredDeviceJID[j];
            }
            return object;
        };

        /**
         * Converts this UserReceipt to JSON.
         * @function toJSON
         * @memberof WAWeb.UserReceipt
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserReceipt.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for UserReceipt
         * @function getTypeUrl
         * @memberof WAWeb.UserReceipt
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        UserReceipt.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.UserReceipt";
        };

        return UserReceipt;
    })();

    WAWeb.Reaction = (function() {

        /**
         * Properties of a Reaction.
         * @memberof WAWeb
         * @interface IReaction
         * @property {WAProtocol.IMessageKey|null} [key] Reaction key
         * @property {string|null} [text] Reaction text
         * @property {string|null} [groupingKey] Reaction groupingKey
         * @property {number|Long|null} [senderTimestampMS] Reaction senderTimestampMS
         * @property {boolean|null} [unread] Reaction unread
         */

        /**
         * Constructs a new Reaction.
         * @memberof WAWeb
         * @classdesc Represents a Reaction.
         * @implements IReaction
         * @constructor
         * @param {WAWeb.IReaction=} [properties] Properties to set
         */
        function Reaction(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Reaction key.
         * @member {WAProtocol.IMessageKey|null|undefined} key
         * @memberof WAWeb.Reaction
         * @instance
         */
        Reaction.prototype.key = null;

        /**
         * Reaction text.
         * @member {string} text
         * @memberof WAWeb.Reaction
         * @instance
         */
        Reaction.prototype.text = "";

        /**
         * Reaction groupingKey.
         * @member {string} groupingKey
         * @memberof WAWeb.Reaction
         * @instance
         */
        Reaction.prototype.groupingKey = "";

        /**
         * Reaction senderTimestampMS.
         * @member {number|Long} senderTimestampMS
         * @memberof WAWeb.Reaction
         * @instance
         */
        Reaction.prototype.senderTimestampMS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Reaction unread.
         * @member {boolean} unread
         * @memberof WAWeb.Reaction
         * @instance
         */
        Reaction.prototype.unread = false;

        /**
         * Creates a new Reaction instance using the specified properties.
         * @function create
         * @memberof WAWeb.Reaction
         * @static
         * @param {WAWeb.IReaction=} [properties] Properties to set
         * @returns {WAWeb.Reaction} Reaction instance
         */
        Reaction.create = function create(properties) {
            return new Reaction(properties);
        };

        /**
         * Encodes the specified Reaction message. Does not implicitly {@link WAWeb.Reaction.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.Reaction
         * @static
         * @param {WAWeb.IReaction} message Reaction message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Reaction.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                $root.WAProtocol.MessageKey.encode(message.key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
            if (message.groupingKey != null && Object.hasOwnProperty.call(message, "groupingKey"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.groupingKey);
            if (message.senderTimestampMS != null && Object.hasOwnProperty.call(message, "senderTimestampMS"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.senderTimestampMS);
            if (message.unread != null && Object.hasOwnProperty.call(message, "unread"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.unread);
            return writer;
        };

        /**
         * Encodes the specified Reaction message, length delimited. Does not implicitly {@link WAWeb.Reaction.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.Reaction
         * @static
         * @param {WAWeb.IReaction} message Reaction message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Reaction.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Reaction message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.Reaction
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.Reaction} Reaction
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Reaction.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.Reaction();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.key = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        message.text = reader.string();
                        break;
                    }
                case 3: {
                        message.groupingKey = reader.string();
                        break;
                    }
                case 4: {
                        message.senderTimestampMS = reader.int64();
                        break;
                    }
                case 5: {
                        message.unread = reader.bool();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Reaction message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.Reaction
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.Reaction} Reaction
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Reaction.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Reaction message.
         * @function verify
         * @memberof WAWeb.Reaction
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Reaction.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.key != null && message.hasOwnProperty("key")) {
                var error = $root.WAProtocol.MessageKey.verify(message.key);
                if (error)
                    return "key." + error;
            }
            if (message.text != null && message.hasOwnProperty("text"))
                if (!$util.isString(message.text))
                    return "text: string expected";
            if (message.groupingKey != null && message.hasOwnProperty("groupingKey"))
                if (!$util.isString(message.groupingKey))
                    return "groupingKey: string expected";
            if (message.senderTimestampMS != null && message.hasOwnProperty("senderTimestampMS"))
                if (!$util.isInteger(message.senderTimestampMS) && !(message.senderTimestampMS && $util.isInteger(message.senderTimestampMS.low) && $util.isInteger(message.senderTimestampMS.high)))
                    return "senderTimestampMS: integer|Long expected";
            if (message.unread != null && message.hasOwnProperty("unread"))
                if (typeof message.unread !== "boolean")
                    return "unread: boolean expected";
            return null;
        };

        /**
         * Creates a Reaction message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.Reaction
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.Reaction} Reaction
         */
        Reaction.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.Reaction)
                return object;
            var message = new $root.WAWeb.Reaction();
            if (object.key != null) {
                if (typeof object.key !== "object")
                    throw TypeError(".WAWeb.Reaction.key: object expected");
                message.key = $root.WAProtocol.MessageKey.fromObject(object.key);
            }
            if (object.text != null)
                message.text = String(object.text);
            if (object.groupingKey != null)
                message.groupingKey = String(object.groupingKey);
            if (object.senderTimestampMS != null)
                if ($util.Long)
                    (message.senderTimestampMS = $util.Long.fromValue(object.senderTimestampMS)).unsigned = false;
                else if (typeof object.senderTimestampMS === "string")
                    message.senderTimestampMS = parseInt(object.senderTimestampMS, 10);
                else if (typeof object.senderTimestampMS === "number")
                    message.senderTimestampMS = object.senderTimestampMS;
                else if (typeof object.senderTimestampMS === "object")
                    message.senderTimestampMS = new $util.LongBits(object.senderTimestampMS.low >>> 0, object.senderTimestampMS.high >>> 0).toNumber();
            if (object.unread != null)
                message.unread = Boolean(object.unread);
            return message;
        };

        /**
         * Creates a plain object from a Reaction message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.Reaction
         * @static
         * @param {WAWeb.Reaction} message Reaction
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Reaction.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.key = null;
                object.text = "";
                object.groupingKey = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.senderTimestampMS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.senderTimestampMS = options.longs === String ? "0" : 0;
                object.unread = false;
            }
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = $root.WAProtocol.MessageKey.toObject(message.key, options);
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            if (message.groupingKey != null && message.hasOwnProperty("groupingKey"))
                object.groupingKey = message.groupingKey;
            if (message.senderTimestampMS != null && message.hasOwnProperty("senderTimestampMS"))
                if (typeof message.senderTimestampMS === "number")
                    object.senderTimestampMS = options.longs === String ? String(message.senderTimestampMS) : message.senderTimestampMS;
                else
                    object.senderTimestampMS = options.longs === String ? $util.Long.prototype.toString.call(message.senderTimestampMS) : options.longs === Number ? new $util.LongBits(message.senderTimestampMS.low >>> 0, message.senderTimestampMS.high >>> 0).toNumber() : message.senderTimestampMS;
            if (message.unread != null && message.hasOwnProperty("unread"))
                object.unread = message.unread;
            return object;
        };

        /**
         * Converts this Reaction to JSON.
         * @function toJSON
         * @memberof WAWeb.Reaction
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Reaction.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Reaction
         * @function getTypeUrl
         * @memberof WAWeb.Reaction
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Reaction.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.Reaction";
        };

        return Reaction;
    })();

    WAWeb.PollUpdate = (function() {

        /**
         * Properties of a PollUpdate.
         * @memberof WAWeb
         * @interface IPollUpdate
         * @property {WAProtocol.IMessageKey|null} [pollUpdateMessageKey] PollUpdate pollUpdateMessageKey
         * @property {WAE2E.Message.IPollVoteMessage|null} [vote] PollUpdate vote
         * @property {number|Long|null} [senderTimestampMS] PollUpdate senderTimestampMS
         * @property {number|Long|null} [serverTimestampMS] PollUpdate serverTimestampMS
         * @property {boolean|null} [unread] PollUpdate unread
         */

        /**
         * Constructs a new PollUpdate.
         * @memberof WAWeb
         * @classdesc Represents a PollUpdate.
         * @implements IPollUpdate
         * @constructor
         * @param {WAWeb.IPollUpdate=} [properties] Properties to set
         */
        function PollUpdate(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PollUpdate pollUpdateMessageKey.
         * @member {WAProtocol.IMessageKey|null|undefined} pollUpdateMessageKey
         * @memberof WAWeb.PollUpdate
         * @instance
         */
        PollUpdate.prototype.pollUpdateMessageKey = null;

        /**
         * PollUpdate vote.
         * @member {WAE2E.Message.IPollVoteMessage|null|undefined} vote
         * @memberof WAWeb.PollUpdate
         * @instance
         */
        PollUpdate.prototype.vote = null;

        /**
         * PollUpdate senderTimestampMS.
         * @member {number|Long} senderTimestampMS
         * @memberof WAWeb.PollUpdate
         * @instance
         */
        PollUpdate.prototype.senderTimestampMS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * PollUpdate serverTimestampMS.
         * @member {number|Long} serverTimestampMS
         * @memberof WAWeb.PollUpdate
         * @instance
         */
        PollUpdate.prototype.serverTimestampMS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * PollUpdate unread.
         * @member {boolean} unread
         * @memberof WAWeb.PollUpdate
         * @instance
         */
        PollUpdate.prototype.unread = false;

        /**
         * Creates a new PollUpdate instance using the specified properties.
         * @function create
         * @memberof WAWeb.PollUpdate
         * @static
         * @param {WAWeb.IPollUpdate=} [properties] Properties to set
         * @returns {WAWeb.PollUpdate} PollUpdate instance
         */
        PollUpdate.create = function create(properties) {
            return new PollUpdate(properties);
        };

        /**
         * Encodes the specified PollUpdate message. Does not implicitly {@link WAWeb.PollUpdate.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.PollUpdate
         * @static
         * @param {WAWeb.IPollUpdate} message PollUpdate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PollUpdate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pollUpdateMessageKey != null && Object.hasOwnProperty.call(message, "pollUpdateMessageKey"))
                $root.WAProtocol.MessageKey.encode(message.pollUpdateMessageKey, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.vote != null && Object.hasOwnProperty.call(message, "vote"))
                $root.WAE2E.Message.PollVoteMessage.encode(message.vote, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.senderTimestampMS != null && Object.hasOwnProperty.call(message, "senderTimestampMS"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.senderTimestampMS);
            if (message.serverTimestampMS != null && Object.hasOwnProperty.call(message, "serverTimestampMS"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.serverTimestampMS);
            if (message.unread != null && Object.hasOwnProperty.call(message, "unread"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.unread);
            return writer;
        };

        /**
         * Encodes the specified PollUpdate message, length delimited. Does not implicitly {@link WAWeb.PollUpdate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.PollUpdate
         * @static
         * @param {WAWeb.IPollUpdate} message PollUpdate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PollUpdate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PollUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.PollUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.PollUpdate} PollUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PollUpdate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.PollUpdate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.pollUpdateMessageKey = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        message.vote = $root.WAE2E.Message.PollVoteMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 3: {
                        message.senderTimestampMS = reader.int64();
                        break;
                    }
                case 4: {
                        message.serverTimestampMS = reader.int64();
                        break;
                    }
                case 5: {
                        message.unread = reader.bool();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PollUpdate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.PollUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.PollUpdate} PollUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PollUpdate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PollUpdate message.
         * @function verify
         * @memberof WAWeb.PollUpdate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PollUpdate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pollUpdateMessageKey != null && message.hasOwnProperty("pollUpdateMessageKey")) {
                var error = $root.WAProtocol.MessageKey.verify(message.pollUpdateMessageKey);
                if (error)
                    return "pollUpdateMessageKey." + error;
            }
            if (message.vote != null && message.hasOwnProperty("vote")) {
                var error = $root.WAE2E.Message.PollVoteMessage.verify(message.vote);
                if (error)
                    return "vote." + error;
            }
            if (message.senderTimestampMS != null && message.hasOwnProperty("senderTimestampMS"))
                if (!$util.isInteger(message.senderTimestampMS) && !(message.senderTimestampMS && $util.isInteger(message.senderTimestampMS.low) && $util.isInteger(message.senderTimestampMS.high)))
                    return "senderTimestampMS: integer|Long expected";
            if (message.serverTimestampMS != null && message.hasOwnProperty("serverTimestampMS"))
                if (!$util.isInteger(message.serverTimestampMS) && !(message.serverTimestampMS && $util.isInteger(message.serverTimestampMS.low) && $util.isInteger(message.serverTimestampMS.high)))
                    return "serverTimestampMS: integer|Long expected";
            if (message.unread != null && message.hasOwnProperty("unread"))
                if (typeof message.unread !== "boolean")
                    return "unread: boolean expected";
            return null;
        };

        /**
         * Creates a PollUpdate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.PollUpdate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.PollUpdate} PollUpdate
         */
        PollUpdate.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.PollUpdate)
                return object;
            var message = new $root.WAWeb.PollUpdate();
            if (object.pollUpdateMessageKey != null) {
                if (typeof object.pollUpdateMessageKey !== "object")
                    throw TypeError(".WAWeb.PollUpdate.pollUpdateMessageKey: object expected");
                message.pollUpdateMessageKey = $root.WAProtocol.MessageKey.fromObject(object.pollUpdateMessageKey);
            }
            if (object.vote != null) {
                if (typeof object.vote !== "object")
                    throw TypeError(".WAWeb.PollUpdate.vote: object expected");
                message.vote = $root.WAE2E.Message.PollVoteMessage.fromObject(object.vote);
            }
            if (object.senderTimestampMS != null)
                if ($util.Long)
                    (message.senderTimestampMS = $util.Long.fromValue(object.senderTimestampMS)).unsigned = false;
                else if (typeof object.senderTimestampMS === "string")
                    message.senderTimestampMS = parseInt(object.senderTimestampMS, 10);
                else if (typeof object.senderTimestampMS === "number")
                    message.senderTimestampMS = object.senderTimestampMS;
                else if (typeof object.senderTimestampMS === "object")
                    message.senderTimestampMS = new $util.LongBits(object.senderTimestampMS.low >>> 0, object.senderTimestampMS.high >>> 0).toNumber();
            if (object.serverTimestampMS != null)
                if ($util.Long)
                    (message.serverTimestampMS = $util.Long.fromValue(object.serverTimestampMS)).unsigned = false;
                else if (typeof object.serverTimestampMS === "string")
                    message.serverTimestampMS = parseInt(object.serverTimestampMS, 10);
                else if (typeof object.serverTimestampMS === "number")
                    message.serverTimestampMS = object.serverTimestampMS;
                else if (typeof object.serverTimestampMS === "object")
                    message.serverTimestampMS = new $util.LongBits(object.serverTimestampMS.low >>> 0, object.serverTimestampMS.high >>> 0).toNumber();
            if (object.unread != null)
                message.unread = Boolean(object.unread);
            return message;
        };

        /**
         * Creates a plain object from a PollUpdate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.PollUpdate
         * @static
         * @param {WAWeb.PollUpdate} message PollUpdate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PollUpdate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.pollUpdateMessageKey = null;
                object.vote = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.senderTimestampMS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.senderTimestampMS = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.serverTimestampMS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.serverTimestampMS = options.longs === String ? "0" : 0;
                object.unread = false;
            }
            if (message.pollUpdateMessageKey != null && message.hasOwnProperty("pollUpdateMessageKey"))
                object.pollUpdateMessageKey = $root.WAProtocol.MessageKey.toObject(message.pollUpdateMessageKey, options);
            if (message.vote != null && message.hasOwnProperty("vote"))
                object.vote = $root.WAE2E.Message.PollVoteMessage.toObject(message.vote, options);
            if (message.senderTimestampMS != null && message.hasOwnProperty("senderTimestampMS"))
                if (typeof message.senderTimestampMS === "number")
                    object.senderTimestampMS = options.longs === String ? String(message.senderTimestampMS) : message.senderTimestampMS;
                else
                    object.senderTimestampMS = options.longs === String ? $util.Long.prototype.toString.call(message.senderTimestampMS) : options.longs === Number ? new $util.LongBits(message.senderTimestampMS.low >>> 0, message.senderTimestampMS.high >>> 0).toNumber() : message.senderTimestampMS;
            if (message.serverTimestampMS != null && message.hasOwnProperty("serverTimestampMS"))
                if (typeof message.serverTimestampMS === "number")
                    object.serverTimestampMS = options.longs === String ? String(message.serverTimestampMS) : message.serverTimestampMS;
                else
                    object.serverTimestampMS = options.longs === String ? $util.Long.prototype.toString.call(message.serverTimestampMS) : options.longs === Number ? new $util.LongBits(message.serverTimestampMS.low >>> 0, message.serverTimestampMS.high >>> 0).toNumber() : message.serverTimestampMS;
            if (message.unread != null && message.hasOwnProperty("unread"))
                object.unread = message.unread;
            return object;
        };

        /**
         * Converts this PollUpdate to JSON.
         * @function toJSON
         * @memberof WAWeb.PollUpdate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PollUpdate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for PollUpdate
         * @function getTypeUrl
         * @memberof WAWeb.PollUpdate
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        PollUpdate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.PollUpdate";
        };

        return PollUpdate;
    })();

    WAWeb.PollAdditionalMetadata = (function() {

        /**
         * Properties of a PollAdditionalMetadata.
         * @memberof WAWeb
         * @interface IPollAdditionalMetadata
         * @property {boolean|null} [pollInvalidated] PollAdditionalMetadata pollInvalidated
         */

        /**
         * Constructs a new PollAdditionalMetadata.
         * @memberof WAWeb
         * @classdesc Represents a PollAdditionalMetadata.
         * @implements IPollAdditionalMetadata
         * @constructor
         * @param {WAWeb.IPollAdditionalMetadata=} [properties] Properties to set
         */
        function PollAdditionalMetadata(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PollAdditionalMetadata pollInvalidated.
         * @member {boolean} pollInvalidated
         * @memberof WAWeb.PollAdditionalMetadata
         * @instance
         */
        PollAdditionalMetadata.prototype.pollInvalidated = false;

        /**
         * Creates a new PollAdditionalMetadata instance using the specified properties.
         * @function create
         * @memberof WAWeb.PollAdditionalMetadata
         * @static
         * @param {WAWeb.IPollAdditionalMetadata=} [properties] Properties to set
         * @returns {WAWeb.PollAdditionalMetadata} PollAdditionalMetadata instance
         */
        PollAdditionalMetadata.create = function create(properties) {
            return new PollAdditionalMetadata(properties);
        };

        /**
         * Encodes the specified PollAdditionalMetadata message. Does not implicitly {@link WAWeb.PollAdditionalMetadata.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.PollAdditionalMetadata
         * @static
         * @param {WAWeb.IPollAdditionalMetadata} message PollAdditionalMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PollAdditionalMetadata.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pollInvalidated != null && Object.hasOwnProperty.call(message, "pollInvalidated"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.pollInvalidated);
            return writer;
        };

        /**
         * Encodes the specified PollAdditionalMetadata message, length delimited. Does not implicitly {@link WAWeb.PollAdditionalMetadata.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.PollAdditionalMetadata
         * @static
         * @param {WAWeb.IPollAdditionalMetadata} message PollAdditionalMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PollAdditionalMetadata.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PollAdditionalMetadata message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.PollAdditionalMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.PollAdditionalMetadata} PollAdditionalMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PollAdditionalMetadata.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.PollAdditionalMetadata();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.pollInvalidated = reader.bool();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PollAdditionalMetadata message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.PollAdditionalMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.PollAdditionalMetadata} PollAdditionalMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PollAdditionalMetadata.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PollAdditionalMetadata message.
         * @function verify
         * @memberof WAWeb.PollAdditionalMetadata
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PollAdditionalMetadata.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pollInvalidated != null && message.hasOwnProperty("pollInvalidated"))
                if (typeof message.pollInvalidated !== "boolean")
                    return "pollInvalidated: boolean expected";
            return null;
        };

        /**
         * Creates a PollAdditionalMetadata message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.PollAdditionalMetadata
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.PollAdditionalMetadata} PollAdditionalMetadata
         */
        PollAdditionalMetadata.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.PollAdditionalMetadata)
                return object;
            var message = new $root.WAWeb.PollAdditionalMetadata();
            if (object.pollInvalidated != null)
                message.pollInvalidated = Boolean(object.pollInvalidated);
            return message;
        };

        /**
         * Creates a plain object from a PollAdditionalMetadata message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.PollAdditionalMetadata
         * @static
         * @param {WAWeb.PollAdditionalMetadata} message PollAdditionalMetadata
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PollAdditionalMetadata.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.pollInvalidated = false;
            if (message.pollInvalidated != null && message.hasOwnProperty("pollInvalidated"))
                object.pollInvalidated = message.pollInvalidated;
            return object;
        };

        /**
         * Converts this PollAdditionalMetadata to JSON.
         * @function toJSON
         * @memberof WAWeb.PollAdditionalMetadata
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PollAdditionalMetadata.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for PollAdditionalMetadata
         * @function getTypeUrl
         * @memberof WAWeb.PollAdditionalMetadata
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        PollAdditionalMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.PollAdditionalMetadata";
        };

        return PollAdditionalMetadata;
    })();

    WAWeb.EventAdditionalMetadata = (function() {

        /**
         * Properties of an EventAdditionalMetadata.
         * @memberof WAWeb
         * @interface IEventAdditionalMetadata
         * @property {boolean|null} [isStale] EventAdditionalMetadata isStale
         */

        /**
         * Constructs a new EventAdditionalMetadata.
         * @memberof WAWeb
         * @classdesc Represents an EventAdditionalMetadata.
         * @implements IEventAdditionalMetadata
         * @constructor
         * @param {WAWeb.IEventAdditionalMetadata=} [properties] Properties to set
         */
        function EventAdditionalMetadata(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EventAdditionalMetadata isStale.
         * @member {boolean} isStale
         * @memberof WAWeb.EventAdditionalMetadata
         * @instance
         */
        EventAdditionalMetadata.prototype.isStale = false;

        /**
         * Creates a new EventAdditionalMetadata instance using the specified properties.
         * @function create
         * @memberof WAWeb.EventAdditionalMetadata
         * @static
         * @param {WAWeb.IEventAdditionalMetadata=} [properties] Properties to set
         * @returns {WAWeb.EventAdditionalMetadata} EventAdditionalMetadata instance
         */
        EventAdditionalMetadata.create = function create(properties) {
            return new EventAdditionalMetadata(properties);
        };

        /**
         * Encodes the specified EventAdditionalMetadata message. Does not implicitly {@link WAWeb.EventAdditionalMetadata.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.EventAdditionalMetadata
         * @static
         * @param {WAWeb.IEventAdditionalMetadata} message EventAdditionalMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EventAdditionalMetadata.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.isStale != null && Object.hasOwnProperty.call(message, "isStale"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.isStale);
            return writer;
        };

        /**
         * Encodes the specified EventAdditionalMetadata message, length delimited. Does not implicitly {@link WAWeb.EventAdditionalMetadata.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.EventAdditionalMetadata
         * @static
         * @param {WAWeb.IEventAdditionalMetadata} message EventAdditionalMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EventAdditionalMetadata.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EventAdditionalMetadata message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.EventAdditionalMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.EventAdditionalMetadata} EventAdditionalMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EventAdditionalMetadata.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.EventAdditionalMetadata();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.isStale = reader.bool();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EventAdditionalMetadata message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.EventAdditionalMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.EventAdditionalMetadata} EventAdditionalMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EventAdditionalMetadata.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EventAdditionalMetadata message.
         * @function verify
         * @memberof WAWeb.EventAdditionalMetadata
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EventAdditionalMetadata.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.isStale != null && message.hasOwnProperty("isStale"))
                if (typeof message.isStale !== "boolean")
                    return "isStale: boolean expected";
            return null;
        };

        /**
         * Creates an EventAdditionalMetadata message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.EventAdditionalMetadata
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.EventAdditionalMetadata} EventAdditionalMetadata
         */
        EventAdditionalMetadata.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.EventAdditionalMetadata)
                return object;
            var message = new $root.WAWeb.EventAdditionalMetadata();
            if (object.isStale != null)
                message.isStale = Boolean(object.isStale);
            return message;
        };

        /**
         * Creates a plain object from an EventAdditionalMetadata message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.EventAdditionalMetadata
         * @static
         * @param {WAWeb.EventAdditionalMetadata} message EventAdditionalMetadata
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EventAdditionalMetadata.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.isStale = false;
            if (message.isStale != null && message.hasOwnProperty("isStale"))
                object.isStale = message.isStale;
            return object;
        };

        /**
         * Converts this EventAdditionalMetadata to JSON.
         * @function toJSON
         * @memberof WAWeb.EventAdditionalMetadata
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EventAdditionalMetadata.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for EventAdditionalMetadata
         * @function getTypeUrl
         * @memberof WAWeb.EventAdditionalMetadata
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        EventAdditionalMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.EventAdditionalMetadata";
        };

        return EventAdditionalMetadata;
    })();

    WAWeb.KeepInChat = (function() {

        /**
         * Properties of a KeepInChat.
         * @memberof WAWeb
         * @interface IKeepInChat
         * @property {WAE2E.KeepType|null} [keepType] KeepInChat keepType
         * @property {number|Long|null} [serverTimestamp] KeepInChat serverTimestamp
         * @property {WAProtocol.IMessageKey|null} [key] KeepInChat key
         * @property {string|null} [deviceJID] KeepInChat deviceJID
         * @property {number|Long|null} [clientTimestampMS] KeepInChat clientTimestampMS
         * @property {number|Long|null} [serverTimestampMS] KeepInChat serverTimestampMS
         */

        /**
         * Constructs a new KeepInChat.
         * @memberof WAWeb
         * @classdesc Represents a KeepInChat.
         * @implements IKeepInChat
         * @constructor
         * @param {WAWeb.IKeepInChat=} [properties] Properties to set
         */
        function KeepInChat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * KeepInChat keepType.
         * @member {WAE2E.KeepType} keepType
         * @memberof WAWeb.KeepInChat
         * @instance
         */
        KeepInChat.prototype.keepType = 0;

        /**
         * KeepInChat serverTimestamp.
         * @member {number|Long} serverTimestamp
         * @memberof WAWeb.KeepInChat
         * @instance
         */
        KeepInChat.prototype.serverTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * KeepInChat key.
         * @member {WAProtocol.IMessageKey|null|undefined} key
         * @memberof WAWeb.KeepInChat
         * @instance
         */
        KeepInChat.prototype.key = null;

        /**
         * KeepInChat deviceJID.
         * @member {string} deviceJID
         * @memberof WAWeb.KeepInChat
         * @instance
         */
        KeepInChat.prototype.deviceJID = "";

        /**
         * KeepInChat clientTimestampMS.
         * @member {number|Long} clientTimestampMS
         * @memberof WAWeb.KeepInChat
         * @instance
         */
        KeepInChat.prototype.clientTimestampMS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * KeepInChat serverTimestampMS.
         * @member {number|Long} serverTimestampMS
         * @memberof WAWeb.KeepInChat
         * @instance
         */
        KeepInChat.prototype.serverTimestampMS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new KeepInChat instance using the specified properties.
         * @function create
         * @memberof WAWeb.KeepInChat
         * @static
         * @param {WAWeb.IKeepInChat=} [properties] Properties to set
         * @returns {WAWeb.KeepInChat} KeepInChat instance
         */
        KeepInChat.create = function create(properties) {
            return new KeepInChat(properties);
        };

        /**
         * Encodes the specified KeepInChat message. Does not implicitly {@link WAWeb.KeepInChat.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.KeepInChat
         * @static
         * @param {WAWeb.IKeepInChat} message KeepInChat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        KeepInChat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.keepType != null && Object.hasOwnProperty.call(message, "keepType"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.keepType);
            if (message.serverTimestamp != null && Object.hasOwnProperty.call(message, "serverTimestamp"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.serverTimestamp);
            if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                $root.WAProtocol.MessageKey.encode(message.key, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.deviceJID != null && Object.hasOwnProperty.call(message, "deviceJID"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.deviceJID);
            if (message.clientTimestampMS != null && Object.hasOwnProperty.call(message, "clientTimestampMS"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.clientTimestampMS);
            if (message.serverTimestampMS != null && Object.hasOwnProperty.call(message, "serverTimestampMS"))
                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.serverTimestampMS);
            return writer;
        };

        /**
         * Encodes the specified KeepInChat message, length delimited. Does not implicitly {@link WAWeb.KeepInChat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.KeepInChat
         * @static
         * @param {WAWeb.IKeepInChat} message KeepInChat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        KeepInChat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a KeepInChat message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.KeepInChat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.KeepInChat} KeepInChat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        KeepInChat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.KeepInChat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.keepType = reader.int32();
                        break;
                    }
                case 2: {
                        message.serverTimestamp = reader.int64();
                        break;
                    }
                case 3: {
                        message.key = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                        break;
                    }
                case 4: {
                        message.deviceJID = reader.string();
                        break;
                    }
                case 5: {
                        message.clientTimestampMS = reader.int64();
                        break;
                    }
                case 6: {
                        message.serverTimestampMS = reader.int64();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a KeepInChat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.KeepInChat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.KeepInChat} KeepInChat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        KeepInChat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a KeepInChat message.
         * @function verify
         * @memberof WAWeb.KeepInChat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        KeepInChat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.keepType != null && message.hasOwnProperty("keepType"))
                switch (message.keepType) {
                default:
                    return "keepType: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            if (message.serverTimestamp != null && message.hasOwnProperty("serverTimestamp"))
                if (!$util.isInteger(message.serverTimestamp) && !(message.serverTimestamp && $util.isInteger(message.serverTimestamp.low) && $util.isInteger(message.serverTimestamp.high)))
                    return "serverTimestamp: integer|Long expected";
            if (message.key != null && message.hasOwnProperty("key")) {
                var error = $root.WAProtocol.MessageKey.verify(message.key);
                if (error)
                    return "key." + error;
            }
            if (message.deviceJID != null && message.hasOwnProperty("deviceJID"))
                if (!$util.isString(message.deviceJID))
                    return "deviceJID: string expected";
            if (message.clientTimestampMS != null && message.hasOwnProperty("clientTimestampMS"))
                if (!$util.isInteger(message.clientTimestampMS) && !(message.clientTimestampMS && $util.isInteger(message.clientTimestampMS.low) && $util.isInteger(message.clientTimestampMS.high)))
                    return "clientTimestampMS: integer|Long expected";
            if (message.serverTimestampMS != null && message.hasOwnProperty("serverTimestampMS"))
                if (!$util.isInteger(message.serverTimestampMS) && !(message.serverTimestampMS && $util.isInteger(message.serverTimestampMS.low) && $util.isInteger(message.serverTimestampMS.high)))
                    return "serverTimestampMS: integer|Long expected";
            return null;
        };

        /**
         * Creates a KeepInChat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.KeepInChat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.KeepInChat} KeepInChat
         */
        KeepInChat.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.KeepInChat)
                return object;
            var message = new $root.WAWeb.KeepInChat();
            switch (object.keepType) {
            default:
                if (typeof object.keepType === "number") {
                    message.keepType = object.keepType;
                    break;
                }
                break;
            case "UNKNOWN":
            case 0:
                message.keepType = 0;
                break;
            case "KEEP_FOR_ALL":
            case 1:
                message.keepType = 1;
                break;
            case "UNDO_KEEP_FOR_ALL":
            case 2:
                message.keepType = 2;
                break;
            }
            if (object.serverTimestamp != null)
                if ($util.Long)
                    (message.serverTimestamp = $util.Long.fromValue(object.serverTimestamp)).unsigned = false;
                else if (typeof object.serverTimestamp === "string")
                    message.serverTimestamp = parseInt(object.serverTimestamp, 10);
                else if (typeof object.serverTimestamp === "number")
                    message.serverTimestamp = object.serverTimestamp;
                else if (typeof object.serverTimestamp === "object")
                    message.serverTimestamp = new $util.LongBits(object.serverTimestamp.low >>> 0, object.serverTimestamp.high >>> 0).toNumber();
            if (object.key != null) {
                if (typeof object.key !== "object")
                    throw TypeError(".WAWeb.KeepInChat.key: object expected");
                message.key = $root.WAProtocol.MessageKey.fromObject(object.key);
            }
            if (object.deviceJID != null)
                message.deviceJID = String(object.deviceJID);
            if (object.clientTimestampMS != null)
                if ($util.Long)
                    (message.clientTimestampMS = $util.Long.fromValue(object.clientTimestampMS)).unsigned = false;
                else if (typeof object.clientTimestampMS === "string")
                    message.clientTimestampMS = parseInt(object.clientTimestampMS, 10);
                else if (typeof object.clientTimestampMS === "number")
                    message.clientTimestampMS = object.clientTimestampMS;
                else if (typeof object.clientTimestampMS === "object")
                    message.clientTimestampMS = new $util.LongBits(object.clientTimestampMS.low >>> 0, object.clientTimestampMS.high >>> 0).toNumber();
            if (object.serverTimestampMS != null)
                if ($util.Long)
                    (message.serverTimestampMS = $util.Long.fromValue(object.serverTimestampMS)).unsigned = false;
                else if (typeof object.serverTimestampMS === "string")
                    message.serverTimestampMS = parseInt(object.serverTimestampMS, 10);
                else if (typeof object.serverTimestampMS === "number")
                    message.serverTimestampMS = object.serverTimestampMS;
                else if (typeof object.serverTimestampMS === "object")
                    message.serverTimestampMS = new $util.LongBits(object.serverTimestampMS.low >>> 0, object.serverTimestampMS.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a KeepInChat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.KeepInChat
         * @static
         * @param {WAWeb.KeepInChat} message KeepInChat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        KeepInChat.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.keepType = options.enums === String ? "UNKNOWN" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.serverTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.serverTimestamp = options.longs === String ? "0" : 0;
                object.key = null;
                object.deviceJID = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.clientTimestampMS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.clientTimestampMS = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.serverTimestampMS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.serverTimestampMS = options.longs === String ? "0" : 0;
            }
            if (message.keepType != null && message.hasOwnProperty("keepType"))
                object.keepType = options.enums === String ? $root.WAE2E.KeepType[message.keepType] === undefined ? message.keepType : $root.WAE2E.KeepType[message.keepType] : message.keepType;
            if (message.serverTimestamp != null && message.hasOwnProperty("serverTimestamp"))
                if (typeof message.serverTimestamp === "number")
                    object.serverTimestamp = options.longs === String ? String(message.serverTimestamp) : message.serverTimestamp;
                else
                    object.serverTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.serverTimestamp) : options.longs === Number ? new $util.LongBits(message.serverTimestamp.low >>> 0, message.serverTimestamp.high >>> 0).toNumber() : message.serverTimestamp;
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = $root.WAProtocol.MessageKey.toObject(message.key, options);
            if (message.deviceJID != null && message.hasOwnProperty("deviceJID"))
                object.deviceJID = message.deviceJID;
            if (message.clientTimestampMS != null && message.hasOwnProperty("clientTimestampMS"))
                if (typeof message.clientTimestampMS === "number")
                    object.clientTimestampMS = options.longs === String ? String(message.clientTimestampMS) : message.clientTimestampMS;
                else
                    object.clientTimestampMS = options.longs === String ? $util.Long.prototype.toString.call(message.clientTimestampMS) : options.longs === Number ? new $util.LongBits(message.clientTimestampMS.low >>> 0, message.clientTimestampMS.high >>> 0).toNumber() : message.clientTimestampMS;
            if (message.serverTimestampMS != null && message.hasOwnProperty("serverTimestampMS"))
                if (typeof message.serverTimestampMS === "number")
                    object.serverTimestampMS = options.longs === String ? String(message.serverTimestampMS) : message.serverTimestampMS;
                else
                    object.serverTimestampMS = options.longs === String ? $util.Long.prototype.toString.call(message.serverTimestampMS) : options.longs === Number ? new $util.LongBits(message.serverTimestampMS.low >>> 0, message.serverTimestampMS.high >>> 0).toNumber() : message.serverTimestampMS;
            return object;
        };

        /**
         * Converts this KeepInChat to JSON.
         * @function toJSON
         * @memberof WAWeb.KeepInChat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        KeepInChat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for KeepInChat
         * @function getTypeUrl
         * @memberof WAWeb.KeepInChat
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        KeepInChat.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.KeepInChat";
        };

        return KeepInChat;
    })();

    WAWeb.MessageAddOnContextInfo = (function() {

        /**
         * Properties of a MessageAddOnContextInfo.
         * @memberof WAWeb
         * @interface IMessageAddOnContextInfo
         * @property {number|null} [messageAddOnDurationInSecs] MessageAddOnContextInfo messageAddOnDurationInSecs
         * @property {WAE2E.MessageContextInfo.MessageAddonExpiryType|null} [messageAddOnExpiryType] MessageAddOnContextInfo messageAddOnExpiryType
         */

        /**
         * Constructs a new MessageAddOnContextInfo.
         * @memberof WAWeb
         * @classdesc Represents a MessageAddOnContextInfo.
         * @implements IMessageAddOnContextInfo
         * @constructor
         * @param {WAWeb.IMessageAddOnContextInfo=} [properties] Properties to set
         */
        function MessageAddOnContextInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MessageAddOnContextInfo messageAddOnDurationInSecs.
         * @member {number} messageAddOnDurationInSecs
         * @memberof WAWeb.MessageAddOnContextInfo
         * @instance
         */
        MessageAddOnContextInfo.prototype.messageAddOnDurationInSecs = 0;

        /**
         * MessageAddOnContextInfo messageAddOnExpiryType.
         * @member {WAE2E.MessageContextInfo.MessageAddonExpiryType} messageAddOnExpiryType
         * @memberof WAWeb.MessageAddOnContextInfo
         * @instance
         */
        MessageAddOnContextInfo.prototype.messageAddOnExpiryType = 1;

        /**
         * Creates a new MessageAddOnContextInfo instance using the specified properties.
         * @function create
         * @memberof WAWeb.MessageAddOnContextInfo
         * @static
         * @param {WAWeb.IMessageAddOnContextInfo=} [properties] Properties to set
         * @returns {WAWeb.MessageAddOnContextInfo} MessageAddOnContextInfo instance
         */
        MessageAddOnContextInfo.create = function create(properties) {
            return new MessageAddOnContextInfo(properties);
        };

        /**
         * Encodes the specified MessageAddOnContextInfo message. Does not implicitly {@link WAWeb.MessageAddOnContextInfo.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.MessageAddOnContextInfo
         * @static
         * @param {WAWeb.IMessageAddOnContextInfo} message MessageAddOnContextInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MessageAddOnContextInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.messageAddOnDurationInSecs != null && Object.hasOwnProperty.call(message, "messageAddOnDurationInSecs"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.messageAddOnDurationInSecs);
            if (message.messageAddOnExpiryType != null && Object.hasOwnProperty.call(message, "messageAddOnExpiryType"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.messageAddOnExpiryType);
            return writer;
        };

        /**
         * Encodes the specified MessageAddOnContextInfo message, length delimited. Does not implicitly {@link WAWeb.MessageAddOnContextInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.MessageAddOnContextInfo
         * @static
         * @param {WAWeb.IMessageAddOnContextInfo} message MessageAddOnContextInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MessageAddOnContextInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MessageAddOnContextInfo message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.MessageAddOnContextInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.MessageAddOnContextInfo} MessageAddOnContextInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MessageAddOnContextInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.MessageAddOnContextInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.messageAddOnDurationInSecs = reader.uint32();
                        break;
                    }
                case 2: {
                        message.messageAddOnExpiryType = reader.int32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MessageAddOnContextInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.MessageAddOnContextInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.MessageAddOnContextInfo} MessageAddOnContextInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MessageAddOnContextInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MessageAddOnContextInfo message.
         * @function verify
         * @memberof WAWeb.MessageAddOnContextInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MessageAddOnContextInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.messageAddOnDurationInSecs != null && message.hasOwnProperty("messageAddOnDurationInSecs"))
                if (!$util.isInteger(message.messageAddOnDurationInSecs))
                    return "messageAddOnDurationInSecs: integer expected";
            if (message.messageAddOnExpiryType != null && message.hasOwnProperty("messageAddOnExpiryType"))
                switch (message.messageAddOnExpiryType) {
                default:
                    return "messageAddOnExpiryType: enum value expected";
                case 1:
                case 2:
                    break;
                }
            return null;
        };

        /**
         * Creates a MessageAddOnContextInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.MessageAddOnContextInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.MessageAddOnContextInfo} MessageAddOnContextInfo
         */
        MessageAddOnContextInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.MessageAddOnContextInfo)
                return object;
            var message = new $root.WAWeb.MessageAddOnContextInfo();
            if (object.messageAddOnDurationInSecs != null)
                message.messageAddOnDurationInSecs = object.messageAddOnDurationInSecs >>> 0;
            switch (object.messageAddOnExpiryType) {
            default:
                if (typeof object.messageAddOnExpiryType === "number") {
                    message.messageAddOnExpiryType = object.messageAddOnExpiryType;
                    break;
                }
                break;
            case "STATIC":
            case 1:
                message.messageAddOnExpiryType = 1;
                break;
            case "DEPENDENT_ON_PARENT":
            case 2:
                message.messageAddOnExpiryType = 2;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a MessageAddOnContextInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.MessageAddOnContextInfo
         * @static
         * @param {WAWeb.MessageAddOnContextInfo} message MessageAddOnContextInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MessageAddOnContextInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.messageAddOnDurationInSecs = 0;
                object.messageAddOnExpiryType = options.enums === String ? "STATIC" : 1;
            }
            if (message.messageAddOnDurationInSecs != null && message.hasOwnProperty("messageAddOnDurationInSecs"))
                object.messageAddOnDurationInSecs = message.messageAddOnDurationInSecs;
            if (message.messageAddOnExpiryType != null && message.hasOwnProperty("messageAddOnExpiryType"))
                object.messageAddOnExpiryType = options.enums === String ? $root.WAE2E.MessageContextInfo.MessageAddonExpiryType[message.messageAddOnExpiryType] === undefined ? message.messageAddOnExpiryType : $root.WAE2E.MessageContextInfo.MessageAddonExpiryType[message.messageAddOnExpiryType] : message.messageAddOnExpiryType;
            return object;
        };

        /**
         * Converts this MessageAddOnContextInfo to JSON.
         * @function toJSON
         * @memberof WAWeb.MessageAddOnContextInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MessageAddOnContextInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for MessageAddOnContextInfo
         * @function getTypeUrl
         * @memberof WAWeb.MessageAddOnContextInfo
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        MessageAddOnContextInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.MessageAddOnContextInfo";
        };

        return MessageAddOnContextInfo;
    })();

    WAWeb.PremiumMessageInfo = (function() {

        /**
         * Properties of a PremiumMessageInfo.
         * @memberof WAWeb
         * @interface IPremiumMessageInfo
         * @property {string|null} [serverCampaignID] PremiumMessageInfo serverCampaignID
         */

        /**
         * Constructs a new PremiumMessageInfo.
         * @memberof WAWeb
         * @classdesc Represents a PremiumMessageInfo.
         * @implements IPremiumMessageInfo
         * @constructor
         * @param {WAWeb.IPremiumMessageInfo=} [properties] Properties to set
         */
        function PremiumMessageInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PremiumMessageInfo serverCampaignID.
         * @member {string} serverCampaignID
         * @memberof WAWeb.PremiumMessageInfo
         * @instance
         */
        PremiumMessageInfo.prototype.serverCampaignID = "";

        /**
         * Creates a new PremiumMessageInfo instance using the specified properties.
         * @function create
         * @memberof WAWeb.PremiumMessageInfo
         * @static
         * @param {WAWeb.IPremiumMessageInfo=} [properties] Properties to set
         * @returns {WAWeb.PremiumMessageInfo} PremiumMessageInfo instance
         */
        PremiumMessageInfo.create = function create(properties) {
            return new PremiumMessageInfo(properties);
        };

        /**
         * Encodes the specified PremiumMessageInfo message. Does not implicitly {@link WAWeb.PremiumMessageInfo.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.PremiumMessageInfo
         * @static
         * @param {WAWeb.IPremiumMessageInfo} message PremiumMessageInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PremiumMessageInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.serverCampaignID != null && Object.hasOwnProperty.call(message, "serverCampaignID"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.serverCampaignID);
            return writer;
        };

        /**
         * Encodes the specified PremiumMessageInfo message, length delimited. Does not implicitly {@link WAWeb.PremiumMessageInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.PremiumMessageInfo
         * @static
         * @param {WAWeb.IPremiumMessageInfo} message PremiumMessageInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PremiumMessageInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PremiumMessageInfo message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.PremiumMessageInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.PremiumMessageInfo} PremiumMessageInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PremiumMessageInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.PremiumMessageInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.serverCampaignID = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PremiumMessageInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.PremiumMessageInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.PremiumMessageInfo} PremiumMessageInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PremiumMessageInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PremiumMessageInfo message.
         * @function verify
         * @memberof WAWeb.PremiumMessageInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PremiumMessageInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.serverCampaignID != null && message.hasOwnProperty("serverCampaignID"))
                if (!$util.isString(message.serverCampaignID))
                    return "serverCampaignID: string expected";
            return null;
        };

        /**
         * Creates a PremiumMessageInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.PremiumMessageInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.PremiumMessageInfo} PremiumMessageInfo
         */
        PremiumMessageInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.PremiumMessageInfo)
                return object;
            var message = new $root.WAWeb.PremiumMessageInfo();
            if (object.serverCampaignID != null)
                message.serverCampaignID = String(object.serverCampaignID);
            return message;
        };

        /**
         * Creates a plain object from a PremiumMessageInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.PremiumMessageInfo
         * @static
         * @param {WAWeb.PremiumMessageInfo} message PremiumMessageInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PremiumMessageInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.serverCampaignID = "";
            if (message.serverCampaignID != null && message.hasOwnProperty("serverCampaignID"))
                object.serverCampaignID = message.serverCampaignID;
            return object;
        };

        /**
         * Converts this PremiumMessageInfo to JSON.
         * @function toJSON
         * @memberof WAWeb.PremiumMessageInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PremiumMessageInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for PremiumMessageInfo
         * @function getTypeUrl
         * @memberof WAWeb.PremiumMessageInfo
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        PremiumMessageInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.PremiumMessageInfo";
        };

        return PremiumMessageInfo;
    })();

    WAWeb.EventResponse = (function() {

        /**
         * Properties of an EventResponse.
         * @memberof WAWeb
         * @interface IEventResponse
         * @property {WAProtocol.IMessageKey|null} [eventResponseMessageKey] EventResponse eventResponseMessageKey
         * @property {number|Long|null} [timestampMS] EventResponse timestampMS
         * @property {WAE2E.Message.IEventResponseMessage|null} [eventResponseMessage] EventResponse eventResponseMessage
         * @property {boolean|null} [unread] EventResponse unread
         */

        /**
         * Constructs a new EventResponse.
         * @memberof WAWeb
         * @classdesc Represents an EventResponse.
         * @implements IEventResponse
         * @constructor
         * @param {WAWeb.IEventResponse=} [properties] Properties to set
         */
        function EventResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EventResponse eventResponseMessageKey.
         * @member {WAProtocol.IMessageKey|null|undefined} eventResponseMessageKey
         * @memberof WAWeb.EventResponse
         * @instance
         */
        EventResponse.prototype.eventResponseMessageKey = null;

        /**
         * EventResponse timestampMS.
         * @member {number|Long} timestampMS
         * @memberof WAWeb.EventResponse
         * @instance
         */
        EventResponse.prototype.timestampMS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * EventResponse eventResponseMessage.
         * @member {WAE2E.Message.IEventResponseMessage|null|undefined} eventResponseMessage
         * @memberof WAWeb.EventResponse
         * @instance
         */
        EventResponse.prototype.eventResponseMessage = null;

        /**
         * EventResponse unread.
         * @member {boolean} unread
         * @memberof WAWeb.EventResponse
         * @instance
         */
        EventResponse.prototype.unread = false;

        /**
         * Creates a new EventResponse instance using the specified properties.
         * @function create
         * @memberof WAWeb.EventResponse
         * @static
         * @param {WAWeb.IEventResponse=} [properties] Properties to set
         * @returns {WAWeb.EventResponse} EventResponse instance
         */
        EventResponse.create = function create(properties) {
            return new EventResponse(properties);
        };

        /**
         * Encodes the specified EventResponse message. Does not implicitly {@link WAWeb.EventResponse.verify|verify} messages.
         * @function encode
         * @memberof WAWeb.EventResponse
         * @static
         * @param {WAWeb.IEventResponse} message EventResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EventResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventResponseMessageKey != null && Object.hasOwnProperty.call(message, "eventResponseMessageKey"))
                $root.WAProtocol.MessageKey.encode(message.eventResponseMessageKey, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.timestampMS != null && Object.hasOwnProperty.call(message, "timestampMS"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.timestampMS);
            if (message.eventResponseMessage != null && Object.hasOwnProperty.call(message, "eventResponseMessage"))
                $root.WAE2E.Message.EventResponseMessage.encode(message.eventResponseMessage, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.unread != null && Object.hasOwnProperty.call(message, "unread"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.unread);
            return writer;
        };

        /**
         * Encodes the specified EventResponse message, length delimited. Does not implicitly {@link WAWeb.EventResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAWeb.EventResponse
         * @static
         * @param {WAWeb.IEventResponse} message EventResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EventResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EventResponse message from the specified reader or buffer.
         * @function decode
         * @memberof WAWeb.EventResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAWeb.EventResponse} EventResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EventResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAWeb.EventResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.eventResponseMessageKey = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        message.timestampMS = reader.int64();
                        break;
                    }
                case 3: {
                        message.eventResponseMessage = $root.WAE2E.Message.EventResponseMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 4: {
                        message.unread = reader.bool();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EventResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAWeb.EventResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAWeb.EventResponse} EventResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EventResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EventResponse message.
         * @function verify
         * @memberof WAWeb.EventResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EventResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventResponseMessageKey != null && message.hasOwnProperty("eventResponseMessageKey")) {
                var error = $root.WAProtocol.MessageKey.verify(message.eventResponseMessageKey);
                if (error)
                    return "eventResponseMessageKey." + error;
            }
            if (message.timestampMS != null && message.hasOwnProperty("timestampMS"))
                if (!$util.isInteger(message.timestampMS) && !(message.timestampMS && $util.isInteger(message.timestampMS.low) && $util.isInteger(message.timestampMS.high)))
                    return "timestampMS: integer|Long expected";
            if (message.eventResponseMessage != null && message.hasOwnProperty("eventResponseMessage")) {
                var error = $root.WAE2E.Message.EventResponseMessage.verify(message.eventResponseMessage);
                if (error)
                    return "eventResponseMessage." + error;
            }
            if (message.unread != null && message.hasOwnProperty("unread"))
                if (typeof message.unread !== "boolean")
                    return "unread: boolean expected";
            return null;
        };

        /**
         * Creates an EventResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAWeb.EventResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAWeb.EventResponse} EventResponse
         */
        EventResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.WAWeb.EventResponse)
                return object;
            var message = new $root.WAWeb.EventResponse();
            if (object.eventResponseMessageKey != null) {
                if (typeof object.eventResponseMessageKey !== "object")
                    throw TypeError(".WAWeb.EventResponse.eventResponseMessageKey: object expected");
                message.eventResponseMessageKey = $root.WAProtocol.MessageKey.fromObject(object.eventResponseMessageKey);
            }
            if (object.timestampMS != null)
                if ($util.Long)
                    (message.timestampMS = $util.Long.fromValue(object.timestampMS)).unsigned = false;
                else if (typeof object.timestampMS === "string")
                    message.timestampMS = parseInt(object.timestampMS, 10);
                else if (typeof object.timestampMS === "number")
                    message.timestampMS = object.timestampMS;
                else if (typeof object.timestampMS === "object")
                    message.timestampMS = new $util.LongBits(object.timestampMS.low >>> 0, object.timestampMS.high >>> 0).toNumber();
            if (object.eventResponseMessage != null) {
                if (typeof object.eventResponseMessage !== "object")
                    throw TypeError(".WAWeb.EventResponse.eventResponseMessage: object expected");
                message.eventResponseMessage = $root.WAE2E.Message.EventResponseMessage.fromObject(object.eventResponseMessage);
            }
            if (object.unread != null)
                message.unread = Boolean(object.unread);
            return message;
        };

        /**
         * Creates a plain object from an EventResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAWeb.EventResponse
         * @static
         * @param {WAWeb.EventResponse} message EventResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EventResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventResponseMessageKey = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.timestampMS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.timestampMS = options.longs === String ? "0" : 0;
                object.eventResponseMessage = null;
                object.unread = false;
            }
            if (message.eventResponseMessageKey != null && message.hasOwnProperty("eventResponseMessageKey"))
                object.eventResponseMessageKey = $root.WAProtocol.MessageKey.toObject(message.eventResponseMessageKey, options);
            if (message.timestampMS != null && message.hasOwnProperty("timestampMS"))
                if (typeof message.timestampMS === "number")
                    object.timestampMS = options.longs === String ? String(message.timestampMS) : message.timestampMS;
                else
                    object.timestampMS = options.longs === String ? $util.Long.prototype.toString.call(message.timestampMS) : options.longs === Number ? new $util.LongBits(message.timestampMS.low >>> 0, message.timestampMS.high >>> 0).toNumber() : message.timestampMS;
            if (message.eventResponseMessage != null && message.hasOwnProperty("eventResponseMessage"))
                object.eventResponseMessage = $root.WAE2E.Message.EventResponseMessage.toObject(message.eventResponseMessage, options);
            if (message.unread != null && message.hasOwnProperty("unread"))
                object.unread = message.unread;
            return object;
        };

        /**
         * Converts this EventResponse to JSON.
         * @function toJSON
         * @memberof WAWeb.EventResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EventResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for EventResponse
         * @function getTypeUrl
         * @memberof WAWeb.EventResponse
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        EventResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAWeb.EventResponse";
        };

        return EventResponse;
    })();

    return WAWeb;
})();

$root.WAE2E = (function() {

    /**
     * Namespace WAE2E.
     * @exports WAE2E
     * @namespace
     */
    var WAE2E = {};

    /**
     * KeepType enum.
     * @name WAE2E.KeepType
     * @enum {number}
     * @property {number} UNKNOWN=0 UNKNOWN value
     * @property {number} KEEP_FOR_ALL=1 KEEP_FOR_ALL value
     * @property {number} UNDO_KEEP_FOR_ALL=2 UNDO_KEEP_FOR_ALL value
     */
    WAE2E.KeepType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "UNKNOWN"] = 0;
        values[valuesById[1] = "KEEP_FOR_ALL"] = 1;
        values[valuesById[2] = "UNDO_KEEP_FOR_ALL"] = 2;
        return values;
    })();

    WAE2E.Message = (function() {

        /**
         * Properties of a Message.
         * @memberof WAE2E
         * @interface IMessage
         * @property {string|null} [conversation] Message conversation
         * @property {WAE2E.Message.ISenderKeyDistributionMessage|null} [senderKeyDistributionMessage] Message senderKeyDistributionMessage
         * @property {WAE2E.Message.IImageMessage|null} [imageMessage] Message imageMessage
         * @property {WAE2E.Message.IContactMessage|null} [contactMessage] Message contactMessage
         * @property {WAE2E.Message.ILocationMessage|null} [locationMessage] Message locationMessage
         * @property {WAE2E.Message.IExtendedTextMessage|null} [extendedTextMessage] Message extendedTextMessage
         * @property {WAE2E.Message.IDocumentMessage|null} [documentMessage] Message documentMessage
         * @property {WAE2E.Message.IAudioMessage|null} [audioMessage] Message audioMessage
         * @property {WAE2E.Message.IVideoMessage|null} [videoMessage] Message videoMessage
         * @property {WAE2E.Message.ICall|null} [call] Message call
         * @property {WAE2E.Message.IChat|null} [chat] Message chat
         * @property {WAE2E.Message.IProtocolMessage|null} [protocolMessage] Message protocolMessage
         * @property {WAE2E.Message.IContactsArrayMessage|null} [contactsArrayMessage] Message contactsArrayMessage
         * @property {WAE2E.Message.IHighlyStructuredMessage|null} [highlyStructuredMessage] Message highlyStructuredMessage
         * @property {WAE2E.Message.ISenderKeyDistributionMessage|null} [fastRatchetKeySenderKeyDistributionMessage] Message fastRatchetKeySenderKeyDistributionMessage
         * @property {WAE2E.Message.ISendPaymentMessage|null} [sendPaymentMessage] Message sendPaymentMessage
         * @property {WAE2E.Message.ILiveLocationMessage|null} [liveLocationMessage] Message liveLocationMessage
         * @property {WAE2E.Message.IRequestPaymentMessage|null} [requestPaymentMessage] Message requestPaymentMessage
         * @property {WAE2E.Message.IDeclinePaymentRequestMessage|null} [declinePaymentRequestMessage] Message declinePaymentRequestMessage
         * @property {WAE2E.Message.ICancelPaymentRequestMessage|null} [cancelPaymentRequestMessage] Message cancelPaymentRequestMessage
         * @property {WAE2E.Message.ITemplateMessage|null} [templateMessage] Message templateMessage
         * @property {WAE2E.Message.IStickerMessage|null} [stickerMessage] Message stickerMessage
         * @property {WAE2E.Message.IGroupInviteMessage|null} [groupInviteMessage] Message groupInviteMessage
         * @property {WAE2E.Message.ITemplateButtonReplyMessage|null} [templateButtonReplyMessage] Message templateButtonReplyMessage
         * @property {WAE2E.Message.IProductMessage|null} [productMessage] Message productMessage
         * @property {WAE2E.Message.IDeviceSentMessage|null} [deviceSentMessage] Message deviceSentMessage
         * @property {WAE2E.IMessageContextInfo|null} [messageContextInfo] Message messageContextInfo
         * @property {WAE2E.Message.IListMessage|null} [listMessage] Message listMessage
         * @property {WAE2E.Message.IFutureProofMessage|null} [viewOnceMessage] Message viewOnceMessage
         * @property {WAE2E.Message.IOrderMessage|null} [orderMessage] Message orderMessage
         * @property {WAE2E.Message.IListResponseMessage|null} [listResponseMessage] Message listResponseMessage
         * @property {WAE2E.Message.IFutureProofMessage|null} [ephemeralMessage] Message ephemeralMessage
         * @property {WAE2E.Message.IInvoiceMessage|null} [invoiceMessage] Message invoiceMessage
         * @property {WAE2E.Message.IButtonsMessage|null} [buttonsMessage] Message buttonsMessage
         * @property {WAE2E.Message.IButtonsResponseMessage|null} [buttonsResponseMessage] Message buttonsResponseMessage
         * @property {WAE2E.Message.IPaymentInviteMessage|null} [paymentInviteMessage] Message paymentInviteMessage
         * @property {WAE2E.Message.IInteractiveMessage|null} [interactiveMessage] Message interactiveMessage
         * @property {WAE2E.Message.IReactionMessage|null} [reactionMessage] Message reactionMessage
         * @property {WAE2E.Message.IStickerSyncRMRMessage|null} [stickerSyncRmrMessage] Message stickerSyncRmrMessage
         * @property {WAE2E.Message.IInteractiveResponseMessage|null} [interactiveResponseMessage] Message interactiveResponseMessage
         * @property {WAE2E.Message.IPollCreationMessage|null} [pollCreationMessage] Message pollCreationMessage
         * @property {WAE2E.Message.IPollUpdateMessage|null} [pollUpdateMessage] Message pollUpdateMessage
         * @property {WAE2E.Message.IKeepInChatMessage|null} [keepInChatMessage] Message keepInChatMessage
         * @property {WAE2E.Message.IFutureProofMessage|null} [documentWithCaptionMessage] Message documentWithCaptionMessage
         * @property {WAE2E.Message.IRequestPhoneNumberMessage|null} [requestPhoneNumberMessage] Message requestPhoneNumberMessage
         * @property {WAE2E.Message.IFutureProofMessage|null} [viewOnceMessageV2] Message viewOnceMessageV2
         * @property {WAE2E.Message.IEncReactionMessage|null} [encReactionMessage] Message encReactionMessage
         * @property {WAE2E.Message.IFutureProofMessage|null} [editedMessage] Message editedMessage
         * @property {WAE2E.Message.IFutureProofMessage|null} [viewOnceMessageV2Extension] Message viewOnceMessageV2Extension
         * @property {WAE2E.Message.IPollCreationMessage|null} [pollCreationMessageV2] Message pollCreationMessageV2
         * @property {WAE2E.Message.IScheduledCallCreationMessage|null} [scheduledCallCreationMessage] Message scheduledCallCreationMessage
         * @property {WAE2E.Message.IFutureProofMessage|null} [groupMentionedMessage] Message groupMentionedMessage
         * @property {WAE2E.Message.IPinInChatMessage|null} [pinInChatMessage] Message pinInChatMessage
         * @property {WAE2E.Message.IPollCreationMessage|null} [pollCreationMessageV3] Message pollCreationMessageV3
         * @property {WAE2E.Message.IScheduledCallEditMessage|null} [scheduledCallEditMessage] Message scheduledCallEditMessage
         * @property {WAE2E.Message.IVideoMessage|null} [ptvMessage] Message ptvMessage
         * @property {WAE2E.Message.IFutureProofMessage|null} [botInvokeMessage] Message botInvokeMessage
         * @property {WAE2E.Message.ICallLogMessage|null} [callLogMesssage] Message callLogMesssage
         * @property {WAE2E.Message.IMessageHistoryBundle|null} [messageHistoryBundle] Message messageHistoryBundle
         * @property {WAE2E.Message.IEncCommentMessage|null} [encCommentMessage] Message encCommentMessage
         * @property {WAE2E.Message.IBCallMessage|null} [bcallMessage] Message bcallMessage
         * @property {WAE2E.Message.IFutureProofMessage|null} [lottieStickerMessage] Message lottieStickerMessage
         * @property {WAE2E.Message.IEventMessage|null} [eventMessage] Message eventMessage
         * @property {WAE2E.Message.IEncEventResponseMessage|null} [encEventResponseMessage] Message encEventResponseMessage
         * @property {WAE2E.Message.ICommentMessage|null} [commentMessage] Message commentMessage
         * @property {WAE2E.Message.INewsletterAdminInviteMessage|null} [newsletterAdminInviteMessage] Message newsletterAdminInviteMessage
         * @property {WAE2E.Message.IPlaceholderMessage|null} [placeholderMessage] Message placeholderMessage
         * @property {WAE2E.Message.ISecretEncryptedMessage|null} [secretEncryptedMessage] Message secretEncryptedMessage
         * @property {WAE2E.Message.IAlbumMessage|null} [albumMessage] Message albumMessage
         * @property {WAE2E.Message.IPollResultSnapshotMessage|null} [pollResultSnapshotMessage] Message pollResultSnapshotMessage
         * @property {WAE2E.Message.IFutureProofMessage|null} [eventCoverImage] Message eventCoverImage
         */

        /**
         * Constructs a new Message.
         * @memberof WAE2E
         * @classdesc Represents a Message.
         * @implements IMessage
         * @constructor
         * @param {WAE2E.IMessage=} [properties] Properties to set
         */
        function Message(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Message conversation.
         * @member {string} conversation
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.conversation = "";

        /**
         * Message senderKeyDistributionMessage.
         * @member {WAE2E.Message.ISenderKeyDistributionMessage|null|undefined} senderKeyDistributionMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.senderKeyDistributionMessage = null;

        /**
         * Message imageMessage.
         * @member {WAE2E.Message.IImageMessage|null|undefined} imageMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.imageMessage = null;

        /**
         * Message contactMessage.
         * @member {WAE2E.Message.IContactMessage|null|undefined} contactMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.contactMessage = null;

        /**
         * Message locationMessage.
         * @member {WAE2E.Message.ILocationMessage|null|undefined} locationMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.locationMessage = null;

        /**
         * Message extendedTextMessage.
         * @member {WAE2E.Message.IExtendedTextMessage|null|undefined} extendedTextMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.extendedTextMessage = null;

        /**
         * Message documentMessage.
         * @member {WAE2E.Message.IDocumentMessage|null|undefined} documentMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.documentMessage = null;

        /**
         * Message audioMessage.
         * @member {WAE2E.Message.IAudioMessage|null|undefined} audioMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.audioMessage = null;

        /**
         * Message videoMessage.
         * @member {WAE2E.Message.IVideoMessage|null|undefined} videoMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.videoMessage = null;

        /**
         * Message call.
         * @member {WAE2E.Message.ICall|null|undefined} call
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.call = null;

        /**
         * Message chat.
         * @member {WAE2E.Message.IChat|null|undefined} chat
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.chat = null;

        /**
         * Message protocolMessage.
         * @member {WAE2E.Message.IProtocolMessage|null|undefined} protocolMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.protocolMessage = null;

        /**
         * Message contactsArrayMessage.
         * @member {WAE2E.Message.IContactsArrayMessage|null|undefined} contactsArrayMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.contactsArrayMessage = null;

        /**
         * Message highlyStructuredMessage.
         * @member {WAE2E.Message.IHighlyStructuredMessage|null|undefined} highlyStructuredMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.highlyStructuredMessage = null;

        /**
         * Message fastRatchetKeySenderKeyDistributionMessage.
         * @member {WAE2E.Message.ISenderKeyDistributionMessage|null|undefined} fastRatchetKeySenderKeyDistributionMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.fastRatchetKeySenderKeyDistributionMessage = null;

        /**
         * Message sendPaymentMessage.
         * @member {WAE2E.Message.ISendPaymentMessage|null|undefined} sendPaymentMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.sendPaymentMessage = null;

        /**
         * Message liveLocationMessage.
         * @member {WAE2E.Message.ILiveLocationMessage|null|undefined} liveLocationMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.liveLocationMessage = null;

        /**
         * Message requestPaymentMessage.
         * @member {WAE2E.Message.IRequestPaymentMessage|null|undefined} requestPaymentMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.requestPaymentMessage = null;

        /**
         * Message declinePaymentRequestMessage.
         * @member {WAE2E.Message.IDeclinePaymentRequestMessage|null|undefined} declinePaymentRequestMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.declinePaymentRequestMessage = null;

        /**
         * Message cancelPaymentRequestMessage.
         * @member {WAE2E.Message.ICancelPaymentRequestMessage|null|undefined} cancelPaymentRequestMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.cancelPaymentRequestMessage = null;

        /**
         * Message templateMessage.
         * @member {WAE2E.Message.ITemplateMessage|null|undefined} templateMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.templateMessage = null;

        /**
         * Message stickerMessage.
         * @member {WAE2E.Message.IStickerMessage|null|undefined} stickerMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.stickerMessage = null;

        /**
         * Message groupInviteMessage.
         * @member {WAE2E.Message.IGroupInviteMessage|null|undefined} groupInviteMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.groupInviteMessage = null;

        /**
         * Message templateButtonReplyMessage.
         * @member {WAE2E.Message.ITemplateButtonReplyMessage|null|undefined} templateButtonReplyMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.templateButtonReplyMessage = null;

        /**
         * Message productMessage.
         * @member {WAE2E.Message.IProductMessage|null|undefined} productMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.productMessage = null;

        /**
         * Message deviceSentMessage.
         * @member {WAE2E.Message.IDeviceSentMessage|null|undefined} deviceSentMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.deviceSentMessage = null;

        /**
         * Message messageContextInfo.
         * @member {WAE2E.IMessageContextInfo|null|undefined} messageContextInfo
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.messageContextInfo = null;

        /**
         * Message listMessage.
         * @member {WAE2E.Message.IListMessage|null|undefined} listMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.listMessage = null;

        /**
         * Message viewOnceMessage.
         * @member {WAE2E.Message.IFutureProofMessage|null|undefined} viewOnceMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.viewOnceMessage = null;

        /**
         * Message orderMessage.
         * @member {WAE2E.Message.IOrderMessage|null|undefined} orderMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.orderMessage = null;

        /**
         * Message listResponseMessage.
         * @member {WAE2E.Message.IListResponseMessage|null|undefined} listResponseMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.listResponseMessage = null;

        /**
         * Message ephemeralMessage.
         * @member {WAE2E.Message.IFutureProofMessage|null|undefined} ephemeralMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.ephemeralMessage = null;

        /**
         * Message invoiceMessage.
         * @member {WAE2E.Message.IInvoiceMessage|null|undefined} invoiceMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.invoiceMessage = null;

        /**
         * Message buttonsMessage.
         * @member {WAE2E.Message.IButtonsMessage|null|undefined} buttonsMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.buttonsMessage = null;

        /**
         * Message buttonsResponseMessage.
         * @member {WAE2E.Message.IButtonsResponseMessage|null|undefined} buttonsResponseMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.buttonsResponseMessage = null;

        /**
         * Message paymentInviteMessage.
         * @member {WAE2E.Message.IPaymentInviteMessage|null|undefined} paymentInviteMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.paymentInviteMessage = null;

        /**
         * Message interactiveMessage.
         * @member {WAE2E.Message.IInteractiveMessage|null|undefined} interactiveMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.interactiveMessage = null;

        /**
         * Message reactionMessage.
         * @member {WAE2E.Message.IReactionMessage|null|undefined} reactionMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.reactionMessage = null;

        /**
         * Message stickerSyncRmrMessage.
         * @member {WAE2E.Message.IStickerSyncRMRMessage|null|undefined} stickerSyncRmrMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.stickerSyncRmrMessage = null;

        /**
         * Message interactiveResponseMessage.
         * @member {WAE2E.Message.IInteractiveResponseMessage|null|undefined} interactiveResponseMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.interactiveResponseMessage = null;

        /**
         * Message pollCreationMessage.
         * @member {WAE2E.Message.IPollCreationMessage|null|undefined} pollCreationMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.pollCreationMessage = null;

        /**
         * Message pollUpdateMessage.
         * @member {WAE2E.Message.IPollUpdateMessage|null|undefined} pollUpdateMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.pollUpdateMessage = null;

        /**
         * Message keepInChatMessage.
         * @member {WAE2E.Message.IKeepInChatMessage|null|undefined} keepInChatMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.keepInChatMessage = null;

        /**
         * Message documentWithCaptionMessage.
         * @member {WAE2E.Message.IFutureProofMessage|null|undefined} documentWithCaptionMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.documentWithCaptionMessage = null;

        /**
         * Message requestPhoneNumberMessage.
         * @member {WAE2E.Message.IRequestPhoneNumberMessage|null|undefined} requestPhoneNumberMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.requestPhoneNumberMessage = null;

        /**
         * Message viewOnceMessageV2.
         * @member {WAE2E.Message.IFutureProofMessage|null|undefined} viewOnceMessageV2
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.viewOnceMessageV2 = null;

        /**
         * Message encReactionMessage.
         * @member {WAE2E.Message.IEncReactionMessage|null|undefined} encReactionMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.encReactionMessage = null;

        /**
         * Message editedMessage.
         * @member {WAE2E.Message.IFutureProofMessage|null|undefined} editedMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.editedMessage = null;

        /**
         * Message viewOnceMessageV2Extension.
         * @member {WAE2E.Message.IFutureProofMessage|null|undefined} viewOnceMessageV2Extension
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.viewOnceMessageV2Extension = null;

        /**
         * Message pollCreationMessageV2.
         * @member {WAE2E.Message.IPollCreationMessage|null|undefined} pollCreationMessageV2
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.pollCreationMessageV2 = null;

        /**
         * Message scheduledCallCreationMessage.
         * @member {WAE2E.Message.IScheduledCallCreationMessage|null|undefined} scheduledCallCreationMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.scheduledCallCreationMessage = null;

        /**
         * Message groupMentionedMessage.
         * @member {WAE2E.Message.IFutureProofMessage|null|undefined} groupMentionedMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.groupMentionedMessage = null;

        /**
         * Message pinInChatMessage.
         * @member {WAE2E.Message.IPinInChatMessage|null|undefined} pinInChatMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.pinInChatMessage = null;

        /**
         * Message pollCreationMessageV3.
         * @member {WAE2E.Message.IPollCreationMessage|null|undefined} pollCreationMessageV3
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.pollCreationMessageV3 = null;

        /**
         * Message scheduledCallEditMessage.
         * @member {WAE2E.Message.IScheduledCallEditMessage|null|undefined} scheduledCallEditMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.scheduledCallEditMessage = null;

        /**
         * Message ptvMessage.
         * @member {WAE2E.Message.IVideoMessage|null|undefined} ptvMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.ptvMessage = null;

        /**
         * Message botInvokeMessage.
         * @member {WAE2E.Message.IFutureProofMessage|null|undefined} botInvokeMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.botInvokeMessage = null;

        /**
         * Message callLogMesssage.
         * @member {WAE2E.Message.ICallLogMessage|null|undefined} callLogMesssage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.callLogMesssage = null;

        /**
         * Message messageHistoryBundle.
         * @member {WAE2E.Message.IMessageHistoryBundle|null|undefined} messageHistoryBundle
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.messageHistoryBundle = null;

        /**
         * Message encCommentMessage.
         * @member {WAE2E.Message.IEncCommentMessage|null|undefined} encCommentMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.encCommentMessage = null;

        /**
         * Message bcallMessage.
         * @member {WAE2E.Message.IBCallMessage|null|undefined} bcallMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.bcallMessage = null;

        /**
         * Message lottieStickerMessage.
         * @member {WAE2E.Message.IFutureProofMessage|null|undefined} lottieStickerMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.lottieStickerMessage = null;

        /**
         * Message eventMessage.
         * @member {WAE2E.Message.IEventMessage|null|undefined} eventMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.eventMessage = null;

        /**
         * Message encEventResponseMessage.
         * @member {WAE2E.Message.IEncEventResponseMessage|null|undefined} encEventResponseMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.encEventResponseMessage = null;

        /**
         * Message commentMessage.
         * @member {WAE2E.Message.ICommentMessage|null|undefined} commentMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.commentMessage = null;

        /**
         * Message newsletterAdminInviteMessage.
         * @member {WAE2E.Message.INewsletterAdminInviteMessage|null|undefined} newsletterAdminInviteMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.newsletterAdminInviteMessage = null;

        /**
         * Message placeholderMessage.
         * @member {WAE2E.Message.IPlaceholderMessage|null|undefined} placeholderMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.placeholderMessage = null;

        /**
         * Message secretEncryptedMessage.
         * @member {WAE2E.Message.ISecretEncryptedMessage|null|undefined} secretEncryptedMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.secretEncryptedMessage = null;

        /**
         * Message albumMessage.
         * @member {WAE2E.Message.IAlbumMessage|null|undefined} albumMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.albumMessage = null;

        /**
         * Message pollResultSnapshotMessage.
         * @member {WAE2E.Message.IPollResultSnapshotMessage|null|undefined} pollResultSnapshotMessage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.pollResultSnapshotMessage = null;

        /**
         * Message eventCoverImage.
         * @member {WAE2E.Message.IFutureProofMessage|null|undefined} eventCoverImage
         * @memberof WAE2E.Message
         * @instance
         */
        Message.prototype.eventCoverImage = null;

        /**
         * Creates a new Message instance using the specified properties.
         * @function create
         * @memberof WAE2E.Message
         * @static
         * @param {WAE2E.IMessage=} [properties] Properties to set
         * @returns {WAE2E.Message} Message instance
         */
        Message.create = function create(properties) {
            return new Message(properties);
        };

        /**
         * Encodes the specified Message message. Does not implicitly {@link WAE2E.Message.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.Message
         * @static
         * @param {WAE2E.IMessage} message Message message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Message.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conversation != null && Object.hasOwnProperty.call(message, "conversation"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.conversation);
            if (message.senderKeyDistributionMessage != null && Object.hasOwnProperty.call(message, "senderKeyDistributionMessage"))
                $root.WAE2E.Message.SenderKeyDistributionMessage.encode(message.senderKeyDistributionMessage, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.imageMessage != null && Object.hasOwnProperty.call(message, "imageMessage"))
                $root.WAE2E.Message.ImageMessage.encode(message.imageMessage, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.contactMessage != null && Object.hasOwnProperty.call(message, "contactMessage"))
                $root.WAE2E.Message.ContactMessage.encode(message.contactMessage, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.locationMessage != null && Object.hasOwnProperty.call(message, "locationMessage"))
                $root.WAE2E.Message.LocationMessage.encode(message.locationMessage, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.extendedTextMessage != null && Object.hasOwnProperty.call(message, "extendedTextMessage"))
                $root.WAE2E.Message.ExtendedTextMessage.encode(message.extendedTextMessage, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.documentMessage != null && Object.hasOwnProperty.call(message, "documentMessage"))
                $root.WAE2E.Message.DocumentMessage.encode(message.documentMessage, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.audioMessage != null && Object.hasOwnProperty.call(message, "audioMessage"))
                $root.WAE2E.Message.AudioMessage.encode(message.audioMessage, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.videoMessage != null && Object.hasOwnProperty.call(message, "videoMessage"))
                $root.WAE2E.Message.VideoMessage.encode(message.videoMessage, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.call != null && Object.hasOwnProperty.call(message, "call"))
                $root.WAE2E.Message.Call.encode(message.call, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.chat != null && Object.hasOwnProperty.call(message, "chat"))
                $root.WAE2E.Message.Chat.encode(message.chat, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.protocolMessage != null && Object.hasOwnProperty.call(message, "protocolMessage"))
                $root.WAE2E.Message.ProtocolMessage.encode(message.protocolMessage, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.contactsArrayMessage != null && Object.hasOwnProperty.call(message, "contactsArrayMessage"))
                $root.WAE2E.Message.ContactsArrayMessage.encode(message.contactsArrayMessage, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.highlyStructuredMessage != null && Object.hasOwnProperty.call(message, "highlyStructuredMessage"))
                $root.WAE2E.Message.HighlyStructuredMessage.encode(message.highlyStructuredMessage, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            if (message.fastRatchetKeySenderKeyDistributionMessage != null && Object.hasOwnProperty.call(message, "fastRatchetKeySenderKeyDistributionMessage"))
                $root.WAE2E.Message.SenderKeyDistributionMessage.encode(message.fastRatchetKeySenderKeyDistributionMessage, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
            if (message.sendPaymentMessage != null && Object.hasOwnProperty.call(message, "sendPaymentMessage"))
                $root.WAE2E.Message.SendPaymentMessage.encode(message.sendPaymentMessage, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
            if (message.liveLocationMessage != null && Object.hasOwnProperty.call(message, "liveLocationMessage"))
                $root.WAE2E.Message.LiveLocationMessage.encode(message.liveLocationMessage, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
            if (message.requestPaymentMessage != null && Object.hasOwnProperty.call(message, "requestPaymentMessage"))
                $root.WAE2E.Message.RequestPaymentMessage.encode(message.requestPaymentMessage, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
            if (message.declinePaymentRequestMessage != null && Object.hasOwnProperty.call(message, "declinePaymentRequestMessage"))
                $root.WAE2E.Message.DeclinePaymentRequestMessage.encode(message.declinePaymentRequestMessage, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
            if (message.cancelPaymentRequestMessage != null && Object.hasOwnProperty.call(message, "cancelPaymentRequestMessage"))
                $root.WAE2E.Message.CancelPaymentRequestMessage.encode(message.cancelPaymentRequestMessage, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
            if (message.templateMessage != null && Object.hasOwnProperty.call(message, "templateMessage"))
                $root.WAE2E.Message.TemplateMessage.encode(message.templateMessage, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();
            if (message.stickerMessage != null && Object.hasOwnProperty.call(message, "stickerMessage"))
                $root.WAE2E.Message.StickerMessage.encode(message.stickerMessage, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
            if (message.groupInviteMessage != null && Object.hasOwnProperty.call(message, "groupInviteMessage"))
                $root.WAE2E.Message.GroupInviteMessage.encode(message.groupInviteMessage, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();
            if (message.templateButtonReplyMessage != null && Object.hasOwnProperty.call(message, "templateButtonReplyMessage"))
                $root.WAE2E.Message.TemplateButtonReplyMessage.encode(message.templateButtonReplyMessage, writer.uint32(/* id 29, wireType 2 =*/234).fork()).ldelim();
            if (message.productMessage != null && Object.hasOwnProperty.call(message, "productMessage"))
                $root.WAE2E.Message.ProductMessage.encode(message.productMessage, writer.uint32(/* id 30, wireType 2 =*/242).fork()).ldelim();
            if (message.deviceSentMessage != null && Object.hasOwnProperty.call(message, "deviceSentMessage"))
                $root.WAE2E.Message.DeviceSentMessage.encode(message.deviceSentMessage, writer.uint32(/* id 31, wireType 2 =*/250).fork()).ldelim();
            if (message.messageContextInfo != null && Object.hasOwnProperty.call(message, "messageContextInfo"))
                $root.WAE2E.MessageContextInfo.encode(message.messageContextInfo, writer.uint32(/* id 35, wireType 2 =*/282).fork()).ldelim();
            if (message.listMessage != null && Object.hasOwnProperty.call(message, "listMessage"))
                $root.WAE2E.Message.ListMessage.encode(message.listMessage, writer.uint32(/* id 36, wireType 2 =*/290).fork()).ldelim();
            if (message.viewOnceMessage != null && Object.hasOwnProperty.call(message, "viewOnceMessage"))
                $root.WAE2E.Message.FutureProofMessage.encode(message.viewOnceMessage, writer.uint32(/* id 37, wireType 2 =*/298).fork()).ldelim();
            if (message.orderMessage != null && Object.hasOwnProperty.call(message, "orderMessage"))
                $root.WAE2E.Message.OrderMessage.encode(message.orderMessage, writer.uint32(/* id 38, wireType 2 =*/306).fork()).ldelim();
            if (message.listResponseMessage != null && Object.hasOwnProperty.call(message, "listResponseMessage"))
                $root.WAE2E.Message.ListResponseMessage.encode(message.listResponseMessage, writer.uint32(/* id 39, wireType 2 =*/314).fork()).ldelim();
            if (message.ephemeralMessage != null && Object.hasOwnProperty.call(message, "ephemeralMessage"))
                $root.WAE2E.Message.FutureProofMessage.encode(message.ephemeralMessage, writer.uint32(/* id 40, wireType 2 =*/322).fork()).ldelim();
            if (message.invoiceMessage != null && Object.hasOwnProperty.call(message, "invoiceMessage"))
                $root.WAE2E.Message.InvoiceMessage.encode(message.invoiceMessage, writer.uint32(/* id 41, wireType 2 =*/330).fork()).ldelim();
            if (message.buttonsMessage != null && Object.hasOwnProperty.call(message, "buttonsMessage"))
                $root.WAE2E.Message.ButtonsMessage.encode(message.buttonsMessage, writer.uint32(/* id 42, wireType 2 =*/338).fork()).ldelim();
            if (message.buttonsResponseMessage != null && Object.hasOwnProperty.call(message, "buttonsResponseMessage"))
                $root.WAE2E.Message.ButtonsResponseMessage.encode(message.buttonsResponseMessage, writer.uint32(/* id 43, wireType 2 =*/346).fork()).ldelim();
            if (message.paymentInviteMessage != null && Object.hasOwnProperty.call(message, "paymentInviteMessage"))
                $root.WAE2E.Message.PaymentInviteMessage.encode(message.paymentInviteMessage, writer.uint32(/* id 44, wireType 2 =*/354).fork()).ldelim();
            if (message.interactiveMessage != null && Object.hasOwnProperty.call(message, "interactiveMessage"))
                $root.WAE2E.Message.InteractiveMessage.encode(message.interactiveMessage, writer.uint32(/* id 45, wireType 2 =*/362).fork()).ldelim();
            if (message.reactionMessage != null && Object.hasOwnProperty.call(message, "reactionMessage"))
                $root.WAE2E.Message.ReactionMessage.encode(message.reactionMessage, writer.uint32(/* id 46, wireType 2 =*/370).fork()).ldelim();
            if (message.stickerSyncRmrMessage != null && Object.hasOwnProperty.call(message, "stickerSyncRmrMessage"))
                $root.WAE2E.Message.StickerSyncRMRMessage.encode(message.stickerSyncRmrMessage, writer.uint32(/* id 47, wireType 2 =*/378).fork()).ldelim();
            if (message.interactiveResponseMessage != null && Object.hasOwnProperty.call(message, "interactiveResponseMessage"))
                $root.WAE2E.Message.InteractiveResponseMessage.encode(message.interactiveResponseMessage, writer.uint32(/* id 48, wireType 2 =*/386).fork()).ldelim();
            if (message.pollCreationMessage != null && Object.hasOwnProperty.call(message, "pollCreationMessage"))
                $root.WAE2E.Message.PollCreationMessage.encode(message.pollCreationMessage, writer.uint32(/* id 49, wireType 2 =*/394).fork()).ldelim();
            if (message.pollUpdateMessage != null && Object.hasOwnProperty.call(message, "pollUpdateMessage"))
                $root.WAE2E.Message.PollUpdateMessage.encode(message.pollUpdateMessage, writer.uint32(/* id 50, wireType 2 =*/402).fork()).ldelim();
            if (message.keepInChatMessage != null && Object.hasOwnProperty.call(message, "keepInChatMessage"))
                $root.WAE2E.Message.KeepInChatMessage.encode(message.keepInChatMessage, writer.uint32(/* id 51, wireType 2 =*/410).fork()).ldelim();
            if (message.documentWithCaptionMessage != null && Object.hasOwnProperty.call(message, "documentWithCaptionMessage"))
                $root.WAE2E.Message.FutureProofMessage.encode(message.documentWithCaptionMessage, writer.uint32(/* id 53, wireType 2 =*/426).fork()).ldelim();
            if (message.requestPhoneNumberMessage != null && Object.hasOwnProperty.call(message, "requestPhoneNumberMessage"))
                $root.WAE2E.Message.RequestPhoneNumberMessage.encode(message.requestPhoneNumberMessage, writer.uint32(/* id 54, wireType 2 =*/434).fork()).ldelim();
            if (message.viewOnceMessageV2 != null && Object.hasOwnProperty.call(message, "viewOnceMessageV2"))
                $root.WAE2E.Message.FutureProofMessage.encode(message.viewOnceMessageV2, writer.uint32(/* id 55, wireType 2 =*/442).fork()).ldelim();
            if (message.encReactionMessage != null && Object.hasOwnProperty.call(message, "encReactionMessage"))
                $root.WAE2E.Message.EncReactionMessage.encode(message.encReactionMessage, writer.uint32(/* id 56, wireType 2 =*/450).fork()).ldelim();
            if (message.editedMessage != null && Object.hasOwnProperty.call(message, "editedMessage"))
                $root.WAE2E.Message.FutureProofMessage.encode(message.editedMessage, writer.uint32(/* id 58, wireType 2 =*/466).fork()).ldelim();
            if (message.viewOnceMessageV2Extension != null && Object.hasOwnProperty.call(message, "viewOnceMessageV2Extension"))
                $root.WAE2E.Message.FutureProofMessage.encode(message.viewOnceMessageV2Extension, writer.uint32(/* id 59, wireType 2 =*/474).fork()).ldelim();
            if (message.pollCreationMessageV2 != null && Object.hasOwnProperty.call(message, "pollCreationMessageV2"))
                $root.WAE2E.Message.PollCreationMessage.encode(message.pollCreationMessageV2, writer.uint32(/* id 60, wireType 2 =*/482).fork()).ldelim();
            if (message.scheduledCallCreationMessage != null && Object.hasOwnProperty.call(message, "scheduledCallCreationMessage"))
                $root.WAE2E.Message.ScheduledCallCreationMessage.encode(message.scheduledCallCreationMessage, writer.uint32(/* id 61, wireType 2 =*/490).fork()).ldelim();
            if (message.groupMentionedMessage != null && Object.hasOwnProperty.call(message, "groupMentionedMessage"))
                $root.WAE2E.Message.FutureProofMessage.encode(message.groupMentionedMessage, writer.uint32(/* id 62, wireType 2 =*/498).fork()).ldelim();
            if (message.pinInChatMessage != null && Object.hasOwnProperty.call(message, "pinInChatMessage"))
                $root.WAE2E.Message.PinInChatMessage.encode(message.pinInChatMessage, writer.uint32(/* id 63, wireType 2 =*/506).fork()).ldelim();
            if (message.pollCreationMessageV3 != null && Object.hasOwnProperty.call(message, "pollCreationMessageV3"))
                $root.WAE2E.Message.PollCreationMessage.encode(message.pollCreationMessageV3, writer.uint32(/* id 64, wireType 2 =*/514).fork()).ldelim();
            if (message.scheduledCallEditMessage != null && Object.hasOwnProperty.call(message, "scheduledCallEditMessage"))
                $root.WAE2E.Message.ScheduledCallEditMessage.encode(message.scheduledCallEditMessage, writer.uint32(/* id 65, wireType 2 =*/522).fork()).ldelim();
            if (message.ptvMessage != null && Object.hasOwnProperty.call(message, "ptvMessage"))
                $root.WAE2E.Message.VideoMessage.encode(message.ptvMessage, writer.uint32(/* id 66, wireType 2 =*/530).fork()).ldelim();
            if (message.botInvokeMessage != null && Object.hasOwnProperty.call(message, "botInvokeMessage"))
                $root.WAE2E.Message.FutureProofMessage.encode(message.botInvokeMessage, writer.uint32(/* id 67, wireType 2 =*/538).fork()).ldelim();
            if (message.callLogMesssage != null && Object.hasOwnProperty.call(message, "callLogMesssage"))
                $root.WAE2E.Message.CallLogMessage.encode(message.callLogMesssage, writer.uint32(/* id 69, wireType 2 =*/554).fork()).ldelim();
            if (message.messageHistoryBundle != null && Object.hasOwnProperty.call(message, "messageHistoryBundle"))
                $root.WAE2E.Message.MessageHistoryBundle.encode(message.messageHistoryBundle, writer.uint32(/* id 70, wireType 2 =*/562).fork()).ldelim();
            if (message.encCommentMessage != null && Object.hasOwnProperty.call(message, "encCommentMessage"))
                $root.WAE2E.Message.EncCommentMessage.encode(message.encCommentMessage, writer.uint32(/* id 71, wireType 2 =*/570).fork()).ldelim();
            if (message.bcallMessage != null && Object.hasOwnProperty.call(message, "bcallMessage"))
                $root.WAE2E.Message.BCallMessage.encode(message.bcallMessage, writer.uint32(/* id 72, wireType 2 =*/578).fork()).ldelim();
            if (message.lottieStickerMessage != null && Object.hasOwnProperty.call(message, "lottieStickerMessage"))
                $root.WAE2E.Message.FutureProofMessage.encode(message.lottieStickerMessage, writer.uint32(/* id 74, wireType 2 =*/594).fork()).ldelim();
            if (message.eventMessage != null && Object.hasOwnProperty.call(message, "eventMessage"))
                $root.WAE2E.Message.EventMessage.encode(message.eventMessage, writer.uint32(/* id 75, wireType 2 =*/602).fork()).ldelim();
            if (message.encEventResponseMessage != null && Object.hasOwnProperty.call(message, "encEventResponseMessage"))
                $root.WAE2E.Message.EncEventResponseMessage.encode(message.encEventResponseMessage, writer.uint32(/* id 76, wireType 2 =*/610).fork()).ldelim();
            if (message.commentMessage != null && Object.hasOwnProperty.call(message, "commentMessage"))
                $root.WAE2E.Message.CommentMessage.encode(message.commentMessage, writer.uint32(/* id 77, wireType 2 =*/618).fork()).ldelim();
            if (message.newsletterAdminInviteMessage != null && Object.hasOwnProperty.call(message, "newsletterAdminInviteMessage"))
                $root.WAE2E.Message.NewsletterAdminInviteMessage.encode(message.newsletterAdminInviteMessage, writer.uint32(/* id 78, wireType 2 =*/626).fork()).ldelim();
            if (message.placeholderMessage != null && Object.hasOwnProperty.call(message, "placeholderMessage"))
                $root.WAE2E.Message.PlaceholderMessage.encode(message.placeholderMessage, writer.uint32(/* id 80, wireType 2 =*/642).fork()).ldelim();
            if (message.secretEncryptedMessage != null && Object.hasOwnProperty.call(message, "secretEncryptedMessage"))
                $root.WAE2E.Message.SecretEncryptedMessage.encode(message.secretEncryptedMessage, writer.uint32(/* id 82, wireType 2 =*/658).fork()).ldelim();
            if (message.albumMessage != null && Object.hasOwnProperty.call(message, "albumMessage"))
                $root.WAE2E.Message.AlbumMessage.encode(message.albumMessage, writer.uint32(/* id 83, wireType 2 =*/666).fork()).ldelim();
            if (message.pollResultSnapshotMessage != null && Object.hasOwnProperty.call(message, "pollResultSnapshotMessage"))
                $root.WAE2E.Message.PollResultSnapshotMessage.encode(message.pollResultSnapshotMessage, writer.uint32(/* id 84, wireType 2 =*/674).fork()).ldelim();
            if (message.eventCoverImage != null && Object.hasOwnProperty.call(message, "eventCoverImage"))
                $root.WAE2E.Message.FutureProofMessage.encode(message.eventCoverImage, writer.uint32(/* id 85, wireType 2 =*/682).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Message message, length delimited. Does not implicitly {@link WAE2E.Message.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.Message
         * @static
         * @param {WAE2E.IMessage} message Message message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Message.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Message message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.Message
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.Message} Message
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Message.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.conversation = reader.string();
                        break;
                    }
                case 2: {
                        message.senderKeyDistributionMessage = $root.WAE2E.Message.SenderKeyDistributionMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 3: {
                        message.imageMessage = $root.WAE2E.Message.ImageMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 4: {
                        message.contactMessage = $root.WAE2E.Message.ContactMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 5: {
                        message.locationMessage = $root.WAE2E.Message.LocationMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 6: {
                        message.extendedTextMessage = $root.WAE2E.Message.ExtendedTextMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 7: {
                        message.documentMessage = $root.WAE2E.Message.DocumentMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 8: {
                        message.audioMessage = $root.WAE2E.Message.AudioMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 9: {
                        message.videoMessage = $root.WAE2E.Message.VideoMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 10: {
                        message.call = $root.WAE2E.Message.Call.decode(reader, reader.uint32());
                        break;
                    }
                case 11: {
                        message.chat = $root.WAE2E.Message.Chat.decode(reader, reader.uint32());
                        break;
                    }
                case 12: {
                        message.protocolMessage = $root.WAE2E.Message.ProtocolMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 13: {
                        message.contactsArrayMessage = $root.WAE2E.Message.ContactsArrayMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 14: {
                        message.highlyStructuredMessage = $root.WAE2E.Message.HighlyStructuredMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 15: {
                        message.fastRatchetKeySenderKeyDistributionMessage = $root.WAE2E.Message.SenderKeyDistributionMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 16: {
                        message.sendPaymentMessage = $root.WAE2E.Message.SendPaymentMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 18: {
                        message.liveLocationMessage = $root.WAE2E.Message.LiveLocationMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 22: {
                        message.requestPaymentMessage = $root.WAE2E.Message.RequestPaymentMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 23: {
                        message.declinePaymentRequestMessage = $root.WAE2E.Message.DeclinePaymentRequestMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 24: {
                        message.cancelPaymentRequestMessage = $root.WAE2E.Message.CancelPaymentRequestMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 25: {
                        message.templateMessage = $root.WAE2E.Message.TemplateMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 26: {
                        message.stickerMessage = $root.WAE2E.Message.StickerMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 28: {
                        message.groupInviteMessage = $root.WAE2E.Message.GroupInviteMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 29: {
                        message.templateButtonReplyMessage = $root.WAE2E.Message.TemplateButtonReplyMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 30: {
                        message.productMessage = $root.WAE2E.Message.ProductMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 31: {
                        message.deviceSentMessage = $root.WAE2E.Message.DeviceSentMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 35: {
                        message.messageContextInfo = $root.WAE2E.MessageContextInfo.decode(reader, reader.uint32());
                        break;
                    }
                case 36: {
                        message.listMessage = $root.WAE2E.Message.ListMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 37: {
                        message.viewOnceMessage = $root.WAE2E.Message.FutureProofMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 38: {
                        message.orderMessage = $root.WAE2E.Message.OrderMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 39: {
                        message.listResponseMessage = $root.WAE2E.Message.ListResponseMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 40: {
                        message.ephemeralMessage = $root.WAE2E.Message.FutureProofMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 41: {
                        message.invoiceMessage = $root.WAE2E.Message.InvoiceMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 42: {
                        message.buttonsMessage = $root.WAE2E.Message.ButtonsMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 43: {
                        message.buttonsResponseMessage = $root.WAE2E.Message.ButtonsResponseMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 44: {
                        message.paymentInviteMessage = $root.WAE2E.Message.PaymentInviteMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 45: {
                        message.interactiveMessage = $root.WAE2E.Message.InteractiveMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 46: {
                        message.reactionMessage = $root.WAE2E.Message.ReactionMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 47: {
                        message.stickerSyncRmrMessage = $root.WAE2E.Message.StickerSyncRMRMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 48: {
                        message.interactiveResponseMessage = $root.WAE2E.Message.InteractiveResponseMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 49: {
                        message.pollCreationMessage = $root.WAE2E.Message.PollCreationMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 50: {
                        message.pollUpdateMessage = $root.WAE2E.Message.PollUpdateMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 51: {
                        message.keepInChatMessage = $root.WAE2E.Message.KeepInChatMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 53: {
                        message.documentWithCaptionMessage = $root.WAE2E.Message.FutureProofMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 54: {
                        message.requestPhoneNumberMessage = $root.WAE2E.Message.RequestPhoneNumberMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 55: {
                        message.viewOnceMessageV2 = $root.WAE2E.Message.FutureProofMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 56: {
                        message.encReactionMessage = $root.WAE2E.Message.EncReactionMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 58: {
                        message.editedMessage = $root.WAE2E.Message.FutureProofMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 59: {
                        message.viewOnceMessageV2Extension = $root.WAE2E.Message.FutureProofMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 60: {
                        message.pollCreationMessageV2 = $root.WAE2E.Message.PollCreationMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 61: {
                        message.scheduledCallCreationMessage = $root.WAE2E.Message.ScheduledCallCreationMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 62: {
                        message.groupMentionedMessage = $root.WAE2E.Message.FutureProofMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 63: {
                        message.pinInChatMessage = $root.WAE2E.Message.PinInChatMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 64: {
                        message.pollCreationMessageV3 = $root.WAE2E.Message.PollCreationMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 65: {
                        message.scheduledCallEditMessage = $root.WAE2E.Message.ScheduledCallEditMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 66: {
                        message.ptvMessage = $root.WAE2E.Message.VideoMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 67: {
                        message.botInvokeMessage = $root.WAE2E.Message.FutureProofMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 69: {
                        message.callLogMesssage = $root.WAE2E.Message.CallLogMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 70: {
                        message.messageHistoryBundle = $root.WAE2E.Message.MessageHistoryBundle.decode(reader, reader.uint32());
                        break;
                    }
                case 71: {
                        message.encCommentMessage = $root.WAE2E.Message.EncCommentMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 72: {
                        message.bcallMessage = $root.WAE2E.Message.BCallMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 74: {
                        message.lottieStickerMessage = $root.WAE2E.Message.FutureProofMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 75: {
                        message.eventMessage = $root.WAE2E.Message.EventMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 76: {
                        message.encEventResponseMessage = $root.WAE2E.Message.EncEventResponseMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 77: {
                        message.commentMessage = $root.WAE2E.Message.CommentMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 78: {
                        message.newsletterAdminInviteMessage = $root.WAE2E.Message.NewsletterAdminInviteMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 80: {
                        message.placeholderMessage = $root.WAE2E.Message.PlaceholderMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 82: {
                        message.secretEncryptedMessage = $root.WAE2E.Message.SecretEncryptedMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 83: {
                        message.albumMessage = $root.WAE2E.Message.AlbumMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 84: {
                        message.pollResultSnapshotMessage = $root.WAE2E.Message.PollResultSnapshotMessage.decode(reader, reader.uint32());
                        break;
                    }
                case 85: {
                        message.eventCoverImage = $root.WAE2E.Message.FutureProofMessage.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Message message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.Message
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.Message} Message
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Message.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Message message.
         * @function verify
         * @memberof WAE2E.Message
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Message.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conversation != null && message.hasOwnProperty("conversation"))
                if (!$util.isString(message.conversation))
                    return "conversation: string expected";
            if (message.senderKeyDistributionMessage != null && message.hasOwnProperty("senderKeyDistributionMessage")) {
                var error = $root.WAE2E.Message.SenderKeyDistributionMessage.verify(message.senderKeyDistributionMessage);
                if (error)
                    return "senderKeyDistributionMessage." + error;
            }
            if (message.imageMessage != null && message.hasOwnProperty("imageMessage")) {
                var error = $root.WAE2E.Message.ImageMessage.verify(message.imageMessage);
                if (error)
                    return "imageMessage." + error;
            }
            if (message.contactMessage != null && message.hasOwnProperty("contactMessage")) {
                var error = $root.WAE2E.Message.ContactMessage.verify(message.contactMessage);
                if (error)
                    return "contactMessage." + error;
            }
            if (message.locationMessage != null && message.hasOwnProperty("locationMessage")) {
                var error = $root.WAE2E.Message.LocationMessage.verify(message.locationMessage);
                if (error)
                    return "locationMessage." + error;
            }
            if (message.extendedTextMessage != null && message.hasOwnProperty("extendedTextMessage")) {
                var error = $root.WAE2E.Message.ExtendedTextMessage.verify(message.extendedTextMessage);
                if (error)
                    return "extendedTextMessage." + error;
            }
            if (message.documentMessage != null && message.hasOwnProperty("documentMessage")) {
                var error = $root.WAE2E.Message.DocumentMessage.verify(message.documentMessage);
                if (error)
                    return "documentMessage." + error;
            }
            if (message.audioMessage != null && message.hasOwnProperty("audioMessage")) {
                var error = $root.WAE2E.Message.AudioMessage.verify(message.audioMessage);
                if (error)
                    return "audioMessage." + error;
            }
            if (message.videoMessage != null && message.hasOwnProperty("videoMessage")) {
                var error = $root.WAE2E.Message.VideoMessage.verify(message.videoMessage);
                if (error)
                    return "videoMessage." + error;
            }
            if (message.call != null && message.hasOwnProperty("call")) {
                var error = $root.WAE2E.Message.Call.verify(message.call);
                if (error)
                    return "call." + error;
            }
            if (message.chat != null && message.hasOwnProperty("chat")) {
                var error = $root.WAE2E.Message.Chat.verify(message.chat);
                if (error)
                    return "chat." + error;
            }
            if (message.protocolMessage != null && message.hasOwnProperty("protocolMessage")) {
                var error = $root.WAE2E.Message.ProtocolMessage.verify(message.protocolMessage);
                if (error)
                    return "protocolMessage." + error;
            }
            if (message.contactsArrayMessage != null && message.hasOwnProperty("contactsArrayMessage")) {
                var error = $root.WAE2E.Message.ContactsArrayMessage.verify(message.contactsArrayMessage);
                if (error)
                    return "contactsArrayMessage." + error;
            }
            if (message.highlyStructuredMessage != null && message.hasOwnProperty("highlyStructuredMessage")) {
                var error = $root.WAE2E.Message.HighlyStructuredMessage.verify(message.highlyStructuredMessage);
                if (error)
                    return "highlyStructuredMessage." + error;
            }
            if (message.fastRatchetKeySenderKeyDistributionMessage != null && message.hasOwnProperty("fastRatchetKeySenderKeyDistributionMessage")) {
                var error = $root.WAE2E.Message.SenderKeyDistributionMessage.verify(message.fastRatchetKeySenderKeyDistributionMessage);
                if (error)
                    return "fastRatchetKeySenderKeyDistributionMessage." + error;
            }
            if (message.sendPaymentMessage != null && message.hasOwnProperty("sendPaymentMessage")) {
                var error = $root.WAE2E.Message.SendPaymentMessage.verify(message.sendPaymentMessage);
                if (error)
                    return "sendPaymentMessage." + error;
            }
            if (message.liveLocationMessage != null && message.hasOwnProperty("liveLocationMessage")) {
                var error = $root.WAE2E.Message.LiveLocationMessage.verify(message.liveLocationMessage);
                if (error)
                    return "liveLocationMessage." + error;
            }
            if (message.requestPaymentMessage != null && message.hasOwnProperty("requestPaymentMessage")) {
                var error = $root.WAE2E.Message.RequestPaymentMessage.verify(message.requestPaymentMessage);
                if (error)
                    return "requestPaymentMessage." + error;
            }
            if (message.declinePaymentRequestMessage != null && message.hasOwnProperty("declinePaymentRequestMessage")) {
                var error = $root.WAE2E.Message.DeclinePaymentRequestMessage.verify(message.declinePaymentRequestMessage);
                if (error)
                    return "declinePaymentRequestMessage." + error;
            }
            if (message.cancelPaymentRequestMessage != null && message.hasOwnProperty("cancelPaymentRequestMessage")) {
                var error = $root.WAE2E.Message.CancelPaymentRequestMessage.verify(message.cancelPaymentRequestMessage);
                if (error)
                    return "cancelPaymentRequestMessage." + error;
            }
            if (message.templateMessage != null && message.hasOwnProperty("templateMessage")) {
                var error = $root.WAE2E.Message.TemplateMessage.verify(message.templateMessage);
                if (error)
                    return "templateMessage." + error;
            }
            if (message.stickerMessage != null && message.hasOwnProperty("stickerMessage")) {
                var error = $root.WAE2E.Message.StickerMessage.verify(message.stickerMessage);
                if (error)
                    return "stickerMessage." + error;
            }
            if (message.groupInviteMessage != null && message.hasOwnProperty("groupInviteMessage")) {
                var error = $root.WAE2E.Message.GroupInviteMessage.verify(message.groupInviteMessage);
                if (error)
                    return "groupInviteMessage." + error;
            }
            if (message.templateButtonReplyMessage != null && message.hasOwnProperty("templateButtonReplyMessage")) {
                var error = $root.WAE2E.Message.TemplateButtonReplyMessage.verify(message.templateButtonReplyMessage);
                if (error)
                    return "templateButtonReplyMessage." + error;
            }
            if (message.productMessage != null && message.hasOwnProperty("productMessage")) {
                var error = $root.WAE2E.Message.ProductMessage.verify(message.productMessage);
                if (error)
                    return "productMessage." + error;
            }
            if (message.deviceSentMessage != null && message.hasOwnProperty("deviceSentMessage")) {
                var error = $root.WAE2E.Message.DeviceSentMessage.verify(message.deviceSentMessage);
                if (error)
                    return "deviceSentMessage." + error;
            }
            if (message.messageContextInfo != null && message.hasOwnProperty("messageContextInfo")) {
                var error = $root.WAE2E.MessageContextInfo.verify(message.messageContextInfo);
                if (error)
                    return "messageContextInfo." + error;
            }
            if (message.listMessage != null && message.hasOwnProperty("listMessage")) {
                var error = $root.WAE2E.Message.ListMessage.verify(message.listMessage);
                if (error)
                    return "listMessage." + error;
            }
            if (message.viewOnceMessage != null && message.hasOwnProperty("viewOnceMessage")) {
                var error = $root.WAE2E.Message.FutureProofMessage.verify(message.viewOnceMessage);
                if (error)
                    return "viewOnceMessage." + error;
            }
            if (message.orderMessage != null && message.hasOwnProperty("orderMessage")) {
                var error = $root.WAE2E.Message.OrderMessage.verify(message.orderMessage);
                if (error)
                    return "orderMessage." + error;
            }
            if (message.listResponseMessage != null && message.hasOwnProperty("listResponseMessage")) {
                var error = $root.WAE2E.Message.ListResponseMessage.verify(message.listResponseMessage);
                if (error)
                    return "listResponseMessage." + error;
            }
            if (message.ephemeralMessage != null && message.hasOwnProperty("ephemeralMessage")) {
                var error = $root.WAE2E.Message.FutureProofMessage.verify(message.ephemeralMessage);
                if (error)
                    return "ephemeralMessage." + error;
            }
            if (message.invoiceMessage != null && message.hasOwnProperty("invoiceMessage")) {
                var error = $root.WAE2E.Message.InvoiceMessage.verify(message.invoiceMessage);
                if (error)
                    return "invoiceMessage." + error;
            }
            if (message.buttonsMessage != null && message.hasOwnProperty("buttonsMessage")) {
                var error = $root.WAE2E.Message.ButtonsMessage.verify(message.buttonsMessage);
                if (error)
                    return "buttonsMessage." + error;
            }
            if (message.buttonsResponseMessage != null && message.hasOwnProperty("buttonsResponseMessage")) {
                var error = $root.WAE2E.Message.ButtonsResponseMessage.verify(message.buttonsResponseMessage);
                if (error)
                    return "buttonsResponseMessage." + error;
            }
            if (message.paymentInviteMessage != null && message.hasOwnProperty("paymentInviteMessage")) {
                var error = $root.WAE2E.Message.PaymentInviteMessage.verify(message.paymentInviteMessage);
                if (error)
                    return "paymentInviteMessage." + error;
            }
            if (message.interactiveMessage != null && message.hasOwnProperty("interactiveMessage")) {
                var error = $root.WAE2E.Message.InteractiveMessage.verify(message.interactiveMessage);
                if (error)
                    return "interactiveMessage." + error;
            }
            if (message.reactionMessage != null && message.hasOwnProperty("reactionMessage")) {
                var error = $root.WAE2E.Message.ReactionMessage.verify(message.reactionMessage);
                if (error)
                    return "reactionMessage." + error;
            }
            if (message.stickerSyncRmrMessage != null && message.hasOwnProperty("stickerSyncRmrMessage")) {
                var error = $root.WAE2E.Message.StickerSyncRMRMessage.verify(message.stickerSyncRmrMessage);
                if (error)
                    return "stickerSyncRmrMessage." + error;
            }
            if (message.interactiveResponseMessage != null && message.hasOwnProperty("interactiveResponseMessage")) {
                var error = $root.WAE2E.Message.InteractiveResponseMessage.verify(message.interactiveResponseMessage);
                if (error)
                    return "interactiveResponseMessage." + error;
            }
            if (message.pollCreationMessage != null && message.hasOwnProperty("pollCreationMessage")) {
                var error = $root.WAE2E.Message.PollCreationMessage.verify(message.pollCreationMessage);
                if (error)
                    return "pollCreationMessage." + error;
            }
            if (message.pollUpdateMessage != null && message.hasOwnProperty("pollUpdateMessage")) {
                var error = $root.WAE2E.Message.PollUpdateMessage.verify(message.pollUpdateMessage);
                if (error)
                    return "pollUpdateMessage." + error;
            }
            if (message.keepInChatMessage != null && message.hasOwnProperty("keepInChatMessage")) {
                var error = $root.WAE2E.Message.KeepInChatMessage.verify(message.keepInChatMessage);
                if (error)
                    return "keepInChatMessage." + error;
            }
            if (message.documentWithCaptionMessage != null && message.hasOwnProperty("documentWithCaptionMessage")) {
                var error = $root.WAE2E.Message.FutureProofMessage.verify(message.documentWithCaptionMessage);
                if (error)
                    return "documentWithCaptionMessage." + error;
            }
            if (message.requestPhoneNumberMessage != null && message.hasOwnProperty("requestPhoneNumberMessage")) {
                var error = $root.WAE2E.Message.RequestPhoneNumberMessage.verify(message.requestPhoneNumberMessage);
                if (error)
                    return "requestPhoneNumberMessage." + error;
            }
            if (message.viewOnceMessageV2 != null && message.hasOwnProperty("viewOnceMessageV2")) {
                var error = $root.WAE2E.Message.FutureProofMessage.verify(message.viewOnceMessageV2);
                if (error)
                    return "viewOnceMessageV2." + error;
            }
            if (message.encReactionMessage != null && message.hasOwnProperty("encReactionMessage")) {
                var error = $root.WAE2E.Message.EncReactionMessage.verify(message.encReactionMessage);
                if (error)
                    return "encReactionMessage." + error;
            }
            if (message.editedMessage != null && message.hasOwnProperty("editedMessage")) {
                var error = $root.WAE2E.Message.FutureProofMessage.verify(message.editedMessage);
                if (error)
                    return "editedMessage." + error;
            }
            if (message.viewOnceMessageV2Extension != null && message.hasOwnProperty("viewOnceMessageV2Extension")) {
                var error = $root.WAE2E.Message.FutureProofMessage.verify(message.viewOnceMessageV2Extension);
                if (error)
                    return "viewOnceMessageV2Extension." + error;
            }
            if (message.pollCreationMessageV2 != null && message.hasOwnProperty("pollCreationMessageV2")) {
                var error = $root.WAE2E.Message.PollCreationMessage.verify(message.pollCreationMessageV2);
                if (error)
                    return "pollCreationMessageV2." + error;
            }
            if (message.scheduledCallCreationMessage != null && message.hasOwnProperty("scheduledCallCreationMessage")) {
                var error = $root.WAE2E.Message.ScheduledCallCreationMessage.verify(message.scheduledCallCreationMessage);
                if (error)
                    return "scheduledCallCreationMessage." + error;
            }
            if (message.groupMentionedMessage != null && message.hasOwnProperty("groupMentionedMessage")) {
                var error = $root.WAE2E.Message.FutureProofMessage.verify(message.groupMentionedMessage);
                if (error)
                    return "groupMentionedMessage." + error;
            }
            if (message.pinInChatMessage != null && message.hasOwnProperty("pinInChatMessage")) {
                var error = $root.WAE2E.Message.PinInChatMessage.verify(message.pinInChatMessage);
                if (error)
                    return "pinInChatMessage." + error;
            }
            if (message.pollCreationMessageV3 != null && message.hasOwnProperty("pollCreationMessageV3")) {
                var error = $root.WAE2E.Message.PollCreationMessage.verify(message.pollCreationMessageV3);
                if (error)
                    return "pollCreationMessageV3." + error;
            }
            if (message.scheduledCallEditMessage != null && message.hasOwnProperty("scheduledCallEditMessage")) {
                var error = $root.WAE2E.Message.ScheduledCallEditMessage.verify(message.scheduledCallEditMessage);
                if (error)
                    return "scheduledCallEditMessage." + error;
            }
            if (message.ptvMessage != null && message.hasOwnProperty("ptvMessage")) {
                var error = $root.WAE2E.Message.VideoMessage.verify(message.ptvMessage);
                if (error)
                    return "ptvMessage." + error;
            }
            if (message.botInvokeMessage != null && message.hasOwnProperty("botInvokeMessage")) {
                var error = $root.WAE2E.Message.FutureProofMessage.verify(message.botInvokeMessage);
                if (error)
                    return "botInvokeMessage." + error;
            }
            if (message.callLogMesssage != null && message.hasOwnProperty("callLogMesssage")) {
                var error = $root.WAE2E.Message.CallLogMessage.verify(message.callLogMesssage);
                if (error)
                    return "callLogMesssage." + error;
            }
            if (message.messageHistoryBundle != null && message.hasOwnProperty("messageHistoryBundle")) {
                var error = $root.WAE2E.Message.MessageHistoryBundle.verify(message.messageHistoryBundle);
                if (error)
                    return "messageHistoryBundle." + error;
            }
            if (message.encCommentMessage != null && message.hasOwnProperty("encCommentMessage")) {
                var error = $root.WAE2E.Message.EncCommentMessage.verify(message.encCommentMessage);
                if (error)
                    return "encCommentMessage." + error;
            }
            if (message.bcallMessage != null && message.hasOwnProperty("bcallMessage")) {
                var error = $root.WAE2E.Message.BCallMessage.verify(message.bcallMessage);
                if (error)
                    return "bcallMessage." + error;
            }
            if (message.lottieStickerMessage != null && message.hasOwnProperty("lottieStickerMessage")) {
                var error = $root.WAE2E.Message.FutureProofMessage.verify(message.lottieStickerMessage);
                if (error)
                    return "lottieStickerMessage." + error;
            }
            if (message.eventMessage != null && message.hasOwnProperty("eventMessage")) {
                var error = $root.WAE2E.Message.EventMessage.verify(message.eventMessage);
                if (error)
                    return "eventMessage." + error;
            }
            if (message.encEventResponseMessage != null && message.hasOwnProperty("encEventResponseMessage")) {
                var error = $root.WAE2E.Message.EncEventResponseMessage.verify(message.encEventResponseMessage);
                if (error)
                    return "encEventResponseMessage." + error;
            }
            if (message.commentMessage != null && message.hasOwnProperty("commentMessage")) {
                var error = $root.WAE2E.Message.CommentMessage.verify(message.commentMessage);
                if (error)
                    return "commentMessage." + error;
            }
            if (message.newsletterAdminInviteMessage != null && message.hasOwnProperty("newsletterAdminInviteMessage")) {
                var error = $root.WAE2E.Message.NewsletterAdminInviteMessage.verify(message.newsletterAdminInviteMessage);
                if (error)
                    return "newsletterAdminInviteMessage." + error;
            }
            if (message.placeholderMessage != null && message.hasOwnProperty("placeholderMessage")) {
                var error = $root.WAE2E.Message.PlaceholderMessage.verify(message.placeholderMessage);
                if (error)
                    return "placeholderMessage." + error;
            }
            if (message.secretEncryptedMessage != null && message.hasOwnProperty("secretEncryptedMessage")) {
                var error = $root.WAE2E.Message.SecretEncryptedMessage.verify(message.secretEncryptedMessage);
                if (error)
                    return "secretEncryptedMessage." + error;
            }
            if (message.albumMessage != null && message.hasOwnProperty("albumMessage")) {
                var error = $root.WAE2E.Message.AlbumMessage.verify(message.albumMessage);
                if (error)
                    return "albumMessage." + error;
            }
            if (message.pollResultSnapshotMessage != null && message.hasOwnProperty("pollResultSnapshotMessage")) {
                var error = $root.WAE2E.Message.PollResultSnapshotMessage.verify(message.pollResultSnapshotMessage);
                if (error)
                    return "pollResultSnapshotMessage." + error;
            }
            if (message.eventCoverImage != null && message.hasOwnProperty("eventCoverImage")) {
                var error = $root.WAE2E.Message.FutureProofMessage.verify(message.eventCoverImage);
                if (error)
                    return "eventCoverImage." + error;
            }
            return null;
        };

        /**
         * Creates a Message message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.Message
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.Message} Message
         */
        Message.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.Message)
                return object;
            var message = new $root.WAE2E.Message();
            if (object.conversation != null)
                message.conversation = String(object.conversation);
            if (object.senderKeyDistributionMessage != null) {
                if (typeof object.senderKeyDistributionMessage !== "object")
                    throw TypeError(".WAE2E.Message.senderKeyDistributionMessage: object expected");
                message.senderKeyDistributionMessage = $root.WAE2E.Message.SenderKeyDistributionMessage.fromObject(object.senderKeyDistributionMessage);
            }
            if (object.imageMessage != null) {
                if (typeof object.imageMessage !== "object")
                    throw TypeError(".WAE2E.Message.imageMessage: object expected");
                message.imageMessage = $root.WAE2E.Message.ImageMessage.fromObject(object.imageMessage);
            }
            if (object.contactMessage != null) {
                if (typeof object.contactMessage !== "object")
                    throw TypeError(".WAE2E.Message.contactMessage: object expected");
                message.contactMessage = $root.WAE2E.Message.ContactMessage.fromObject(object.contactMessage);
            }
            if (object.locationMessage != null) {
                if (typeof object.locationMessage !== "object")
                    throw TypeError(".WAE2E.Message.locationMessage: object expected");
                message.locationMessage = $root.WAE2E.Message.LocationMessage.fromObject(object.locationMessage);
            }
            if (object.extendedTextMessage != null) {
                if (typeof object.extendedTextMessage !== "object")
                    throw TypeError(".WAE2E.Message.extendedTextMessage: object expected");
                message.extendedTextMessage = $root.WAE2E.Message.ExtendedTextMessage.fromObject(object.extendedTextMessage);
            }
            if (object.documentMessage != null) {
                if (typeof object.documentMessage !== "object")
                    throw TypeError(".WAE2E.Message.documentMessage: object expected");
                message.documentMessage = $root.WAE2E.Message.DocumentMessage.fromObject(object.documentMessage);
            }
            if (object.audioMessage != null) {
                if (typeof object.audioMessage !== "object")
                    throw TypeError(".WAE2E.Message.audioMessage: object expected");
                message.audioMessage = $root.WAE2E.Message.AudioMessage.fromObject(object.audioMessage);
            }
            if (object.videoMessage != null) {
                if (typeof object.videoMessage !== "object")
                    throw TypeError(".WAE2E.Message.videoMessage: object expected");
                message.videoMessage = $root.WAE2E.Message.VideoMessage.fromObject(object.videoMessage);
            }
            if (object.call != null) {
                if (typeof object.call !== "object")
                    throw TypeError(".WAE2E.Message.call: object expected");
                message.call = $root.WAE2E.Message.Call.fromObject(object.call);
            }
            if (object.chat != null) {
                if (typeof object.chat !== "object")
                    throw TypeError(".WAE2E.Message.chat: object expected");
                message.chat = $root.WAE2E.Message.Chat.fromObject(object.chat);
            }
            if (object.protocolMessage != null) {
                if (typeof object.protocolMessage !== "object")
                    throw TypeError(".WAE2E.Message.protocolMessage: object expected");
                message.protocolMessage = $root.WAE2E.Message.ProtocolMessage.fromObject(object.protocolMessage);
            }
            if (object.contactsArrayMessage != null) {
                if (typeof object.contactsArrayMessage !== "object")
                    throw TypeError(".WAE2E.Message.contactsArrayMessage: object expected");
                message.contactsArrayMessage = $root.WAE2E.Message.ContactsArrayMessage.fromObject(object.contactsArrayMessage);
            }
            if (object.highlyStructuredMessage != null) {
                if (typeof object.highlyStructuredMessage !== "object")
                    throw TypeError(".WAE2E.Message.highlyStructuredMessage: object expected");
                message.highlyStructuredMessage = $root.WAE2E.Message.HighlyStructuredMessage.fromObject(object.highlyStructuredMessage);
            }
            if (object.fastRatchetKeySenderKeyDistributionMessage != null) {
                if (typeof object.fastRatchetKeySenderKeyDistributionMessage !== "object")
                    throw TypeError(".WAE2E.Message.fastRatchetKeySenderKeyDistributionMessage: object expected");
                message.fastRatchetKeySenderKeyDistributionMessage = $root.WAE2E.Message.SenderKeyDistributionMessage.fromObject(object.fastRatchetKeySenderKeyDistributionMessage);
            }
            if (object.sendPaymentMessage != null) {
                if (typeof object.sendPaymentMessage !== "object")
                    throw TypeError(".WAE2E.Message.sendPaymentMessage: object expected");
                message.sendPaymentMessage = $root.WAE2E.Message.SendPaymentMessage.fromObject(object.sendPaymentMessage);
            }
            if (object.liveLocationMessage != null) {
                if (typeof object.liveLocationMessage !== "object")
                    throw TypeError(".WAE2E.Message.liveLocationMessage: object expected");
                message.liveLocationMessage = $root.WAE2E.Message.LiveLocationMessage.fromObject(object.liveLocationMessage);
            }
            if (object.requestPaymentMessage != null) {
                if (typeof object.requestPaymentMessage !== "object")
                    throw TypeError(".WAE2E.Message.requestPaymentMessage: object expected");
                message.requestPaymentMessage = $root.WAE2E.Message.RequestPaymentMessage.fromObject(object.requestPaymentMessage);
            }
            if (object.declinePaymentRequestMessage != null) {
                if (typeof object.declinePaymentRequestMessage !== "object")
                    throw TypeError(".WAE2E.Message.declinePaymentRequestMessage: object expected");
                message.declinePaymentRequestMessage = $root.WAE2E.Message.DeclinePaymentRequestMessage.fromObject(object.declinePaymentRequestMessage);
            }
            if (object.cancelPaymentRequestMessage != null) {
                if (typeof object.cancelPaymentRequestMessage !== "object")
                    throw TypeError(".WAE2E.Message.cancelPaymentRequestMessage: object expected");
                message.cancelPaymentRequestMessage = $root.WAE2E.Message.CancelPaymentRequestMessage.fromObject(object.cancelPaymentRequestMessage);
            }
            if (object.templateMessage != null) {
                if (typeof object.templateMessage !== "object")
                    throw TypeError(".WAE2E.Message.templateMessage: object expected");
                message.templateMessage = $root.WAE2E.Message.TemplateMessage.fromObject(object.templateMessage);
            }
            if (object.stickerMessage != null) {
                if (typeof object.stickerMessage !== "object")
                    throw TypeError(".WAE2E.Message.stickerMessage: object expected");
                message.stickerMessage = $root.WAE2E.Message.StickerMessage.fromObject(object.stickerMessage);
            }
            if (object.groupInviteMessage != null) {
                if (typeof object.groupInviteMessage !== "object")
                    throw TypeError(".WAE2E.Message.groupInviteMessage: object expected");
                message.groupInviteMessage = $root.WAE2E.Message.GroupInviteMessage.fromObject(object.groupInviteMessage);
            }
            if (object.templateButtonReplyMessage != null) {
                if (typeof object.templateButtonReplyMessage !== "object")
                    throw TypeError(".WAE2E.Message.templateButtonReplyMessage: object expected");
                message.templateButtonReplyMessage = $root.WAE2E.Message.TemplateButtonReplyMessage.fromObject(object.templateButtonReplyMessage);
            }
            if (object.productMessage != null) {
                if (typeof object.productMessage !== "object")
                    throw TypeError(".WAE2E.Message.productMessage: object expected");
                message.productMessage = $root.WAE2E.Message.ProductMessage.fromObject(object.productMessage);
            }
            if (object.deviceSentMessage != null) {
                if (typeof object.deviceSentMessage !== "object")
                    throw TypeError(".WAE2E.Message.deviceSentMessage: object expected");
                message.deviceSentMessage = $root.WAE2E.Message.DeviceSentMessage.fromObject(object.deviceSentMessage);
            }
            if (object.messageContextInfo != null) {
                if (typeof object.messageContextInfo !== "object")
                    throw TypeError(".WAE2E.Message.messageContextInfo: object expected");
                message.messageContextInfo = $root.WAE2E.MessageContextInfo.fromObject(object.messageContextInfo);
            }
            if (object.listMessage != null) {
                if (typeof object.listMessage !== "object")
                    throw TypeError(".WAE2E.Message.listMessage: object expected");
                message.listMessage = $root.WAE2E.Message.ListMessage.fromObject(object.listMessage);
            }
            if (object.viewOnceMessage != null) {
                if (typeof object.viewOnceMessage !== "object")
                    throw TypeError(".WAE2E.Message.viewOnceMessage: object expected");
                message.viewOnceMessage = $root.WAE2E.Message.FutureProofMessage.fromObject(object.viewOnceMessage);
            }
            if (object.orderMessage != null) {
                if (typeof object.orderMessage !== "object")
                    throw TypeError(".WAE2E.Message.orderMessage: object expected");
                message.orderMessage = $root.WAE2E.Message.OrderMessage.fromObject(object.orderMessage);
            }
            if (object.listResponseMessage != null) {
                if (typeof object.listResponseMessage !== "object")
                    throw TypeError(".WAE2E.Message.listResponseMessage: object expected");
                message.listResponseMessage = $root.WAE2E.Message.ListResponseMessage.fromObject(object.listResponseMessage);
            }
            if (object.ephemeralMessage != null) {
                if (typeof object.ephemeralMessage !== "object")
                    throw TypeError(".WAE2E.Message.ephemeralMessage: object expected");
                message.ephemeralMessage = $root.WAE2E.Message.FutureProofMessage.fromObject(object.ephemeralMessage);
            }
            if (object.invoiceMessage != null) {
                if (typeof object.invoiceMessage !== "object")
                    throw TypeError(".WAE2E.Message.invoiceMessage: object expected");
                message.invoiceMessage = $root.WAE2E.Message.InvoiceMessage.fromObject(object.invoiceMessage);
            }
            if (object.buttonsMessage != null) {
                if (typeof object.buttonsMessage !== "object")
                    throw TypeError(".WAE2E.Message.buttonsMessage: object expected");
                message.buttonsMessage = $root.WAE2E.Message.ButtonsMessage.fromObject(object.buttonsMessage);
            }
            if (object.buttonsResponseMessage != null) {
                if (typeof object.buttonsResponseMessage !== "object")
                    throw TypeError(".WAE2E.Message.buttonsResponseMessage: object expected");
                message.buttonsResponseMessage = $root.WAE2E.Message.ButtonsResponseMessage.fromObject(object.buttonsResponseMessage);
            }
            if (object.paymentInviteMessage != null) {
                if (typeof object.paymentInviteMessage !== "object")
                    throw TypeError(".WAE2E.Message.paymentInviteMessage: object expected");
                message.paymentInviteMessage = $root.WAE2E.Message.PaymentInviteMessage.fromObject(object.paymentInviteMessage);
            }
            if (object.interactiveMessage != null) {
                if (typeof object.interactiveMessage !== "object")
                    throw TypeError(".WAE2E.Message.interactiveMessage: object expected");
                message.interactiveMessage = $root.WAE2E.Message.InteractiveMessage.fromObject(object.interactiveMessage);
            }
            if (object.reactionMessage != null) {
                if (typeof object.reactionMessage !== "object")
                    throw TypeError(".WAE2E.Message.reactionMessage: object expected");
                message.reactionMessage = $root.WAE2E.Message.ReactionMessage.fromObject(object.reactionMessage);
            }
            if (object.stickerSyncRmrMessage != null) {
                if (typeof object.stickerSyncRmrMessage !== "object")
                    throw TypeError(".WAE2E.Message.stickerSyncRmrMessage: object expected");
                message.stickerSyncRmrMessage = $root.WAE2E.Message.StickerSyncRMRMessage.fromObject(object.stickerSyncRmrMessage);
            }
            if (object.interactiveResponseMessage != null) {
                if (typeof object.interactiveResponseMessage !== "object")
                    throw TypeError(".WAE2E.Message.interactiveResponseMessage: object expected");
                message.interactiveResponseMessage = $root.WAE2E.Message.InteractiveResponseMessage.fromObject(object.interactiveResponseMessage);
            }
            if (object.pollCreationMessage != null) {
                if (typeof object.pollCreationMessage !== "object")
                    throw TypeError(".WAE2E.Message.pollCreationMessage: object expected");
                message.pollCreationMessage = $root.WAE2E.Message.PollCreationMessage.fromObject(object.pollCreationMessage);
            }
            if (object.pollUpdateMessage != null) {
                if (typeof object.pollUpdateMessage !== "object")
                    throw TypeError(".WAE2E.Message.pollUpdateMessage: object expected");
                message.pollUpdateMessage = $root.WAE2E.Message.PollUpdateMessage.fromObject(object.pollUpdateMessage);
            }
            if (object.keepInChatMessage != null) {
                if (typeof object.keepInChatMessage !== "object")
                    throw TypeError(".WAE2E.Message.keepInChatMessage: object expected");
                message.keepInChatMessage = $root.WAE2E.Message.KeepInChatMessage.fromObject(object.keepInChatMessage);
            }
            if (object.documentWithCaptionMessage != null) {
                if (typeof object.documentWithCaptionMessage !== "object")
                    throw TypeError(".WAE2E.Message.documentWithCaptionMessage: object expected");
                message.documentWithCaptionMessage = $root.WAE2E.Message.FutureProofMessage.fromObject(object.documentWithCaptionMessage);
            }
            if (object.requestPhoneNumberMessage != null) {
                if (typeof object.requestPhoneNumberMessage !== "object")
                    throw TypeError(".WAE2E.Message.requestPhoneNumberMessage: object expected");
                message.requestPhoneNumberMessage = $root.WAE2E.Message.RequestPhoneNumberMessage.fromObject(object.requestPhoneNumberMessage);
            }
            if (object.viewOnceMessageV2 != null) {
                if (typeof object.viewOnceMessageV2 !== "object")
                    throw TypeError(".WAE2E.Message.viewOnceMessageV2: object expected");
                message.viewOnceMessageV2 = $root.WAE2E.Message.FutureProofMessage.fromObject(object.viewOnceMessageV2);
            }
            if (object.encReactionMessage != null) {
                if (typeof object.encReactionMessage !== "object")
                    throw TypeError(".WAE2E.Message.encReactionMessage: object expected");
                message.encReactionMessage = $root.WAE2E.Message.EncReactionMessage.fromObject(object.encReactionMessage);
            }
            if (object.editedMessage != null) {
                if (typeof object.editedMessage !== "object")
                    throw TypeError(".WAE2E.Message.editedMessage: object expected");
                message.editedMessage = $root.WAE2E.Message.FutureProofMessage.fromObject(object.editedMessage);
            }
            if (object.viewOnceMessageV2Extension != null) {
                if (typeof object.viewOnceMessageV2Extension !== "object")
                    throw TypeError(".WAE2E.Message.viewOnceMessageV2Extension: object expected");
                message.viewOnceMessageV2Extension = $root.WAE2E.Message.FutureProofMessage.fromObject(object.viewOnceMessageV2Extension);
            }
            if (object.pollCreationMessageV2 != null) {
                if (typeof object.pollCreationMessageV2 !== "object")
                    throw TypeError(".WAE2E.Message.pollCreationMessageV2: object expected");
                message.pollCreationMessageV2 = $root.WAE2E.Message.PollCreationMessage.fromObject(object.pollCreationMessageV2);
            }
            if (object.scheduledCallCreationMessage != null) {
                if (typeof object.scheduledCallCreationMessage !== "object")
                    throw TypeError(".WAE2E.Message.scheduledCallCreationMessage: object expected");
                message.scheduledCallCreationMessage = $root.WAE2E.Message.ScheduledCallCreationMessage.fromObject(object.scheduledCallCreationMessage);
            }
            if (object.groupMentionedMessage != null) {
                if (typeof object.groupMentionedMessage !== "object")
                    throw TypeError(".WAE2E.Message.groupMentionedMessage: object expected");
                message.groupMentionedMessage = $root.WAE2E.Message.FutureProofMessage.fromObject(object.groupMentionedMessage);
            }
            if (object.pinInChatMessage != null) {
                if (typeof object.pinInChatMessage !== "object")
                    throw TypeError(".WAE2E.Message.pinInChatMessage: object expected");
                message.pinInChatMessage = $root.WAE2E.Message.PinInChatMessage.fromObject(object.pinInChatMessage);
            }
            if (object.pollCreationMessageV3 != null) {
                if (typeof object.pollCreationMessageV3 !== "object")
                    throw TypeError(".WAE2E.Message.pollCreationMessageV3: object expected");
                message.pollCreationMessageV3 = $root.WAE2E.Message.PollCreationMessage.fromObject(object.pollCreationMessageV3);
            }
            if (object.scheduledCallEditMessage != null) {
                if (typeof object.scheduledCallEditMessage !== "object")
                    throw TypeError(".WAE2E.Message.scheduledCallEditMessage: object expected");
                message.scheduledCallEditMessage = $root.WAE2E.Message.ScheduledCallEditMessage.fromObject(object.scheduledCallEditMessage);
            }
            if (object.ptvMessage != null) {
                if (typeof object.ptvMessage !== "object")
                    throw TypeError(".WAE2E.Message.ptvMessage: object expected");
                message.ptvMessage = $root.WAE2E.Message.VideoMessage.fromObject(object.ptvMessage);
            }
            if (object.botInvokeMessage != null) {
                if (typeof object.botInvokeMessage !== "object")
                    throw TypeError(".WAE2E.Message.botInvokeMessage: object expected");
                message.botInvokeMessage = $root.WAE2E.Message.FutureProofMessage.fromObject(object.botInvokeMessage);
            }
            if (object.callLogMesssage != null) {
                if (typeof object.callLogMesssage !== "object")
                    throw TypeError(".WAE2E.Message.callLogMesssage: object expected");
                message.callLogMesssage = $root.WAE2E.Message.CallLogMessage.fromObject(object.callLogMesssage);
            }
            if (object.messageHistoryBundle != null) {
                if (typeof object.messageHistoryBundle !== "object")
                    throw TypeError(".WAE2E.Message.messageHistoryBundle: object expected");
                message.messageHistoryBundle = $root.WAE2E.Message.MessageHistoryBundle.fromObject(object.messageHistoryBundle);
            }
            if (object.encCommentMessage != null) {
                if (typeof object.encCommentMessage !== "object")
                    throw TypeError(".WAE2E.Message.encCommentMessage: object expected");
                message.encCommentMessage = $root.WAE2E.Message.EncCommentMessage.fromObject(object.encCommentMessage);
            }
            if (object.bcallMessage != null) {
                if (typeof object.bcallMessage !== "object")
                    throw TypeError(".WAE2E.Message.bcallMessage: object expected");
                message.bcallMessage = $root.WAE2E.Message.BCallMessage.fromObject(object.bcallMessage);
            }
            if (object.lottieStickerMessage != null) {
                if (typeof object.lottieStickerMessage !== "object")
                    throw TypeError(".WAE2E.Message.lottieStickerMessage: object expected");
                message.lottieStickerMessage = $root.WAE2E.Message.FutureProofMessage.fromObject(object.lottieStickerMessage);
            }
            if (object.eventMessage != null) {
                if (typeof object.eventMessage !== "object")
                    throw TypeError(".WAE2E.Message.eventMessage: object expected");
                message.eventMessage = $root.WAE2E.Message.EventMessage.fromObject(object.eventMessage);
            }
            if (object.encEventResponseMessage != null) {
                if (typeof object.encEventResponseMessage !== "object")
                    throw TypeError(".WAE2E.Message.encEventResponseMessage: object expected");
                message.encEventResponseMessage = $root.WAE2E.Message.EncEventResponseMessage.fromObject(object.encEventResponseMessage);
            }
            if (object.commentMessage != null) {
                if (typeof object.commentMessage !== "object")
                    throw TypeError(".WAE2E.Message.commentMessage: object expected");
                message.commentMessage = $root.WAE2E.Message.CommentMessage.fromObject(object.commentMessage);
            }
            if (object.newsletterAdminInviteMessage != null) {
                if (typeof object.newsletterAdminInviteMessage !== "object")
                    throw TypeError(".WAE2E.Message.newsletterAdminInviteMessage: object expected");
                message.newsletterAdminInviteMessage = $root.WAE2E.Message.NewsletterAdminInviteMessage.fromObject(object.newsletterAdminInviteMessage);
            }
            if (object.placeholderMessage != null) {
                if (typeof object.placeholderMessage !== "object")
                    throw TypeError(".WAE2E.Message.placeholderMessage: object expected");
                message.placeholderMessage = $root.WAE2E.Message.PlaceholderMessage.fromObject(object.placeholderMessage);
            }
            if (object.secretEncryptedMessage != null) {
                if (typeof object.secretEncryptedMessage !== "object")
                    throw TypeError(".WAE2E.Message.secretEncryptedMessage: object expected");
                message.secretEncryptedMessage = $root.WAE2E.Message.SecretEncryptedMessage.fromObject(object.secretEncryptedMessage);
            }
            if (object.albumMessage != null) {
                if (typeof object.albumMessage !== "object")
                    throw TypeError(".WAE2E.Message.albumMessage: object expected");
                message.albumMessage = $root.WAE2E.Message.AlbumMessage.fromObject(object.albumMessage);
            }
            if (object.pollResultSnapshotMessage != null) {
                if (typeof object.pollResultSnapshotMessage !== "object")
                    throw TypeError(".WAE2E.Message.pollResultSnapshotMessage: object expected");
                message.pollResultSnapshotMessage = $root.WAE2E.Message.PollResultSnapshotMessage.fromObject(object.pollResultSnapshotMessage);
            }
            if (object.eventCoverImage != null) {
                if (typeof object.eventCoverImage !== "object")
                    throw TypeError(".WAE2E.Message.eventCoverImage: object expected");
                message.eventCoverImage = $root.WAE2E.Message.FutureProofMessage.fromObject(object.eventCoverImage);
            }
            return message;
        };

        /**
         * Creates a plain object from a Message message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.Message
         * @static
         * @param {WAE2E.Message} message Message
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Message.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.conversation = "";
                object.senderKeyDistributionMessage = null;
                object.imageMessage = null;
                object.contactMessage = null;
                object.locationMessage = null;
                object.extendedTextMessage = null;
                object.documentMessage = null;
                object.audioMessage = null;
                object.videoMessage = null;
                object.call = null;
                object.chat = null;
                object.protocolMessage = null;
                object.contactsArrayMessage = null;
                object.highlyStructuredMessage = null;
                object.fastRatchetKeySenderKeyDistributionMessage = null;
                object.sendPaymentMessage = null;
                object.liveLocationMessage = null;
                object.requestPaymentMessage = null;
                object.declinePaymentRequestMessage = null;
                object.cancelPaymentRequestMessage = null;
                object.templateMessage = null;
                object.stickerMessage = null;
                object.groupInviteMessage = null;
                object.templateButtonReplyMessage = null;
                object.productMessage = null;
                object.deviceSentMessage = null;
                object.messageContextInfo = null;
                object.listMessage = null;
                object.viewOnceMessage = null;
                object.orderMessage = null;
                object.listResponseMessage = null;
                object.ephemeralMessage = null;
                object.invoiceMessage = null;
                object.buttonsMessage = null;
                object.buttonsResponseMessage = null;
                object.paymentInviteMessage = null;
                object.interactiveMessage = null;
                object.reactionMessage = null;
                object.stickerSyncRmrMessage = null;
                object.interactiveResponseMessage = null;
                object.pollCreationMessage = null;
                object.pollUpdateMessage = null;
                object.keepInChatMessage = null;
                object.documentWithCaptionMessage = null;
                object.requestPhoneNumberMessage = null;
                object.viewOnceMessageV2 = null;
                object.encReactionMessage = null;
                object.editedMessage = null;
                object.viewOnceMessageV2Extension = null;
                object.pollCreationMessageV2 = null;
                object.scheduledCallCreationMessage = null;
                object.groupMentionedMessage = null;
                object.pinInChatMessage = null;
                object.pollCreationMessageV3 = null;
                object.scheduledCallEditMessage = null;
                object.ptvMessage = null;
                object.botInvokeMessage = null;
                object.callLogMesssage = null;
                object.messageHistoryBundle = null;
                object.encCommentMessage = null;
                object.bcallMessage = null;
                object.lottieStickerMessage = null;
                object.eventMessage = null;
                object.encEventResponseMessage = null;
                object.commentMessage = null;
                object.newsletterAdminInviteMessage = null;
                object.placeholderMessage = null;
                object.secretEncryptedMessage = null;
                object.albumMessage = null;
                object.pollResultSnapshotMessage = null;
                object.eventCoverImage = null;
            }
            if (message.conversation != null && message.hasOwnProperty("conversation"))
                object.conversation = message.conversation;
            if (message.senderKeyDistributionMessage != null && message.hasOwnProperty("senderKeyDistributionMessage"))
                object.senderKeyDistributionMessage = $root.WAE2E.Message.SenderKeyDistributionMessage.toObject(message.senderKeyDistributionMessage, options);
            if (message.imageMessage != null && message.hasOwnProperty("imageMessage"))
                object.imageMessage = $root.WAE2E.Message.ImageMessage.toObject(message.imageMessage, options);
            if (message.contactMessage != null && message.hasOwnProperty("contactMessage"))
                object.contactMessage = $root.WAE2E.Message.ContactMessage.toObject(message.contactMessage, options);
            if (message.locationMessage != null && message.hasOwnProperty("locationMessage"))
                object.locationMessage = $root.WAE2E.Message.LocationMessage.toObject(message.locationMessage, options);
            if (message.extendedTextMessage != null && message.hasOwnProperty("extendedTextMessage"))
                object.extendedTextMessage = $root.WAE2E.Message.ExtendedTextMessage.toObject(message.extendedTextMessage, options);
            if (message.documentMessage != null && message.hasOwnProperty("documentMessage"))
                object.documentMessage = $root.WAE2E.Message.DocumentMessage.toObject(message.documentMessage, options);
            if (message.audioMessage != null && message.hasOwnProperty("audioMessage"))
                object.audioMessage = $root.WAE2E.Message.AudioMessage.toObject(message.audioMessage, options);
            if (message.videoMessage != null && message.hasOwnProperty("videoMessage"))
                object.videoMessage = $root.WAE2E.Message.VideoMessage.toObject(message.videoMessage, options);
            if (message.call != null && message.hasOwnProperty("call"))
                object.call = $root.WAE2E.Message.Call.toObject(message.call, options);
            if (message.chat != null && message.hasOwnProperty("chat"))
                object.chat = $root.WAE2E.Message.Chat.toObject(message.chat, options);
            if (message.protocolMessage != null && message.hasOwnProperty("protocolMessage"))
                object.protocolMessage = $root.WAE2E.Message.ProtocolMessage.toObject(message.protocolMessage, options);
            if (message.contactsArrayMessage != null && message.hasOwnProperty("contactsArrayMessage"))
                object.contactsArrayMessage = $root.WAE2E.Message.ContactsArrayMessage.toObject(message.contactsArrayMessage, options);
            if (message.highlyStructuredMessage != null && message.hasOwnProperty("highlyStructuredMessage"))
                object.highlyStructuredMessage = $root.WAE2E.Message.HighlyStructuredMessage.toObject(message.highlyStructuredMessage, options);
            if (message.fastRatchetKeySenderKeyDistributionMessage != null && message.hasOwnProperty("fastRatchetKeySenderKeyDistributionMessage"))
                object.fastRatchetKeySenderKeyDistributionMessage = $root.WAE2E.Message.SenderKeyDistributionMessage.toObject(message.fastRatchetKeySenderKeyDistributionMessage, options);
            if (message.sendPaymentMessage != null && message.hasOwnProperty("sendPaymentMessage"))
                object.sendPaymentMessage = $root.WAE2E.Message.SendPaymentMessage.toObject(message.sendPaymentMessage, options);
            if (message.liveLocationMessage != null && message.hasOwnProperty("liveLocationMessage"))
                object.liveLocationMessage = $root.WAE2E.Message.LiveLocationMessage.toObject(message.liveLocationMessage, options);
            if (message.requestPaymentMessage != null && message.hasOwnProperty("requestPaymentMessage"))
                object.requestPaymentMessage = $root.WAE2E.Message.RequestPaymentMessage.toObject(message.requestPaymentMessage, options);
            if (message.declinePaymentRequestMessage != null && message.hasOwnProperty("declinePaymentRequestMessage"))
                object.declinePaymentRequestMessage = $root.WAE2E.Message.DeclinePaymentRequestMessage.toObject(message.declinePaymentRequestMessage, options);
            if (message.cancelPaymentRequestMessage != null && message.hasOwnProperty("cancelPaymentRequestMessage"))
                object.cancelPaymentRequestMessage = $root.WAE2E.Message.CancelPaymentRequestMessage.toObject(message.cancelPaymentRequestMessage, options);
            if (message.templateMessage != null && message.hasOwnProperty("templateMessage"))
                object.templateMessage = $root.WAE2E.Message.TemplateMessage.toObject(message.templateMessage, options);
            if (message.stickerMessage != null && message.hasOwnProperty("stickerMessage"))
                object.stickerMessage = $root.WAE2E.Message.StickerMessage.toObject(message.stickerMessage, options);
            if (message.groupInviteMessage != null && message.hasOwnProperty("groupInviteMessage"))
                object.groupInviteMessage = $root.WAE2E.Message.GroupInviteMessage.toObject(message.groupInviteMessage, options);
            if (message.templateButtonReplyMessage != null && message.hasOwnProperty("templateButtonReplyMessage"))
                object.templateButtonReplyMessage = $root.WAE2E.Message.TemplateButtonReplyMessage.toObject(message.templateButtonReplyMessage, options);
            if (message.productMessage != null && message.hasOwnProperty("productMessage"))
                object.productMessage = $root.WAE2E.Message.ProductMessage.toObject(message.productMessage, options);
            if (message.deviceSentMessage != null && message.hasOwnProperty("deviceSentMessage"))
                object.deviceSentMessage = $root.WAE2E.Message.DeviceSentMessage.toObject(message.deviceSentMessage, options);
            if (message.messageContextInfo != null && message.hasOwnProperty("messageContextInfo"))
                object.messageContextInfo = $root.WAE2E.MessageContextInfo.toObject(message.messageContextInfo, options);
            if (message.listMessage != null && message.hasOwnProperty("listMessage"))
                object.listMessage = $root.WAE2E.Message.ListMessage.toObject(message.listMessage, options);
            if (message.viewOnceMessage != null && message.hasOwnProperty("viewOnceMessage"))
                object.viewOnceMessage = $root.WAE2E.Message.FutureProofMessage.toObject(message.viewOnceMessage, options);
            if (message.orderMessage != null && message.hasOwnProperty("orderMessage"))
                object.orderMessage = $root.WAE2E.Message.OrderMessage.toObject(message.orderMessage, options);
            if (message.listResponseMessage != null && message.hasOwnProperty("listResponseMessage"))
                object.listResponseMessage = $root.WAE2E.Message.ListResponseMessage.toObject(message.listResponseMessage, options);
            if (message.ephemeralMessage != null && message.hasOwnProperty("ephemeralMessage"))
                object.ephemeralMessage = $root.WAE2E.Message.FutureProofMessage.toObject(message.ephemeralMessage, options);
            if (message.invoiceMessage != null && message.hasOwnProperty("invoiceMessage"))
                object.invoiceMessage = $root.WAE2E.Message.InvoiceMessage.toObject(message.invoiceMessage, options);
            if (message.buttonsMessage != null && message.hasOwnProperty("buttonsMessage"))
                object.buttonsMessage = $root.WAE2E.Message.ButtonsMessage.toObject(message.buttonsMessage, options);
            if (message.buttonsResponseMessage != null && message.hasOwnProperty("buttonsResponseMessage"))
                object.buttonsResponseMessage = $root.WAE2E.Message.ButtonsResponseMessage.toObject(message.buttonsResponseMessage, options);
            if (message.paymentInviteMessage != null && message.hasOwnProperty("paymentInviteMessage"))
                object.paymentInviteMessage = $root.WAE2E.Message.PaymentInviteMessage.toObject(message.paymentInviteMessage, options);
            if (message.interactiveMessage != null && message.hasOwnProperty("interactiveMessage"))
                object.interactiveMessage = $root.WAE2E.Message.InteractiveMessage.toObject(message.interactiveMessage, options);
            if (message.reactionMessage != null && message.hasOwnProperty("reactionMessage"))
                object.reactionMessage = $root.WAE2E.Message.ReactionMessage.toObject(message.reactionMessage, options);
            if (message.stickerSyncRmrMessage != null && message.hasOwnProperty("stickerSyncRmrMessage"))
                object.stickerSyncRmrMessage = $root.WAE2E.Message.StickerSyncRMRMessage.toObject(message.stickerSyncRmrMessage, options);
            if (message.interactiveResponseMessage != null && message.hasOwnProperty("interactiveResponseMessage"))
                object.interactiveResponseMessage = $root.WAE2E.Message.InteractiveResponseMessage.toObject(message.interactiveResponseMessage, options);
            if (message.pollCreationMessage != null && message.hasOwnProperty("pollCreationMessage"))
                object.pollCreationMessage = $root.WAE2E.Message.PollCreationMessage.toObject(message.pollCreationMessage, options);
            if (message.pollUpdateMessage != null && message.hasOwnProperty("pollUpdateMessage"))
                object.pollUpdateMessage = $root.WAE2E.Message.PollUpdateMessage.toObject(message.pollUpdateMessage, options);
            if (message.keepInChatMessage != null && message.hasOwnProperty("keepInChatMessage"))
                object.keepInChatMessage = $root.WAE2E.Message.KeepInChatMessage.toObject(message.keepInChatMessage, options);
            if (message.documentWithCaptionMessage != null && message.hasOwnProperty("documentWithCaptionMessage"))
                object.documentWithCaptionMessage = $root.WAE2E.Message.FutureProofMessage.toObject(message.documentWithCaptionMessage, options);
            if (message.requestPhoneNumberMessage != null && message.hasOwnProperty("requestPhoneNumberMessage"))
                object.requestPhoneNumberMessage = $root.WAE2E.Message.RequestPhoneNumberMessage.toObject(message.requestPhoneNumberMessage, options);
            if (message.viewOnceMessageV2 != null && message.hasOwnProperty("viewOnceMessageV2"))
                object.viewOnceMessageV2 = $root.WAE2E.Message.FutureProofMessage.toObject(message.viewOnceMessageV2, options);
            if (message.encReactionMessage != null && message.hasOwnProperty("encReactionMessage"))
                object.encReactionMessage = $root.WAE2E.Message.EncReactionMessage.toObject(message.encReactionMessage, options);
            if (message.editedMessage != null && message.hasOwnProperty("editedMessage"))
                object.editedMessage = $root.WAE2E.Message.FutureProofMessage.toObject(message.editedMessage, options);
            if (message.viewOnceMessageV2Extension != null && message.hasOwnProperty("viewOnceMessageV2Extension"))
                object.viewOnceMessageV2Extension = $root.WAE2E.Message.FutureProofMessage.toObject(message.viewOnceMessageV2Extension, options);
            if (message.pollCreationMessageV2 != null && message.hasOwnProperty("pollCreationMessageV2"))
                object.pollCreationMessageV2 = $root.WAE2E.Message.PollCreationMessage.toObject(message.pollCreationMessageV2, options);
            if (message.scheduledCallCreationMessage != null && message.hasOwnProperty("scheduledCallCreationMessage"))
                object.scheduledCallCreationMessage = $root.WAE2E.Message.ScheduledCallCreationMessage.toObject(message.scheduledCallCreationMessage, options);
            if (message.groupMentionedMessage != null && message.hasOwnProperty("groupMentionedMessage"))
                object.groupMentionedMessage = $root.WAE2E.Message.FutureProofMessage.toObject(message.groupMentionedMessage, options);
            if (message.pinInChatMessage != null && message.hasOwnProperty("pinInChatMessage"))
                object.pinInChatMessage = $root.WAE2E.Message.PinInChatMessage.toObject(message.pinInChatMessage, options);
            if (message.pollCreationMessageV3 != null && message.hasOwnProperty("pollCreationMessageV3"))
                object.pollCreationMessageV3 = $root.WAE2E.Message.PollCreationMessage.toObject(message.pollCreationMessageV3, options);
            if (message.scheduledCallEditMessage != null && message.hasOwnProperty("scheduledCallEditMessage"))
                object.scheduledCallEditMessage = $root.WAE2E.Message.ScheduledCallEditMessage.toObject(message.scheduledCallEditMessage, options);
            if (message.ptvMessage != null && message.hasOwnProperty("ptvMessage"))
                object.ptvMessage = $root.WAE2E.Message.VideoMessage.toObject(message.ptvMessage, options);
            if (message.botInvokeMessage != null && message.hasOwnProperty("botInvokeMessage"))
                object.botInvokeMessage = $root.WAE2E.Message.FutureProofMessage.toObject(message.botInvokeMessage, options);
            if (message.callLogMesssage != null && message.hasOwnProperty("callLogMesssage"))
                object.callLogMesssage = $root.WAE2E.Message.CallLogMessage.toObject(message.callLogMesssage, options);
            if (message.messageHistoryBundle != null && message.hasOwnProperty("messageHistoryBundle"))
                object.messageHistoryBundle = $root.WAE2E.Message.MessageHistoryBundle.toObject(message.messageHistoryBundle, options);
            if (message.encCommentMessage != null && message.hasOwnProperty("encCommentMessage"))
                object.encCommentMessage = $root.WAE2E.Message.EncCommentMessage.toObject(message.encCommentMessage, options);
            if (message.bcallMessage != null && message.hasOwnProperty("bcallMessage"))
                object.bcallMessage = $root.WAE2E.Message.BCallMessage.toObject(message.bcallMessage, options);
            if (message.lottieStickerMessage != null && message.hasOwnProperty("lottieStickerMessage"))
                object.lottieStickerMessage = $root.WAE2E.Message.FutureProofMessage.toObject(message.lottieStickerMessage, options);
            if (message.eventMessage != null && message.hasOwnProperty("eventMessage"))
                object.eventMessage = $root.WAE2E.Message.EventMessage.toObject(message.eventMessage, options);
            if (message.encEventResponseMessage != null && message.hasOwnProperty("encEventResponseMessage"))
                object.encEventResponseMessage = $root.WAE2E.Message.EncEventResponseMessage.toObject(message.encEventResponseMessage, options);
            if (message.commentMessage != null && message.hasOwnProperty("commentMessage"))
                object.commentMessage = $root.WAE2E.Message.CommentMessage.toObject(message.commentMessage, options);
            if (message.newsletterAdminInviteMessage != null && message.hasOwnProperty("newsletterAdminInviteMessage"))
                object.newsletterAdminInviteMessage = $root.WAE2E.Message.NewsletterAdminInviteMessage.toObject(message.newsletterAdminInviteMessage, options);
            if (message.placeholderMessage != null && message.hasOwnProperty("placeholderMessage"))
                object.placeholderMessage = $root.WAE2E.Message.PlaceholderMessage.toObject(message.placeholderMessage, options);
            if (message.secretEncryptedMessage != null && message.hasOwnProperty("secretEncryptedMessage"))
                object.secretEncryptedMessage = $root.WAE2E.Message.SecretEncryptedMessage.toObject(message.secretEncryptedMessage, options);
            if (message.albumMessage != null && message.hasOwnProperty("albumMessage"))
                object.albumMessage = $root.WAE2E.Message.AlbumMessage.toObject(message.albumMessage, options);
            if (message.pollResultSnapshotMessage != null && message.hasOwnProperty("pollResultSnapshotMessage"))
                object.pollResultSnapshotMessage = $root.WAE2E.Message.PollResultSnapshotMessage.toObject(message.pollResultSnapshotMessage, options);
            if (message.eventCoverImage != null && message.hasOwnProperty("eventCoverImage"))
                object.eventCoverImage = $root.WAE2E.Message.FutureProofMessage.toObject(message.eventCoverImage, options);
            return object;
        };

        /**
         * Converts this Message to JSON.
         * @function toJSON
         * @memberof WAE2E.Message
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Message.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Message
         * @function getTypeUrl
         * @memberof WAE2E.Message
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Message.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.Message";
        };

        /**
         * PeerDataOperationRequestType enum.
         * @name WAE2E.Message.PeerDataOperationRequestType
         * @enum {number}
         * @property {number} UPLOAD_STICKER=0 UPLOAD_STICKER value
         * @property {number} SEND_RECENT_STICKER_BOOTSTRAP=1 SEND_RECENT_STICKER_BOOTSTRAP value
         * @property {number} GENERATE_LINK_PREVIEW=2 GENERATE_LINK_PREVIEW value
         * @property {number} HISTORY_SYNC_ON_DEMAND=3 HISTORY_SYNC_ON_DEMAND value
         * @property {number} PLACEHOLDER_MESSAGE_RESEND=4 PLACEHOLDER_MESSAGE_RESEND value
         * @property {number} WAFFLE_LINKING_NONCE_FETCH=5 WAFFLE_LINKING_NONCE_FETCH value
         */
        Message.PeerDataOperationRequestType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "UPLOAD_STICKER"] = 0;
            values[valuesById[1] = "SEND_RECENT_STICKER_BOOTSTRAP"] = 1;
            values[valuesById[2] = "GENERATE_LINK_PREVIEW"] = 2;
            values[valuesById[3] = "HISTORY_SYNC_ON_DEMAND"] = 3;
            values[valuesById[4] = "PLACEHOLDER_MESSAGE_RESEND"] = 4;
            values[valuesById[5] = "WAFFLE_LINKING_NONCE_FETCH"] = 5;
            return values;
        })();

        Message.PlaceholderMessage = (function() {

            /**
             * Properties of a PlaceholderMessage.
             * @memberof WAE2E.Message
             * @interface IPlaceholderMessage
             * @property {WAE2E.Message.PlaceholderMessage.PlaceholderType|null} [type] PlaceholderMessage type
             */

            /**
             * Constructs a new PlaceholderMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a PlaceholderMessage.
             * @implements IPlaceholderMessage
             * @constructor
             * @param {WAE2E.Message.IPlaceholderMessage=} [properties] Properties to set
             */
            function PlaceholderMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlaceholderMessage type.
             * @member {WAE2E.Message.PlaceholderMessage.PlaceholderType} type
             * @memberof WAE2E.Message.PlaceholderMessage
             * @instance
             */
            PlaceholderMessage.prototype.type = 0;

            /**
             * Creates a new PlaceholderMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.PlaceholderMessage
             * @static
             * @param {WAE2E.Message.IPlaceholderMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.PlaceholderMessage} PlaceholderMessage instance
             */
            PlaceholderMessage.create = function create(properties) {
                return new PlaceholderMessage(properties);
            };

            /**
             * Encodes the specified PlaceholderMessage message. Does not implicitly {@link WAE2E.Message.PlaceholderMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.PlaceholderMessage
             * @static
             * @param {WAE2E.Message.IPlaceholderMessage} message PlaceholderMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlaceholderMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                return writer;
            };

            /**
             * Encodes the specified PlaceholderMessage message, length delimited. Does not implicitly {@link WAE2E.Message.PlaceholderMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.PlaceholderMessage
             * @static
             * @param {WAE2E.Message.IPlaceholderMessage} message PlaceholderMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlaceholderMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlaceholderMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.PlaceholderMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.PlaceholderMessage} PlaceholderMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlaceholderMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PlaceholderMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.type = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlaceholderMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.PlaceholderMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.PlaceholderMessage} PlaceholderMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlaceholderMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlaceholderMessage message.
             * @function verify
             * @memberof WAE2E.Message.PlaceholderMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlaceholderMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                        break;
                    }
                return null;
            };

            /**
             * Creates a PlaceholderMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.PlaceholderMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.PlaceholderMessage} PlaceholderMessage
             */
            PlaceholderMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.PlaceholderMessage)
                    return object;
                var message = new $root.WAE2E.Message.PlaceholderMessage();
                switch (object.type) {
                default:
                    if (typeof object.type === "number") {
                        message.type = object.type;
                        break;
                    }
                    break;
                case "MASK_LINKED_DEVICES":
                case 0:
                    message.type = 0;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a PlaceholderMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.PlaceholderMessage
             * @static
             * @param {WAE2E.Message.PlaceholderMessage} message PlaceholderMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlaceholderMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.type = options.enums === String ? "MASK_LINKED_DEVICES" : 0;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.WAE2E.Message.PlaceholderMessage.PlaceholderType[message.type] === undefined ? message.type : $root.WAE2E.Message.PlaceholderMessage.PlaceholderType[message.type] : message.type;
                return object;
            };

            /**
             * Converts this PlaceholderMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.PlaceholderMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlaceholderMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PlaceholderMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.PlaceholderMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PlaceholderMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.PlaceholderMessage";
            };

            /**
             * PlaceholderType enum.
             * @name WAE2E.Message.PlaceholderMessage.PlaceholderType
             * @enum {number}
             * @property {number} MASK_LINKED_DEVICES=0 MASK_LINKED_DEVICES value
             */
            PlaceholderMessage.PlaceholderType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "MASK_LINKED_DEVICES"] = 0;
                return values;
            })();

            return PlaceholderMessage;
        })();

        Message.BCallMessage = (function() {

            /**
             * Properties of a BCallMessage.
             * @memberof WAE2E.Message
             * @interface IBCallMessage
             * @property {string|null} [sessionID] BCallMessage sessionID
             * @property {WAE2E.Message.BCallMessage.MediaType|null} [mediaType] BCallMessage mediaType
             * @property {Uint8Array|null} [masterKey] BCallMessage masterKey
             * @property {string|null} [caption] BCallMessage caption
             */

            /**
             * Constructs a new BCallMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a BCallMessage.
             * @implements IBCallMessage
             * @constructor
             * @param {WAE2E.Message.IBCallMessage=} [properties] Properties to set
             */
            function BCallMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BCallMessage sessionID.
             * @member {string} sessionID
             * @memberof WAE2E.Message.BCallMessage
             * @instance
             */
            BCallMessage.prototype.sessionID = "";

            /**
             * BCallMessage mediaType.
             * @member {WAE2E.Message.BCallMessage.MediaType} mediaType
             * @memberof WAE2E.Message.BCallMessage
             * @instance
             */
            BCallMessage.prototype.mediaType = 0;

            /**
             * BCallMessage masterKey.
             * @member {Uint8Array} masterKey
             * @memberof WAE2E.Message.BCallMessage
             * @instance
             */
            BCallMessage.prototype.masterKey = $util.newBuffer([]);

            /**
             * BCallMessage caption.
             * @member {string} caption
             * @memberof WAE2E.Message.BCallMessage
             * @instance
             */
            BCallMessage.prototype.caption = "";

            /**
             * Creates a new BCallMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.BCallMessage
             * @static
             * @param {WAE2E.Message.IBCallMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.BCallMessage} BCallMessage instance
             */
            BCallMessage.create = function create(properties) {
                return new BCallMessage(properties);
            };

            /**
             * Encodes the specified BCallMessage message. Does not implicitly {@link WAE2E.Message.BCallMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.BCallMessage
             * @static
             * @param {WAE2E.Message.IBCallMessage} message BCallMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BCallMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sessionID != null && Object.hasOwnProperty.call(message, "sessionID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.sessionID);
                if (message.mediaType != null && Object.hasOwnProperty.call(message, "mediaType"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mediaType);
                if (message.masterKey != null && Object.hasOwnProperty.call(message, "masterKey"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.masterKey);
                if (message.caption != null && Object.hasOwnProperty.call(message, "caption"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.caption);
                return writer;
            };

            /**
             * Encodes the specified BCallMessage message, length delimited. Does not implicitly {@link WAE2E.Message.BCallMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.BCallMessage
             * @static
             * @param {WAE2E.Message.IBCallMessage} message BCallMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BCallMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BCallMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.BCallMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.BCallMessage} BCallMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BCallMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.BCallMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.sessionID = reader.string();
                            break;
                        }
                    case 2: {
                            message.mediaType = reader.int32();
                            break;
                        }
                    case 3: {
                            message.masterKey = reader.bytes();
                            break;
                        }
                    case 4: {
                            message.caption = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BCallMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.BCallMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.BCallMessage} BCallMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BCallMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BCallMessage message.
             * @function verify
             * @memberof WAE2E.Message.BCallMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BCallMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sessionID != null && message.hasOwnProperty("sessionID"))
                    if (!$util.isString(message.sessionID))
                        return "sessionID: string expected";
                if (message.mediaType != null && message.hasOwnProperty("mediaType"))
                    switch (message.mediaType) {
                    default:
                        return "mediaType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.masterKey != null && message.hasOwnProperty("masterKey"))
                    if (!(message.masterKey && typeof message.masterKey.length === "number" || $util.isString(message.masterKey)))
                        return "masterKey: buffer expected";
                if (message.caption != null && message.hasOwnProperty("caption"))
                    if (!$util.isString(message.caption))
                        return "caption: string expected";
                return null;
            };

            /**
             * Creates a BCallMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.BCallMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.BCallMessage} BCallMessage
             */
            BCallMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.BCallMessage)
                    return object;
                var message = new $root.WAE2E.Message.BCallMessage();
                if (object.sessionID != null)
                    message.sessionID = String(object.sessionID);
                switch (object.mediaType) {
                default:
                    if (typeof object.mediaType === "number") {
                        message.mediaType = object.mediaType;
                        break;
                    }
                    break;
                case "UNKNOWN":
                case 0:
                    message.mediaType = 0;
                    break;
                case "AUDIO":
                case 1:
                    message.mediaType = 1;
                    break;
                case "VIDEO":
                case 2:
                    message.mediaType = 2;
                    break;
                }
                if (object.masterKey != null)
                    if (typeof object.masterKey === "string")
                        $util.base64.decode(object.masterKey, message.masterKey = $util.newBuffer($util.base64.length(object.masterKey)), 0);
                    else if (object.masterKey.length >= 0)
                        message.masterKey = object.masterKey;
                if (object.caption != null)
                    message.caption = String(object.caption);
                return message;
            };

            /**
             * Creates a plain object from a BCallMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.BCallMessage
             * @static
             * @param {WAE2E.Message.BCallMessage} message BCallMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BCallMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.sessionID = "";
                    object.mediaType = options.enums === String ? "UNKNOWN" : 0;
                    if (options.bytes === String)
                        object.masterKey = "";
                    else {
                        object.masterKey = [];
                        if (options.bytes !== Array)
                            object.masterKey = $util.newBuffer(object.masterKey);
                    }
                    object.caption = "";
                }
                if (message.sessionID != null && message.hasOwnProperty("sessionID"))
                    object.sessionID = message.sessionID;
                if (message.mediaType != null && message.hasOwnProperty("mediaType"))
                    object.mediaType = options.enums === String ? $root.WAE2E.Message.BCallMessage.MediaType[message.mediaType] === undefined ? message.mediaType : $root.WAE2E.Message.BCallMessage.MediaType[message.mediaType] : message.mediaType;
                if (message.masterKey != null && message.hasOwnProperty("masterKey"))
                    object.masterKey = options.bytes === String ? $util.base64.encode(message.masterKey, 0, message.masterKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.masterKey) : message.masterKey;
                if (message.caption != null && message.hasOwnProperty("caption"))
                    object.caption = message.caption;
                return object;
            };

            /**
             * Converts this BCallMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.BCallMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BCallMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for BCallMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.BCallMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            BCallMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.BCallMessage";
            };

            /**
             * MediaType enum.
             * @name WAE2E.Message.BCallMessage.MediaType
             * @enum {number}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} AUDIO=1 AUDIO value
             * @property {number} VIDEO=2 VIDEO value
             */
            BCallMessage.MediaType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "AUDIO"] = 1;
                values[valuesById[2] = "VIDEO"] = 2;
                return values;
            })();

            return BCallMessage;
        })();

        Message.CallLogMessage = (function() {

            /**
             * Properties of a CallLogMessage.
             * @memberof WAE2E.Message
             * @interface ICallLogMessage
             * @property {boolean|null} [isVideo] CallLogMessage isVideo
             * @property {WAE2E.Message.CallLogMessage.CallOutcome|null} [callOutcome] CallLogMessage callOutcome
             * @property {number|Long|null} [durationSecs] CallLogMessage durationSecs
             * @property {WAE2E.Message.CallLogMessage.CallType|null} [callType] CallLogMessage callType
             * @property {Array.<WAE2E.Message.CallLogMessage.ICallParticipant>|null} [participants] CallLogMessage participants
             */

            /**
             * Constructs a new CallLogMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a CallLogMessage.
             * @implements ICallLogMessage
             * @constructor
             * @param {WAE2E.Message.ICallLogMessage=} [properties] Properties to set
             */
            function CallLogMessage(properties) {
                this.participants = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CallLogMessage isVideo.
             * @member {boolean} isVideo
             * @memberof WAE2E.Message.CallLogMessage
             * @instance
             */
            CallLogMessage.prototype.isVideo = false;

            /**
             * CallLogMessage callOutcome.
             * @member {WAE2E.Message.CallLogMessage.CallOutcome} callOutcome
             * @memberof WAE2E.Message.CallLogMessage
             * @instance
             */
            CallLogMessage.prototype.callOutcome = 0;

            /**
             * CallLogMessage durationSecs.
             * @member {number|Long} durationSecs
             * @memberof WAE2E.Message.CallLogMessage
             * @instance
             */
            CallLogMessage.prototype.durationSecs = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * CallLogMessage callType.
             * @member {WAE2E.Message.CallLogMessage.CallType} callType
             * @memberof WAE2E.Message.CallLogMessage
             * @instance
             */
            CallLogMessage.prototype.callType = 0;

            /**
             * CallLogMessage participants.
             * @member {Array.<WAE2E.Message.CallLogMessage.ICallParticipant>} participants
             * @memberof WAE2E.Message.CallLogMessage
             * @instance
             */
            CallLogMessage.prototype.participants = $util.emptyArray;

            /**
             * Creates a new CallLogMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.CallLogMessage
             * @static
             * @param {WAE2E.Message.ICallLogMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.CallLogMessage} CallLogMessage instance
             */
            CallLogMessage.create = function create(properties) {
                return new CallLogMessage(properties);
            };

            /**
             * Encodes the specified CallLogMessage message. Does not implicitly {@link WAE2E.Message.CallLogMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.CallLogMessage
             * @static
             * @param {WAE2E.Message.ICallLogMessage} message CallLogMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CallLogMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.isVideo != null && Object.hasOwnProperty.call(message, "isVideo"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.isVideo);
                if (message.callOutcome != null && Object.hasOwnProperty.call(message, "callOutcome"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.callOutcome);
                if (message.durationSecs != null && Object.hasOwnProperty.call(message, "durationSecs"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.durationSecs);
                if (message.callType != null && Object.hasOwnProperty.call(message, "callType"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.callType);
                if (message.participants != null && message.participants.length)
                    for (var i = 0; i < message.participants.length; ++i)
                        $root.WAE2E.Message.CallLogMessage.CallParticipant.encode(message.participants[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CallLogMessage message, length delimited. Does not implicitly {@link WAE2E.Message.CallLogMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.CallLogMessage
             * @static
             * @param {WAE2E.Message.ICallLogMessage} message CallLogMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CallLogMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CallLogMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.CallLogMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.CallLogMessage} CallLogMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CallLogMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.CallLogMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.isVideo = reader.bool();
                            break;
                        }
                    case 2: {
                            message.callOutcome = reader.int32();
                            break;
                        }
                    case 3: {
                            message.durationSecs = reader.int64();
                            break;
                        }
                    case 4: {
                            message.callType = reader.int32();
                            break;
                        }
                    case 5: {
                            if (!(message.participants && message.participants.length))
                                message.participants = [];
                            message.participants.push($root.WAE2E.Message.CallLogMessage.CallParticipant.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CallLogMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.CallLogMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.CallLogMessage} CallLogMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CallLogMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CallLogMessage message.
             * @function verify
             * @memberof WAE2E.Message.CallLogMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CallLogMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.isVideo != null && message.hasOwnProperty("isVideo"))
                    if (typeof message.isVideo !== "boolean")
                        return "isVideo: boolean expected";
                if (message.callOutcome != null && message.hasOwnProperty("callOutcome"))
                    switch (message.callOutcome) {
                    default:
                        return "callOutcome: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                        break;
                    }
                if (message.durationSecs != null && message.hasOwnProperty("durationSecs"))
                    if (!$util.isInteger(message.durationSecs) && !(message.durationSecs && $util.isInteger(message.durationSecs.low) && $util.isInteger(message.durationSecs.high)))
                        return "durationSecs: integer|Long expected";
                if (message.callType != null && message.hasOwnProperty("callType"))
                    switch (message.callType) {
                    default:
                        return "callType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.participants != null && message.hasOwnProperty("participants")) {
                    if (!Array.isArray(message.participants))
                        return "participants: array expected";
                    for (var i = 0; i < message.participants.length; ++i) {
                        var error = $root.WAE2E.Message.CallLogMessage.CallParticipant.verify(message.participants[i]);
                        if (error)
                            return "participants." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a CallLogMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.CallLogMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.CallLogMessage} CallLogMessage
             */
            CallLogMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.CallLogMessage)
                    return object;
                var message = new $root.WAE2E.Message.CallLogMessage();
                if (object.isVideo != null)
                    message.isVideo = Boolean(object.isVideo);
                switch (object.callOutcome) {
                default:
                    if (typeof object.callOutcome === "number") {
                        message.callOutcome = object.callOutcome;
                        break;
                    }
                    break;
                case "CONNECTED":
                case 0:
                    message.callOutcome = 0;
                    break;
                case "MISSED":
                case 1:
                    message.callOutcome = 1;
                    break;
                case "FAILED":
                case 2:
                    message.callOutcome = 2;
                    break;
                case "REJECTED":
                case 3:
                    message.callOutcome = 3;
                    break;
                case "ACCEPTED_ELSEWHERE":
                case 4:
                    message.callOutcome = 4;
                    break;
                case "ONGOING":
                case 5:
                    message.callOutcome = 5;
                    break;
                case "SILENCED_BY_DND":
                case 6:
                    message.callOutcome = 6;
                    break;
                case "SILENCED_UNKNOWN_CALLER":
                case 7:
                    message.callOutcome = 7;
                    break;
                }
                if (object.durationSecs != null)
                    if ($util.Long)
                        (message.durationSecs = $util.Long.fromValue(object.durationSecs)).unsigned = false;
                    else if (typeof object.durationSecs === "string")
                        message.durationSecs = parseInt(object.durationSecs, 10);
                    else if (typeof object.durationSecs === "number")
                        message.durationSecs = object.durationSecs;
                    else if (typeof object.durationSecs === "object")
                        message.durationSecs = new $util.LongBits(object.durationSecs.low >>> 0, object.durationSecs.high >>> 0).toNumber();
                switch (object.callType) {
                default:
                    if (typeof object.callType === "number") {
                        message.callType = object.callType;
                        break;
                    }
                    break;
                case "REGULAR":
                case 0:
                    message.callType = 0;
                    break;
                case "SCHEDULED_CALL":
                case 1:
                    message.callType = 1;
                    break;
                case "VOICE_CHAT":
                case 2:
                    message.callType = 2;
                    break;
                }
                if (object.participants) {
                    if (!Array.isArray(object.participants))
                        throw TypeError(".WAE2E.Message.CallLogMessage.participants: array expected");
                    message.participants = [];
                    for (var i = 0; i < object.participants.length; ++i) {
                        if (typeof object.participants[i] !== "object")
                            throw TypeError(".WAE2E.Message.CallLogMessage.participants: object expected");
                        message.participants[i] = $root.WAE2E.Message.CallLogMessage.CallParticipant.fromObject(object.participants[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a CallLogMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.CallLogMessage
             * @static
             * @param {WAE2E.Message.CallLogMessage} message CallLogMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CallLogMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.participants = [];
                if (options.defaults) {
                    object.isVideo = false;
                    object.callOutcome = options.enums === String ? "CONNECTED" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.durationSecs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.durationSecs = options.longs === String ? "0" : 0;
                    object.callType = options.enums === String ? "REGULAR" : 0;
                }
                if (message.isVideo != null && message.hasOwnProperty("isVideo"))
                    object.isVideo = message.isVideo;
                if (message.callOutcome != null && message.hasOwnProperty("callOutcome"))
                    object.callOutcome = options.enums === String ? $root.WAE2E.Message.CallLogMessage.CallOutcome[message.callOutcome] === undefined ? message.callOutcome : $root.WAE2E.Message.CallLogMessage.CallOutcome[message.callOutcome] : message.callOutcome;
                if (message.durationSecs != null && message.hasOwnProperty("durationSecs"))
                    if (typeof message.durationSecs === "number")
                        object.durationSecs = options.longs === String ? String(message.durationSecs) : message.durationSecs;
                    else
                        object.durationSecs = options.longs === String ? $util.Long.prototype.toString.call(message.durationSecs) : options.longs === Number ? new $util.LongBits(message.durationSecs.low >>> 0, message.durationSecs.high >>> 0).toNumber() : message.durationSecs;
                if (message.callType != null && message.hasOwnProperty("callType"))
                    object.callType = options.enums === String ? $root.WAE2E.Message.CallLogMessage.CallType[message.callType] === undefined ? message.callType : $root.WAE2E.Message.CallLogMessage.CallType[message.callType] : message.callType;
                if (message.participants && message.participants.length) {
                    object.participants = [];
                    for (var j = 0; j < message.participants.length; ++j)
                        object.participants[j] = $root.WAE2E.Message.CallLogMessage.CallParticipant.toObject(message.participants[j], options);
                }
                return object;
            };

            /**
             * Converts this CallLogMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.CallLogMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CallLogMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CallLogMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.CallLogMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CallLogMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.CallLogMessage";
            };

            /**
             * CallOutcome enum.
             * @name WAE2E.Message.CallLogMessage.CallOutcome
             * @enum {number}
             * @property {number} CONNECTED=0 CONNECTED value
             * @property {number} MISSED=1 MISSED value
             * @property {number} FAILED=2 FAILED value
             * @property {number} REJECTED=3 REJECTED value
             * @property {number} ACCEPTED_ELSEWHERE=4 ACCEPTED_ELSEWHERE value
             * @property {number} ONGOING=5 ONGOING value
             * @property {number} SILENCED_BY_DND=6 SILENCED_BY_DND value
             * @property {number} SILENCED_UNKNOWN_CALLER=7 SILENCED_UNKNOWN_CALLER value
             */
            CallLogMessage.CallOutcome = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CONNECTED"] = 0;
                values[valuesById[1] = "MISSED"] = 1;
                values[valuesById[2] = "FAILED"] = 2;
                values[valuesById[3] = "REJECTED"] = 3;
                values[valuesById[4] = "ACCEPTED_ELSEWHERE"] = 4;
                values[valuesById[5] = "ONGOING"] = 5;
                values[valuesById[6] = "SILENCED_BY_DND"] = 6;
                values[valuesById[7] = "SILENCED_UNKNOWN_CALLER"] = 7;
                return values;
            })();

            /**
             * CallType enum.
             * @name WAE2E.Message.CallLogMessage.CallType
             * @enum {number}
             * @property {number} REGULAR=0 REGULAR value
             * @property {number} SCHEDULED_CALL=1 SCHEDULED_CALL value
             * @property {number} VOICE_CHAT=2 VOICE_CHAT value
             */
            CallLogMessage.CallType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "REGULAR"] = 0;
                values[valuesById[1] = "SCHEDULED_CALL"] = 1;
                values[valuesById[2] = "VOICE_CHAT"] = 2;
                return values;
            })();

            CallLogMessage.CallParticipant = (function() {

                /**
                 * Properties of a CallParticipant.
                 * @memberof WAE2E.Message.CallLogMessage
                 * @interface ICallParticipant
                 * @property {string|null} [JID] CallParticipant JID
                 * @property {WAE2E.Message.CallLogMessage.CallOutcome|null} [callOutcome] CallParticipant callOutcome
                 */

                /**
                 * Constructs a new CallParticipant.
                 * @memberof WAE2E.Message.CallLogMessage
                 * @classdesc Represents a CallParticipant.
                 * @implements ICallParticipant
                 * @constructor
                 * @param {WAE2E.Message.CallLogMessage.ICallParticipant=} [properties] Properties to set
                 */
                function CallParticipant(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CallParticipant JID.
                 * @member {string} JID
                 * @memberof WAE2E.Message.CallLogMessage.CallParticipant
                 * @instance
                 */
                CallParticipant.prototype.JID = "";

                /**
                 * CallParticipant callOutcome.
                 * @member {WAE2E.Message.CallLogMessage.CallOutcome} callOutcome
                 * @memberof WAE2E.Message.CallLogMessage.CallParticipant
                 * @instance
                 */
                CallParticipant.prototype.callOutcome = 0;

                /**
                 * Creates a new CallParticipant instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.CallLogMessage.CallParticipant
                 * @static
                 * @param {WAE2E.Message.CallLogMessage.ICallParticipant=} [properties] Properties to set
                 * @returns {WAE2E.Message.CallLogMessage.CallParticipant} CallParticipant instance
                 */
                CallParticipant.create = function create(properties) {
                    return new CallParticipant(properties);
                };

                /**
                 * Encodes the specified CallParticipant message. Does not implicitly {@link WAE2E.Message.CallLogMessage.CallParticipant.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.CallLogMessage.CallParticipant
                 * @static
                 * @param {WAE2E.Message.CallLogMessage.ICallParticipant} message CallParticipant message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CallParticipant.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.JID != null && Object.hasOwnProperty.call(message, "JID"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.JID);
                    if (message.callOutcome != null && Object.hasOwnProperty.call(message, "callOutcome"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.callOutcome);
                    return writer;
                };

                /**
                 * Encodes the specified CallParticipant message, length delimited. Does not implicitly {@link WAE2E.Message.CallLogMessage.CallParticipant.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.CallLogMessage.CallParticipant
                 * @static
                 * @param {WAE2E.Message.CallLogMessage.ICallParticipant} message CallParticipant message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CallParticipant.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CallParticipant message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.CallLogMessage.CallParticipant
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.CallLogMessage.CallParticipant} CallParticipant
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CallParticipant.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.CallLogMessage.CallParticipant();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.JID = reader.string();
                                break;
                            }
                        case 2: {
                                message.callOutcome = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a CallParticipant message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.CallLogMessage.CallParticipant
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.CallLogMessage.CallParticipant} CallParticipant
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CallParticipant.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CallParticipant message.
                 * @function verify
                 * @memberof WAE2E.Message.CallLogMessage.CallParticipant
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CallParticipant.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.JID != null && message.hasOwnProperty("JID"))
                        if (!$util.isString(message.JID))
                            return "JID: string expected";
                    if (message.callOutcome != null && message.hasOwnProperty("callOutcome"))
                        switch (message.callOutcome) {
                        default:
                            return "callOutcome: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                            break;
                        }
                    return null;
                };

                /**
                 * Creates a CallParticipant message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.CallLogMessage.CallParticipant
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.CallLogMessage.CallParticipant} CallParticipant
                 */
                CallParticipant.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.CallLogMessage.CallParticipant)
                        return object;
                    var message = new $root.WAE2E.Message.CallLogMessage.CallParticipant();
                    if (object.JID != null)
                        message.JID = String(object.JID);
                    switch (object.callOutcome) {
                    default:
                        if (typeof object.callOutcome === "number") {
                            message.callOutcome = object.callOutcome;
                            break;
                        }
                        break;
                    case "CONNECTED":
                    case 0:
                        message.callOutcome = 0;
                        break;
                    case "MISSED":
                    case 1:
                        message.callOutcome = 1;
                        break;
                    case "FAILED":
                    case 2:
                        message.callOutcome = 2;
                        break;
                    case "REJECTED":
                    case 3:
                        message.callOutcome = 3;
                        break;
                    case "ACCEPTED_ELSEWHERE":
                    case 4:
                        message.callOutcome = 4;
                        break;
                    case "ONGOING":
                    case 5:
                        message.callOutcome = 5;
                        break;
                    case "SILENCED_BY_DND":
                    case 6:
                        message.callOutcome = 6;
                        break;
                    case "SILENCED_UNKNOWN_CALLER":
                    case 7:
                        message.callOutcome = 7;
                        break;
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CallParticipant message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.CallLogMessage.CallParticipant
                 * @static
                 * @param {WAE2E.Message.CallLogMessage.CallParticipant} message CallParticipant
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CallParticipant.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.JID = "";
                        object.callOutcome = options.enums === String ? "CONNECTED" : 0;
                    }
                    if (message.JID != null && message.hasOwnProperty("JID"))
                        object.JID = message.JID;
                    if (message.callOutcome != null && message.hasOwnProperty("callOutcome"))
                        object.callOutcome = options.enums === String ? $root.WAE2E.Message.CallLogMessage.CallOutcome[message.callOutcome] === undefined ? message.callOutcome : $root.WAE2E.Message.CallLogMessage.CallOutcome[message.callOutcome] : message.callOutcome;
                    return object;
                };

                /**
                 * Converts this CallParticipant to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.CallLogMessage.CallParticipant
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CallParticipant.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for CallParticipant
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.CallLogMessage.CallParticipant
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CallParticipant.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.CallLogMessage.CallParticipant";
                };

                return CallParticipant;
            })();

            return CallLogMessage;
        })();

        Message.ScheduledCallEditMessage = (function() {

            /**
             * Properties of a ScheduledCallEditMessage.
             * @memberof WAE2E.Message
             * @interface IScheduledCallEditMessage
             * @property {WAProtocol.IMessageKey|null} [key] ScheduledCallEditMessage key
             * @property {WAE2E.Message.ScheduledCallEditMessage.EditType|null} [editType] ScheduledCallEditMessage editType
             */

            /**
             * Constructs a new ScheduledCallEditMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a ScheduledCallEditMessage.
             * @implements IScheduledCallEditMessage
             * @constructor
             * @param {WAE2E.Message.IScheduledCallEditMessage=} [properties] Properties to set
             */
            function ScheduledCallEditMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ScheduledCallEditMessage key.
             * @member {WAProtocol.IMessageKey|null|undefined} key
             * @memberof WAE2E.Message.ScheduledCallEditMessage
             * @instance
             */
            ScheduledCallEditMessage.prototype.key = null;

            /**
             * ScheduledCallEditMessage editType.
             * @member {WAE2E.Message.ScheduledCallEditMessage.EditType} editType
             * @memberof WAE2E.Message.ScheduledCallEditMessage
             * @instance
             */
            ScheduledCallEditMessage.prototype.editType = 0;

            /**
             * Creates a new ScheduledCallEditMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.ScheduledCallEditMessage
             * @static
             * @param {WAE2E.Message.IScheduledCallEditMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.ScheduledCallEditMessage} ScheduledCallEditMessage instance
             */
            ScheduledCallEditMessage.create = function create(properties) {
                return new ScheduledCallEditMessage(properties);
            };

            /**
             * Encodes the specified ScheduledCallEditMessage message. Does not implicitly {@link WAE2E.Message.ScheduledCallEditMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.ScheduledCallEditMessage
             * @static
             * @param {WAE2E.Message.IScheduledCallEditMessage} message ScheduledCallEditMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScheduledCallEditMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    $root.WAProtocol.MessageKey.encode(message.key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.editType != null && Object.hasOwnProperty.call(message, "editType"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.editType);
                return writer;
            };

            /**
             * Encodes the specified ScheduledCallEditMessage message, length delimited. Does not implicitly {@link WAE2E.Message.ScheduledCallEditMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.ScheduledCallEditMessage
             * @static
             * @param {WAE2E.Message.IScheduledCallEditMessage} message ScheduledCallEditMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScheduledCallEditMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ScheduledCallEditMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.ScheduledCallEditMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.ScheduledCallEditMessage} ScheduledCallEditMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScheduledCallEditMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ScheduledCallEditMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.key = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.editType = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ScheduledCallEditMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.ScheduledCallEditMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.ScheduledCallEditMessage} ScheduledCallEditMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScheduledCallEditMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ScheduledCallEditMessage message.
             * @function verify
             * @memberof WAE2E.Message.ScheduledCallEditMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ScheduledCallEditMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key")) {
                    var error = $root.WAProtocol.MessageKey.verify(message.key);
                    if (error)
                        return "key." + error;
                }
                if (message.editType != null && message.hasOwnProperty("editType"))
                    switch (message.editType) {
                    default:
                        return "editType: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                return null;
            };

            /**
             * Creates a ScheduledCallEditMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.ScheduledCallEditMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.ScheduledCallEditMessage} ScheduledCallEditMessage
             */
            ScheduledCallEditMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.ScheduledCallEditMessage)
                    return object;
                var message = new $root.WAE2E.Message.ScheduledCallEditMessage();
                if (object.key != null) {
                    if (typeof object.key !== "object")
                        throw TypeError(".WAE2E.Message.ScheduledCallEditMessage.key: object expected");
                    message.key = $root.WAProtocol.MessageKey.fromObject(object.key);
                }
                switch (object.editType) {
                default:
                    if (typeof object.editType === "number") {
                        message.editType = object.editType;
                        break;
                    }
                    break;
                case "UNKNOWN":
                case 0:
                    message.editType = 0;
                    break;
                case "CANCEL":
                case 1:
                    message.editType = 1;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a ScheduledCallEditMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.ScheduledCallEditMessage
             * @static
             * @param {WAE2E.Message.ScheduledCallEditMessage} message ScheduledCallEditMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ScheduledCallEditMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.key = null;
                    object.editType = options.enums === String ? "UNKNOWN" : 0;
                }
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = $root.WAProtocol.MessageKey.toObject(message.key, options);
                if (message.editType != null && message.hasOwnProperty("editType"))
                    object.editType = options.enums === String ? $root.WAE2E.Message.ScheduledCallEditMessage.EditType[message.editType] === undefined ? message.editType : $root.WAE2E.Message.ScheduledCallEditMessage.EditType[message.editType] : message.editType;
                return object;
            };

            /**
             * Converts this ScheduledCallEditMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.ScheduledCallEditMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ScheduledCallEditMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ScheduledCallEditMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.ScheduledCallEditMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ScheduledCallEditMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.ScheduledCallEditMessage";
            };

            /**
             * EditType enum.
             * @name WAE2E.Message.ScheduledCallEditMessage.EditType
             * @enum {number}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} CANCEL=1 CANCEL value
             */
            ScheduledCallEditMessage.EditType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "CANCEL"] = 1;
                return values;
            })();

            return ScheduledCallEditMessage;
        })();

        Message.ScheduledCallCreationMessage = (function() {

            /**
             * Properties of a ScheduledCallCreationMessage.
             * @memberof WAE2E.Message
             * @interface IScheduledCallCreationMessage
             * @property {number|Long|null} [scheduledTimestampMS] ScheduledCallCreationMessage scheduledTimestampMS
             * @property {WAE2E.Message.ScheduledCallCreationMessage.CallType|null} [callType] ScheduledCallCreationMessage callType
             * @property {string|null} [title] ScheduledCallCreationMessage title
             */

            /**
             * Constructs a new ScheduledCallCreationMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a ScheduledCallCreationMessage.
             * @implements IScheduledCallCreationMessage
             * @constructor
             * @param {WAE2E.Message.IScheduledCallCreationMessage=} [properties] Properties to set
             */
            function ScheduledCallCreationMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ScheduledCallCreationMessage scheduledTimestampMS.
             * @member {number|Long} scheduledTimestampMS
             * @memberof WAE2E.Message.ScheduledCallCreationMessage
             * @instance
             */
            ScheduledCallCreationMessage.prototype.scheduledTimestampMS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ScheduledCallCreationMessage callType.
             * @member {WAE2E.Message.ScheduledCallCreationMessage.CallType} callType
             * @memberof WAE2E.Message.ScheduledCallCreationMessage
             * @instance
             */
            ScheduledCallCreationMessage.prototype.callType = 0;

            /**
             * ScheduledCallCreationMessage title.
             * @member {string} title
             * @memberof WAE2E.Message.ScheduledCallCreationMessage
             * @instance
             */
            ScheduledCallCreationMessage.prototype.title = "";

            /**
             * Creates a new ScheduledCallCreationMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.ScheduledCallCreationMessage
             * @static
             * @param {WAE2E.Message.IScheduledCallCreationMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.ScheduledCallCreationMessage} ScheduledCallCreationMessage instance
             */
            ScheduledCallCreationMessage.create = function create(properties) {
                return new ScheduledCallCreationMessage(properties);
            };

            /**
             * Encodes the specified ScheduledCallCreationMessage message. Does not implicitly {@link WAE2E.Message.ScheduledCallCreationMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.ScheduledCallCreationMessage
             * @static
             * @param {WAE2E.Message.IScheduledCallCreationMessage} message ScheduledCallCreationMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScheduledCallCreationMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.scheduledTimestampMS != null && Object.hasOwnProperty.call(message, "scheduledTimestampMS"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.scheduledTimestampMS);
                if (message.callType != null && Object.hasOwnProperty.call(message, "callType"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.callType);
                if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.title);
                return writer;
            };

            /**
             * Encodes the specified ScheduledCallCreationMessage message, length delimited. Does not implicitly {@link WAE2E.Message.ScheduledCallCreationMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.ScheduledCallCreationMessage
             * @static
             * @param {WAE2E.Message.IScheduledCallCreationMessage} message ScheduledCallCreationMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScheduledCallCreationMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ScheduledCallCreationMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.ScheduledCallCreationMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.ScheduledCallCreationMessage} ScheduledCallCreationMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScheduledCallCreationMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ScheduledCallCreationMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.scheduledTimestampMS = reader.int64();
                            break;
                        }
                    case 2: {
                            message.callType = reader.int32();
                            break;
                        }
                    case 3: {
                            message.title = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ScheduledCallCreationMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.ScheduledCallCreationMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.ScheduledCallCreationMessage} ScheduledCallCreationMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScheduledCallCreationMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ScheduledCallCreationMessage message.
             * @function verify
             * @memberof WAE2E.Message.ScheduledCallCreationMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ScheduledCallCreationMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.scheduledTimestampMS != null && message.hasOwnProperty("scheduledTimestampMS"))
                    if (!$util.isInteger(message.scheduledTimestampMS) && !(message.scheduledTimestampMS && $util.isInteger(message.scheduledTimestampMS.low) && $util.isInteger(message.scheduledTimestampMS.high)))
                        return "scheduledTimestampMS: integer|Long expected";
                if (message.callType != null && message.hasOwnProperty("callType"))
                    switch (message.callType) {
                    default:
                        return "callType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.title != null && message.hasOwnProperty("title"))
                    if (!$util.isString(message.title))
                        return "title: string expected";
                return null;
            };

            /**
             * Creates a ScheduledCallCreationMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.ScheduledCallCreationMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.ScheduledCallCreationMessage} ScheduledCallCreationMessage
             */
            ScheduledCallCreationMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.ScheduledCallCreationMessage)
                    return object;
                var message = new $root.WAE2E.Message.ScheduledCallCreationMessage();
                if (object.scheduledTimestampMS != null)
                    if ($util.Long)
                        (message.scheduledTimestampMS = $util.Long.fromValue(object.scheduledTimestampMS)).unsigned = false;
                    else if (typeof object.scheduledTimestampMS === "string")
                        message.scheduledTimestampMS = parseInt(object.scheduledTimestampMS, 10);
                    else if (typeof object.scheduledTimestampMS === "number")
                        message.scheduledTimestampMS = object.scheduledTimestampMS;
                    else if (typeof object.scheduledTimestampMS === "object")
                        message.scheduledTimestampMS = new $util.LongBits(object.scheduledTimestampMS.low >>> 0, object.scheduledTimestampMS.high >>> 0).toNumber();
                switch (object.callType) {
                default:
                    if (typeof object.callType === "number") {
                        message.callType = object.callType;
                        break;
                    }
                    break;
                case "UNKNOWN":
                case 0:
                    message.callType = 0;
                    break;
                case "VOICE":
                case 1:
                    message.callType = 1;
                    break;
                case "VIDEO":
                case 2:
                    message.callType = 2;
                    break;
                }
                if (object.title != null)
                    message.title = String(object.title);
                return message;
            };

            /**
             * Creates a plain object from a ScheduledCallCreationMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.ScheduledCallCreationMessage
             * @static
             * @param {WAE2E.Message.ScheduledCallCreationMessage} message ScheduledCallCreationMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ScheduledCallCreationMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.scheduledTimestampMS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.scheduledTimestampMS = options.longs === String ? "0" : 0;
                    object.callType = options.enums === String ? "UNKNOWN" : 0;
                    object.title = "";
                }
                if (message.scheduledTimestampMS != null && message.hasOwnProperty("scheduledTimestampMS"))
                    if (typeof message.scheduledTimestampMS === "number")
                        object.scheduledTimestampMS = options.longs === String ? String(message.scheduledTimestampMS) : message.scheduledTimestampMS;
                    else
                        object.scheduledTimestampMS = options.longs === String ? $util.Long.prototype.toString.call(message.scheduledTimestampMS) : options.longs === Number ? new $util.LongBits(message.scheduledTimestampMS.low >>> 0, message.scheduledTimestampMS.high >>> 0).toNumber() : message.scheduledTimestampMS;
                if (message.callType != null && message.hasOwnProperty("callType"))
                    object.callType = options.enums === String ? $root.WAE2E.Message.ScheduledCallCreationMessage.CallType[message.callType] === undefined ? message.callType : $root.WAE2E.Message.ScheduledCallCreationMessage.CallType[message.callType] : message.callType;
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                return object;
            };

            /**
             * Converts this ScheduledCallCreationMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.ScheduledCallCreationMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ScheduledCallCreationMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ScheduledCallCreationMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.ScheduledCallCreationMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ScheduledCallCreationMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.ScheduledCallCreationMessage";
            };

            /**
             * CallType enum.
             * @name WAE2E.Message.ScheduledCallCreationMessage.CallType
             * @enum {number}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} VOICE=1 VOICE value
             * @property {number} VIDEO=2 VIDEO value
             */
            ScheduledCallCreationMessage.CallType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "VOICE"] = 1;
                values[valuesById[2] = "VIDEO"] = 2;
                return values;
            })();

            return ScheduledCallCreationMessage;
        })();

        Message.EventResponseMessage = (function() {

            /**
             * Properties of an EventResponseMessage.
             * @memberof WAE2E.Message
             * @interface IEventResponseMessage
             * @property {WAE2E.Message.EventResponseMessage.EventResponseType|null} [response] EventResponseMessage response
             * @property {number|Long|null} [timestampMS] EventResponseMessage timestampMS
             * @property {number|null} [extraGuestCount] EventResponseMessage extraGuestCount
             */

            /**
             * Constructs a new EventResponseMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents an EventResponseMessage.
             * @implements IEventResponseMessage
             * @constructor
             * @param {WAE2E.Message.IEventResponseMessage=} [properties] Properties to set
             */
            function EventResponseMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventResponseMessage response.
             * @member {WAE2E.Message.EventResponseMessage.EventResponseType} response
             * @memberof WAE2E.Message.EventResponseMessage
             * @instance
             */
            EventResponseMessage.prototype.response = 0;

            /**
             * EventResponseMessage timestampMS.
             * @member {number|Long} timestampMS
             * @memberof WAE2E.Message.EventResponseMessage
             * @instance
             */
            EventResponseMessage.prototype.timestampMS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * EventResponseMessage extraGuestCount.
             * @member {number} extraGuestCount
             * @memberof WAE2E.Message.EventResponseMessage
             * @instance
             */
            EventResponseMessage.prototype.extraGuestCount = 0;

            /**
             * Creates a new EventResponseMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.EventResponseMessage
             * @static
             * @param {WAE2E.Message.IEventResponseMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.EventResponseMessage} EventResponseMessage instance
             */
            EventResponseMessage.create = function create(properties) {
                return new EventResponseMessage(properties);
            };

            /**
             * Encodes the specified EventResponseMessage message. Does not implicitly {@link WAE2E.Message.EventResponseMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.EventResponseMessage
             * @static
             * @param {WAE2E.Message.IEventResponseMessage} message EventResponseMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventResponseMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.response != null && Object.hasOwnProperty.call(message, "response"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.response);
                if (message.timestampMS != null && Object.hasOwnProperty.call(message, "timestampMS"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.timestampMS);
                if (message.extraGuestCount != null && Object.hasOwnProperty.call(message, "extraGuestCount"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.extraGuestCount);
                return writer;
            };

            /**
             * Encodes the specified EventResponseMessage message, length delimited. Does not implicitly {@link WAE2E.Message.EventResponseMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.EventResponseMessage
             * @static
             * @param {WAE2E.Message.IEventResponseMessage} message EventResponseMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventResponseMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventResponseMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.EventResponseMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.EventResponseMessage} EventResponseMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventResponseMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.EventResponseMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.response = reader.int32();
                            break;
                        }
                    case 2: {
                            message.timestampMS = reader.int64();
                            break;
                        }
                    case 3: {
                            message.extraGuestCount = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventResponseMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.EventResponseMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.EventResponseMessage} EventResponseMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventResponseMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventResponseMessage message.
             * @function verify
             * @memberof WAE2E.Message.EventResponseMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventResponseMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.response != null && message.hasOwnProperty("response"))
                    switch (message.response) {
                    default:
                        return "response: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.timestampMS != null && message.hasOwnProperty("timestampMS"))
                    if (!$util.isInteger(message.timestampMS) && !(message.timestampMS && $util.isInteger(message.timestampMS.low) && $util.isInteger(message.timestampMS.high)))
                        return "timestampMS: integer|Long expected";
                if (message.extraGuestCount != null && message.hasOwnProperty("extraGuestCount"))
                    if (!$util.isInteger(message.extraGuestCount))
                        return "extraGuestCount: integer expected";
                return null;
            };

            /**
             * Creates an EventResponseMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.EventResponseMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.EventResponseMessage} EventResponseMessage
             */
            EventResponseMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.EventResponseMessage)
                    return object;
                var message = new $root.WAE2E.Message.EventResponseMessage();
                switch (object.response) {
                default:
                    if (typeof object.response === "number") {
                        message.response = object.response;
                        break;
                    }
                    break;
                case "UNKNOWN":
                case 0:
                    message.response = 0;
                    break;
                case "GOING":
                case 1:
                    message.response = 1;
                    break;
                case "NOT_GOING":
                case 2:
                    message.response = 2;
                    break;
                case "MAYBE":
                case 3:
                    message.response = 3;
                    break;
                }
                if (object.timestampMS != null)
                    if ($util.Long)
                        (message.timestampMS = $util.Long.fromValue(object.timestampMS)).unsigned = false;
                    else if (typeof object.timestampMS === "string")
                        message.timestampMS = parseInt(object.timestampMS, 10);
                    else if (typeof object.timestampMS === "number")
                        message.timestampMS = object.timestampMS;
                    else if (typeof object.timestampMS === "object")
                        message.timestampMS = new $util.LongBits(object.timestampMS.low >>> 0, object.timestampMS.high >>> 0).toNumber();
                if (object.extraGuestCount != null)
                    message.extraGuestCount = object.extraGuestCount | 0;
                return message;
            };

            /**
             * Creates a plain object from an EventResponseMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.EventResponseMessage
             * @static
             * @param {WAE2E.Message.EventResponseMessage} message EventResponseMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventResponseMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.response = options.enums === String ? "UNKNOWN" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.timestampMS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.timestampMS = options.longs === String ? "0" : 0;
                    object.extraGuestCount = 0;
                }
                if (message.response != null && message.hasOwnProperty("response"))
                    object.response = options.enums === String ? $root.WAE2E.Message.EventResponseMessage.EventResponseType[message.response] === undefined ? message.response : $root.WAE2E.Message.EventResponseMessage.EventResponseType[message.response] : message.response;
                if (message.timestampMS != null && message.hasOwnProperty("timestampMS"))
                    if (typeof message.timestampMS === "number")
                        object.timestampMS = options.longs === String ? String(message.timestampMS) : message.timestampMS;
                    else
                        object.timestampMS = options.longs === String ? $util.Long.prototype.toString.call(message.timestampMS) : options.longs === Number ? new $util.LongBits(message.timestampMS.low >>> 0, message.timestampMS.high >>> 0).toNumber() : message.timestampMS;
                if (message.extraGuestCount != null && message.hasOwnProperty("extraGuestCount"))
                    object.extraGuestCount = message.extraGuestCount;
                return object;
            };

            /**
             * Converts this EventResponseMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.EventResponseMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventResponseMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for EventResponseMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.EventResponseMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            EventResponseMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.EventResponseMessage";
            };

            /**
             * EventResponseType enum.
             * @name WAE2E.Message.EventResponseMessage.EventResponseType
             * @enum {number}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} GOING=1 GOING value
             * @property {number} NOT_GOING=2 NOT_GOING value
             * @property {number} MAYBE=3 MAYBE value
             */
            EventResponseMessage.EventResponseType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "GOING"] = 1;
                values[valuesById[2] = "NOT_GOING"] = 2;
                values[valuesById[3] = "MAYBE"] = 3;
                return values;
            })();

            return EventResponseMessage;
        })();

        Message.PinInChatMessage = (function() {

            /**
             * Properties of a PinInChatMessage.
             * @memberof WAE2E.Message
             * @interface IPinInChatMessage
             * @property {WAProtocol.IMessageKey|null} [key] PinInChatMessage key
             * @property {WAE2E.Message.PinInChatMessage.Type|null} [type] PinInChatMessage type
             * @property {number|Long|null} [senderTimestampMS] PinInChatMessage senderTimestampMS
             */

            /**
             * Constructs a new PinInChatMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a PinInChatMessage.
             * @implements IPinInChatMessage
             * @constructor
             * @param {WAE2E.Message.IPinInChatMessage=} [properties] Properties to set
             */
            function PinInChatMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PinInChatMessage key.
             * @member {WAProtocol.IMessageKey|null|undefined} key
             * @memberof WAE2E.Message.PinInChatMessage
             * @instance
             */
            PinInChatMessage.prototype.key = null;

            /**
             * PinInChatMessage type.
             * @member {WAE2E.Message.PinInChatMessage.Type} type
             * @memberof WAE2E.Message.PinInChatMessage
             * @instance
             */
            PinInChatMessage.prototype.type = 0;

            /**
             * PinInChatMessage senderTimestampMS.
             * @member {number|Long} senderTimestampMS
             * @memberof WAE2E.Message.PinInChatMessage
             * @instance
             */
            PinInChatMessage.prototype.senderTimestampMS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new PinInChatMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.PinInChatMessage
             * @static
             * @param {WAE2E.Message.IPinInChatMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.PinInChatMessage} PinInChatMessage instance
             */
            PinInChatMessage.create = function create(properties) {
                return new PinInChatMessage(properties);
            };

            /**
             * Encodes the specified PinInChatMessage message. Does not implicitly {@link WAE2E.Message.PinInChatMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.PinInChatMessage
             * @static
             * @param {WAE2E.Message.IPinInChatMessage} message PinInChatMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PinInChatMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    $root.WAProtocol.MessageKey.encode(message.key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                if (message.senderTimestampMS != null && Object.hasOwnProperty.call(message, "senderTimestampMS"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.senderTimestampMS);
                return writer;
            };

            /**
             * Encodes the specified PinInChatMessage message, length delimited. Does not implicitly {@link WAE2E.Message.PinInChatMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.PinInChatMessage
             * @static
             * @param {WAE2E.Message.IPinInChatMessage} message PinInChatMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PinInChatMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PinInChatMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.PinInChatMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.PinInChatMessage} PinInChatMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PinInChatMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PinInChatMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.key = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.type = reader.int32();
                            break;
                        }
                    case 3: {
                            message.senderTimestampMS = reader.int64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PinInChatMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.PinInChatMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.PinInChatMessage} PinInChatMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PinInChatMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PinInChatMessage message.
             * @function verify
             * @memberof WAE2E.Message.PinInChatMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PinInChatMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key")) {
                    var error = $root.WAProtocol.MessageKey.verify(message.key);
                    if (error)
                        return "key." + error;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.senderTimestampMS != null && message.hasOwnProperty("senderTimestampMS"))
                    if (!$util.isInteger(message.senderTimestampMS) && !(message.senderTimestampMS && $util.isInteger(message.senderTimestampMS.low) && $util.isInteger(message.senderTimestampMS.high)))
                        return "senderTimestampMS: integer|Long expected";
                return null;
            };

            /**
             * Creates a PinInChatMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.PinInChatMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.PinInChatMessage} PinInChatMessage
             */
            PinInChatMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.PinInChatMessage)
                    return object;
                var message = new $root.WAE2E.Message.PinInChatMessage();
                if (object.key != null) {
                    if (typeof object.key !== "object")
                        throw TypeError(".WAE2E.Message.PinInChatMessage.key: object expected");
                    message.key = $root.WAProtocol.MessageKey.fromObject(object.key);
                }
                switch (object.type) {
                default:
                    if (typeof object.type === "number") {
                        message.type = object.type;
                        break;
                    }
                    break;
                case "UNKNOWN_TYPE":
                case 0:
                    message.type = 0;
                    break;
                case "PIN_FOR_ALL":
                case 1:
                    message.type = 1;
                    break;
                case "UNPIN_FOR_ALL":
                case 2:
                    message.type = 2;
                    break;
                }
                if (object.senderTimestampMS != null)
                    if ($util.Long)
                        (message.senderTimestampMS = $util.Long.fromValue(object.senderTimestampMS)).unsigned = false;
                    else if (typeof object.senderTimestampMS === "string")
                        message.senderTimestampMS = parseInt(object.senderTimestampMS, 10);
                    else if (typeof object.senderTimestampMS === "number")
                        message.senderTimestampMS = object.senderTimestampMS;
                    else if (typeof object.senderTimestampMS === "object")
                        message.senderTimestampMS = new $util.LongBits(object.senderTimestampMS.low >>> 0, object.senderTimestampMS.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a PinInChatMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.PinInChatMessage
             * @static
             * @param {WAE2E.Message.PinInChatMessage} message PinInChatMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PinInChatMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.key = null;
                    object.type = options.enums === String ? "UNKNOWN_TYPE" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.senderTimestampMS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.senderTimestampMS = options.longs === String ? "0" : 0;
                }
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = $root.WAProtocol.MessageKey.toObject(message.key, options);
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.WAE2E.Message.PinInChatMessage.Type[message.type] === undefined ? message.type : $root.WAE2E.Message.PinInChatMessage.Type[message.type] : message.type;
                if (message.senderTimestampMS != null && message.hasOwnProperty("senderTimestampMS"))
                    if (typeof message.senderTimestampMS === "number")
                        object.senderTimestampMS = options.longs === String ? String(message.senderTimestampMS) : message.senderTimestampMS;
                    else
                        object.senderTimestampMS = options.longs === String ? $util.Long.prototype.toString.call(message.senderTimestampMS) : options.longs === Number ? new $util.LongBits(message.senderTimestampMS.low >>> 0, message.senderTimestampMS.high >>> 0).toNumber() : message.senderTimestampMS;
                return object;
            };

            /**
             * Converts this PinInChatMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.PinInChatMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PinInChatMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PinInChatMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.PinInChatMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PinInChatMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.PinInChatMessage";
            };

            /**
             * Type enum.
             * @name WAE2E.Message.PinInChatMessage.Type
             * @enum {number}
             * @property {number} UNKNOWN_TYPE=0 UNKNOWN_TYPE value
             * @property {number} PIN_FOR_ALL=1 PIN_FOR_ALL value
             * @property {number} UNPIN_FOR_ALL=2 UNPIN_FOR_ALL value
             */
            PinInChatMessage.Type = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN_TYPE"] = 0;
                values[valuesById[1] = "PIN_FOR_ALL"] = 1;
                values[valuesById[2] = "UNPIN_FOR_ALL"] = 2;
                return values;
            })();

            return PinInChatMessage;
        })();

        Message.ButtonsResponseMessage = (function() {

            /**
             * Properties of a ButtonsResponseMessage.
             * @memberof WAE2E.Message
             * @interface IButtonsResponseMessage
             * @property {string|null} [selectedDisplayText] ButtonsResponseMessage selectedDisplayText
             * @property {string|null} [selectedButtonID] ButtonsResponseMessage selectedButtonID
             * @property {WAE2E.IContextInfo|null} [contextInfo] ButtonsResponseMessage contextInfo
             * @property {WAE2E.Message.ButtonsResponseMessage.Type|null} [type] ButtonsResponseMessage type
             */

            /**
             * Constructs a new ButtonsResponseMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a ButtonsResponseMessage.
             * @implements IButtonsResponseMessage
             * @constructor
             * @param {WAE2E.Message.IButtonsResponseMessage=} [properties] Properties to set
             */
            function ButtonsResponseMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ButtonsResponseMessage selectedDisplayText.
             * @member {string|null|undefined} selectedDisplayText
             * @memberof WAE2E.Message.ButtonsResponseMessage
             * @instance
             */
            ButtonsResponseMessage.prototype.selectedDisplayText = null;

            /**
             * ButtonsResponseMessage selectedButtonID.
             * @member {string} selectedButtonID
             * @memberof WAE2E.Message.ButtonsResponseMessage
             * @instance
             */
            ButtonsResponseMessage.prototype.selectedButtonID = "";

            /**
             * ButtonsResponseMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.ButtonsResponseMessage
             * @instance
             */
            ButtonsResponseMessage.prototype.contextInfo = null;

            /**
             * ButtonsResponseMessage type.
             * @member {WAE2E.Message.ButtonsResponseMessage.Type} type
             * @memberof WAE2E.Message.ButtonsResponseMessage
             * @instance
             */
            ButtonsResponseMessage.prototype.type = 0;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * ButtonsResponseMessage response.
             * @member {"selectedDisplayText"|undefined} response
             * @memberof WAE2E.Message.ButtonsResponseMessage
             * @instance
             */
            Object.defineProperty(ButtonsResponseMessage.prototype, "response", {
                get: $util.oneOfGetter($oneOfFields = ["selectedDisplayText"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new ButtonsResponseMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.ButtonsResponseMessage
             * @static
             * @param {WAE2E.Message.IButtonsResponseMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.ButtonsResponseMessage} ButtonsResponseMessage instance
             */
            ButtonsResponseMessage.create = function create(properties) {
                return new ButtonsResponseMessage(properties);
            };

            /**
             * Encodes the specified ButtonsResponseMessage message. Does not implicitly {@link WAE2E.Message.ButtonsResponseMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.ButtonsResponseMessage
             * @static
             * @param {WAE2E.Message.IButtonsResponseMessage} message ButtonsResponseMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ButtonsResponseMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.selectedButtonID != null && Object.hasOwnProperty.call(message, "selectedButtonID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.selectedButtonID);
                if (message.selectedDisplayText != null && Object.hasOwnProperty.call(message, "selectedDisplayText"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.selectedDisplayText);
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.type);
                return writer;
            };

            /**
             * Encodes the specified ButtonsResponseMessage message, length delimited. Does not implicitly {@link WAE2E.Message.ButtonsResponseMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.ButtonsResponseMessage
             * @static
             * @param {WAE2E.Message.IButtonsResponseMessage} message ButtonsResponseMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ButtonsResponseMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ButtonsResponseMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.ButtonsResponseMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.ButtonsResponseMessage} ButtonsResponseMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ButtonsResponseMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ButtonsResponseMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2: {
                            message.selectedDisplayText = reader.string();
                            break;
                        }
                    case 1: {
                            message.selectedButtonID = reader.string();
                            break;
                        }
                    case 3: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.type = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ButtonsResponseMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.ButtonsResponseMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.ButtonsResponseMessage} ButtonsResponseMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ButtonsResponseMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ButtonsResponseMessage message.
             * @function verify
             * @memberof WAE2E.Message.ButtonsResponseMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ButtonsResponseMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.selectedDisplayText != null && message.hasOwnProperty("selectedDisplayText")) {
                    properties.response = 1;
                    if (!$util.isString(message.selectedDisplayText))
                        return "selectedDisplayText: string expected";
                }
                if (message.selectedButtonID != null && message.hasOwnProperty("selectedButtonID"))
                    if (!$util.isString(message.selectedButtonID))
                        return "selectedButtonID: string expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                return null;
            };

            /**
             * Creates a ButtonsResponseMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.ButtonsResponseMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.ButtonsResponseMessage} ButtonsResponseMessage
             */
            ButtonsResponseMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.ButtonsResponseMessage)
                    return object;
                var message = new $root.WAE2E.Message.ButtonsResponseMessage();
                if (object.selectedDisplayText != null)
                    message.selectedDisplayText = String(object.selectedDisplayText);
                if (object.selectedButtonID != null)
                    message.selectedButtonID = String(object.selectedButtonID);
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.ButtonsResponseMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                switch (object.type) {
                default:
                    if (typeof object.type === "number") {
                        message.type = object.type;
                        break;
                    }
                    break;
                case "UNKNOWN":
                case 0:
                    message.type = 0;
                    break;
                case "DISPLAY_TEXT":
                case 1:
                    message.type = 1;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a ButtonsResponseMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.ButtonsResponseMessage
             * @static
             * @param {WAE2E.Message.ButtonsResponseMessage} message ButtonsResponseMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ButtonsResponseMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.selectedButtonID = "";
                    object.contextInfo = null;
                    object.type = options.enums === String ? "UNKNOWN" : 0;
                }
                if (message.selectedButtonID != null && message.hasOwnProperty("selectedButtonID"))
                    object.selectedButtonID = message.selectedButtonID;
                if (message.selectedDisplayText != null && message.hasOwnProperty("selectedDisplayText")) {
                    object.selectedDisplayText = message.selectedDisplayText;
                    if (options.oneofs)
                        object.response = "selectedDisplayText";
                }
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.WAE2E.Message.ButtonsResponseMessage.Type[message.type] === undefined ? message.type : $root.WAE2E.Message.ButtonsResponseMessage.Type[message.type] : message.type;
                return object;
            };

            /**
             * Converts this ButtonsResponseMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.ButtonsResponseMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ButtonsResponseMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ButtonsResponseMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.ButtonsResponseMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ButtonsResponseMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.ButtonsResponseMessage";
            };

            /**
             * Type enum.
             * @name WAE2E.Message.ButtonsResponseMessage.Type
             * @enum {number}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} DISPLAY_TEXT=1 DISPLAY_TEXT value
             */
            ButtonsResponseMessage.Type = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "DISPLAY_TEXT"] = 1;
                return values;
            })();

            return ButtonsResponseMessage;
        })();

        Message.ButtonsMessage = (function() {

            /**
             * Properties of a ButtonsMessage.
             * @memberof WAE2E.Message
             * @interface IButtonsMessage
             * @property {string|null} [text] ButtonsMessage text
             * @property {WAE2E.Message.IDocumentMessage|null} [documentMessage] ButtonsMessage documentMessage
             * @property {WAE2E.Message.IImageMessage|null} [imageMessage] ButtonsMessage imageMessage
             * @property {WAE2E.Message.IVideoMessage|null} [videoMessage] ButtonsMessage videoMessage
             * @property {WAE2E.Message.ILocationMessage|null} [locationMessage] ButtonsMessage locationMessage
             * @property {string|null} [contentText] ButtonsMessage contentText
             * @property {string|null} [footerText] ButtonsMessage footerText
             * @property {WAE2E.IContextInfo|null} [contextInfo] ButtonsMessage contextInfo
             * @property {Array.<WAE2E.Message.ButtonsMessage.IButton>|null} [buttons] ButtonsMessage buttons
             * @property {WAE2E.Message.ButtonsMessage.HeaderType|null} [headerType] ButtonsMessage headerType
             */

            /**
             * Constructs a new ButtonsMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a ButtonsMessage.
             * @implements IButtonsMessage
             * @constructor
             * @param {WAE2E.Message.IButtonsMessage=} [properties] Properties to set
             */
            function ButtonsMessage(properties) {
                this.buttons = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ButtonsMessage text.
             * @member {string|null|undefined} text
             * @memberof WAE2E.Message.ButtonsMessage
             * @instance
             */
            ButtonsMessage.prototype.text = null;

            /**
             * ButtonsMessage documentMessage.
             * @member {WAE2E.Message.IDocumentMessage|null|undefined} documentMessage
             * @memberof WAE2E.Message.ButtonsMessage
             * @instance
             */
            ButtonsMessage.prototype.documentMessage = null;

            /**
             * ButtonsMessage imageMessage.
             * @member {WAE2E.Message.IImageMessage|null|undefined} imageMessage
             * @memberof WAE2E.Message.ButtonsMessage
             * @instance
             */
            ButtonsMessage.prototype.imageMessage = null;

            /**
             * ButtonsMessage videoMessage.
             * @member {WAE2E.Message.IVideoMessage|null|undefined} videoMessage
             * @memberof WAE2E.Message.ButtonsMessage
             * @instance
             */
            ButtonsMessage.prototype.videoMessage = null;

            /**
             * ButtonsMessage locationMessage.
             * @member {WAE2E.Message.ILocationMessage|null|undefined} locationMessage
             * @memberof WAE2E.Message.ButtonsMessage
             * @instance
             */
            ButtonsMessage.prototype.locationMessage = null;

            /**
             * ButtonsMessage contentText.
             * @member {string} contentText
             * @memberof WAE2E.Message.ButtonsMessage
             * @instance
             */
            ButtonsMessage.prototype.contentText = "";

            /**
             * ButtonsMessage footerText.
             * @member {string} footerText
             * @memberof WAE2E.Message.ButtonsMessage
             * @instance
             */
            ButtonsMessage.prototype.footerText = "";

            /**
             * ButtonsMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.ButtonsMessage
             * @instance
             */
            ButtonsMessage.prototype.contextInfo = null;

            /**
             * ButtonsMessage buttons.
             * @member {Array.<WAE2E.Message.ButtonsMessage.IButton>} buttons
             * @memberof WAE2E.Message.ButtonsMessage
             * @instance
             */
            ButtonsMessage.prototype.buttons = $util.emptyArray;

            /**
             * ButtonsMessage headerType.
             * @member {WAE2E.Message.ButtonsMessage.HeaderType} headerType
             * @memberof WAE2E.Message.ButtonsMessage
             * @instance
             */
            ButtonsMessage.prototype.headerType = 0;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * ButtonsMessage header.
             * @member {"text"|"documentMessage"|"imageMessage"|"videoMessage"|"locationMessage"|undefined} header
             * @memberof WAE2E.Message.ButtonsMessage
             * @instance
             */
            Object.defineProperty(ButtonsMessage.prototype, "header", {
                get: $util.oneOfGetter($oneOfFields = ["text", "documentMessage", "imageMessage", "videoMessage", "locationMessage"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new ButtonsMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.ButtonsMessage
             * @static
             * @param {WAE2E.Message.IButtonsMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.ButtonsMessage} ButtonsMessage instance
             */
            ButtonsMessage.create = function create(properties) {
                return new ButtonsMessage(properties);
            };

            /**
             * Encodes the specified ButtonsMessage message. Does not implicitly {@link WAE2E.Message.ButtonsMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.ButtonsMessage
             * @static
             * @param {WAE2E.Message.IButtonsMessage} message ButtonsMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ButtonsMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                if (message.documentMessage != null && Object.hasOwnProperty.call(message, "documentMessage"))
                    $root.WAE2E.Message.DocumentMessage.encode(message.documentMessage, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.imageMessage != null && Object.hasOwnProperty.call(message, "imageMessage"))
                    $root.WAE2E.Message.ImageMessage.encode(message.imageMessage, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.videoMessage != null && Object.hasOwnProperty.call(message, "videoMessage"))
                    $root.WAE2E.Message.VideoMessage.encode(message.videoMessage, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.locationMessage != null && Object.hasOwnProperty.call(message, "locationMessage"))
                    $root.WAE2E.Message.LocationMessage.encode(message.locationMessage, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.contentText != null && Object.hasOwnProperty.call(message, "contentText"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.contentText);
                if (message.footerText != null && Object.hasOwnProperty.call(message, "footerText"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.footerText);
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.buttons != null && message.buttons.length)
                    for (var i = 0; i < message.buttons.length; ++i)
                        $root.WAE2E.Message.ButtonsMessage.Button.encode(message.buttons[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.headerType != null && Object.hasOwnProperty.call(message, "headerType"))
                    writer.uint32(/* id 10, wireType 0 =*/80).int32(message.headerType);
                return writer;
            };

            /**
             * Encodes the specified ButtonsMessage message, length delimited. Does not implicitly {@link WAE2E.Message.ButtonsMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.ButtonsMessage
             * @static
             * @param {WAE2E.Message.IButtonsMessage} message ButtonsMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ButtonsMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ButtonsMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.ButtonsMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.ButtonsMessage} ButtonsMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ButtonsMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ButtonsMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.text = reader.string();
                            break;
                        }
                    case 2: {
                            message.documentMessage = $root.WAE2E.Message.DocumentMessage.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.imageMessage = $root.WAE2E.Message.ImageMessage.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.videoMessage = $root.WAE2E.Message.VideoMessage.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.locationMessage = $root.WAE2E.Message.LocationMessage.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.contentText = reader.string();
                            break;
                        }
                    case 7: {
                            message.footerText = reader.string();
                            break;
                        }
                    case 8: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            if (!(message.buttons && message.buttons.length))
                                message.buttons = [];
                            message.buttons.push($root.WAE2E.Message.ButtonsMessage.Button.decode(reader, reader.uint32()));
                            break;
                        }
                    case 10: {
                            message.headerType = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ButtonsMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.ButtonsMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.ButtonsMessage} ButtonsMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ButtonsMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ButtonsMessage message.
             * @function verify
             * @memberof WAE2E.Message.ButtonsMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ButtonsMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.text != null && message.hasOwnProperty("text")) {
                    properties.header = 1;
                    if (!$util.isString(message.text))
                        return "text: string expected";
                }
                if (message.documentMessage != null && message.hasOwnProperty("documentMessage")) {
                    if (properties.header === 1)
                        return "header: multiple values";
                    properties.header = 1;
                    {
                        var error = $root.WAE2E.Message.DocumentMessage.verify(message.documentMessage);
                        if (error)
                            return "documentMessage." + error;
                    }
                }
                if (message.imageMessage != null && message.hasOwnProperty("imageMessage")) {
                    if (properties.header === 1)
                        return "header: multiple values";
                    properties.header = 1;
                    {
                        var error = $root.WAE2E.Message.ImageMessage.verify(message.imageMessage);
                        if (error)
                            return "imageMessage." + error;
                    }
                }
                if (message.videoMessage != null && message.hasOwnProperty("videoMessage")) {
                    if (properties.header === 1)
                        return "header: multiple values";
                    properties.header = 1;
                    {
                        var error = $root.WAE2E.Message.VideoMessage.verify(message.videoMessage);
                        if (error)
                            return "videoMessage." + error;
                    }
                }
                if (message.locationMessage != null && message.hasOwnProperty("locationMessage")) {
                    if (properties.header === 1)
                        return "header: multiple values";
                    properties.header = 1;
                    {
                        var error = $root.WAE2E.Message.LocationMessage.verify(message.locationMessage);
                        if (error)
                            return "locationMessage." + error;
                    }
                }
                if (message.contentText != null && message.hasOwnProperty("contentText"))
                    if (!$util.isString(message.contentText))
                        return "contentText: string expected";
                if (message.footerText != null && message.hasOwnProperty("footerText"))
                    if (!$util.isString(message.footerText))
                        return "footerText: string expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                if (message.buttons != null && message.hasOwnProperty("buttons")) {
                    if (!Array.isArray(message.buttons))
                        return "buttons: array expected";
                    for (var i = 0; i < message.buttons.length; ++i) {
                        var error = $root.WAE2E.Message.ButtonsMessage.Button.verify(message.buttons[i]);
                        if (error)
                            return "buttons." + error;
                    }
                }
                if (message.headerType != null && message.hasOwnProperty("headerType"))
                    switch (message.headerType) {
                    default:
                        return "headerType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                        break;
                    }
                return null;
            };

            /**
             * Creates a ButtonsMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.ButtonsMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.ButtonsMessage} ButtonsMessage
             */
            ButtonsMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.ButtonsMessage)
                    return object;
                var message = new $root.WAE2E.Message.ButtonsMessage();
                if (object.text != null)
                    message.text = String(object.text);
                if (object.documentMessage != null) {
                    if (typeof object.documentMessage !== "object")
                        throw TypeError(".WAE2E.Message.ButtonsMessage.documentMessage: object expected");
                    message.documentMessage = $root.WAE2E.Message.DocumentMessage.fromObject(object.documentMessage);
                }
                if (object.imageMessage != null) {
                    if (typeof object.imageMessage !== "object")
                        throw TypeError(".WAE2E.Message.ButtonsMessage.imageMessage: object expected");
                    message.imageMessage = $root.WAE2E.Message.ImageMessage.fromObject(object.imageMessage);
                }
                if (object.videoMessage != null) {
                    if (typeof object.videoMessage !== "object")
                        throw TypeError(".WAE2E.Message.ButtonsMessage.videoMessage: object expected");
                    message.videoMessage = $root.WAE2E.Message.VideoMessage.fromObject(object.videoMessage);
                }
                if (object.locationMessage != null) {
                    if (typeof object.locationMessage !== "object")
                        throw TypeError(".WAE2E.Message.ButtonsMessage.locationMessage: object expected");
                    message.locationMessage = $root.WAE2E.Message.LocationMessage.fromObject(object.locationMessage);
                }
                if (object.contentText != null)
                    message.contentText = String(object.contentText);
                if (object.footerText != null)
                    message.footerText = String(object.footerText);
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.ButtonsMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                if (object.buttons) {
                    if (!Array.isArray(object.buttons))
                        throw TypeError(".WAE2E.Message.ButtonsMessage.buttons: array expected");
                    message.buttons = [];
                    for (var i = 0; i < object.buttons.length; ++i) {
                        if (typeof object.buttons[i] !== "object")
                            throw TypeError(".WAE2E.Message.ButtonsMessage.buttons: object expected");
                        message.buttons[i] = $root.WAE2E.Message.ButtonsMessage.Button.fromObject(object.buttons[i]);
                    }
                }
                switch (object.headerType) {
                default:
                    if (typeof object.headerType === "number") {
                        message.headerType = object.headerType;
                        break;
                    }
                    break;
                case "UNKNOWN":
                case 0:
                    message.headerType = 0;
                    break;
                case "EMPTY":
                case 1:
                    message.headerType = 1;
                    break;
                case "TEXT":
                case 2:
                    message.headerType = 2;
                    break;
                case "DOCUMENT":
                case 3:
                    message.headerType = 3;
                    break;
                case "IMAGE":
                case 4:
                    message.headerType = 4;
                    break;
                case "VIDEO":
                case 5:
                    message.headerType = 5;
                    break;
                case "LOCATION":
                case 6:
                    message.headerType = 6;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a ButtonsMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.ButtonsMessage
             * @static
             * @param {WAE2E.Message.ButtonsMessage} message ButtonsMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ButtonsMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.buttons = [];
                if (options.defaults) {
                    object.contentText = "";
                    object.footerText = "";
                    object.contextInfo = null;
                    object.headerType = options.enums === String ? "UNKNOWN" : 0;
                }
                if (message.text != null && message.hasOwnProperty("text")) {
                    object.text = message.text;
                    if (options.oneofs)
                        object.header = "text";
                }
                if (message.documentMessage != null && message.hasOwnProperty("documentMessage")) {
                    object.documentMessage = $root.WAE2E.Message.DocumentMessage.toObject(message.documentMessage, options);
                    if (options.oneofs)
                        object.header = "documentMessage";
                }
                if (message.imageMessage != null && message.hasOwnProperty("imageMessage")) {
                    object.imageMessage = $root.WAE2E.Message.ImageMessage.toObject(message.imageMessage, options);
                    if (options.oneofs)
                        object.header = "imageMessage";
                }
                if (message.videoMessage != null && message.hasOwnProperty("videoMessage")) {
                    object.videoMessage = $root.WAE2E.Message.VideoMessage.toObject(message.videoMessage, options);
                    if (options.oneofs)
                        object.header = "videoMessage";
                }
                if (message.locationMessage != null && message.hasOwnProperty("locationMessage")) {
                    object.locationMessage = $root.WAE2E.Message.LocationMessage.toObject(message.locationMessage, options);
                    if (options.oneofs)
                        object.header = "locationMessage";
                }
                if (message.contentText != null && message.hasOwnProperty("contentText"))
                    object.contentText = message.contentText;
                if (message.footerText != null && message.hasOwnProperty("footerText"))
                    object.footerText = message.footerText;
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                if (message.buttons && message.buttons.length) {
                    object.buttons = [];
                    for (var j = 0; j < message.buttons.length; ++j)
                        object.buttons[j] = $root.WAE2E.Message.ButtonsMessage.Button.toObject(message.buttons[j], options);
                }
                if (message.headerType != null && message.hasOwnProperty("headerType"))
                    object.headerType = options.enums === String ? $root.WAE2E.Message.ButtonsMessage.HeaderType[message.headerType] === undefined ? message.headerType : $root.WAE2E.Message.ButtonsMessage.HeaderType[message.headerType] : message.headerType;
                return object;
            };

            /**
             * Converts this ButtonsMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.ButtonsMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ButtonsMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ButtonsMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.ButtonsMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ButtonsMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.ButtonsMessage";
            };

            /**
             * HeaderType enum.
             * @name WAE2E.Message.ButtonsMessage.HeaderType
             * @enum {number}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} EMPTY=1 EMPTY value
             * @property {number} TEXT=2 TEXT value
             * @property {number} DOCUMENT=3 DOCUMENT value
             * @property {number} IMAGE=4 IMAGE value
             * @property {number} VIDEO=5 VIDEO value
             * @property {number} LOCATION=6 LOCATION value
             */
            ButtonsMessage.HeaderType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "EMPTY"] = 1;
                values[valuesById[2] = "TEXT"] = 2;
                values[valuesById[3] = "DOCUMENT"] = 3;
                values[valuesById[4] = "IMAGE"] = 4;
                values[valuesById[5] = "VIDEO"] = 5;
                values[valuesById[6] = "LOCATION"] = 6;
                return values;
            })();

            ButtonsMessage.Button = (function() {

                /**
                 * Properties of a Button.
                 * @memberof WAE2E.Message.ButtonsMessage
                 * @interface IButton
                 * @property {string|null} [buttonID] Button buttonID
                 * @property {WAE2E.Message.ButtonsMessage.Button.IButtonText|null} [buttonText] Button buttonText
                 * @property {WAE2E.Message.ButtonsMessage.Button.Type|null} [type] Button type
                 * @property {WAE2E.Message.ButtonsMessage.Button.INativeFlowInfo|null} [nativeFlowInfo] Button nativeFlowInfo
                 */

                /**
                 * Constructs a new Button.
                 * @memberof WAE2E.Message.ButtonsMessage
                 * @classdesc Represents a Button.
                 * @implements IButton
                 * @constructor
                 * @param {WAE2E.Message.ButtonsMessage.IButton=} [properties] Properties to set
                 */
                function Button(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Button buttonID.
                 * @member {string} buttonID
                 * @memberof WAE2E.Message.ButtonsMessage.Button
                 * @instance
                 */
                Button.prototype.buttonID = "";

                /**
                 * Button buttonText.
                 * @member {WAE2E.Message.ButtonsMessage.Button.IButtonText|null|undefined} buttonText
                 * @memberof WAE2E.Message.ButtonsMessage.Button
                 * @instance
                 */
                Button.prototype.buttonText = null;

                /**
                 * Button type.
                 * @member {WAE2E.Message.ButtonsMessage.Button.Type} type
                 * @memberof WAE2E.Message.ButtonsMessage.Button
                 * @instance
                 */
                Button.prototype.type = 0;

                /**
                 * Button nativeFlowInfo.
                 * @member {WAE2E.Message.ButtonsMessage.Button.INativeFlowInfo|null|undefined} nativeFlowInfo
                 * @memberof WAE2E.Message.ButtonsMessage.Button
                 * @instance
                 */
                Button.prototype.nativeFlowInfo = null;

                /**
                 * Creates a new Button instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.ButtonsMessage.Button
                 * @static
                 * @param {WAE2E.Message.ButtonsMessage.IButton=} [properties] Properties to set
                 * @returns {WAE2E.Message.ButtonsMessage.Button} Button instance
                 */
                Button.create = function create(properties) {
                    return new Button(properties);
                };

                /**
                 * Encodes the specified Button message. Does not implicitly {@link WAE2E.Message.ButtonsMessage.Button.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.ButtonsMessage.Button
                 * @static
                 * @param {WAE2E.Message.ButtonsMessage.IButton} message Button message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Button.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.buttonID != null && Object.hasOwnProperty.call(message, "buttonID"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.buttonID);
                    if (message.buttonText != null && Object.hasOwnProperty.call(message, "buttonText"))
                        $root.WAE2E.Message.ButtonsMessage.Button.ButtonText.encode(message.buttonText, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
                    if (message.nativeFlowInfo != null && Object.hasOwnProperty.call(message, "nativeFlowInfo"))
                        $root.WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo.encode(message.nativeFlowInfo, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified Button message, length delimited. Does not implicitly {@link WAE2E.Message.ButtonsMessage.Button.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.ButtonsMessage.Button
                 * @static
                 * @param {WAE2E.Message.ButtonsMessage.IButton} message Button message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Button.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Button message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.ButtonsMessage.Button
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.ButtonsMessage.Button} Button
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Button.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ButtonsMessage.Button();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.buttonID = reader.string();
                                break;
                            }
                        case 2: {
                                message.buttonText = $root.WAE2E.Message.ButtonsMessage.Button.ButtonText.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.type = reader.int32();
                                break;
                            }
                        case 4: {
                                message.nativeFlowInfo = $root.WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Button message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.ButtonsMessage.Button
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.ButtonsMessage.Button} Button
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Button.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Button message.
                 * @function verify
                 * @memberof WAE2E.Message.ButtonsMessage.Button
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Button.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.buttonID != null && message.hasOwnProperty("buttonID"))
                        if (!$util.isString(message.buttonID))
                            return "buttonID: string expected";
                    if (message.buttonText != null && message.hasOwnProperty("buttonText")) {
                        var error = $root.WAE2E.Message.ButtonsMessage.Button.ButtonText.verify(message.buttonText);
                        if (error)
                            return "buttonText." + error;
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.nativeFlowInfo != null && message.hasOwnProperty("nativeFlowInfo")) {
                        var error = $root.WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo.verify(message.nativeFlowInfo);
                        if (error)
                            return "nativeFlowInfo." + error;
                    }
                    return null;
                };

                /**
                 * Creates a Button message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.ButtonsMessage.Button
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.ButtonsMessage.Button} Button
                 */
                Button.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.ButtonsMessage.Button)
                        return object;
                    var message = new $root.WAE2E.Message.ButtonsMessage.Button();
                    if (object.buttonID != null)
                        message.buttonID = String(object.buttonID);
                    if (object.buttonText != null) {
                        if (typeof object.buttonText !== "object")
                            throw TypeError(".WAE2E.Message.ButtonsMessage.Button.buttonText: object expected");
                        message.buttonText = $root.WAE2E.Message.ButtonsMessage.Button.ButtonText.fromObject(object.buttonText);
                    }
                    switch (object.type) {
                    default:
                        if (typeof object.type === "number") {
                            message.type = object.type;
                            break;
                        }
                        break;
                    case "UNKNOWN":
                    case 0:
                        message.type = 0;
                        break;
                    case "RESPONSE":
                    case 1:
                        message.type = 1;
                        break;
                    case "NATIVE_FLOW":
                    case 2:
                        message.type = 2;
                        break;
                    }
                    if (object.nativeFlowInfo != null) {
                        if (typeof object.nativeFlowInfo !== "object")
                            throw TypeError(".WAE2E.Message.ButtonsMessage.Button.nativeFlowInfo: object expected");
                        message.nativeFlowInfo = $root.WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo.fromObject(object.nativeFlowInfo);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Button message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.ButtonsMessage.Button
                 * @static
                 * @param {WAE2E.Message.ButtonsMessage.Button} message Button
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Button.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.buttonID = "";
                        object.buttonText = null;
                        object.type = options.enums === String ? "UNKNOWN" : 0;
                        object.nativeFlowInfo = null;
                    }
                    if (message.buttonID != null && message.hasOwnProperty("buttonID"))
                        object.buttonID = message.buttonID;
                    if (message.buttonText != null && message.hasOwnProperty("buttonText"))
                        object.buttonText = $root.WAE2E.Message.ButtonsMessage.Button.ButtonText.toObject(message.buttonText, options);
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.WAE2E.Message.ButtonsMessage.Button.Type[message.type] === undefined ? message.type : $root.WAE2E.Message.ButtonsMessage.Button.Type[message.type] : message.type;
                    if (message.nativeFlowInfo != null && message.hasOwnProperty("nativeFlowInfo"))
                        object.nativeFlowInfo = $root.WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo.toObject(message.nativeFlowInfo, options);
                    return object;
                };

                /**
                 * Converts this Button to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.ButtonsMessage.Button
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Button.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Button
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.ButtonsMessage.Button
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Button.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.ButtonsMessage.Button";
                };

                /**
                 * Type enum.
                 * @name WAE2E.Message.ButtonsMessage.Button.Type
                 * @enum {number}
                 * @property {number} UNKNOWN=0 UNKNOWN value
                 * @property {number} RESPONSE=1 RESPONSE value
                 * @property {number} NATIVE_FLOW=2 NATIVE_FLOW value
                 */
                Button.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "UNKNOWN"] = 0;
                    values[valuesById[1] = "RESPONSE"] = 1;
                    values[valuesById[2] = "NATIVE_FLOW"] = 2;
                    return values;
                })();

                Button.NativeFlowInfo = (function() {

                    /**
                     * Properties of a NativeFlowInfo.
                     * @memberof WAE2E.Message.ButtonsMessage.Button
                     * @interface INativeFlowInfo
                     * @property {string|null} [name] NativeFlowInfo name
                     * @property {string|null} [paramsJSON] NativeFlowInfo paramsJSON
                     */

                    /**
                     * Constructs a new NativeFlowInfo.
                     * @memberof WAE2E.Message.ButtonsMessage.Button
                     * @classdesc Represents a NativeFlowInfo.
                     * @implements INativeFlowInfo
                     * @constructor
                     * @param {WAE2E.Message.ButtonsMessage.Button.INativeFlowInfo=} [properties] Properties to set
                     */
                    function NativeFlowInfo(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * NativeFlowInfo name.
                     * @member {string} name
                     * @memberof WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo
                     * @instance
                     */
                    NativeFlowInfo.prototype.name = "";

                    /**
                     * NativeFlowInfo paramsJSON.
                     * @member {string} paramsJSON
                     * @memberof WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo
                     * @instance
                     */
                    NativeFlowInfo.prototype.paramsJSON = "";

                    /**
                     * Creates a new NativeFlowInfo instance using the specified properties.
                     * @function create
                     * @memberof WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo
                     * @static
                     * @param {WAE2E.Message.ButtonsMessage.Button.INativeFlowInfo=} [properties] Properties to set
                     * @returns {WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo} NativeFlowInfo instance
                     */
                    NativeFlowInfo.create = function create(properties) {
                        return new NativeFlowInfo(properties);
                    };

                    /**
                     * Encodes the specified NativeFlowInfo message. Does not implicitly {@link WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo.verify|verify} messages.
                     * @function encode
                     * @memberof WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo
                     * @static
                     * @param {WAE2E.Message.ButtonsMessage.Button.INativeFlowInfo} message NativeFlowInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NativeFlowInfo.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.paramsJSON != null && Object.hasOwnProperty.call(message, "paramsJSON"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.paramsJSON);
                        return writer;
                    };

                    /**
                     * Encodes the specified NativeFlowInfo message, length delimited. Does not implicitly {@link WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo
                     * @static
                     * @param {WAE2E.Message.ButtonsMessage.Button.INativeFlowInfo} message NativeFlowInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NativeFlowInfo.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a NativeFlowInfo message from the specified reader or buffer.
                     * @function decode
                     * @memberof WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo} NativeFlowInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NativeFlowInfo.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.paramsJSON = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a NativeFlowInfo message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo} NativeFlowInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NativeFlowInfo.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a NativeFlowInfo message.
                     * @function verify
                     * @memberof WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NativeFlowInfo.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.paramsJSON != null && message.hasOwnProperty("paramsJSON"))
                            if (!$util.isString(message.paramsJSON))
                                return "paramsJSON: string expected";
                        return null;
                    };

                    /**
                     * Creates a NativeFlowInfo message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo} NativeFlowInfo
                     */
                    NativeFlowInfo.fromObject = function fromObject(object) {
                        if (object instanceof $root.WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo)
                            return object;
                        var message = new $root.WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.paramsJSON != null)
                            message.paramsJSON = String(object.paramsJSON);
                        return message;
                    };

                    /**
                     * Creates a plain object from a NativeFlowInfo message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo
                     * @static
                     * @param {WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo} message NativeFlowInfo
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NativeFlowInfo.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.paramsJSON = "";
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.paramsJSON != null && message.hasOwnProperty("paramsJSON"))
                            object.paramsJSON = message.paramsJSON;
                        return object;
                    };

                    /**
                     * Converts this NativeFlowInfo to JSON.
                     * @function toJSON
                     * @memberof WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NativeFlowInfo.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Gets the default type url for NativeFlowInfo
                     * @function getTypeUrl
                     * @memberof WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    NativeFlowInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/WAE2E.Message.ButtonsMessage.Button.NativeFlowInfo";
                    };

                    return NativeFlowInfo;
                })();

                Button.ButtonText = (function() {

                    /**
                     * Properties of a ButtonText.
                     * @memberof WAE2E.Message.ButtonsMessage.Button
                     * @interface IButtonText
                     * @property {string|null} [displayText] ButtonText displayText
                     */

                    /**
                     * Constructs a new ButtonText.
                     * @memberof WAE2E.Message.ButtonsMessage.Button
                     * @classdesc Represents a ButtonText.
                     * @implements IButtonText
                     * @constructor
                     * @param {WAE2E.Message.ButtonsMessage.Button.IButtonText=} [properties] Properties to set
                     */
                    function ButtonText(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ButtonText displayText.
                     * @member {string} displayText
                     * @memberof WAE2E.Message.ButtonsMessage.Button.ButtonText
                     * @instance
                     */
                    ButtonText.prototype.displayText = "";

                    /**
                     * Creates a new ButtonText instance using the specified properties.
                     * @function create
                     * @memberof WAE2E.Message.ButtonsMessage.Button.ButtonText
                     * @static
                     * @param {WAE2E.Message.ButtonsMessage.Button.IButtonText=} [properties] Properties to set
                     * @returns {WAE2E.Message.ButtonsMessage.Button.ButtonText} ButtonText instance
                     */
                    ButtonText.create = function create(properties) {
                        return new ButtonText(properties);
                    };

                    /**
                     * Encodes the specified ButtonText message. Does not implicitly {@link WAE2E.Message.ButtonsMessage.Button.ButtonText.verify|verify} messages.
                     * @function encode
                     * @memberof WAE2E.Message.ButtonsMessage.Button.ButtonText
                     * @static
                     * @param {WAE2E.Message.ButtonsMessage.Button.IButtonText} message ButtonText message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ButtonText.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.displayText != null && Object.hasOwnProperty.call(message, "displayText"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.displayText);
                        return writer;
                    };

                    /**
                     * Encodes the specified ButtonText message, length delimited. Does not implicitly {@link WAE2E.Message.ButtonsMessage.Button.ButtonText.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof WAE2E.Message.ButtonsMessage.Button.ButtonText
                     * @static
                     * @param {WAE2E.Message.ButtonsMessage.Button.IButtonText} message ButtonText message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ButtonText.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ButtonText message from the specified reader or buffer.
                     * @function decode
                     * @memberof WAE2E.Message.ButtonsMessage.Button.ButtonText
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {WAE2E.Message.ButtonsMessage.Button.ButtonText} ButtonText
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ButtonText.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ButtonsMessage.Button.ButtonText();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.displayText = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ButtonText message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof WAE2E.Message.ButtonsMessage.Button.ButtonText
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {WAE2E.Message.ButtonsMessage.Button.ButtonText} ButtonText
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ButtonText.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ButtonText message.
                     * @function verify
                     * @memberof WAE2E.Message.ButtonsMessage.Button.ButtonText
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ButtonText.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.displayText != null && message.hasOwnProperty("displayText"))
                            if (!$util.isString(message.displayText))
                                return "displayText: string expected";
                        return null;
                    };

                    /**
                     * Creates a ButtonText message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof WAE2E.Message.ButtonsMessage.Button.ButtonText
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {WAE2E.Message.ButtonsMessage.Button.ButtonText} ButtonText
                     */
                    ButtonText.fromObject = function fromObject(object) {
                        if (object instanceof $root.WAE2E.Message.ButtonsMessage.Button.ButtonText)
                            return object;
                        var message = new $root.WAE2E.Message.ButtonsMessage.Button.ButtonText();
                        if (object.displayText != null)
                            message.displayText = String(object.displayText);
                        return message;
                    };

                    /**
                     * Creates a plain object from a ButtonText message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof WAE2E.Message.ButtonsMessage.Button.ButtonText
                     * @static
                     * @param {WAE2E.Message.ButtonsMessage.Button.ButtonText} message ButtonText
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ButtonText.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.displayText = "";
                        if (message.displayText != null && message.hasOwnProperty("displayText"))
                            object.displayText = message.displayText;
                        return object;
                    };

                    /**
                     * Converts this ButtonText to JSON.
                     * @function toJSON
                     * @memberof WAE2E.Message.ButtonsMessage.Button.ButtonText
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ButtonText.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Gets the default type url for ButtonText
                     * @function getTypeUrl
                     * @memberof WAE2E.Message.ButtonsMessage.Button.ButtonText
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ButtonText.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/WAE2E.Message.ButtonsMessage.Button.ButtonText";
                    };

                    return ButtonText;
                })();

                return Button;
            })();

            return ButtonsMessage;
        })();

        Message.SecretEncryptedMessage = (function() {

            /**
             * Properties of a SecretEncryptedMessage.
             * @memberof WAE2E.Message
             * @interface ISecretEncryptedMessage
             * @property {WAProtocol.IMessageKey|null} [targetMessageKey] SecretEncryptedMessage targetMessageKey
             * @property {Uint8Array|null} [encPayload] SecretEncryptedMessage encPayload
             * @property {Uint8Array|null} [encIV] SecretEncryptedMessage encIV
             * @property {WAE2E.Message.SecretEncryptedMessage.SecretEncType|null} [secretEncType] SecretEncryptedMessage secretEncType
             */

            /**
             * Constructs a new SecretEncryptedMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a SecretEncryptedMessage.
             * @implements ISecretEncryptedMessage
             * @constructor
             * @param {WAE2E.Message.ISecretEncryptedMessage=} [properties] Properties to set
             */
            function SecretEncryptedMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SecretEncryptedMessage targetMessageKey.
             * @member {WAProtocol.IMessageKey|null|undefined} targetMessageKey
             * @memberof WAE2E.Message.SecretEncryptedMessage
             * @instance
             */
            SecretEncryptedMessage.prototype.targetMessageKey = null;

            /**
             * SecretEncryptedMessage encPayload.
             * @member {Uint8Array} encPayload
             * @memberof WAE2E.Message.SecretEncryptedMessage
             * @instance
             */
            SecretEncryptedMessage.prototype.encPayload = $util.newBuffer([]);

            /**
             * SecretEncryptedMessage encIV.
             * @member {Uint8Array} encIV
             * @memberof WAE2E.Message.SecretEncryptedMessage
             * @instance
             */
            SecretEncryptedMessage.prototype.encIV = $util.newBuffer([]);

            /**
             * SecretEncryptedMessage secretEncType.
             * @member {WAE2E.Message.SecretEncryptedMessage.SecretEncType} secretEncType
             * @memberof WAE2E.Message.SecretEncryptedMessage
             * @instance
             */
            SecretEncryptedMessage.prototype.secretEncType = 0;

            /**
             * Creates a new SecretEncryptedMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.SecretEncryptedMessage
             * @static
             * @param {WAE2E.Message.ISecretEncryptedMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.SecretEncryptedMessage} SecretEncryptedMessage instance
             */
            SecretEncryptedMessage.create = function create(properties) {
                return new SecretEncryptedMessage(properties);
            };

            /**
             * Encodes the specified SecretEncryptedMessage message. Does not implicitly {@link WAE2E.Message.SecretEncryptedMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.SecretEncryptedMessage
             * @static
             * @param {WAE2E.Message.ISecretEncryptedMessage} message SecretEncryptedMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SecretEncryptedMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.targetMessageKey != null && Object.hasOwnProperty.call(message, "targetMessageKey"))
                    $root.WAProtocol.MessageKey.encode(message.targetMessageKey, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.encPayload != null && Object.hasOwnProperty.call(message, "encPayload"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.encPayload);
                if (message.encIV != null && Object.hasOwnProperty.call(message, "encIV"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.encIV);
                if (message.secretEncType != null && Object.hasOwnProperty.call(message, "secretEncType"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.secretEncType);
                return writer;
            };

            /**
             * Encodes the specified SecretEncryptedMessage message, length delimited. Does not implicitly {@link WAE2E.Message.SecretEncryptedMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.SecretEncryptedMessage
             * @static
             * @param {WAE2E.Message.ISecretEncryptedMessage} message SecretEncryptedMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SecretEncryptedMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SecretEncryptedMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.SecretEncryptedMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.SecretEncryptedMessage} SecretEncryptedMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SecretEncryptedMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.SecretEncryptedMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.targetMessageKey = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.encPayload = reader.bytes();
                            break;
                        }
                    case 3: {
                            message.encIV = reader.bytes();
                            break;
                        }
                    case 4: {
                            message.secretEncType = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SecretEncryptedMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.SecretEncryptedMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.SecretEncryptedMessage} SecretEncryptedMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SecretEncryptedMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SecretEncryptedMessage message.
             * @function verify
             * @memberof WAE2E.Message.SecretEncryptedMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SecretEncryptedMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.targetMessageKey != null && message.hasOwnProperty("targetMessageKey")) {
                    var error = $root.WAProtocol.MessageKey.verify(message.targetMessageKey);
                    if (error)
                        return "targetMessageKey." + error;
                }
                if (message.encPayload != null && message.hasOwnProperty("encPayload"))
                    if (!(message.encPayload && typeof message.encPayload.length === "number" || $util.isString(message.encPayload)))
                        return "encPayload: buffer expected";
                if (message.encIV != null && message.hasOwnProperty("encIV"))
                    if (!(message.encIV && typeof message.encIV.length === "number" || $util.isString(message.encIV)))
                        return "encIV: buffer expected";
                if (message.secretEncType != null && message.hasOwnProperty("secretEncType"))
                    switch (message.secretEncType) {
                    default:
                        return "secretEncType: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                return null;
            };

            /**
             * Creates a SecretEncryptedMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.SecretEncryptedMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.SecretEncryptedMessage} SecretEncryptedMessage
             */
            SecretEncryptedMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.SecretEncryptedMessage)
                    return object;
                var message = new $root.WAE2E.Message.SecretEncryptedMessage();
                if (object.targetMessageKey != null) {
                    if (typeof object.targetMessageKey !== "object")
                        throw TypeError(".WAE2E.Message.SecretEncryptedMessage.targetMessageKey: object expected");
                    message.targetMessageKey = $root.WAProtocol.MessageKey.fromObject(object.targetMessageKey);
                }
                if (object.encPayload != null)
                    if (typeof object.encPayload === "string")
                        $util.base64.decode(object.encPayload, message.encPayload = $util.newBuffer($util.base64.length(object.encPayload)), 0);
                    else if (object.encPayload.length >= 0)
                        message.encPayload = object.encPayload;
                if (object.encIV != null)
                    if (typeof object.encIV === "string")
                        $util.base64.decode(object.encIV, message.encIV = $util.newBuffer($util.base64.length(object.encIV)), 0);
                    else if (object.encIV.length >= 0)
                        message.encIV = object.encIV;
                switch (object.secretEncType) {
                default:
                    if (typeof object.secretEncType === "number") {
                        message.secretEncType = object.secretEncType;
                        break;
                    }
                    break;
                case "UNKNOWN":
                case 0:
                    message.secretEncType = 0;
                    break;
                case "EVENT_EDIT":
                case 1:
                    message.secretEncType = 1;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a SecretEncryptedMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.SecretEncryptedMessage
             * @static
             * @param {WAE2E.Message.SecretEncryptedMessage} message SecretEncryptedMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SecretEncryptedMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.targetMessageKey = null;
                    if (options.bytes === String)
                        object.encPayload = "";
                    else {
                        object.encPayload = [];
                        if (options.bytes !== Array)
                            object.encPayload = $util.newBuffer(object.encPayload);
                    }
                    if (options.bytes === String)
                        object.encIV = "";
                    else {
                        object.encIV = [];
                        if (options.bytes !== Array)
                            object.encIV = $util.newBuffer(object.encIV);
                    }
                    object.secretEncType = options.enums === String ? "UNKNOWN" : 0;
                }
                if (message.targetMessageKey != null && message.hasOwnProperty("targetMessageKey"))
                    object.targetMessageKey = $root.WAProtocol.MessageKey.toObject(message.targetMessageKey, options);
                if (message.encPayload != null && message.hasOwnProperty("encPayload"))
                    object.encPayload = options.bytes === String ? $util.base64.encode(message.encPayload, 0, message.encPayload.length) : options.bytes === Array ? Array.prototype.slice.call(message.encPayload) : message.encPayload;
                if (message.encIV != null && message.hasOwnProperty("encIV"))
                    object.encIV = options.bytes === String ? $util.base64.encode(message.encIV, 0, message.encIV.length) : options.bytes === Array ? Array.prototype.slice.call(message.encIV) : message.encIV;
                if (message.secretEncType != null && message.hasOwnProperty("secretEncType"))
                    object.secretEncType = options.enums === String ? $root.WAE2E.Message.SecretEncryptedMessage.SecretEncType[message.secretEncType] === undefined ? message.secretEncType : $root.WAE2E.Message.SecretEncryptedMessage.SecretEncType[message.secretEncType] : message.secretEncType;
                return object;
            };

            /**
             * Converts this SecretEncryptedMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.SecretEncryptedMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SecretEncryptedMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SecretEncryptedMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.SecretEncryptedMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SecretEncryptedMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.SecretEncryptedMessage";
            };

            /**
             * SecretEncType enum.
             * @name WAE2E.Message.SecretEncryptedMessage.SecretEncType
             * @enum {number}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} EVENT_EDIT=1 EVENT_EDIT value
             */
            SecretEncryptedMessage.SecretEncType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "EVENT_EDIT"] = 1;
                return values;
            })();

            return SecretEncryptedMessage;
        })();

        Message.GroupInviteMessage = (function() {

            /**
             * Properties of a GroupInviteMessage.
             * @memberof WAE2E.Message
             * @interface IGroupInviteMessage
             * @property {string|null} [groupJID] GroupInviteMessage groupJID
             * @property {string|null} [inviteCode] GroupInviteMessage inviteCode
             * @property {number|Long|null} [inviteExpiration] GroupInviteMessage inviteExpiration
             * @property {string|null} [groupName] GroupInviteMessage groupName
             * @property {Uint8Array|null} [JPEGThumbnail] GroupInviteMessage JPEGThumbnail
             * @property {string|null} [caption] GroupInviteMessage caption
             * @property {WAE2E.IContextInfo|null} [contextInfo] GroupInviteMessage contextInfo
             * @property {WAE2E.Message.GroupInviteMessage.GroupType|null} [groupType] GroupInviteMessage groupType
             */

            /**
             * Constructs a new GroupInviteMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a GroupInviteMessage.
             * @implements IGroupInviteMessage
             * @constructor
             * @param {WAE2E.Message.IGroupInviteMessage=} [properties] Properties to set
             */
            function GroupInviteMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GroupInviteMessage groupJID.
             * @member {string} groupJID
             * @memberof WAE2E.Message.GroupInviteMessage
             * @instance
             */
            GroupInviteMessage.prototype.groupJID = "";

            /**
             * GroupInviteMessage inviteCode.
             * @member {string} inviteCode
             * @memberof WAE2E.Message.GroupInviteMessage
             * @instance
             */
            GroupInviteMessage.prototype.inviteCode = "";

            /**
             * GroupInviteMessage inviteExpiration.
             * @member {number|Long} inviteExpiration
             * @memberof WAE2E.Message.GroupInviteMessage
             * @instance
             */
            GroupInviteMessage.prototype.inviteExpiration = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * GroupInviteMessage groupName.
             * @member {string} groupName
             * @memberof WAE2E.Message.GroupInviteMessage
             * @instance
             */
            GroupInviteMessage.prototype.groupName = "";

            /**
             * GroupInviteMessage JPEGThumbnail.
             * @member {Uint8Array} JPEGThumbnail
             * @memberof WAE2E.Message.GroupInviteMessage
             * @instance
             */
            GroupInviteMessage.prototype.JPEGThumbnail = $util.newBuffer([]);

            /**
             * GroupInviteMessage caption.
             * @member {string} caption
             * @memberof WAE2E.Message.GroupInviteMessage
             * @instance
             */
            GroupInviteMessage.prototype.caption = "";

            /**
             * GroupInviteMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.GroupInviteMessage
             * @instance
             */
            GroupInviteMessage.prototype.contextInfo = null;

            /**
             * GroupInviteMessage groupType.
             * @member {WAE2E.Message.GroupInviteMessage.GroupType} groupType
             * @memberof WAE2E.Message.GroupInviteMessage
             * @instance
             */
            GroupInviteMessage.prototype.groupType = 0;

            /**
             * Creates a new GroupInviteMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.GroupInviteMessage
             * @static
             * @param {WAE2E.Message.IGroupInviteMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.GroupInviteMessage} GroupInviteMessage instance
             */
            GroupInviteMessage.create = function create(properties) {
                return new GroupInviteMessage(properties);
            };

            /**
             * Encodes the specified GroupInviteMessage message. Does not implicitly {@link WAE2E.Message.GroupInviteMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.GroupInviteMessage
             * @static
             * @param {WAE2E.Message.IGroupInviteMessage} message GroupInviteMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GroupInviteMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.groupJID != null && Object.hasOwnProperty.call(message, "groupJID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupJID);
                if (message.inviteCode != null && Object.hasOwnProperty.call(message, "inviteCode"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.inviteCode);
                if (message.inviteExpiration != null && Object.hasOwnProperty.call(message, "inviteExpiration"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.inviteExpiration);
                if (message.groupName != null && Object.hasOwnProperty.call(message, "groupName"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.groupName);
                if (message.JPEGThumbnail != null && Object.hasOwnProperty.call(message, "JPEGThumbnail"))
                    writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.JPEGThumbnail);
                if (message.caption != null && Object.hasOwnProperty.call(message, "caption"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.caption);
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.groupType != null && Object.hasOwnProperty.call(message, "groupType"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.groupType);
                return writer;
            };

            /**
             * Encodes the specified GroupInviteMessage message, length delimited. Does not implicitly {@link WAE2E.Message.GroupInviteMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.GroupInviteMessage
             * @static
             * @param {WAE2E.Message.IGroupInviteMessage} message GroupInviteMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GroupInviteMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GroupInviteMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.GroupInviteMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.GroupInviteMessage} GroupInviteMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GroupInviteMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.GroupInviteMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.groupJID = reader.string();
                            break;
                        }
                    case 2: {
                            message.inviteCode = reader.string();
                            break;
                        }
                    case 3: {
                            message.inviteExpiration = reader.int64();
                            break;
                        }
                    case 4: {
                            message.groupName = reader.string();
                            break;
                        }
                    case 5: {
                            message.JPEGThumbnail = reader.bytes();
                            break;
                        }
                    case 6: {
                            message.caption = reader.string();
                            break;
                        }
                    case 7: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    case 8: {
                            message.groupType = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GroupInviteMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.GroupInviteMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.GroupInviteMessage} GroupInviteMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GroupInviteMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GroupInviteMessage message.
             * @function verify
             * @memberof WAE2E.Message.GroupInviteMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GroupInviteMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.groupJID != null && message.hasOwnProperty("groupJID"))
                    if (!$util.isString(message.groupJID))
                        return "groupJID: string expected";
                if (message.inviteCode != null && message.hasOwnProperty("inviteCode"))
                    if (!$util.isString(message.inviteCode))
                        return "inviteCode: string expected";
                if (message.inviteExpiration != null && message.hasOwnProperty("inviteExpiration"))
                    if (!$util.isInteger(message.inviteExpiration) && !(message.inviteExpiration && $util.isInteger(message.inviteExpiration.low) && $util.isInteger(message.inviteExpiration.high)))
                        return "inviteExpiration: integer|Long expected";
                if (message.groupName != null && message.hasOwnProperty("groupName"))
                    if (!$util.isString(message.groupName))
                        return "groupName: string expected";
                if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail"))
                    if (!(message.JPEGThumbnail && typeof message.JPEGThumbnail.length === "number" || $util.isString(message.JPEGThumbnail)))
                        return "JPEGThumbnail: buffer expected";
                if (message.caption != null && message.hasOwnProperty("caption"))
                    if (!$util.isString(message.caption))
                        return "caption: string expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                if (message.groupType != null && message.hasOwnProperty("groupType"))
                    switch (message.groupType) {
                    default:
                        return "groupType: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                return null;
            };

            /**
             * Creates a GroupInviteMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.GroupInviteMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.GroupInviteMessage} GroupInviteMessage
             */
            GroupInviteMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.GroupInviteMessage)
                    return object;
                var message = new $root.WAE2E.Message.GroupInviteMessage();
                if (object.groupJID != null)
                    message.groupJID = String(object.groupJID);
                if (object.inviteCode != null)
                    message.inviteCode = String(object.inviteCode);
                if (object.inviteExpiration != null)
                    if ($util.Long)
                        (message.inviteExpiration = $util.Long.fromValue(object.inviteExpiration)).unsigned = false;
                    else if (typeof object.inviteExpiration === "string")
                        message.inviteExpiration = parseInt(object.inviteExpiration, 10);
                    else if (typeof object.inviteExpiration === "number")
                        message.inviteExpiration = object.inviteExpiration;
                    else if (typeof object.inviteExpiration === "object")
                        message.inviteExpiration = new $util.LongBits(object.inviteExpiration.low >>> 0, object.inviteExpiration.high >>> 0).toNumber();
                if (object.groupName != null)
                    message.groupName = String(object.groupName);
                if (object.JPEGThumbnail != null)
                    if (typeof object.JPEGThumbnail === "string")
                        $util.base64.decode(object.JPEGThumbnail, message.JPEGThumbnail = $util.newBuffer($util.base64.length(object.JPEGThumbnail)), 0);
                    else if (object.JPEGThumbnail.length >= 0)
                        message.JPEGThumbnail = object.JPEGThumbnail;
                if (object.caption != null)
                    message.caption = String(object.caption);
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.GroupInviteMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                switch (object.groupType) {
                default:
                    if (typeof object.groupType === "number") {
                        message.groupType = object.groupType;
                        break;
                    }
                    break;
                case "DEFAULT":
                case 0:
                    message.groupType = 0;
                    break;
                case "PARENT":
                case 1:
                    message.groupType = 1;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a GroupInviteMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.GroupInviteMessage
             * @static
             * @param {WAE2E.Message.GroupInviteMessage} message GroupInviteMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GroupInviteMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.groupJID = "";
                    object.inviteCode = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.inviteExpiration = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.inviteExpiration = options.longs === String ? "0" : 0;
                    object.groupName = "";
                    if (options.bytes === String)
                        object.JPEGThumbnail = "";
                    else {
                        object.JPEGThumbnail = [];
                        if (options.bytes !== Array)
                            object.JPEGThumbnail = $util.newBuffer(object.JPEGThumbnail);
                    }
                    object.caption = "";
                    object.contextInfo = null;
                    object.groupType = options.enums === String ? "DEFAULT" : 0;
                }
                if (message.groupJID != null && message.hasOwnProperty("groupJID"))
                    object.groupJID = message.groupJID;
                if (message.inviteCode != null && message.hasOwnProperty("inviteCode"))
                    object.inviteCode = message.inviteCode;
                if (message.inviteExpiration != null && message.hasOwnProperty("inviteExpiration"))
                    if (typeof message.inviteExpiration === "number")
                        object.inviteExpiration = options.longs === String ? String(message.inviteExpiration) : message.inviteExpiration;
                    else
                        object.inviteExpiration = options.longs === String ? $util.Long.prototype.toString.call(message.inviteExpiration) : options.longs === Number ? new $util.LongBits(message.inviteExpiration.low >>> 0, message.inviteExpiration.high >>> 0).toNumber() : message.inviteExpiration;
                if (message.groupName != null && message.hasOwnProperty("groupName"))
                    object.groupName = message.groupName;
                if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail"))
                    object.JPEGThumbnail = options.bytes === String ? $util.base64.encode(message.JPEGThumbnail, 0, message.JPEGThumbnail.length) : options.bytes === Array ? Array.prototype.slice.call(message.JPEGThumbnail) : message.JPEGThumbnail;
                if (message.caption != null && message.hasOwnProperty("caption"))
                    object.caption = message.caption;
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                if (message.groupType != null && message.hasOwnProperty("groupType"))
                    object.groupType = options.enums === String ? $root.WAE2E.Message.GroupInviteMessage.GroupType[message.groupType] === undefined ? message.groupType : $root.WAE2E.Message.GroupInviteMessage.GroupType[message.groupType] : message.groupType;
                return object;
            };

            /**
             * Converts this GroupInviteMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.GroupInviteMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GroupInviteMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GroupInviteMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.GroupInviteMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GroupInviteMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.GroupInviteMessage";
            };

            /**
             * GroupType enum.
             * @name WAE2E.Message.GroupInviteMessage.GroupType
             * @enum {number}
             * @property {number} DEFAULT=0 DEFAULT value
             * @property {number} PARENT=1 PARENT value
             */
            GroupInviteMessage.GroupType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DEFAULT"] = 0;
                values[valuesById[1] = "PARENT"] = 1;
                return values;
            })();

            return GroupInviteMessage;
        })();

        Message.InteractiveResponseMessage = (function() {

            /**
             * Properties of an InteractiveResponseMessage.
             * @memberof WAE2E.Message
             * @interface IInteractiveResponseMessage
             * @property {WAE2E.Message.InteractiveResponseMessage.INativeFlowResponseMessage|null} [nativeFlowResponseMessage] InteractiveResponseMessage nativeFlowResponseMessage
             * @property {WAE2E.Message.InteractiveResponseMessage.IBody|null} [body] InteractiveResponseMessage body
             * @property {WAE2E.IContextInfo|null} [contextInfo] InteractiveResponseMessage contextInfo
             */

            /**
             * Constructs a new InteractiveResponseMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents an InteractiveResponseMessage.
             * @implements IInteractiveResponseMessage
             * @constructor
             * @param {WAE2E.Message.IInteractiveResponseMessage=} [properties] Properties to set
             */
            function InteractiveResponseMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * InteractiveResponseMessage nativeFlowResponseMessage.
             * @member {WAE2E.Message.InteractiveResponseMessage.INativeFlowResponseMessage|null|undefined} nativeFlowResponseMessage
             * @memberof WAE2E.Message.InteractiveResponseMessage
             * @instance
             */
            InteractiveResponseMessage.prototype.nativeFlowResponseMessage = null;

            /**
             * InteractiveResponseMessage body.
             * @member {WAE2E.Message.InteractiveResponseMessage.IBody|null|undefined} body
             * @memberof WAE2E.Message.InteractiveResponseMessage
             * @instance
             */
            InteractiveResponseMessage.prototype.body = null;

            /**
             * InteractiveResponseMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.InteractiveResponseMessage
             * @instance
             */
            InteractiveResponseMessage.prototype.contextInfo = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * InteractiveResponseMessage interactiveResponseMessage.
             * @member {"nativeFlowResponseMessage"|undefined} interactiveResponseMessage
             * @memberof WAE2E.Message.InteractiveResponseMessage
             * @instance
             */
            Object.defineProperty(InteractiveResponseMessage.prototype, "interactiveResponseMessage", {
                get: $util.oneOfGetter($oneOfFields = ["nativeFlowResponseMessage"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new InteractiveResponseMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.InteractiveResponseMessage
             * @static
             * @param {WAE2E.Message.IInteractiveResponseMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.InteractiveResponseMessage} InteractiveResponseMessage instance
             */
            InteractiveResponseMessage.create = function create(properties) {
                return new InteractiveResponseMessage(properties);
            };

            /**
             * Encodes the specified InteractiveResponseMessage message. Does not implicitly {@link WAE2E.Message.InteractiveResponseMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.InteractiveResponseMessage
             * @static
             * @param {WAE2E.Message.IInteractiveResponseMessage} message InteractiveResponseMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InteractiveResponseMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                    $root.WAE2E.Message.InteractiveResponseMessage.Body.encode(message.body, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.nativeFlowResponseMessage != null && Object.hasOwnProperty.call(message, "nativeFlowResponseMessage"))
                    $root.WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage.encode(message.nativeFlowResponseMessage, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified InteractiveResponseMessage message, length delimited. Does not implicitly {@link WAE2E.Message.InteractiveResponseMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.InteractiveResponseMessage
             * @static
             * @param {WAE2E.Message.IInteractiveResponseMessage} message InteractiveResponseMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InteractiveResponseMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an InteractiveResponseMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.InteractiveResponseMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.InteractiveResponseMessage} InteractiveResponseMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InteractiveResponseMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.InteractiveResponseMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2: {
                            message.nativeFlowResponseMessage = $root.WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage.decode(reader, reader.uint32());
                            break;
                        }
                    case 1: {
                            message.body = $root.WAE2E.Message.InteractiveResponseMessage.Body.decode(reader, reader.uint32());
                            break;
                        }
                    case 15: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an InteractiveResponseMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.InteractiveResponseMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.InteractiveResponseMessage} InteractiveResponseMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InteractiveResponseMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an InteractiveResponseMessage message.
             * @function verify
             * @memberof WAE2E.Message.InteractiveResponseMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            InteractiveResponseMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.nativeFlowResponseMessage != null && message.hasOwnProperty("nativeFlowResponseMessage")) {
                    properties.interactiveResponseMessage = 1;
                    {
                        var error = $root.WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage.verify(message.nativeFlowResponseMessage);
                        if (error)
                            return "nativeFlowResponseMessage." + error;
                    }
                }
                if (message.body != null && message.hasOwnProperty("body")) {
                    var error = $root.WAE2E.Message.InteractiveResponseMessage.Body.verify(message.body);
                    if (error)
                        return "body." + error;
                }
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                return null;
            };

            /**
             * Creates an InteractiveResponseMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.InteractiveResponseMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.InteractiveResponseMessage} InteractiveResponseMessage
             */
            InteractiveResponseMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.InteractiveResponseMessage)
                    return object;
                var message = new $root.WAE2E.Message.InteractiveResponseMessage();
                if (object.nativeFlowResponseMessage != null) {
                    if (typeof object.nativeFlowResponseMessage !== "object")
                        throw TypeError(".WAE2E.Message.InteractiveResponseMessage.nativeFlowResponseMessage: object expected");
                    message.nativeFlowResponseMessage = $root.WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage.fromObject(object.nativeFlowResponseMessage);
                }
                if (object.body != null) {
                    if (typeof object.body !== "object")
                        throw TypeError(".WAE2E.Message.InteractiveResponseMessage.body: object expected");
                    message.body = $root.WAE2E.Message.InteractiveResponseMessage.Body.fromObject(object.body);
                }
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.InteractiveResponseMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                return message;
            };

            /**
             * Creates a plain object from an InteractiveResponseMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.InteractiveResponseMessage
             * @static
             * @param {WAE2E.Message.InteractiveResponseMessage} message InteractiveResponseMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            InteractiveResponseMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.body = null;
                    object.contextInfo = null;
                }
                if (message.body != null && message.hasOwnProperty("body"))
                    object.body = $root.WAE2E.Message.InteractiveResponseMessage.Body.toObject(message.body, options);
                if (message.nativeFlowResponseMessage != null && message.hasOwnProperty("nativeFlowResponseMessage")) {
                    object.nativeFlowResponseMessage = $root.WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage.toObject(message.nativeFlowResponseMessage, options);
                    if (options.oneofs)
                        object.interactiveResponseMessage = "nativeFlowResponseMessage";
                }
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                return object;
            };

            /**
             * Converts this InteractiveResponseMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.InteractiveResponseMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            InteractiveResponseMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for InteractiveResponseMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.InteractiveResponseMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            InteractiveResponseMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.InteractiveResponseMessage";
            };

            InteractiveResponseMessage.Body = (function() {

                /**
                 * Properties of a Body.
                 * @memberof WAE2E.Message.InteractiveResponseMessage
                 * @interface IBody
                 * @property {string|null} [text] Body text
                 * @property {WAE2E.Message.InteractiveResponseMessage.Body.Format|null} [format] Body format
                 */

                /**
                 * Constructs a new Body.
                 * @memberof WAE2E.Message.InteractiveResponseMessage
                 * @classdesc Represents a Body.
                 * @implements IBody
                 * @constructor
                 * @param {WAE2E.Message.InteractiveResponseMessage.IBody=} [properties] Properties to set
                 */
                function Body(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Body text.
                 * @member {string} text
                 * @memberof WAE2E.Message.InteractiveResponseMessage.Body
                 * @instance
                 */
                Body.prototype.text = "";

                /**
                 * Body format.
                 * @member {WAE2E.Message.InteractiveResponseMessage.Body.Format} format
                 * @memberof WAE2E.Message.InteractiveResponseMessage.Body
                 * @instance
                 */
                Body.prototype.format = 0;

                /**
                 * Creates a new Body instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.InteractiveResponseMessage.Body
                 * @static
                 * @param {WAE2E.Message.InteractiveResponseMessage.IBody=} [properties] Properties to set
                 * @returns {WAE2E.Message.InteractiveResponseMessage.Body} Body instance
                 */
                Body.create = function create(properties) {
                    return new Body(properties);
                };

                /**
                 * Encodes the specified Body message. Does not implicitly {@link WAE2E.Message.InteractiveResponseMessage.Body.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.InteractiveResponseMessage.Body
                 * @static
                 * @param {WAE2E.Message.InteractiveResponseMessage.IBody} message Body message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Body.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                    if (message.format != null && Object.hasOwnProperty.call(message, "format"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.format);
                    return writer;
                };

                /**
                 * Encodes the specified Body message, length delimited. Does not implicitly {@link WAE2E.Message.InteractiveResponseMessage.Body.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.InteractiveResponseMessage.Body
                 * @static
                 * @param {WAE2E.Message.InteractiveResponseMessage.IBody} message Body message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Body.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Body message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.InteractiveResponseMessage.Body
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.InteractiveResponseMessage.Body} Body
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Body.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.InteractiveResponseMessage.Body();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.text = reader.string();
                                break;
                            }
                        case 2: {
                                message.format = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Body message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.InteractiveResponseMessage.Body
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.InteractiveResponseMessage.Body} Body
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Body.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Body message.
                 * @function verify
                 * @memberof WAE2E.Message.InteractiveResponseMessage.Body
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Body.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.text != null && message.hasOwnProperty("text"))
                        if (!$util.isString(message.text))
                            return "text: string expected";
                    if (message.format != null && message.hasOwnProperty("format"))
                        switch (message.format) {
                        default:
                            return "format: enum value expected";
                        case 0:
                        case 1:
                            break;
                        }
                    return null;
                };

                /**
                 * Creates a Body message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.InteractiveResponseMessage.Body
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.InteractiveResponseMessage.Body} Body
                 */
                Body.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.InteractiveResponseMessage.Body)
                        return object;
                    var message = new $root.WAE2E.Message.InteractiveResponseMessage.Body();
                    if (object.text != null)
                        message.text = String(object.text);
                    switch (object.format) {
                    default:
                        if (typeof object.format === "number") {
                            message.format = object.format;
                            break;
                        }
                        break;
                    case "DEFAULT":
                    case 0:
                        message.format = 0;
                        break;
                    case "EXTENSIONS_1":
                    case 1:
                        message.format = 1;
                        break;
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Body message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.InteractiveResponseMessage.Body
                 * @static
                 * @param {WAE2E.Message.InteractiveResponseMessage.Body} message Body
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Body.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.text = "";
                        object.format = options.enums === String ? "DEFAULT" : 0;
                    }
                    if (message.text != null && message.hasOwnProperty("text"))
                        object.text = message.text;
                    if (message.format != null && message.hasOwnProperty("format"))
                        object.format = options.enums === String ? $root.WAE2E.Message.InteractiveResponseMessage.Body.Format[message.format] === undefined ? message.format : $root.WAE2E.Message.InteractiveResponseMessage.Body.Format[message.format] : message.format;
                    return object;
                };

                /**
                 * Converts this Body to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.InteractiveResponseMessage.Body
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Body.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Body
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.InteractiveResponseMessage.Body
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Body.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.InteractiveResponseMessage.Body";
                };

                /**
                 * Format enum.
                 * @name WAE2E.Message.InteractiveResponseMessage.Body.Format
                 * @enum {number}
                 * @property {number} DEFAULT=0 DEFAULT value
                 * @property {number} EXTENSIONS_1=1 EXTENSIONS_1 value
                 */
                Body.Format = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "DEFAULT"] = 0;
                    values[valuesById[1] = "EXTENSIONS_1"] = 1;
                    return values;
                })();

                return Body;
            })();

            InteractiveResponseMessage.NativeFlowResponseMessage = (function() {

                /**
                 * Properties of a NativeFlowResponseMessage.
                 * @memberof WAE2E.Message.InteractiveResponseMessage
                 * @interface INativeFlowResponseMessage
                 * @property {string|null} [name] NativeFlowResponseMessage name
                 * @property {string|null} [paramsJSON] NativeFlowResponseMessage paramsJSON
                 * @property {number|null} [version] NativeFlowResponseMessage version
                 */

                /**
                 * Constructs a new NativeFlowResponseMessage.
                 * @memberof WAE2E.Message.InteractiveResponseMessage
                 * @classdesc Represents a NativeFlowResponseMessage.
                 * @implements INativeFlowResponseMessage
                 * @constructor
                 * @param {WAE2E.Message.InteractiveResponseMessage.INativeFlowResponseMessage=} [properties] Properties to set
                 */
                function NativeFlowResponseMessage(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * NativeFlowResponseMessage name.
                 * @member {string} name
                 * @memberof WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage
                 * @instance
                 */
                NativeFlowResponseMessage.prototype.name = "";

                /**
                 * NativeFlowResponseMessage paramsJSON.
                 * @member {string} paramsJSON
                 * @memberof WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage
                 * @instance
                 */
                NativeFlowResponseMessage.prototype.paramsJSON = "";

                /**
                 * NativeFlowResponseMessage version.
                 * @member {number} version
                 * @memberof WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage
                 * @instance
                 */
                NativeFlowResponseMessage.prototype.version = 0;

                /**
                 * Creates a new NativeFlowResponseMessage instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage
                 * @static
                 * @param {WAE2E.Message.InteractiveResponseMessage.INativeFlowResponseMessage=} [properties] Properties to set
                 * @returns {WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage} NativeFlowResponseMessage instance
                 */
                NativeFlowResponseMessage.create = function create(properties) {
                    return new NativeFlowResponseMessage(properties);
                };

                /**
                 * Encodes the specified NativeFlowResponseMessage message. Does not implicitly {@link WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage
                 * @static
                 * @param {WAE2E.Message.InteractiveResponseMessage.INativeFlowResponseMessage} message NativeFlowResponseMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NativeFlowResponseMessage.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.paramsJSON != null && Object.hasOwnProperty.call(message, "paramsJSON"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.paramsJSON);
                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.version);
                    return writer;
                };

                /**
                 * Encodes the specified NativeFlowResponseMessage message, length delimited. Does not implicitly {@link WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage
                 * @static
                 * @param {WAE2E.Message.InteractiveResponseMessage.INativeFlowResponseMessage} message NativeFlowResponseMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NativeFlowResponseMessage.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a NativeFlowResponseMessage message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage} NativeFlowResponseMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NativeFlowResponseMessage.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.paramsJSON = reader.string();
                                break;
                            }
                        case 3: {
                                message.version = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a NativeFlowResponseMessage message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage} NativeFlowResponseMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NativeFlowResponseMessage.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a NativeFlowResponseMessage message.
                 * @function verify
                 * @memberof WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NativeFlowResponseMessage.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.paramsJSON != null && message.hasOwnProperty("paramsJSON"))
                        if (!$util.isString(message.paramsJSON))
                            return "paramsJSON: string expected";
                    if (message.version != null && message.hasOwnProperty("version"))
                        if (!$util.isInteger(message.version))
                            return "version: integer expected";
                    return null;
                };

                /**
                 * Creates a NativeFlowResponseMessage message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage} NativeFlowResponseMessage
                 */
                NativeFlowResponseMessage.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage)
                        return object;
                    var message = new $root.WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.paramsJSON != null)
                        message.paramsJSON = String(object.paramsJSON);
                    if (object.version != null)
                        message.version = object.version | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a NativeFlowResponseMessage message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage
                 * @static
                 * @param {WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage} message NativeFlowResponseMessage
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NativeFlowResponseMessage.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.paramsJSON = "";
                        object.version = 0;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.paramsJSON != null && message.hasOwnProperty("paramsJSON"))
                        object.paramsJSON = message.paramsJSON;
                    if (message.version != null && message.hasOwnProperty("version"))
                        object.version = message.version;
                    return object;
                };

                /**
                 * Converts this NativeFlowResponseMessage to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NativeFlowResponseMessage.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for NativeFlowResponseMessage
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                NativeFlowResponseMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.InteractiveResponseMessage.NativeFlowResponseMessage";
                };

                return NativeFlowResponseMessage;
            })();

            return InteractiveResponseMessage;
        })();

        Message.InteractiveMessage = (function() {

            /**
             * Properties of an InteractiveMessage.
             * @memberof WAE2E.Message
             * @interface IInteractiveMessage
             * @property {WAE2E.Message.InteractiveMessage.IShopMessage|null} [shopStorefrontMessage] InteractiveMessage shopStorefrontMessage
             * @property {WAE2E.Message.InteractiveMessage.ICollectionMessage|null} [collectionMessage] InteractiveMessage collectionMessage
             * @property {WAE2E.Message.InteractiveMessage.INativeFlowMessage|null} [nativeFlowMessage] InteractiveMessage nativeFlowMessage
             * @property {WAE2E.Message.InteractiveMessage.ICarouselMessage|null} [carouselMessage] InteractiveMessage carouselMessage
             * @property {WAE2E.Message.InteractiveMessage.IHeader|null} [header] InteractiveMessage header
             * @property {WAE2E.Message.InteractiveMessage.IBody|null} [body] InteractiveMessage body
             * @property {WAE2E.Message.InteractiveMessage.IFooter|null} [footer] InteractiveMessage footer
             * @property {WAE2E.IContextInfo|null} [contextInfo] InteractiveMessage contextInfo
             */

            /**
             * Constructs a new InteractiveMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents an InteractiveMessage.
             * @implements IInteractiveMessage
             * @constructor
             * @param {WAE2E.Message.IInteractiveMessage=} [properties] Properties to set
             */
            function InteractiveMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * InteractiveMessage shopStorefrontMessage.
             * @member {WAE2E.Message.InteractiveMessage.IShopMessage|null|undefined} shopStorefrontMessage
             * @memberof WAE2E.Message.InteractiveMessage
             * @instance
             */
            InteractiveMessage.prototype.shopStorefrontMessage = null;

            /**
             * InteractiveMessage collectionMessage.
             * @member {WAE2E.Message.InteractiveMessage.ICollectionMessage|null|undefined} collectionMessage
             * @memberof WAE2E.Message.InteractiveMessage
             * @instance
             */
            InteractiveMessage.prototype.collectionMessage = null;

            /**
             * InteractiveMessage nativeFlowMessage.
             * @member {WAE2E.Message.InteractiveMessage.INativeFlowMessage|null|undefined} nativeFlowMessage
             * @memberof WAE2E.Message.InteractiveMessage
             * @instance
             */
            InteractiveMessage.prototype.nativeFlowMessage = null;

            /**
             * InteractiveMessage carouselMessage.
             * @member {WAE2E.Message.InteractiveMessage.ICarouselMessage|null|undefined} carouselMessage
             * @memberof WAE2E.Message.InteractiveMessage
             * @instance
             */
            InteractiveMessage.prototype.carouselMessage = null;

            /**
             * InteractiveMessage header.
             * @member {WAE2E.Message.InteractiveMessage.IHeader|null|undefined} header
             * @memberof WAE2E.Message.InteractiveMessage
             * @instance
             */
            InteractiveMessage.prototype.header = null;

            /**
             * InteractiveMessage body.
             * @member {WAE2E.Message.InteractiveMessage.IBody|null|undefined} body
             * @memberof WAE2E.Message.InteractiveMessage
             * @instance
             */
            InteractiveMessage.prototype.body = null;

            /**
             * InteractiveMessage footer.
             * @member {WAE2E.Message.InteractiveMessage.IFooter|null|undefined} footer
             * @memberof WAE2E.Message.InteractiveMessage
             * @instance
             */
            InteractiveMessage.prototype.footer = null;

            /**
             * InteractiveMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.InteractiveMessage
             * @instance
             */
            InteractiveMessage.prototype.contextInfo = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * InteractiveMessage interactiveMessage.
             * @member {"shopStorefrontMessage"|"collectionMessage"|"nativeFlowMessage"|"carouselMessage"|undefined} interactiveMessage
             * @memberof WAE2E.Message.InteractiveMessage
             * @instance
             */
            Object.defineProperty(InteractiveMessage.prototype, "interactiveMessage", {
                get: $util.oneOfGetter($oneOfFields = ["shopStorefrontMessage", "collectionMessage", "nativeFlowMessage", "carouselMessage"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new InteractiveMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.InteractiveMessage
             * @static
             * @param {WAE2E.Message.IInteractiveMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.InteractiveMessage} InteractiveMessage instance
             */
            InteractiveMessage.create = function create(properties) {
                return new InteractiveMessage(properties);
            };

            /**
             * Encodes the specified InteractiveMessage message. Does not implicitly {@link WAE2E.Message.InteractiveMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.InteractiveMessage
             * @static
             * @param {WAE2E.Message.IInteractiveMessage} message InteractiveMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InteractiveMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                    $root.WAE2E.Message.InteractiveMessage.Header.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                    $root.WAE2E.Message.InteractiveMessage.Body.encode(message.body, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.footer != null && Object.hasOwnProperty.call(message, "footer"))
                    $root.WAE2E.Message.InteractiveMessage.Footer.encode(message.footer, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.shopStorefrontMessage != null && Object.hasOwnProperty.call(message, "shopStorefrontMessage"))
                    $root.WAE2E.Message.InteractiveMessage.ShopMessage.encode(message.shopStorefrontMessage, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.collectionMessage != null && Object.hasOwnProperty.call(message, "collectionMessage"))
                    $root.WAE2E.Message.InteractiveMessage.CollectionMessage.encode(message.collectionMessage, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.nativeFlowMessage != null && Object.hasOwnProperty.call(message, "nativeFlowMessage"))
                    $root.WAE2E.Message.InteractiveMessage.NativeFlowMessage.encode(message.nativeFlowMessage, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.carouselMessage != null && Object.hasOwnProperty.call(message, "carouselMessage"))
                    $root.WAE2E.Message.InteractiveMessage.CarouselMessage.encode(message.carouselMessage, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified InteractiveMessage message, length delimited. Does not implicitly {@link WAE2E.Message.InteractiveMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.InteractiveMessage
             * @static
             * @param {WAE2E.Message.IInteractiveMessage} message InteractiveMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InteractiveMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an InteractiveMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.InteractiveMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.InteractiveMessage} InteractiveMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InteractiveMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.InteractiveMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 4: {
                            message.shopStorefrontMessage = $root.WAE2E.Message.InteractiveMessage.ShopMessage.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.collectionMessage = $root.WAE2E.Message.InteractiveMessage.CollectionMessage.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.nativeFlowMessage = $root.WAE2E.Message.InteractiveMessage.NativeFlowMessage.decode(reader, reader.uint32());
                            break;
                        }
                    case 7: {
                            message.carouselMessage = $root.WAE2E.Message.InteractiveMessage.CarouselMessage.decode(reader, reader.uint32());
                            break;
                        }
                    case 1: {
                            message.header = $root.WAE2E.Message.InteractiveMessage.Header.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.body = $root.WAE2E.Message.InteractiveMessage.Body.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.footer = $root.WAE2E.Message.InteractiveMessage.Footer.decode(reader, reader.uint32());
                            break;
                        }
                    case 15: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an InteractiveMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.InteractiveMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.InteractiveMessage} InteractiveMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InteractiveMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an InteractiveMessage message.
             * @function verify
             * @memberof WAE2E.Message.InteractiveMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            InteractiveMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.shopStorefrontMessage != null && message.hasOwnProperty("shopStorefrontMessage")) {
                    properties.interactiveMessage = 1;
                    {
                        var error = $root.WAE2E.Message.InteractiveMessage.ShopMessage.verify(message.shopStorefrontMessage);
                        if (error)
                            return "shopStorefrontMessage." + error;
                    }
                }
                if (message.collectionMessage != null && message.hasOwnProperty("collectionMessage")) {
                    if (properties.interactiveMessage === 1)
                        return "interactiveMessage: multiple values";
                    properties.interactiveMessage = 1;
                    {
                        var error = $root.WAE2E.Message.InteractiveMessage.CollectionMessage.verify(message.collectionMessage);
                        if (error)
                            return "collectionMessage." + error;
                    }
                }
                if (message.nativeFlowMessage != null && message.hasOwnProperty("nativeFlowMessage")) {
                    if (properties.interactiveMessage === 1)
                        return "interactiveMessage: multiple values";
                    properties.interactiveMessage = 1;
                    {
                        var error = $root.WAE2E.Message.InteractiveMessage.NativeFlowMessage.verify(message.nativeFlowMessage);
                        if (error)
                            return "nativeFlowMessage." + error;
                    }
                }
                if (message.carouselMessage != null && message.hasOwnProperty("carouselMessage")) {
                    if (properties.interactiveMessage === 1)
                        return "interactiveMessage: multiple values";
                    properties.interactiveMessage = 1;
                    {
                        var error = $root.WAE2E.Message.InteractiveMessage.CarouselMessage.verify(message.carouselMessage);
                        if (error)
                            return "carouselMessage." + error;
                    }
                }
                if (message.header != null && message.hasOwnProperty("header")) {
                    var error = $root.WAE2E.Message.InteractiveMessage.Header.verify(message.header);
                    if (error)
                        return "header." + error;
                }
                if (message.body != null && message.hasOwnProperty("body")) {
                    var error = $root.WAE2E.Message.InteractiveMessage.Body.verify(message.body);
                    if (error)
                        return "body." + error;
                }
                if (message.footer != null && message.hasOwnProperty("footer")) {
                    var error = $root.WAE2E.Message.InteractiveMessage.Footer.verify(message.footer);
                    if (error)
                        return "footer." + error;
                }
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                return null;
            };

            /**
             * Creates an InteractiveMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.InteractiveMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.InteractiveMessage} InteractiveMessage
             */
            InteractiveMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.InteractiveMessage)
                    return object;
                var message = new $root.WAE2E.Message.InteractiveMessage();
                if (object.shopStorefrontMessage != null) {
                    if (typeof object.shopStorefrontMessage !== "object")
                        throw TypeError(".WAE2E.Message.InteractiveMessage.shopStorefrontMessage: object expected");
                    message.shopStorefrontMessage = $root.WAE2E.Message.InteractiveMessage.ShopMessage.fromObject(object.shopStorefrontMessage);
                }
                if (object.collectionMessage != null) {
                    if (typeof object.collectionMessage !== "object")
                        throw TypeError(".WAE2E.Message.InteractiveMessage.collectionMessage: object expected");
                    message.collectionMessage = $root.WAE2E.Message.InteractiveMessage.CollectionMessage.fromObject(object.collectionMessage);
                }
                if (object.nativeFlowMessage != null) {
                    if (typeof object.nativeFlowMessage !== "object")
                        throw TypeError(".WAE2E.Message.InteractiveMessage.nativeFlowMessage: object expected");
                    message.nativeFlowMessage = $root.WAE2E.Message.InteractiveMessage.NativeFlowMessage.fromObject(object.nativeFlowMessage);
                }
                if (object.carouselMessage != null) {
                    if (typeof object.carouselMessage !== "object")
                        throw TypeError(".WAE2E.Message.InteractiveMessage.carouselMessage: object expected");
                    message.carouselMessage = $root.WAE2E.Message.InteractiveMessage.CarouselMessage.fromObject(object.carouselMessage);
                }
                if (object.header != null) {
                    if (typeof object.header !== "object")
                        throw TypeError(".WAE2E.Message.InteractiveMessage.header: object expected");
                    message.header = $root.WAE2E.Message.InteractiveMessage.Header.fromObject(object.header);
                }
                if (object.body != null) {
                    if (typeof object.body !== "object")
                        throw TypeError(".WAE2E.Message.InteractiveMessage.body: object expected");
                    message.body = $root.WAE2E.Message.InteractiveMessage.Body.fromObject(object.body);
                }
                if (object.footer != null) {
                    if (typeof object.footer !== "object")
                        throw TypeError(".WAE2E.Message.InteractiveMessage.footer: object expected");
                    message.footer = $root.WAE2E.Message.InteractiveMessage.Footer.fromObject(object.footer);
                }
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.InteractiveMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                return message;
            };

            /**
             * Creates a plain object from an InteractiveMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.InteractiveMessage
             * @static
             * @param {WAE2E.Message.InteractiveMessage} message InteractiveMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            InteractiveMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.header = null;
                    object.body = null;
                    object.footer = null;
                    object.contextInfo = null;
                }
                if (message.header != null && message.hasOwnProperty("header"))
                    object.header = $root.WAE2E.Message.InteractiveMessage.Header.toObject(message.header, options);
                if (message.body != null && message.hasOwnProperty("body"))
                    object.body = $root.WAE2E.Message.InteractiveMessage.Body.toObject(message.body, options);
                if (message.footer != null && message.hasOwnProperty("footer"))
                    object.footer = $root.WAE2E.Message.InteractiveMessage.Footer.toObject(message.footer, options);
                if (message.shopStorefrontMessage != null && message.hasOwnProperty("shopStorefrontMessage")) {
                    object.shopStorefrontMessage = $root.WAE2E.Message.InteractiveMessage.ShopMessage.toObject(message.shopStorefrontMessage, options);
                    if (options.oneofs)
                        object.interactiveMessage = "shopStorefrontMessage";
                }
                if (message.collectionMessage != null && message.hasOwnProperty("collectionMessage")) {
                    object.collectionMessage = $root.WAE2E.Message.InteractiveMessage.CollectionMessage.toObject(message.collectionMessage, options);
                    if (options.oneofs)
                        object.interactiveMessage = "collectionMessage";
                }
                if (message.nativeFlowMessage != null && message.hasOwnProperty("nativeFlowMessage")) {
                    object.nativeFlowMessage = $root.WAE2E.Message.InteractiveMessage.NativeFlowMessage.toObject(message.nativeFlowMessage, options);
                    if (options.oneofs)
                        object.interactiveMessage = "nativeFlowMessage";
                }
                if (message.carouselMessage != null && message.hasOwnProperty("carouselMessage")) {
                    object.carouselMessage = $root.WAE2E.Message.InteractiveMessage.CarouselMessage.toObject(message.carouselMessage, options);
                    if (options.oneofs)
                        object.interactiveMessage = "carouselMessage";
                }
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                return object;
            };

            /**
             * Converts this InteractiveMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.InteractiveMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            InteractiveMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for InteractiveMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.InteractiveMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            InteractiveMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.InteractiveMessage";
            };

            InteractiveMessage.ShopMessage = (function() {

                /**
                 * Properties of a ShopMessage.
                 * @memberof WAE2E.Message.InteractiveMessage
                 * @interface IShopMessage
                 * @property {string|null} [ID] ShopMessage ID
                 * @property {WAE2E.Message.InteractiveMessage.ShopMessage.Surface|null} [surface] ShopMessage surface
                 * @property {number|null} [messageVersion] ShopMessage messageVersion
                 */

                /**
                 * Constructs a new ShopMessage.
                 * @memberof WAE2E.Message.InteractiveMessage
                 * @classdesc Represents a ShopMessage.
                 * @implements IShopMessage
                 * @constructor
                 * @param {WAE2E.Message.InteractiveMessage.IShopMessage=} [properties] Properties to set
                 */
                function ShopMessage(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ShopMessage ID.
                 * @member {string} ID
                 * @memberof WAE2E.Message.InteractiveMessage.ShopMessage
                 * @instance
                 */
                ShopMessage.prototype.ID = "";

                /**
                 * ShopMessage surface.
                 * @member {WAE2E.Message.InteractiveMessage.ShopMessage.Surface} surface
                 * @memberof WAE2E.Message.InteractiveMessage.ShopMessage
                 * @instance
                 */
                ShopMessage.prototype.surface = 0;

                /**
                 * ShopMessage messageVersion.
                 * @member {number} messageVersion
                 * @memberof WAE2E.Message.InteractiveMessage.ShopMessage
                 * @instance
                 */
                ShopMessage.prototype.messageVersion = 0;

                /**
                 * Creates a new ShopMessage instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.InteractiveMessage.ShopMessage
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.IShopMessage=} [properties] Properties to set
                 * @returns {WAE2E.Message.InteractiveMessage.ShopMessage} ShopMessage instance
                 */
                ShopMessage.create = function create(properties) {
                    return new ShopMessage(properties);
                };

                /**
                 * Encodes the specified ShopMessage message. Does not implicitly {@link WAE2E.Message.InteractiveMessage.ShopMessage.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.InteractiveMessage.ShopMessage
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.IShopMessage} message ShopMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ShopMessage.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ID != null && Object.hasOwnProperty.call(message, "ID"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.ID);
                    if (message.surface != null && Object.hasOwnProperty.call(message, "surface"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.surface);
                    if (message.messageVersion != null && Object.hasOwnProperty.call(message, "messageVersion"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.messageVersion);
                    return writer;
                };

                /**
                 * Encodes the specified ShopMessage message, length delimited. Does not implicitly {@link WAE2E.Message.InteractiveMessage.ShopMessage.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.InteractiveMessage.ShopMessage
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.IShopMessage} message ShopMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ShopMessage.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ShopMessage message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.InteractiveMessage.ShopMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.InteractiveMessage.ShopMessage} ShopMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ShopMessage.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.InteractiveMessage.ShopMessage();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.ID = reader.string();
                                break;
                            }
                        case 2: {
                                message.surface = reader.int32();
                                break;
                            }
                        case 3: {
                                message.messageVersion = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ShopMessage message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.InteractiveMessage.ShopMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.InteractiveMessage.ShopMessage} ShopMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ShopMessage.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ShopMessage message.
                 * @function verify
                 * @memberof WAE2E.Message.InteractiveMessage.ShopMessage
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ShopMessage.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ID != null && message.hasOwnProperty("ID"))
                        if (!$util.isString(message.ID))
                            return "ID: string expected";
                    if (message.surface != null && message.hasOwnProperty("surface"))
                        switch (message.surface) {
                        default:
                            return "surface: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.messageVersion != null && message.hasOwnProperty("messageVersion"))
                        if (!$util.isInteger(message.messageVersion))
                            return "messageVersion: integer expected";
                    return null;
                };

                /**
                 * Creates a ShopMessage message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.InteractiveMessage.ShopMessage
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.InteractiveMessage.ShopMessage} ShopMessage
                 */
                ShopMessage.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.InteractiveMessage.ShopMessage)
                        return object;
                    var message = new $root.WAE2E.Message.InteractiveMessage.ShopMessage();
                    if (object.ID != null)
                        message.ID = String(object.ID);
                    switch (object.surface) {
                    default:
                        if (typeof object.surface === "number") {
                            message.surface = object.surface;
                            break;
                        }
                        break;
                    case "UNKNOWN_SURFACE":
                    case 0:
                        message.surface = 0;
                        break;
                    case "FB":
                    case 1:
                        message.surface = 1;
                        break;
                    case "IG":
                    case 2:
                        message.surface = 2;
                        break;
                    case "WA":
                    case 3:
                        message.surface = 3;
                        break;
                    }
                    if (object.messageVersion != null)
                        message.messageVersion = object.messageVersion | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a ShopMessage message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.InteractiveMessage.ShopMessage
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.ShopMessage} message ShopMessage
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ShopMessage.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.ID = "";
                        object.surface = options.enums === String ? "UNKNOWN_SURFACE" : 0;
                        object.messageVersion = 0;
                    }
                    if (message.ID != null && message.hasOwnProperty("ID"))
                        object.ID = message.ID;
                    if (message.surface != null && message.hasOwnProperty("surface"))
                        object.surface = options.enums === String ? $root.WAE2E.Message.InteractiveMessage.ShopMessage.Surface[message.surface] === undefined ? message.surface : $root.WAE2E.Message.InteractiveMessage.ShopMessage.Surface[message.surface] : message.surface;
                    if (message.messageVersion != null && message.hasOwnProperty("messageVersion"))
                        object.messageVersion = message.messageVersion;
                    return object;
                };

                /**
                 * Converts this ShopMessage to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.InteractiveMessage.ShopMessage
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ShopMessage.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for ShopMessage
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.InteractiveMessage.ShopMessage
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ShopMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.InteractiveMessage.ShopMessage";
                };

                /**
                 * Surface enum.
                 * @name WAE2E.Message.InteractiveMessage.ShopMessage.Surface
                 * @enum {number}
                 * @property {number} UNKNOWN_SURFACE=0 UNKNOWN_SURFACE value
                 * @property {number} FB=1 FB value
                 * @property {number} IG=2 IG value
                 * @property {number} WA=3 WA value
                 */
                ShopMessage.Surface = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "UNKNOWN_SURFACE"] = 0;
                    values[valuesById[1] = "FB"] = 1;
                    values[valuesById[2] = "IG"] = 2;
                    values[valuesById[3] = "WA"] = 3;
                    return values;
                })();

                return ShopMessage;
            })();

            InteractiveMessage.CarouselMessage = (function() {

                /**
                 * Properties of a CarouselMessage.
                 * @memberof WAE2E.Message.InteractiveMessage
                 * @interface ICarouselMessage
                 * @property {Array.<WAE2E.Message.IInteractiveMessage>|null} [cards] CarouselMessage cards
                 * @property {number|null} [messageVersion] CarouselMessage messageVersion
                 */

                /**
                 * Constructs a new CarouselMessage.
                 * @memberof WAE2E.Message.InteractiveMessage
                 * @classdesc Represents a CarouselMessage.
                 * @implements ICarouselMessage
                 * @constructor
                 * @param {WAE2E.Message.InteractiveMessage.ICarouselMessage=} [properties] Properties to set
                 */
                function CarouselMessage(properties) {
                    this.cards = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CarouselMessage cards.
                 * @member {Array.<WAE2E.Message.IInteractiveMessage>} cards
                 * @memberof WAE2E.Message.InteractiveMessage.CarouselMessage
                 * @instance
                 */
                CarouselMessage.prototype.cards = $util.emptyArray;

                /**
                 * CarouselMessage messageVersion.
                 * @member {number} messageVersion
                 * @memberof WAE2E.Message.InteractiveMessage.CarouselMessage
                 * @instance
                 */
                CarouselMessage.prototype.messageVersion = 0;

                /**
                 * Creates a new CarouselMessage instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.InteractiveMessage.CarouselMessage
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.ICarouselMessage=} [properties] Properties to set
                 * @returns {WAE2E.Message.InteractiveMessage.CarouselMessage} CarouselMessage instance
                 */
                CarouselMessage.create = function create(properties) {
                    return new CarouselMessage(properties);
                };

                /**
                 * Encodes the specified CarouselMessage message. Does not implicitly {@link WAE2E.Message.InteractiveMessage.CarouselMessage.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.InteractiveMessage.CarouselMessage
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.ICarouselMessage} message CarouselMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CarouselMessage.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.cards != null && message.cards.length)
                        for (var i = 0; i < message.cards.length; ++i)
                            $root.WAE2E.Message.InteractiveMessage.encode(message.cards[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.messageVersion != null && Object.hasOwnProperty.call(message, "messageVersion"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.messageVersion);
                    return writer;
                };

                /**
                 * Encodes the specified CarouselMessage message, length delimited. Does not implicitly {@link WAE2E.Message.InteractiveMessage.CarouselMessage.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.InteractiveMessage.CarouselMessage
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.ICarouselMessage} message CarouselMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CarouselMessage.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CarouselMessage message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.InteractiveMessage.CarouselMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.InteractiveMessage.CarouselMessage} CarouselMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CarouselMessage.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.InteractiveMessage.CarouselMessage();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.cards && message.cards.length))
                                    message.cards = [];
                                message.cards.push($root.WAE2E.Message.InteractiveMessage.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.messageVersion = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a CarouselMessage message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.InteractiveMessage.CarouselMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.InteractiveMessage.CarouselMessage} CarouselMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CarouselMessage.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CarouselMessage message.
                 * @function verify
                 * @memberof WAE2E.Message.InteractiveMessage.CarouselMessage
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CarouselMessage.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.cards != null && message.hasOwnProperty("cards")) {
                        if (!Array.isArray(message.cards))
                            return "cards: array expected";
                        for (var i = 0; i < message.cards.length; ++i) {
                            var error = $root.WAE2E.Message.InteractiveMessage.verify(message.cards[i]);
                            if (error)
                                return "cards." + error;
                        }
                    }
                    if (message.messageVersion != null && message.hasOwnProperty("messageVersion"))
                        if (!$util.isInteger(message.messageVersion))
                            return "messageVersion: integer expected";
                    return null;
                };

                /**
                 * Creates a CarouselMessage message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.InteractiveMessage.CarouselMessage
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.InteractiveMessage.CarouselMessage} CarouselMessage
                 */
                CarouselMessage.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.InteractiveMessage.CarouselMessage)
                        return object;
                    var message = new $root.WAE2E.Message.InteractiveMessage.CarouselMessage();
                    if (object.cards) {
                        if (!Array.isArray(object.cards))
                            throw TypeError(".WAE2E.Message.InteractiveMessage.CarouselMessage.cards: array expected");
                        message.cards = [];
                        for (var i = 0; i < object.cards.length; ++i) {
                            if (typeof object.cards[i] !== "object")
                                throw TypeError(".WAE2E.Message.InteractiveMessage.CarouselMessage.cards: object expected");
                            message.cards[i] = $root.WAE2E.Message.InteractiveMessage.fromObject(object.cards[i]);
                        }
                    }
                    if (object.messageVersion != null)
                        message.messageVersion = object.messageVersion | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a CarouselMessage message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.InteractiveMessage.CarouselMessage
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.CarouselMessage} message CarouselMessage
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CarouselMessage.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.cards = [];
                    if (options.defaults)
                        object.messageVersion = 0;
                    if (message.cards && message.cards.length) {
                        object.cards = [];
                        for (var j = 0; j < message.cards.length; ++j)
                            object.cards[j] = $root.WAE2E.Message.InteractiveMessage.toObject(message.cards[j], options);
                    }
                    if (message.messageVersion != null && message.hasOwnProperty("messageVersion"))
                        object.messageVersion = message.messageVersion;
                    return object;
                };

                /**
                 * Converts this CarouselMessage to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.InteractiveMessage.CarouselMessage
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CarouselMessage.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for CarouselMessage
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.InteractiveMessage.CarouselMessage
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CarouselMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.InteractiveMessage.CarouselMessage";
                };

                return CarouselMessage;
            })();

            InteractiveMessage.NativeFlowMessage = (function() {

                /**
                 * Properties of a NativeFlowMessage.
                 * @memberof WAE2E.Message.InteractiveMessage
                 * @interface INativeFlowMessage
                 * @property {Array.<WAE2E.Message.InteractiveMessage.NativeFlowMessage.INativeFlowButton>|null} [buttons] NativeFlowMessage buttons
                 * @property {string|null} [messageParamsJSON] NativeFlowMessage messageParamsJSON
                 * @property {number|null} [messageVersion] NativeFlowMessage messageVersion
                 */

                /**
                 * Constructs a new NativeFlowMessage.
                 * @memberof WAE2E.Message.InteractiveMessage
                 * @classdesc Represents a NativeFlowMessage.
                 * @implements INativeFlowMessage
                 * @constructor
                 * @param {WAE2E.Message.InteractiveMessage.INativeFlowMessage=} [properties] Properties to set
                 */
                function NativeFlowMessage(properties) {
                    this.buttons = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * NativeFlowMessage buttons.
                 * @member {Array.<WAE2E.Message.InteractiveMessage.NativeFlowMessage.INativeFlowButton>} buttons
                 * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage
                 * @instance
                 */
                NativeFlowMessage.prototype.buttons = $util.emptyArray;

                /**
                 * NativeFlowMessage messageParamsJSON.
                 * @member {string} messageParamsJSON
                 * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage
                 * @instance
                 */
                NativeFlowMessage.prototype.messageParamsJSON = "";

                /**
                 * NativeFlowMessage messageVersion.
                 * @member {number} messageVersion
                 * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage
                 * @instance
                 */
                NativeFlowMessage.prototype.messageVersion = 0;

                /**
                 * Creates a new NativeFlowMessage instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.INativeFlowMessage=} [properties] Properties to set
                 * @returns {WAE2E.Message.InteractiveMessage.NativeFlowMessage} NativeFlowMessage instance
                 */
                NativeFlowMessage.create = function create(properties) {
                    return new NativeFlowMessage(properties);
                };

                /**
                 * Encodes the specified NativeFlowMessage message. Does not implicitly {@link WAE2E.Message.InteractiveMessage.NativeFlowMessage.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.INativeFlowMessage} message NativeFlowMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NativeFlowMessage.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.buttons != null && message.buttons.length)
                        for (var i = 0; i < message.buttons.length; ++i)
                            $root.WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton.encode(message.buttons[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.messageParamsJSON != null && Object.hasOwnProperty.call(message, "messageParamsJSON"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.messageParamsJSON);
                    if (message.messageVersion != null && Object.hasOwnProperty.call(message, "messageVersion"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.messageVersion);
                    return writer;
                };

                /**
                 * Encodes the specified NativeFlowMessage message, length delimited. Does not implicitly {@link WAE2E.Message.InteractiveMessage.NativeFlowMessage.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.INativeFlowMessage} message NativeFlowMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NativeFlowMessage.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a NativeFlowMessage message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.InteractiveMessage.NativeFlowMessage} NativeFlowMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NativeFlowMessage.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.InteractiveMessage.NativeFlowMessage();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.buttons && message.buttons.length))
                                    message.buttons = [];
                                message.buttons.push($root.WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.messageParamsJSON = reader.string();
                                break;
                            }
                        case 3: {
                                message.messageVersion = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a NativeFlowMessage message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.InteractiveMessage.NativeFlowMessage} NativeFlowMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NativeFlowMessage.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a NativeFlowMessage message.
                 * @function verify
                 * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NativeFlowMessage.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.buttons != null && message.hasOwnProperty("buttons")) {
                        if (!Array.isArray(message.buttons))
                            return "buttons: array expected";
                        for (var i = 0; i < message.buttons.length; ++i) {
                            var error = $root.WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton.verify(message.buttons[i]);
                            if (error)
                                return "buttons." + error;
                        }
                    }
                    if (message.messageParamsJSON != null && message.hasOwnProperty("messageParamsJSON"))
                        if (!$util.isString(message.messageParamsJSON))
                            return "messageParamsJSON: string expected";
                    if (message.messageVersion != null && message.hasOwnProperty("messageVersion"))
                        if (!$util.isInteger(message.messageVersion))
                            return "messageVersion: integer expected";
                    return null;
                };

                /**
                 * Creates a NativeFlowMessage message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.InteractiveMessage.NativeFlowMessage} NativeFlowMessage
                 */
                NativeFlowMessage.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.InteractiveMessage.NativeFlowMessage)
                        return object;
                    var message = new $root.WAE2E.Message.InteractiveMessage.NativeFlowMessage();
                    if (object.buttons) {
                        if (!Array.isArray(object.buttons))
                            throw TypeError(".WAE2E.Message.InteractiveMessage.NativeFlowMessage.buttons: array expected");
                        message.buttons = [];
                        for (var i = 0; i < object.buttons.length; ++i) {
                            if (typeof object.buttons[i] !== "object")
                                throw TypeError(".WAE2E.Message.InteractiveMessage.NativeFlowMessage.buttons: object expected");
                            message.buttons[i] = $root.WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton.fromObject(object.buttons[i]);
                        }
                    }
                    if (object.messageParamsJSON != null)
                        message.messageParamsJSON = String(object.messageParamsJSON);
                    if (object.messageVersion != null)
                        message.messageVersion = object.messageVersion | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a NativeFlowMessage message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.NativeFlowMessage} message NativeFlowMessage
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NativeFlowMessage.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.buttons = [];
                    if (options.defaults) {
                        object.messageParamsJSON = "";
                        object.messageVersion = 0;
                    }
                    if (message.buttons && message.buttons.length) {
                        object.buttons = [];
                        for (var j = 0; j < message.buttons.length; ++j)
                            object.buttons[j] = $root.WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton.toObject(message.buttons[j], options);
                    }
                    if (message.messageParamsJSON != null && message.hasOwnProperty("messageParamsJSON"))
                        object.messageParamsJSON = message.messageParamsJSON;
                    if (message.messageVersion != null && message.hasOwnProperty("messageVersion"))
                        object.messageVersion = message.messageVersion;
                    return object;
                };

                /**
                 * Converts this NativeFlowMessage to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NativeFlowMessage.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for NativeFlowMessage
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                NativeFlowMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.InteractiveMessage.NativeFlowMessage";
                };

                NativeFlowMessage.NativeFlowButton = (function() {

                    /**
                     * Properties of a NativeFlowButton.
                     * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage
                     * @interface INativeFlowButton
                     * @property {string|null} [name] NativeFlowButton name
                     * @property {string|null} [buttonParamsJSON] NativeFlowButton buttonParamsJSON
                     */

                    /**
                     * Constructs a new NativeFlowButton.
                     * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage
                     * @classdesc Represents a NativeFlowButton.
                     * @implements INativeFlowButton
                     * @constructor
                     * @param {WAE2E.Message.InteractiveMessage.NativeFlowMessage.INativeFlowButton=} [properties] Properties to set
                     */
                    function NativeFlowButton(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * NativeFlowButton name.
                     * @member {string} name
                     * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton
                     * @instance
                     */
                    NativeFlowButton.prototype.name = "";

                    /**
                     * NativeFlowButton buttonParamsJSON.
                     * @member {string} buttonParamsJSON
                     * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton
                     * @instance
                     */
                    NativeFlowButton.prototype.buttonParamsJSON = "";

                    /**
                     * Creates a new NativeFlowButton instance using the specified properties.
                     * @function create
                     * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton
                     * @static
                     * @param {WAE2E.Message.InteractiveMessage.NativeFlowMessage.INativeFlowButton=} [properties] Properties to set
                     * @returns {WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton} NativeFlowButton instance
                     */
                    NativeFlowButton.create = function create(properties) {
                        return new NativeFlowButton(properties);
                    };

                    /**
                     * Encodes the specified NativeFlowButton message. Does not implicitly {@link WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton.verify|verify} messages.
                     * @function encode
                     * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton
                     * @static
                     * @param {WAE2E.Message.InteractiveMessage.NativeFlowMessage.INativeFlowButton} message NativeFlowButton message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NativeFlowButton.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.buttonParamsJSON != null && Object.hasOwnProperty.call(message, "buttonParamsJSON"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.buttonParamsJSON);
                        return writer;
                    };

                    /**
                     * Encodes the specified NativeFlowButton message, length delimited. Does not implicitly {@link WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton
                     * @static
                     * @param {WAE2E.Message.InteractiveMessage.NativeFlowMessage.INativeFlowButton} message NativeFlowButton message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NativeFlowButton.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a NativeFlowButton message from the specified reader or buffer.
                     * @function decode
                     * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton} NativeFlowButton
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NativeFlowButton.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.buttonParamsJSON = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a NativeFlowButton message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton} NativeFlowButton
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NativeFlowButton.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a NativeFlowButton message.
                     * @function verify
                     * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NativeFlowButton.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.buttonParamsJSON != null && message.hasOwnProperty("buttonParamsJSON"))
                            if (!$util.isString(message.buttonParamsJSON))
                                return "buttonParamsJSON: string expected";
                        return null;
                    };

                    /**
                     * Creates a NativeFlowButton message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton} NativeFlowButton
                     */
                    NativeFlowButton.fromObject = function fromObject(object) {
                        if (object instanceof $root.WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton)
                            return object;
                        var message = new $root.WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.buttonParamsJSON != null)
                            message.buttonParamsJSON = String(object.buttonParamsJSON);
                        return message;
                    };

                    /**
                     * Creates a plain object from a NativeFlowButton message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton
                     * @static
                     * @param {WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton} message NativeFlowButton
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NativeFlowButton.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.buttonParamsJSON = "";
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.buttonParamsJSON != null && message.hasOwnProperty("buttonParamsJSON"))
                            object.buttonParamsJSON = message.buttonParamsJSON;
                        return object;
                    };

                    /**
                     * Converts this NativeFlowButton to JSON.
                     * @function toJSON
                     * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NativeFlowButton.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Gets the default type url for NativeFlowButton
                     * @function getTypeUrl
                     * @memberof WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    NativeFlowButton.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/WAE2E.Message.InteractiveMessage.NativeFlowMessage.NativeFlowButton";
                    };

                    return NativeFlowButton;
                })();

                return NativeFlowMessage;
            })();

            InteractiveMessage.CollectionMessage = (function() {

                /**
                 * Properties of a CollectionMessage.
                 * @memberof WAE2E.Message.InteractiveMessage
                 * @interface ICollectionMessage
                 * @property {string|null} [bizJID] CollectionMessage bizJID
                 * @property {string|null} [ID] CollectionMessage ID
                 * @property {number|null} [messageVersion] CollectionMessage messageVersion
                 */

                /**
                 * Constructs a new CollectionMessage.
                 * @memberof WAE2E.Message.InteractiveMessage
                 * @classdesc Represents a CollectionMessage.
                 * @implements ICollectionMessage
                 * @constructor
                 * @param {WAE2E.Message.InteractiveMessage.ICollectionMessage=} [properties] Properties to set
                 */
                function CollectionMessage(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CollectionMessage bizJID.
                 * @member {string} bizJID
                 * @memberof WAE2E.Message.InteractiveMessage.CollectionMessage
                 * @instance
                 */
                CollectionMessage.prototype.bizJID = "";

                /**
                 * CollectionMessage ID.
                 * @member {string} ID
                 * @memberof WAE2E.Message.InteractiveMessage.CollectionMessage
                 * @instance
                 */
                CollectionMessage.prototype.ID = "";

                /**
                 * CollectionMessage messageVersion.
                 * @member {number} messageVersion
                 * @memberof WAE2E.Message.InteractiveMessage.CollectionMessage
                 * @instance
                 */
                CollectionMessage.prototype.messageVersion = 0;

                /**
                 * Creates a new CollectionMessage instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.InteractiveMessage.CollectionMessage
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.ICollectionMessage=} [properties] Properties to set
                 * @returns {WAE2E.Message.InteractiveMessage.CollectionMessage} CollectionMessage instance
                 */
                CollectionMessage.create = function create(properties) {
                    return new CollectionMessage(properties);
                };

                /**
                 * Encodes the specified CollectionMessage message. Does not implicitly {@link WAE2E.Message.InteractiveMessage.CollectionMessage.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.InteractiveMessage.CollectionMessage
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.ICollectionMessage} message CollectionMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CollectionMessage.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.bizJID != null && Object.hasOwnProperty.call(message, "bizJID"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.bizJID);
                    if (message.ID != null && Object.hasOwnProperty.call(message, "ID"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.ID);
                    if (message.messageVersion != null && Object.hasOwnProperty.call(message, "messageVersion"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.messageVersion);
                    return writer;
                };

                /**
                 * Encodes the specified CollectionMessage message, length delimited. Does not implicitly {@link WAE2E.Message.InteractiveMessage.CollectionMessage.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.InteractiveMessage.CollectionMessage
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.ICollectionMessage} message CollectionMessage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CollectionMessage.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CollectionMessage message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.InteractiveMessage.CollectionMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.InteractiveMessage.CollectionMessage} CollectionMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CollectionMessage.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.InteractiveMessage.CollectionMessage();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.bizJID = reader.string();
                                break;
                            }
                        case 2: {
                                message.ID = reader.string();
                                break;
                            }
                        case 3: {
                                message.messageVersion = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a CollectionMessage message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.InteractiveMessage.CollectionMessage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.InteractiveMessage.CollectionMessage} CollectionMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CollectionMessage.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CollectionMessage message.
                 * @function verify
                 * @memberof WAE2E.Message.InteractiveMessage.CollectionMessage
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CollectionMessage.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.bizJID != null && message.hasOwnProperty("bizJID"))
                        if (!$util.isString(message.bizJID))
                            return "bizJID: string expected";
                    if (message.ID != null && message.hasOwnProperty("ID"))
                        if (!$util.isString(message.ID))
                            return "ID: string expected";
                    if (message.messageVersion != null && message.hasOwnProperty("messageVersion"))
                        if (!$util.isInteger(message.messageVersion))
                            return "messageVersion: integer expected";
                    return null;
                };

                /**
                 * Creates a CollectionMessage message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.InteractiveMessage.CollectionMessage
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.InteractiveMessage.CollectionMessage} CollectionMessage
                 */
                CollectionMessage.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.InteractiveMessage.CollectionMessage)
                        return object;
                    var message = new $root.WAE2E.Message.InteractiveMessage.CollectionMessage();
                    if (object.bizJID != null)
                        message.bizJID = String(object.bizJID);
                    if (object.ID != null)
                        message.ID = String(object.ID);
                    if (object.messageVersion != null)
                        message.messageVersion = object.messageVersion | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a CollectionMessage message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.InteractiveMessage.CollectionMessage
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.CollectionMessage} message CollectionMessage
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CollectionMessage.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.bizJID = "";
                        object.ID = "";
                        object.messageVersion = 0;
                    }
                    if (message.bizJID != null && message.hasOwnProperty("bizJID"))
                        object.bizJID = message.bizJID;
                    if (message.ID != null && message.hasOwnProperty("ID"))
                        object.ID = message.ID;
                    if (message.messageVersion != null && message.hasOwnProperty("messageVersion"))
                        object.messageVersion = message.messageVersion;
                    return object;
                };

                /**
                 * Converts this CollectionMessage to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.InteractiveMessage.CollectionMessage
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CollectionMessage.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for CollectionMessage
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.InteractiveMessage.CollectionMessage
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CollectionMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.InteractiveMessage.CollectionMessage";
                };

                return CollectionMessage;
            })();

            InteractiveMessage.Footer = (function() {

                /**
                 * Properties of a Footer.
                 * @memberof WAE2E.Message.InteractiveMessage
                 * @interface IFooter
                 * @property {string|null} [text] Footer text
                 */

                /**
                 * Constructs a new Footer.
                 * @memberof WAE2E.Message.InteractiveMessage
                 * @classdesc Represents a Footer.
                 * @implements IFooter
                 * @constructor
                 * @param {WAE2E.Message.InteractiveMessage.IFooter=} [properties] Properties to set
                 */
                function Footer(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Footer text.
                 * @member {string} text
                 * @memberof WAE2E.Message.InteractiveMessage.Footer
                 * @instance
                 */
                Footer.prototype.text = "";

                /**
                 * Creates a new Footer instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.InteractiveMessage.Footer
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.IFooter=} [properties] Properties to set
                 * @returns {WAE2E.Message.InteractiveMessage.Footer} Footer instance
                 */
                Footer.create = function create(properties) {
                    return new Footer(properties);
                };

                /**
                 * Encodes the specified Footer message. Does not implicitly {@link WAE2E.Message.InteractiveMessage.Footer.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.InteractiveMessage.Footer
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.IFooter} message Footer message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Footer.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                    return writer;
                };

                /**
                 * Encodes the specified Footer message, length delimited. Does not implicitly {@link WAE2E.Message.InteractiveMessage.Footer.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.InteractiveMessage.Footer
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.IFooter} message Footer message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Footer.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Footer message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.InteractiveMessage.Footer
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.InteractiveMessage.Footer} Footer
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Footer.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.InteractiveMessage.Footer();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.text = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Footer message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.InteractiveMessage.Footer
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.InteractiveMessage.Footer} Footer
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Footer.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Footer message.
                 * @function verify
                 * @memberof WAE2E.Message.InteractiveMessage.Footer
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Footer.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.text != null && message.hasOwnProperty("text"))
                        if (!$util.isString(message.text))
                            return "text: string expected";
                    return null;
                };

                /**
                 * Creates a Footer message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.InteractiveMessage.Footer
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.InteractiveMessage.Footer} Footer
                 */
                Footer.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.InteractiveMessage.Footer)
                        return object;
                    var message = new $root.WAE2E.Message.InteractiveMessage.Footer();
                    if (object.text != null)
                        message.text = String(object.text);
                    return message;
                };

                /**
                 * Creates a plain object from a Footer message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.InteractiveMessage.Footer
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.Footer} message Footer
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Footer.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.text = "";
                    if (message.text != null && message.hasOwnProperty("text"))
                        object.text = message.text;
                    return object;
                };

                /**
                 * Converts this Footer to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.InteractiveMessage.Footer
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Footer.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Footer
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.InteractiveMessage.Footer
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Footer.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.InteractiveMessage.Footer";
                };

                return Footer;
            })();

            InteractiveMessage.Body = (function() {

                /**
                 * Properties of a Body.
                 * @memberof WAE2E.Message.InteractiveMessage
                 * @interface IBody
                 * @property {string|null} [text] Body text
                 */

                /**
                 * Constructs a new Body.
                 * @memberof WAE2E.Message.InteractiveMessage
                 * @classdesc Represents a Body.
                 * @implements IBody
                 * @constructor
                 * @param {WAE2E.Message.InteractiveMessage.IBody=} [properties] Properties to set
                 */
                function Body(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Body text.
                 * @member {string} text
                 * @memberof WAE2E.Message.InteractiveMessage.Body
                 * @instance
                 */
                Body.prototype.text = "";

                /**
                 * Creates a new Body instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.InteractiveMessage.Body
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.IBody=} [properties] Properties to set
                 * @returns {WAE2E.Message.InteractiveMessage.Body} Body instance
                 */
                Body.create = function create(properties) {
                    return new Body(properties);
                };

                /**
                 * Encodes the specified Body message. Does not implicitly {@link WAE2E.Message.InteractiveMessage.Body.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.InteractiveMessage.Body
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.IBody} message Body message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Body.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                    return writer;
                };

                /**
                 * Encodes the specified Body message, length delimited. Does not implicitly {@link WAE2E.Message.InteractiveMessage.Body.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.InteractiveMessage.Body
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.IBody} message Body message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Body.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Body message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.InteractiveMessage.Body
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.InteractiveMessage.Body} Body
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Body.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.InteractiveMessage.Body();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.text = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Body message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.InteractiveMessage.Body
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.InteractiveMessage.Body} Body
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Body.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Body message.
                 * @function verify
                 * @memberof WAE2E.Message.InteractiveMessage.Body
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Body.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.text != null && message.hasOwnProperty("text"))
                        if (!$util.isString(message.text))
                            return "text: string expected";
                    return null;
                };

                /**
                 * Creates a Body message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.InteractiveMessage.Body
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.InteractiveMessage.Body} Body
                 */
                Body.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.InteractiveMessage.Body)
                        return object;
                    var message = new $root.WAE2E.Message.InteractiveMessage.Body();
                    if (object.text != null)
                        message.text = String(object.text);
                    return message;
                };

                /**
                 * Creates a plain object from a Body message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.InteractiveMessage.Body
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.Body} message Body
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Body.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.text = "";
                    if (message.text != null && message.hasOwnProperty("text"))
                        object.text = message.text;
                    return object;
                };

                /**
                 * Converts this Body to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.InteractiveMessage.Body
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Body.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Body
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.InteractiveMessage.Body
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Body.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.InteractiveMessage.Body";
                };

                return Body;
            })();

            InteractiveMessage.Header = (function() {

                /**
                 * Properties of a Header.
                 * @memberof WAE2E.Message.InteractiveMessage
                 * @interface IHeader
                 * @property {WAE2E.Message.IDocumentMessage|null} [documentMessage] Header documentMessage
                 * @property {WAE2E.Message.IImageMessage|null} [imageMessage] Header imageMessage
                 * @property {Uint8Array|null} [JPEGThumbnail] Header JPEGThumbnail
                 * @property {WAE2E.Message.IVideoMessage|null} [videoMessage] Header videoMessage
                 * @property {WAE2E.Message.ILocationMessage|null} [locationMessage] Header locationMessage
                 * @property {WAE2E.Message.IProductMessage|null} [productMessage] Header productMessage
                 * @property {string|null} [title] Header title
                 * @property {string|null} [subtitle] Header subtitle
                 * @property {boolean|null} [hasMediaAttachment] Header hasMediaAttachment
                 */

                /**
                 * Constructs a new Header.
                 * @memberof WAE2E.Message.InteractiveMessage
                 * @classdesc Represents a Header.
                 * @implements IHeader
                 * @constructor
                 * @param {WAE2E.Message.InteractiveMessage.IHeader=} [properties] Properties to set
                 */
                function Header(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Header documentMessage.
                 * @member {WAE2E.Message.IDocumentMessage|null|undefined} documentMessage
                 * @memberof WAE2E.Message.InteractiveMessage.Header
                 * @instance
                 */
                Header.prototype.documentMessage = null;

                /**
                 * Header imageMessage.
                 * @member {WAE2E.Message.IImageMessage|null|undefined} imageMessage
                 * @memberof WAE2E.Message.InteractiveMessage.Header
                 * @instance
                 */
                Header.prototype.imageMessage = null;

                /**
                 * Header JPEGThumbnail.
                 * @member {Uint8Array|null|undefined} JPEGThumbnail
                 * @memberof WAE2E.Message.InteractiveMessage.Header
                 * @instance
                 */
                Header.prototype.JPEGThumbnail = null;

                /**
                 * Header videoMessage.
                 * @member {WAE2E.Message.IVideoMessage|null|undefined} videoMessage
                 * @memberof WAE2E.Message.InteractiveMessage.Header
                 * @instance
                 */
                Header.prototype.videoMessage = null;

                /**
                 * Header locationMessage.
                 * @member {WAE2E.Message.ILocationMessage|null|undefined} locationMessage
                 * @memberof WAE2E.Message.InteractiveMessage.Header
                 * @instance
                 */
                Header.prototype.locationMessage = null;

                /**
                 * Header productMessage.
                 * @member {WAE2E.Message.IProductMessage|null|undefined} productMessage
                 * @memberof WAE2E.Message.InteractiveMessage.Header
                 * @instance
                 */
                Header.prototype.productMessage = null;

                /**
                 * Header title.
                 * @member {string} title
                 * @memberof WAE2E.Message.InteractiveMessage.Header
                 * @instance
                 */
                Header.prototype.title = "";

                /**
                 * Header subtitle.
                 * @member {string} subtitle
                 * @memberof WAE2E.Message.InteractiveMessage.Header
                 * @instance
                 */
                Header.prototype.subtitle = "";

                /**
                 * Header hasMediaAttachment.
                 * @member {boolean} hasMediaAttachment
                 * @memberof WAE2E.Message.InteractiveMessage.Header
                 * @instance
                 */
                Header.prototype.hasMediaAttachment = false;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * Header media.
                 * @member {"documentMessage"|"imageMessage"|"JPEGThumbnail"|"videoMessage"|"locationMessage"|"productMessage"|undefined} media
                 * @memberof WAE2E.Message.InteractiveMessage.Header
                 * @instance
                 */
                Object.defineProperty(Header.prototype, "media", {
                    get: $util.oneOfGetter($oneOfFields = ["documentMessage", "imageMessage", "JPEGThumbnail", "videoMessage", "locationMessage", "productMessage"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new Header instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.InteractiveMessage.Header
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.IHeader=} [properties] Properties to set
                 * @returns {WAE2E.Message.InteractiveMessage.Header} Header instance
                 */
                Header.create = function create(properties) {
                    return new Header(properties);
                };

                /**
                 * Encodes the specified Header message. Does not implicitly {@link WAE2E.Message.InteractiveMessage.Header.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.InteractiveMessage.Header
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.IHeader} message Header message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Header.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                    if (message.subtitle != null && Object.hasOwnProperty.call(message, "subtitle"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.subtitle);
                    if (message.documentMessage != null && Object.hasOwnProperty.call(message, "documentMessage"))
                        $root.WAE2E.Message.DocumentMessage.encode(message.documentMessage, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.imageMessage != null && Object.hasOwnProperty.call(message, "imageMessage"))
                        $root.WAE2E.Message.ImageMessage.encode(message.imageMessage, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.hasMediaAttachment != null && Object.hasOwnProperty.call(message, "hasMediaAttachment"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.hasMediaAttachment);
                    if (message.JPEGThumbnail != null && Object.hasOwnProperty.call(message, "JPEGThumbnail"))
                        writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.JPEGThumbnail);
                    if (message.videoMessage != null && Object.hasOwnProperty.call(message, "videoMessage"))
                        $root.WAE2E.Message.VideoMessage.encode(message.videoMessage, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.locationMessage != null && Object.hasOwnProperty.call(message, "locationMessage"))
                        $root.WAE2E.Message.LocationMessage.encode(message.locationMessage, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.productMessage != null && Object.hasOwnProperty.call(message, "productMessage"))
                        $root.WAE2E.Message.ProductMessage.encode(message.productMessage, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified Header message, length delimited. Does not implicitly {@link WAE2E.Message.InteractiveMessage.Header.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.InteractiveMessage.Header
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.IHeader} message Header message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Header.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Header message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.InteractiveMessage.Header
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.InteractiveMessage.Header} Header
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Header.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.InteractiveMessage.Header();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 3: {
                                message.documentMessage = $root.WAE2E.Message.DocumentMessage.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                message.imageMessage = $root.WAE2E.Message.ImageMessage.decode(reader, reader.uint32());
                                break;
                            }
                        case 6: {
                                message.JPEGThumbnail = reader.bytes();
                                break;
                            }
                        case 7: {
                                message.videoMessage = $root.WAE2E.Message.VideoMessage.decode(reader, reader.uint32());
                                break;
                            }
                        case 8: {
                                message.locationMessage = $root.WAE2E.Message.LocationMessage.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                message.productMessage = $root.WAE2E.Message.ProductMessage.decode(reader, reader.uint32());
                                break;
                            }
                        case 1: {
                                message.title = reader.string();
                                break;
                            }
                        case 2: {
                                message.subtitle = reader.string();
                                break;
                            }
                        case 5: {
                                message.hasMediaAttachment = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Header message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.InteractiveMessage.Header
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.InteractiveMessage.Header} Header
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Header.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Header message.
                 * @function verify
                 * @memberof WAE2E.Message.InteractiveMessage.Header
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Header.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.documentMessage != null && message.hasOwnProperty("documentMessage")) {
                        properties.media = 1;
                        {
                            var error = $root.WAE2E.Message.DocumentMessage.verify(message.documentMessage);
                            if (error)
                                return "documentMessage." + error;
                        }
                    }
                    if (message.imageMessage != null && message.hasOwnProperty("imageMessage")) {
                        if (properties.media === 1)
                            return "media: multiple values";
                        properties.media = 1;
                        {
                            var error = $root.WAE2E.Message.ImageMessage.verify(message.imageMessage);
                            if (error)
                                return "imageMessage." + error;
                        }
                    }
                    if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail")) {
                        if (properties.media === 1)
                            return "media: multiple values";
                        properties.media = 1;
                        if (!(message.JPEGThumbnail && typeof message.JPEGThumbnail.length === "number" || $util.isString(message.JPEGThumbnail)))
                            return "JPEGThumbnail: buffer expected";
                    }
                    if (message.videoMessage != null && message.hasOwnProperty("videoMessage")) {
                        if (properties.media === 1)
                            return "media: multiple values";
                        properties.media = 1;
                        {
                            var error = $root.WAE2E.Message.VideoMessage.verify(message.videoMessage);
                            if (error)
                                return "videoMessage." + error;
                        }
                    }
                    if (message.locationMessage != null && message.hasOwnProperty("locationMessage")) {
                        if (properties.media === 1)
                            return "media: multiple values";
                        properties.media = 1;
                        {
                            var error = $root.WAE2E.Message.LocationMessage.verify(message.locationMessage);
                            if (error)
                                return "locationMessage." + error;
                        }
                    }
                    if (message.productMessage != null && message.hasOwnProperty("productMessage")) {
                        if (properties.media === 1)
                            return "media: multiple values";
                        properties.media = 1;
                        {
                            var error = $root.WAE2E.Message.ProductMessage.verify(message.productMessage);
                            if (error)
                                return "productMessage." + error;
                        }
                    }
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.subtitle != null && message.hasOwnProperty("subtitle"))
                        if (!$util.isString(message.subtitle))
                            return "subtitle: string expected";
                    if (message.hasMediaAttachment != null && message.hasOwnProperty("hasMediaAttachment"))
                        if (typeof message.hasMediaAttachment !== "boolean")
                            return "hasMediaAttachment: boolean expected";
                    return null;
                };

                /**
                 * Creates a Header message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.InteractiveMessage.Header
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.InteractiveMessage.Header} Header
                 */
                Header.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.InteractiveMessage.Header)
                        return object;
                    var message = new $root.WAE2E.Message.InteractiveMessage.Header();
                    if (object.documentMessage != null) {
                        if (typeof object.documentMessage !== "object")
                            throw TypeError(".WAE2E.Message.InteractiveMessage.Header.documentMessage: object expected");
                        message.documentMessage = $root.WAE2E.Message.DocumentMessage.fromObject(object.documentMessage);
                    }
                    if (object.imageMessage != null) {
                        if (typeof object.imageMessage !== "object")
                            throw TypeError(".WAE2E.Message.InteractiveMessage.Header.imageMessage: object expected");
                        message.imageMessage = $root.WAE2E.Message.ImageMessage.fromObject(object.imageMessage);
                    }
                    if (object.JPEGThumbnail != null)
                        if (typeof object.JPEGThumbnail === "string")
                            $util.base64.decode(object.JPEGThumbnail, message.JPEGThumbnail = $util.newBuffer($util.base64.length(object.JPEGThumbnail)), 0);
                        else if (object.JPEGThumbnail.length >= 0)
                            message.JPEGThumbnail = object.JPEGThumbnail;
                    if (object.videoMessage != null) {
                        if (typeof object.videoMessage !== "object")
                            throw TypeError(".WAE2E.Message.InteractiveMessage.Header.videoMessage: object expected");
                        message.videoMessage = $root.WAE2E.Message.VideoMessage.fromObject(object.videoMessage);
                    }
                    if (object.locationMessage != null) {
                        if (typeof object.locationMessage !== "object")
                            throw TypeError(".WAE2E.Message.InteractiveMessage.Header.locationMessage: object expected");
                        message.locationMessage = $root.WAE2E.Message.LocationMessage.fromObject(object.locationMessage);
                    }
                    if (object.productMessage != null) {
                        if (typeof object.productMessage !== "object")
                            throw TypeError(".WAE2E.Message.InteractiveMessage.Header.productMessage: object expected");
                        message.productMessage = $root.WAE2E.Message.ProductMessage.fromObject(object.productMessage);
                    }
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.subtitle != null)
                        message.subtitle = String(object.subtitle);
                    if (object.hasMediaAttachment != null)
                        message.hasMediaAttachment = Boolean(object.hasMediaAttachment);
                    return message;
                };

                /**
                 * Creates a plain object from a Header message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.InteractiveMessage.Header
                 * @static
                 * @param {WAE2E.Message.InteractiveMessage.Header} message Header
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Header.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.title = "";
                        object.subtitle = "";
                        object.hasMediaAttachment = false;
                    }
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.subtitle != null && message.hasOwnProperty("subtitle"))
                        object.subtitle = message.subtitle;
                    if (message.documentMessage != null && message.hasOwnProperty("documentMessage")) {
                        object.documentMessage = $root.WAE2E.Message.DocumentMessage.toObject(message.documentMessage, options);
                        if (options.oneofs)
                            object.media = "documentMessage";
                    }
                    if (message.imageMessage != null && message.hasOwnProperty("imageMessage")) {
                        object.imageMessage = $root.WAE2E.Message.ImageMessage.toObject(message.imageMessage, options);
                        if (options.oneofs)
                            object.media = "imageMessage";
                    }
                    if (message.hasMediaAttachment != null && message.hasOwnProperty("hasMediaAttachment"))
                        object.hasMediaAttachment = message.hasMediaAttachment;
                    if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail")) {
                        object.JPEGThumbnail = options.bytes === String ? $util.base64.encode(message.JPEGThumbnail, 0, message.JPEGThumbnail.length) : options.bytes === Array ? Array.prototype.slice.call(message.JPEGThumbnail) : message.JPEGThumbnail;
                        if (options.oneofs)
                            object.media = "JPEGThumbnail";
                    }
                    if (message.videoMessage != null && message.hasOwnProperty("videoMessage")) {
                        object.videoMessage = $root.WAE2E.Message.VideoMessage.toObject(message.videoMessage, options);
                        if (options.oneofs)
                            object.media = "videoMessage";
                    }
                    if (message.locationMessage != null && message.hasOwnProperty("locationMessage")) {
                        object.locationMessage = $root.WAE2E.Message.LocationMessage.toObject(message.locationMessage, options);
                        if (options.oneofs)
                            object.media = "locationMessage";
                    }
                    if (message.productMessage != null && message.hasOwnProperty("productMessage")) {
                        object.productMessage = $root.WAE2E.Message.ProductMessage.toObject(message.productMessage, options);
                        if (options.oneofs)
                            object.media = "productMessage";
                    }
                    return object;
                };

                /**
                 * Converts this Header to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.InteractiveMessage.Header
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Header.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Header
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.InteractiveMessage.Header
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Header.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.InteractiveMessage.Header";
                };

                return Header;
            })();

            return InteractiveMessage;
        })();

        Message.ListResponseMessage = (function() {

            /**
             * Properties of a ListResponseMessage.
             * @memberof WAE2E.Message
             * @interface IListResponseMessage
             * @property {string|null} [title] ListResponseMessage title
             * @property {WAE2E.Message.ListResponseMessage.ListType|null} [listType] ListResponseMessage listType
             * @property {WAE2E.Message.ListResponseMessage.ISingleSelectReply|null} [singleSelectReply] ListResponseMessage singleSelectReply
             * @property {WAE2E.IContextInfo|null} [contextInfo] ListResponseMessage contextInfo
             * @property {string|null} [description] ListResponseMessage description
             */

            /**
             * Constructs a new ListResponseMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a ListResponseMessage.
             * @implements IListResponseMessage
             * @constructor
             * @param {WAE2E.Message.IListResponseMessage=} [properties] Properties to set
             */
            function ListResponseMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ListResponseMessage title.
             * @member {string} title
             * @memberof WAE2E.Message.ListResponseMessage
             * @instance
             */
            ListResponseMessage.prototype.title = "";

            /**
             * ListResponseMessage listType.
             * @member {WAE2E.Message.ListResponseMessage.ListType} listType
             * @memberof WAE2E.Message.ListResponseMessage
             * @instance
             */
            ListResponseMessage.prototype.listType = 0;

            /**
             * ListResponseMessage singleSelectReply.
             * @member {WAE2E.Message.ListResponseMessage.ISingleSelectReply|null|undefined} singleSelectReply
             * @memberof WAE2E.Message.ListResponseMessage
             * @instance
             */
            ListResponseMessage.prototype.singleSelectReply = null;

            /**
             * ListResponseMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.ListResponseMessage
             * @instance
             */
            ListResponseMessage.prototype.contextInfo = null;

            /**
             * ListResponseMessage description.
             * @member {string} description
             * @memberof WAE2E.Message.ListResponseMessage
             * @instance
             */
            ListResponseMessage.prototype.description = "";

            /**
             * Creates a new ListResponseMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.ListResponseMessage
             * @static
             * @param {WAE2E.Message.IListResponseMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.ListResponseMessage} ListResponseMessage instance
             */
            ListResponseMessage.create = function create(properties) {
                return new ListResponseMessage(properties);
            };

            /**
             * Encodes the specified ListResponseMessage message. Does not implicitly {@link WAE2E.Message.ListResponseMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.ListResponseMessage
             * @static
             * @param {WAE2E.Message.IListResponseMessage} message ListResponseMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ListResponseMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                if (message.listType != null && Object.hasOwnProperty.call(message, "listType"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.listType);
                if (message.singleSelectReply != null && Object.hasOwnProperty.call(message, "singleSelectReply"))
                    $root.WAE2E.Message.ListResponseMessage.SingleSelectReply.encode(message.singleSelectReply, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.description);
                return writer;
            };

            /**
             * Encodes the specified ListResponseMessage message, length delimited. Does not implicitly {@link WAE2E.Message.ListResponseMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.ListResponseMessage
             * @static
             * @param {WAE2E.Message.IListResponseMessage} message ListResponseMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ListResponseMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ListResponseMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.ListResponseMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.ListResponseMessage} ListResponseMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ListResponseMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ListResponseMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.title = reader.string();
                            break;
                        }
                    case 2: {
                            message.listType = reader.int32();
                            break;
                        }
                    case 3: {
                            message.singleSelectReply = $root.WAE2E.Message.ListResponseMessage.SingleSelectReply.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.description = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ListResponseMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.ListResponseMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.ListResponseMessage} ListResponseMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ListResponseMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ListResponseMessage message.
             * @function verify
             * @memberof WAE2E.Message.ListResponseMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ListResponseMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.title != null && message.hasOwnProperty("title"))
                    if (!$util.isString(message.title))
                        return "title: string expected";
                if (message.listType != null && message.hasOwnProperty("listType"))
                    switch (message.listType) {
                    default:
                        return "listType: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.singleSelectReply != null && message.hasOwnProperty("singleSelectReply")) {
                    var error = $root.WAE2E.Message.ListResponseMessage.SingleSelectReply.verify(message.singleSelectReply);
                    if (error)
                        return "singleSelectReply." + error;
                }
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                if (message.description != null && message.hasOwnProperty("description"))
                    if (!$util.isString(message.description))
                        return "description: string expected";
                return null;
            };

            /**
             * Creates a ListResponseMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.ListResponseMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.ListResponseMessage} ListResponseMessage
             */
            ListResponseMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.ListResponseMessage)
                    return object;
                var message = new $root.WAE2E.Message.ListResponseMessage();
                if (object.title != null)
                    message.title = String(object.title);
                switch (object.listType) {
                default:
                    if (typeof object.listType === "number") {
                        message.listType = object.listType;
                        break;
                    }
                    break;
                case "UNKNOWN":
                case 0:
                    message.listType = 0;
                    break;
                case "SINGLE_SELECT":
                case 1:
                    message.listType = 1;
                    break;
                }
                if (object.singleSelectReply != null) {
                    if (typeof object.singleSelectReply !== "object")
                        throw TypeError(".WAE2E.Message.ListResponseMessage.singleSelectReply: object expected");
                    message.singleSelectReply = $root.WAE2E.Message.ListResponseMessage.SingleSelectReply.fromObject(object.singleSelectReply);
                }
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.ListResponseMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                if (object.description != null)
                    message.description = String(object.description);
                return message;
            };

            /**
             * Creates a plain object from a ListResponseMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.ListResponseMessage
             * @static
             * @param {WAE2E.Message.ListResponseMessage} message ListResponseMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ListResponseMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.title = "";
                    object.listType = options.enums === String ? "UNKNOWN" : 0;
                    object.singleSelectReply = null;
                    object.contextInfo = null;
                    object.description = "";
                }
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                if (message.listType != null && message.hasOwnProperty("listType"))
                    object.listType = options.enums === String ? $root.WAE2E.Message.ListResponseMessage.ListType[message.listType] === undefined ? message.listType : $root.WAE2E.Message.ListResponseMessage.ListType[message.listType] : message.listType;
                if (message.singleSelectReply != null && message.hasOwnProperty("singleSelectReply"))
                    object.singleSelectReply = $root.WAE2E.Message.ListResponseMessage.SingleSelectReply.toObject(message.singleSelectReply, options);
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                if (message.description != null && message.hasOwnProperty("description"))
                    object.description = message.description;
                return object;
            };

            /**
             * Converts this ListResponseMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.ListResponseMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ListResponseMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ListResponseMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.ListResponseMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ListResponseMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.ListResponseMessage";
            };

            /**
             * ListType enum.
             * @name WAE2E.Message.ListResponseMessage.ListType
             * @enum {number}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} SINGLE_SELECT=1 SINGLE_SELECT value
             */
            ListResponseMessage.ListType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "SINGLE_SELECT"] = 1;
                return values;
            })();

            ListResponseMessage.SingleSelectReply = (function() {

                /**
                 * Properties of a SingleSelectReply.
                 * @memberof WAE2E.Message.ListResponseMessage
                 * @interface ISingleSelectReply
                 * @property {string|null} [selectedRowID] SingleSelectReply selectedRowID
                 */

                /**
                 * Constructs a new SingleSelectReply.
                 * @memberof WAE2E.Message.ListResponseMessage
                 * @classdesc Represents a SingleSelectReply.
                 * @implements ISingleSelectReply
                 * @constructor
                 * @param {WAE2E.Message.ListResponseMessage.ISingleSelectReply=} [properties] Properties to set
                 */
                function SingleSelectReply(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * SingleSelectReply selectedRowID.
                 * @member {string} selectedRowID
                 * @memberof WAE2E.Message.ListResponseMessage.SingleSelectReply
                 * @instance
                 */
                SingleSelectReply.prototype.selectedRowID = "";

                /**
                 * Creates a new SingleSelectReply instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.ListResponseMessage.SingleSelectReply
                 * @static
                 * @param {WAE2E.Message.ListResponseMessage.ISingleSelectReply=} [properties] Properties to set
                 * @returns {WAE2E.Message.ListResponseMessage.SingleSelectReply} SingleSelectReply instance
                 */
                SingleSelectReply.create = function create(properties) {
                    return new SingleSelectReply(properties);
                };

                /**
                 * Encodes the specified SingleSelectReply message. Does not implicitly {@link WAE2E.Message.ListResponseMessage.SingleSelectReply.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.ListResponseMessage.SingleSelectReply
                 * @static
                 * @param {WAE2E.Message.ListResponseMessage.ISingleSelectReply} message SingleSelectReply message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SingleSelectReply.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selectedRowID != null && Object.hasOwnProperty.call(message, "selectedRowID"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selectedRowID);
                    return writer;
                };

                /**
                 * Encodes the specified SingleSelectReply message, length delimited. Does not implicitly {@link WAE2E.Message.ListResponseMessage.SingleSelectReply.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.ListResponseMessage.SingleSelectReply
                 * @static
                 * @param {WAE2E.Message.ListResponseMessage.ISingleSelectReply} message SingleSelectReply message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SingleSelectReply.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a SingleSelectReply message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.ListResponseMessage.SingleSelectReply
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.ListResponseMessage.SingleSelectReply} SingleSelectReply
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SingleSelectReply.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ListResponseMessage.SingleSelectReply();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.selectedRowID = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a SingleSelectReply message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.ListResponseMessage.SingleSelectReply
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.ListResponseMessage.SingleSelectReply} SingleSelectReply
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SingleSelectReply.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a SingleSelectReply message.
                 * @function verify
                 * @memberof WAE2E.Message.ListResponseMessage.SingleSelectReply
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SingleSelectReply.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.selectedRowID != null && message.hasOwnProperty("selectedRowID"))
                        if (!$util.isString(message.selectedRowID))
                            return "selectedRowID: string expected";
                    return null;
                };

                /**
                 * Creates a SingleSelectReply message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.ListResponseMessage.SingleSelectReply
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.ListResponseMessage.SingleSelectReply} SingleSelectReply
                 */
                SingleSelectReply.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.ListResponseMessage.SingleSelectReply)
                        return object;
                    var message = new $root.WAE2E.Message.ListResponseMessage.SingleSelectReply();
                    if (object.selectedRowID != null)
                        message.selectedRowID = String(object.selectedRowID);
                    return message;
                };

                /**
                 * Creates a plain object from a SingleSelectReply message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.ListResponseMessage.SingleSelectReply
                 * @static
                 * @param {WAE2E.Message.ListResponseMessage.SingleSelectReply} message SingleSelectReply
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SingleSelectReply.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.selectedRowID = "";
                    if (message.selectedRowID != null && message.hasOwnProperty("selectedRowID"))
                        object.selectedRowID = message.selectedRowID;
                    return object;
                };

                /**
                 * Converts this SingleSelectReply to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.ListResponseMessage.SingleSelectReply
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SingleSelectReply.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for SingleSelectReply
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.ListResponseMessage.SingleSelectReply
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                SingleSelectReply.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.ListResponseMessage.SingleSelectReply";
                };

                return SingleSelectReply;
            })();

            return ListResponseMessage;
        })();

        Message.ListMessage = (function() {

            /**
             * Properties of a ListMessage.
             * @memberof WAE2E.Message
             * @interface IListMessage
             * @property {string|null} [title] ListMessage title
             * @property {string|null} [description] ListMessage description
             * @property {string|null} [buttonText] ListMessage buttonText
             * @property {WAE2E.Message.ListMessage.ListType|null} [listType] ListMessage listType
             * @property {Array.<WAE2E.Message.ListMessage.ISection>|null} [sections] ListMessage sections
             * @property {WAE2E.Message.ListMessage.IProductListInfo|null} [productListInfo] ListMessage productListInfo
             * @property {string|null} [footerText] ListMessage footerText
             * @property {WAE2E.IContextInfo|null} [contextInfo] ListMessage contextInfo
             */

            /**
             * Constructs a new ListMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a ListMessage.
             * @implements IListMessage
             * @constructor
             * @param {WAE2E.Message.IListMessage=} [properties] Properties to set
             */
            function ListMessage(properties) {
                this.sections = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ListMessage title.
             * @member {string} title
             * @memberof WAE2E.Message.ListMessage
             * @instance
             */
            ListMessage.prototype.title = "";

            /**
             * ListMessage description.
             * @member {string} description
             * @memberof WAE2E.Message.ListMessage
             * @instance
             */
            ListMessage.prototype.description = "";

            /**
             * ListMessage buttonText.
             * @member {string} buttonText
             * @memberof WAE2E.Message.ListMessage
             * @instance
             */
            ListMessage.prototype.buttonText = "";

            /**
             * ListMessage listType.
             * @member {WAE2E.Message.ListMessage.ListType} listType
             * @memberof WAE2E.Message.ListMessage
             * @instance
             */
            ListMessage.prototype.listType = 0;

            /**
             * ListMessage sections.
             * @member {Array.<WAE2E.Message.ListMessage.ISection>} sections
             * @memberof WAE2E.Message.ListMessage
             * @instance
             */
            ListMessage.prototype.sections = $util.emptyArray;

            /**
             * ListMessage productListInfo.
             * @member {WAE2E.Message.ListMessage.IProductListInfo|null|undefined} productListInfo
             * @memberof WAE2E.Message.ListMessage
             * @instance
             */
            ListMessage.prototype.productListInfo = null;

            /**
             * ListMessage footerText.
             * @member {string} footerText
             * @memberof WAE2E.Message.ListMessage
             * @instance
             */
            ListMessage.prototype.footerText = "";

            /**
             * ListMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.ListMessage
             * @instance
             */
            ListMessage.prototype.contextInfo = null;

            /**
             * Creates a new ListMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.ListMessage
             * @static
             * @param {WAE2E.Message.IListMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.ListMessage} ListMessage instance
             */
            ListMessage.create = function create(properties) {
                return new ListMessage(properties);
            };

            /**
             * Encodes the specified ListMessage message. Does not implicitly {@link WAE2E.Message.ListMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.ListMessage
             * @static
             * @param {WAE2E.Message.IListMessage} message ListMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ListMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                if (message.buttonText != null && Object.hasOwnProperty.call(message, "buttonText"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.buttonText);
                if (message.listType != null && Object.hasOwnProperty.call(message, "listType"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.listType);
                if (message.sections != null && message.sections.length)
                    for (var i = 0; i < message.sections.length; ++i)
                        $root.WAE2E.Message.ListMessage.Section.encode(message.sections[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.productListInfo != null && Object.hasOwnProperty.call(message, "productListInfo"))
                    $root.WAE2E.Message.ListMessage.ProductListInfo.encode(message.productListInfo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.footerText != null && Object.hasOwnProperty.call(message, "footerText"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.footerText);
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ListMessage message, length delimited. Does not implicitly {@link WAE2E.Message.ListMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.ListMessage
             * @static
             * @param {WAE2E.Message.IListMessage} message ListMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ListMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ListMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.ListMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.ListMessage} ListMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ListMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ListMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.title = reader.string();
                            break;
                        }
                    case 2: {
                            message.description = reader.string();
                            break;
                        }
                    case 3: {
                            message.buttonText = reader.string();
                            break;
                        }
                    case 4: {
                            message.listType = reader.int32();
                            break;
                        }
                    case 5: {
                            if (!(message.sections && message.sections.length))
                                message.sections = [];
                            message.sections.push($root.WAE2E.Message.ListMessage.Section.decode(reader, reader.uint32()));
                            break;
                        }
                    case 6: {
                            message.productListInfo = $root.WAE2E.Message.ListMessage.ProductListInfo.decode(reader, reader.uint32());
                            break;
                        }
                    case 7: {
                            message.footerText = reader.string();
                            break;
                        }
                    case 8: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ListMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.ListMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.ListMessage} ListMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ListMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ListMessage message.
             * @function verify
             * @memberof WAE2E.Message.ListMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ListMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.title != null && message.hasOwnProperty("title"))
                    if (!$util.isString(message.title))
                        return "title: string expected";
                if (message.description != null && message.hasOwnProperty("description"))
                    if (!$util.isString(message.description))
                        return "description: string expected";
                if (message.buttonText != null && message.hasOwnProperty("buttonText"))
                    if (!$util.isString(message.buttonText))
                        return "buttonText: string expected";
                if (message.listType != null && message.hasOwnProperty("listType"))
                    switch (message.listType) {
                    default:
                        return "listType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.sections != null && message.hasOwnProperty("sections")) {
                    if (!Array.isArray(message.sections))
                        return "sections: array expected";
                    for (var i = 0; i < message.sections.length; ++i) {
                        var error = $root.WAE2E.Message.ListMessage.Section.verify(message.sections[i]);
                        if (error)
                            return "sections." + error;
                    }
                }
                if (message.productListInfo != null && message.hasOwnProperty("productListInfo")) {
                    var error = $root.WAE2E.Message.ListMessage.ProductListInfo.verify(message.productListInfo);
                    if (error)
                        return "productListInfo." + error;
                }
                if (message.footerText != null && message.hasOwnProperty("footerText"))
                    if (!$util.isString(message.footerText))
                        return "footerText: string expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                return null;
            };

            /**
             * Creates a ListMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.ListMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.ListMessage} ListMessage
             */
            ListMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.ListMessage)
                    return object;
                var message = new $root.WAE2E.Message.ListMessage();
                if (object.title != null)
                    message.title = String(object.title);
                if (object.description != null)
                    message.description = String(object.description);
                if (object.buttonText != null)
                    message.buttonText = String(object.buttonText);
                switch (object.listType) {
                default:
                    if (typeof object.listType === "number") {
                        message.listType = object.listType;
                        break;
                    }
                    break;
                case "UNKNOWN":
                case 0:
                    message.listType = 0;
                    break;
                case "SINGLE_SELECT":
                case 1:
                    message.listType = 1;
                    break;
                case "PRODUCT_LIST":
                case 2:
                    message.listType = 2;
                    break;
                }
                if (object.sections) {
                    if (!Array.isArray(object.sections))
                        throw TypeError(".WAE2E.Message.ListMessage.sections: array expected");
                    message.sections = [];
                    for (var i = 0; i < object.sections.length; ++i) {
                        if (typeof object.sections[i] !== "object")
                            throw TypeError(".WAE2E.Message.ListMessage.sections: object expected");
                        message.sections[i] = $root.WAE2E.Message.ListMessage.Section.fromObject(object.sections[i]);
                    }
                }
                if (object.productListInfo != null) {
                    if (typeof object.productListInfo !== "object")
                        throw TypeError(".WAE2E.Message.ListMessage.productListInfo: object expected");
                    message.productListInfo = $root.WAE2E.Message.ListMessage.ProductListInfo.fromObject(object.productListInfo);
                }
                if (object.footerText != null)
                    message.footerText = String(object.footerText);
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.ListMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                return message;
            };

            /**
             * Creates a plain object from a ListMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.ListMessage
             * @static
             * @param {WAE2E.Message.ListMessage} message ListMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ListMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.sections = [];
                if (options.defaults) {
                    object.title = "";
                    object.description = "";
                    object.buttonText = "";
                    object.listType = options.enums === String ? "UNKNOWN" : 0;
                    object.productListInfo = null;
                    object.footerText = "";
                    object.contextInfo = null;
                }
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                if (message.description != null && message.hasOwnProperty("description"))
                    object.description = message.description;
                if (message.buttonText != null && message.hasOwnProperty("buttonText"))
                    object.buttonText = message.buttonText;
                if (message.listType != null && message.hasOwnProperty("listType"))
                    object.listType = options.enums === String ? $root.WAE2E.Message.ListMessage.ListType[message.listType] === undefined ? message.listType : $root.WAE2E.Message.ListMessage.ListType[message.listType] : message.listType;
                if (message.sections && message.sections.length) {
                    object.sections = [];
                    for (var j = 0; j < message.sections.length; ++j)
                        object.sections[j] = $root.WAE2E.Message.ListMessage.Section.toObject(message.sections[j], options);
                }
                if (message.productListInfo != null && message.hasOwnProperty("productListInfo"))
                    object.productListInfo = $root.WAE2E.Message.ListMessage.ProductListInfo.toObject(message.productListInfo, options);
                if (message.footerText != null && message.hasOwnProperty("footerText"))
                    object.footerText = message.footerText;
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                return object;
            };

            /**
             * Converts this ListMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.ListMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ListMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ListMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.ListMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ListMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.ListMessage";
            };

            /**
             * ListType enum.
             * @name WAE2E.Message.ListMessage.ListType
             * @enum {number}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} SINGLE_SELECT=1 SINGLE_SELECT value
             * @property {number} PRODUCT_LIST=2 PRODUCT_LIST value
             */
            ListMessage.ListType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "SINGLE_SELECT"] = 1;
                values[valuesById[2] = "PRODUCT_LIST"] = 2;
                return values;
            })();

            ListMessage.ProductListInfo = (function() {

                /**
                 * Properties of a ProductListInfo.
                 * @memberof WAE2E.Message.ListMessage
                 * @interface IProductListInfo
                 * @property {Array.<WAE2E.Message.ListMessage.IProductSection>|null} [productSections] ProductListInfo productSections
                 * @property {WAE2E.Message.ListMessage.IProductListHeaderImage|null} [headerImage] ProductListInfo headerImage
                 * @property {string|null} [businessOwnerJID] ProductListInfo businessOwnerJID
                 */

                /**
                 * Constructs a new ProductListInfo.
                 * @memberof WAE2E.Message.ListMessage
                 * @classdesc Represents a ProductListInfo.
                 * @implements IProductListInfo
                 * @constructor
                 * @param {WAE2E.Message.ListMessage.IProductListInfo=} [properties] Properties to set
                 */
                function ProductListInfo(properties) {
                    this.productSections = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ProductListInfo productSections.
                 * @member {Array.<WAE2E.Message.ListMessage.IProductSection>} productSections
                 * @memberof WAE2E.Message.ListMessage.ProductListInfo
                 * @instance
                 */
                ProductListInfo.prototype.productSections = $util.emptyArray;

                /**
                 * ProductListInfo headerImage.
                 * @member {WAE2E.Message.ListMessage.IProductListHeaderImage|null|undefined} headerImage
                 * @memberof WAE2E.Message.ListMessage.ProductListInfo
                 * @instance
                 */
                ProductListInfo.prototype.headerImage = null;

                /**
                 * ProductListInfo businessOwnerJID.
                 * @member {string} businessOwnerJID
                 * @memberof WAE2E.Message.ListMessage.ProductListInfo
                 * @instance
                 */
                ProductListInfo.prototype.businessOwnerJID = "";

                /**
                 * Creates a new ProductListInfo instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.ListMessage.ProductListInfo
                 * @static
                 * @param {WAE2E.Message.ListMessage.IProductListInfo=} [properties] Properties to set
                 * @returns {WAE2E.Message.ListMessage.ProductListInfo} ProductListInfo instance
                 */
                ProductListInfo.create = function create(properties) {
                    return new ProductListInfo(properties);
                };

                /**
                 * Encodes the specified ProductListInfo message. Does not implicitly {@link WAE2E.Message.ListMessage.ProductListInfo.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.ListMessage.ProductListInfo
                 * @static
                 * @param {WAE2E.Message.ListMessage.IProductListInfo} message ProductListInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ProductListInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.productSections != null && message.productSections.length)
                        for (var i = 0; i < message.productSections.length; ++i)
                            $root.WAE2E.Message.ListMessage.ProductSection.encode(message.productSections[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.headerImage != null && Object.hasOwnProperty.call(message, "headerImage"))
                        $root.WAE2E.Message.ListMessage.ProductListHeaderImage.encode(message.headerImage, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.businessOwnerJID != null && Object.hasOwnProperty.call(message, "businessOwnerJID"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.businessOwnerJID);
                    return writer;
                };

                /**
                 * Encodes the specified ProductListInfo message, length delimited. Does not implicitly {@link WAE2E.Message.ListMessage.ProductListInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.ListMessage.ProductListInfo
                 * @static
                 * @param {WAE2E.Message.ListMessage.IProductListInfo} message ProductListInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ProductListInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ProductListInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.ListMessage.ProductListInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.ListMessage.ProductListInfo} ProductListInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ProductListInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ListMessage.ProductListInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.productSections && message.productSections.length))
                                    message.productSections = [];
                                message.productSections.push($root.WAE2E.Message.ListMessage.ProductSection.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.headerImage = $root.WAE2E.Message.ListMessage.ProductListHeaderImage.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.businessOwnerJID = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ProductListInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.ListMessage.ProductListInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.ListMessage.ProductListInfo} ProductListInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ProductListInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ProductListInfo message.
                 * @function verify
                 * @memberof WAE2E.Message.ListMessage.ProductListInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ProductListInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.productSections != null && message.hasOwnProperty("productSections")) {
                        if (!Array.isArray(message.productSections))
                            return "productSections: array expected";
                        for (var i = 0; i < message.productSections.length; ++i) {
                            var error = $root.WAE2E.Message.ListMessage.ProductSection.verify(message.productSections[i]);
                            if (error)
                                return "productSections." + error;
                        }
                    }
                    if (message.headerImage != null && message.hasOwnProperty("headerImage")) {
                        var error = $root.WAE2E.Message.ListMessage.ProductListHeaderImage.verify(message.headerImage);
                        if (error)
                            return "headerImage." + error;
                    }
                    if (message.businessOwnerJID != null && message.hasOwnProperty("businessOwnerJID"))
                        if (!$util.isString(message.businessOwnerJID))
                            return "businessOwnerJID: string expected";
                    return null;
                };

                /**
                 * Creates a ProductListInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.ListMessage.ProductListInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.ListMessage.ProductListInfo} ProductListInfo
                 */
                ProductListInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.ListMessage.ProductListInfo)
                        return object;
                    var message = new $root.WAE2E.Message.ListMessage.ProductListInfo();
                    if (object.productSections) {
                        if (!Array.isArray(object.productSections))
                            throw TypeError(".WAE2E.Message.ListMessage.ProductListInfo.productSections: array expected");
                        message.productSections = [];
                        for (var i = 0; i < object.productSections.length; ++i) {
                            if (typeof object.productSections[i] !== "object")
                                throw TypeError(".WAE2E.Message.ListMessage.ProductListInfo.productSections: object expected");
                            message.productSections[i] = $root.WAE2E.Message.ListMessage.ProductSection.fromObject(object.productSections[i]);
                        }
                    }
                    if (object.headerImage != null) {
                        if (typeof object.headerImage !== "object")
                            throw TypeError(".WAE2E.Message.ListMessage.ProductListInfo.headerImage: object expected");
                        message.headerImage = $root.WAE2E.Message.ListMessage.ProductListHeaderImage.fromObject(object.headerImage);
                    }
                    if (object.businessOwnerJID != null)
                        message.businessOwnerJID = String(object.businessOwnerJID);
                    return message;
                };

                /**
                 * Creates a plain object from a ProductListInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.ListMessage.ProductListInfo
                 * @static
                 * @param {WAE2E.Message.ListMessage.ProductListInfo} message ProductListInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ProductListInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.productSections = [];
                    if (options.defaults) {
                        object.headerImage = null;
                        object.businessOwnerJID = "";
                    }
                    if (message.productSections && message.productSections.length) {
                        object.productSections = [];
                        for (var j = 0; j < message.productSections.length; ++j)
                            object.productSections[j] = $root.WAE2E.Message.ListMessage.ProductSection.toObject(message.productSections[j], options);
                    }
                    if (message.headerImage != null && message.hasOwnProperty("headerImage"))
                        object.headerImage = $root.WAE2E.Message.ListMessage.ProductListHeaderImage.toObject(message.headerImage, options);
                    if (message.businessOwnerJID != null && message.hasOwnProperty("businessOwnerJID"))
                        object.businessOwnerJID = message.businessOwnerJID;
                    return object;
                };

                /**
                 * Converts this ProductListInfo to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.ListMessage.ProductListInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ProductListInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for ProductListInfo
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.ListMessage.ProductListInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ProductListInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.ListMessage.ProductListInfo";
                };

                return ProductListInfo;
            })();

            ListMessage.ProductListHeaderImage = (function() {

                /**
                 * Properties of a ProductListHeaderImage.
                 * @memberof WAE2E.Message.ListMessage
                 * @interface IProductListHeaderImage
                 * @property {string|null} [productID] ProductListHeaderImage productID
                 * @property {Uint8Array|null} [JPEGThumbnail] ProductListHeaderImage JPEGThumbnail
                 */

                /**
                 * Constructs a new ProductListHeaderImage.
                 * @memberof WAE2E.Message.ListMessage
                 * @classdesc Represents a ProductListHeaderImage.
                 * @implements IProductListHeaderImage
                 * @constructor
                 * @param {WAE2E.Message.ListMessage.IProductListHeaderImage=} [properties] Properties to set
                 */
                function ProductListHeaderImage(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ProductListHeaderImage productID.
                 * @member {string} productID
                 * @memberof WAE2E.Message.ListMessage.ProductListHeaderImage
                 * @instance
                 */
                ProductListHeaderImage.prototype.productID = "";

                /**
                 * ProductListHeaderImage JPEGThumbnail.
                 * @member {Uint8Array} JPEGThumbnail
                 * @memberof WAE2E.Message.ListMessage.ProductListHeaderImage
                 * @instance
                 */
                ProductListHeaderImage.prototype.JPEGThumbnail = $util.newBuffer([]);

                /**
                 * Creates a new ProductListHeaderImage instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.ListMessage.ProductListHeaderImage
                 * @static
                 * @param {WAE2E.Message.ListMessage.IProductListHeaderImage=} [properties] Properties to set
                 * @returns {WAE2E.Message.ListMessage.ProductListHeaderImage} ProductListHeaderImage instance
                 */
                ProductListHeaderImage.create = function create(properties) {
                    return new ProductListHeaderImage(properties);
                };

                /**
                 * Encodes the specified ProductListHeaderImage message. Does not implicitly {@link WAE2E.Message.ListMessage.ProductListHeaderImage.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.ListMessage.ProductListHeaderImage
                 * @static
                 * @param {WAE2E.Message.ListMessage.IProductListHeaderImage} message ProductListHeaderImage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ProductListHeaderImage.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.productID != null && Object.hasOwnProperty.call(message, "productID"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.productID);
                    if (message.JPEGThumbnail != null && Object.hasOwnProperty.call(message, "JPEGThumbnail"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.JPEGThumbnail);
                    return writer;
                };

                /**
                 * Encodes the specified ProductListHeaderImage message, length delimited. Does not implicitly {@link WAE2E.Message.ListMessage.ProductListHeaderImage.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.ListMessage.ProductListHeaderImage
                 * @static
                 * @param {WAE2E.Message.ListMessage.IProductListHeaderImage} message ProductListHeaderImage message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ProductListHeaderImage.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ProductListHeaderImage message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.ListMessage.ProductListHeaderImage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.ListMessage.ProductListHeaderImage} ProductListHeaderImage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ProductListHeaderImage.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ListMessage.ProductListHeaderImage();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.productID = reader.string();
                                break;
                            }
                        case 2: {
                                message.JPEGThumbnail = reader.bytes();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ProductListHeaderImage message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.ListMessage.ProductListHeaderImage
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.ListMessage.ProductListHeaderImage} ProductListHeaderImage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ProductListHeaderImage.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ProductListHeaderImage message.
                 * @function verify
                 * @memberof WAE2E.Message.ListMessage.ProductListHeaderImage
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ProductListHeaderImage.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.productID != null && message.hasOwnProperty("productID"))
                        if (!$util.isString(message.productID))
                            return "productID: string expected";
                    if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail"))
                        if (!(message.JPEGThumbnail && typeof message.JPEGThumbnail.length === "number" || $util.isString(message.JPEGThumbnail)))
                            return "JPEGThumbnail: buffer expected";
                    return null;
                };

                /**
                 * Creates a ProductListHeaderImage message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.ListMessage.ProductListHeaderImage
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.ListMessage.ProductListHeaderImage} ProductListHeaderImage
                 */
                ProductListHeaderImage.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.ListMessage.ProductListHeaderImage)
                        return object;
                    var message = new $root.WAE2E.Message.ListMessage.ProductListHeaderImage();
                    if (object.productID != null)
                        message.productID = String(object.productID);
                    if (object.JPEGThumbnail != null)
                        if (typeof object.JPEGThumbnail === "string")
                            $util.base64.decode(object.JPEGThumbnail, message.JPEGThumbnail = $util.newBuffer($util.base64.length(object.JPEGThumbnail)), 0);
                        else if (object.JPEGThumbnail.length >= 0)
                            message.JPEGThumbnail = object.JPEGThumbnail;
                    return message;
                };

                /**
                 * Creates a plain object from a ProductListHeaderImage message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.ListMessage.ProductListHeaderImage
                 * @static
                 * @param {WAE2E.Message.ListMessage.ProductListHeaderImage} message ProductListHeaderImage
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ProductListHeaderImage.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.productID = "";
                        if (options.bytes === String)
                            object.JPEGThumbnail = "";
                        else {
                            object.JPEGThumbnail = [];
                            if (options.bytes !== Array)
                                object.JPEGThumbnail = $util.newBuffer(object.JPEGThumbnail);
                        }
                    }
                    if (message.productID != null && message.hasOwnProperty("productID"))
                        object.productID = message.productID;
                    if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail"))
                        object.JPEGThumbnail = options.bytes === String ? $util.base64.encode(message.JPEGThumbnail, 0, message.JPEGThumbnail.length) : options.bytes === Array ? Array.prototype.slice.call(message.JPEGThumbnail) : message.JPEGThumbnail;
                    return object;
                };

                /**
                 * Converts this ProductListHeaderImage to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.ListMessage.ProductListHeaderImage
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ProductListHeaderImage.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for ProductListHeaderImage
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.ListMessage.ProductListHeaderImage
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ProductListHeaderImage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.ListMessage.ProductListHeaderImage";
                };

                return ProductListHeaderImage;
            })();

            ListMessage.ProductSection = (function() {

                /**
                 * Properties of a ProductSection.
                 * @memberof WAE2E.Message.ListMessage
                 * @interface IProductSection
                 * @property {string|null} [title] ProductSection title
                 * @property {Array.<WAE2E.Message.ListMessage.IProduct>|null} [products] ProductSection products
                 */

                /**
                 * Constructs a new ProductSection.
                 * @memberof WAE2E.Message.ListMessage
                 * @classdesc Represents a ProductSection.
                 * @implements IProductSection
                 * @constructor
                 * @param {WAE2E.Message.ListMessage.IProductSection=} [properties] Properties to set
                 */
                function ProductSection(properties) {
                    this.products = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ProductSection title.
                 * @member {string} title
                 * @memberof WAE2E.Message.ListMessage.ProductSection
                 * @instance
                 */
                ProductSection.prototype.title = "";

                /**
                 * ProductSection products.
                 * @member {Array.<WAE2E.Message.ListMessage.IProduct>} products
                 * @memberof WAE2E.Message.ListMessage.ProductSection
                 * @instance
                 */
                ProductSection.prototype.products = $util.emptyArray;

                /**
                 * Creates a new ProductSection instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.ListMessage.ProductSection
                 * @static
                 * @param {WAE2E.Message.ListMessage.IProductSection=} [properties] Properties to set
                 * @returns {WAE2E.Message.ListMessage.ProductSection} ProductSection instance
                 */
                ProductSection.create = function create(properties) {
                    return new ProductSection(properties);
                };

                /**
                 * Encodes the specified ProductSection message. Does not implicitly {@link WAE2E.Message.ListMessage.ProductSection.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.ListMessage.ProductSection
                 * @static
                 * @param {WAE2E.Message.ListMessage.IProductSection} message ProductSection message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ProductSection.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                    if (message.products != null && message.products.length)
                        for (var i = 0; i < message.products.length; ++i)
                            $root.WAE2E.Message.ListMessage.Product.encode(message.products[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ProductSection message, length delimited. Does not implicitly {@link WAE2E.Message.ListMessage.ProductSection.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.ListMessage.ProductSection
                 * @static
                 * @param {WAE2E.Message.ListMessage.IProductSection} message ProductSection message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ProductSection.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ProductSection message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.ListMessage.ProductSection
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.ListMessage.ProductSection} ProductSection
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ProductSection.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ListMessage.ProductSection();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.title = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.products && message.products.length))
                                    message.products = [];
                                message.products.push($root.WAE2E.Message.ListMessage.Product.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ProductSection message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.ListMessage.ProductSection
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.ListMessage.ProductSection} ProductSection
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ProductSection.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ProductSection message.
                 * @function verify
                 * @memberof WAE2E.Message.ListMessage.ProductSection
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ProductSection.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.products != null && message.hasOwnProperty("products")) {
                        if (!Array.isArray(message.products))
                            return "products: array expected";
                        for (var i = 0; i < message.products.length; ++i) {
                            var error = $root.WAE2E.Message.ListMessage.Product.verify(message.products[i]);
                            if (error)
                                return "products." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a ProductSection message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.ListMessage.ProductSection
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.ListMessage.ProductSection} ProductSection
                 */
                ProductSection.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.ListMessage.ProductSection)
                        return object;
                    var message = new $root.WAE2E.Message.ListMessage.ProductSection();
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.products) {
                        if (!Array.isArray(object.products))
                            throw TypeError(".WAE2E.Message.ListMessage.ProductSection.products: array expected");
                        message.products = [];
                        for (var i = 0; i < object.products.length; ++i) {
                            if (typeof object.products[i] !== "object")
                                throw TypeError(".WAE2E.Message.ListMessage.ProductSection.products: object expected");
                            message.products[i] = $root.WAE2E.Message.ListMessage.Product.fromObject(object.products[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ProductSection message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.ListMessage.ProductSection
                 * @static
                 * @param {WAE2E.Message.ListMessage.ProductSection} message ProductSection
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ProductSection.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.products = [];
                    if (options.defaults)
                        object.title = "";
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.products && message.products.length) {
                        object.products = [];
                        for (var j = 0; j < message.products.length; ++j)
                            object.products[j] = $root.WAE2E.Message.ListMessage.Product.toObject(message.products[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this ProductSection to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.ListMessage.ProductSection
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ProductSection.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for ProductSection
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.ListMessage.ProductSection
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ProductSection.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.ListMessage.ProductSection";
                };

                return ProductSection;
            })();

            ListMessage.Product = (function() {

                /**
                 * Properties of a Product.
                 * @memberof WAE2E.Message.ListMessage
                 * @interface IProduct
                 * @property {string|null} [productID] Product productID
                 */

                /**
                 * Constructs a new Product.
                 * @memberof WAE2E.Message.ListMessage
                 * @classdesc Represents a Product.
                 * @implements IProduct
                 * @constructor
                 * @param {WAE2E.Message.ListMessage.IProduct=} [properties] Properties to set
                 */
                function Product(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Product productID.
                 * @member {string} productID
                 * @memberof WAE2E.Message.ListMessage.Product
                 * @instance
                 */
                Product.prototype.productID = "";

                /**
                 * Creates a new Product instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.ListMessage.Product
                 * @static
                 * @param {WAE2E.Message.ListMessage.IProduct=} [properties] Properties to set
                 * @returns {WAE2E.Message.ListMessage.Product} Product instance
                 */
                Product.create = function create(properties) {
                    return new Product(properties);
                };

                /**
                 * Encodes the specified Product message. Does not implicitly {@link WAE2E.Message.ListMessage.Product.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.ListMessage.Product
                 * @static
                 * @param {WAE2E.Message.ListMessage.IProduct} message Product message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Product.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.productID != null && Object.hasOwnProperty.call(message, "productID"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.productID);
                    return writer;
                };

                /**
                 * Encodes the specified Product message, length delimited. Does not implicitly {@link WAE2E.Message.ListMessage.Product.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.ListMessage.Product
                 * @static
                 * @param {WAE2E.Message.ListMessage.IProduct} message Product message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Product.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Product message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.ListMessage.Product
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.ListMessage.Product} Product
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Product.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ListMessage.Product();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.productID = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Product message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.ListMessage.Product
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.ListMessage.Product} Product
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Product.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Product message.
                 * @function verify
                 * @memberof WAE2E.Message.ListMessage.Product
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Product.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.productID != null && message.hasOwnProperty("productID"))
                        if (!$util.isString(message.productID))
                            return "productID: string expected";
                    return null;
                };

                /**
                 * Creates a Product message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.ListMessage.Product
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.ListMessage.Product} Product
                 */
                Product.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.ListMessage.Product)
                        return object;
                    var message = new $root.WAE2E.Message.ListMessage.Product();
                    if (object.productID != null)
                        message.productID = String(object.productID);
                    return message;
                };

                /**
                 * Creates a plain object from a Product message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.ListMessage.Product
                 * @static
                 * @param {WAE2E.Message.ListMessage.Product} message Product
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Product.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.productID = "";
                    if (message.productID != null && message.hasOwnProperty("productID"))
                        object.productID = message.productID;
                    return object;
                };

                /**
                 * Converts this Product to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.ListMessage.Product
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Product.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Product
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.ListMessage.Product
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Product.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.ListMessage.Product";
                };

                return Product;
            })();

            ListMessage.Section = (function() {

                /**
                 * Properties of a Section.
                 * @memberof WAE2E.Message.ListMessage
                 * @interface ISection
                 * @property {string|null} [title] Section title
                 * @property {Array.<WAE2E.Message.ListMessage.IRow>|null} [rows] Section rows
                 */

                /**
                 * Constructs a new Section.
                 * @memberof WAE2E.Message.ListMessage
                 * @classdesc Represents a Section.
                 * @implements ISection
                 * @constructor
                 * @param {WAE2E.Message.ListMessage.ISection=} [properties] Properties to set
                 */
                function Section(properties) {
                    this.rows = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Section title.
                 * @member {string} title
                 * @memberof WAE2E.Message.ListMessage.Section
                 * @instance
                 */
                Section.prototype.title = "";

                /**
                 * Section rows.
                 * @member {Array.<WAE2E.Message.ListMessage.IRow>} rows
                 * @memberof WAE2E.Message.ListMessage.Section
                 * @instance
                 */
                Section.prototype.rows = $util.emptyArray;

                /**
                 * Creates a new Section instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.ListMessage.Section
                 * @static
                 * @param {WAE2E.Message.ListMessage.ISection=} [properties] Properties to set
                 * @returns {WAE2E.Message.ListMessage.Section} Section instance
                 */
                Section.create = function create(properties) {
                    return new Section(properties);
                };

                /**
                 * Encodes the specified Section message. Does not implicitly {@link WAE2E.Message.ListMessage.Section.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.ListMessage.Section
                 * @static
                 * @param {WAE2E.Message.ListMessage.ISection} message Section message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Section.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                    if (message.rows != null && message.rows.length)
                        for (var i = 0; i < message.rows.length; ++i)
                            $root.WAE2E.Message.ListMessage.Row.encode(message.rows[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified Section message, length delimited. Does not implicitly {@link WAE2E.Message.ListMessage.Section.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.ListMessage.Section
                 * @static
                 * @param {WAE2E.Message.ListMessage.ISection} message Section message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Section.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Section message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.ListMessage.Section
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.ListMessage.Section} Section
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Section.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ListMessage.Section();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.title = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.rows && message.rows.length))
                                    message.rows = [];
                                message.rows.push($root.WAE2E.Message.ListMessage.Row.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Section message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.ListMessage.Section
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.ListMessage.Section} Section
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Section.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Section message.
                 * @function verify
                 * @memberof WAE2E.Message.ListMessage.Section
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Section.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.rows != null && message.hasOwnProperty("rows")) {
                        if (!Array.isArray(message.rows))
                            return "rows: array expected";
                        for (var i = 0; i < message.rows.length; ++i) {
                            var error = $root.WAE2E.Message.ListMessage.Row.verify(message.rows[i]);
                            if (error)
                                return "rows." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a Section message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.ListMessage.Section
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.ListMessage.Section} Section
                 */
                Section.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.ListMessage.Section)
                        return object;
                    var message = new $root.WAE2E.Message.ListMessage.Section();
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.rows) {
                        if (!Array.isArray(object.rows))
                            throw TypeError(".WAE2E.Message.ListMessage.Section.rows: array expected");
                        message.rows = [];
                        for (var i = 0; i < object.rows.length; ++i) {
                            if (typeof object.rows[i] !== "object")
                                throw TypeError(".WAE2E.Message.ListMessage.Section.rows: object expected");
                            message.rows[i] = $root.WAE2E.Message.ListMessage.Row.fromObject(object.rows[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Section message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.ListMessage.Section
                 * @static
                 * @param {WAE2E.Message.ListMessage.Section} message Section
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Section.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.rows = [];
                    if (options.defaults)
                        object.title = "";
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.rows && message.rows.length) {
                        object.rows = [];
                        for (var j = 0; j < message.rows.length; ++j)
                            object.rows[j] = $root.WAE2E.Message.ListMessage.Row.toObject(message.rows[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this Section to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.ListMessage.Section
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Section.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Section
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.ListMessage.Section
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Section.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.ListMessage.Section";
                };

                return Section;
            })();

            ListMessage.Row = (function() {

                /**
                 * Properties of a Row.
                 * @memberof WAE2E.Message.ListMessage
                 * @interface IRow
                 * @property {string|null} [title] Row title
                 * @property {string|null} [description] Row description
                 * @property {string|null} [rowID] Row rowID
                 */

                /**
                 * Constructs a new Row.
                 * @memberof WAE2E.Message.ListMessage
                 * @classdesc Represents a Row.
                 * @implements IRow
                 * @constructor
                 * @param {WAE2E.Message.ListMessage.IRow=} [properties] Properties to set
                 */
                function Row(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Row title.
                 * @member {string} title
                 * @memberof WAE2E.Message.ListMessage.Row
                 * @instance
                 */
                Row.prototype.title = "";

                /**
                 * Row description.
                 * @member {string} description
                 * @memberof WAE2E.Message.ListMessage.Row
                 * @instance
                 */
                Row.prototype.description = "";

                /**
                 * Row rowID.
                 * @member {string} rowID
                 * @memberof WAE2E.Message.ListMessage.Row
                 * @instance
                 */
                Row.prototype.rowID = "";

                /**
                 * Creates a new Row instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.ListMessage.Row
                 * @static
                 * @param {WAE2E.Message.ListMessage.IRow=} [properties] Properties to set
                 * @returns {WAE2E.Message.ListMessage.Row} Row instance
                 */
                Row.create = function create(properties) {
                    return new Row(properties);
                };

                /**
                 * Encodes the specified Row message. Does not implicitly {@link WAE2E.Message.ListMessage.Row.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.ListMessage.Row
                 * @static
                 * @param {WAE2E.Message.ListMessage.IRow} message Row message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Row.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                    if (message.rowID != null && Object.hasOwnProperty.call(message, "rowID"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.rowID);
                    return writer;
                };

                /**
                 * Encodes the specified Row message, length delimited. Does not implicitly {@link WAE2E.Message.ListMessage.Row.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.ListMessage.Row
                 * @static
                 * @param {WAE2E.Message.ListMessage.IRow} message Row message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Row.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Row message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.ListMessage.Row
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.ListMessage.Row} Row
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Row.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ListMessage.Row();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.title = reader.string();
                                break;
                            }
                        case 2: {
                                message.description = reader.string();
                                break;
                            }
                        case 3: {
                                message.rowID = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Row message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.ListMessage.Row
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.ListMessage.Row} Row
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Row.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Row message.
                 * @function verify
                 * @memberof WAE2E.Message.ListMessage.Row
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Row.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.rowID != null && message.hasOwnProperty("rowID"))
                        if (!$util.isString(message.rowID))
                            return "rowID: string expected";
                    return null;
                };

                /**
                 * Creates a Row message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.ListMessage.Row
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.ListMessage.Row} Row
                 */
                Row.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.ListMessage.Row)
                        return object;
                    var message = new $root.WAE2E.Message.ListMessage.Row();
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.rowID != null)
                        message.rowID = String(object.rowID);
                    return message;
                };

                /**
                 * Creates a plain object from a Row message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.ListMessage.Row
                 * @static
                 * @param {WAE2E.Message.ListMessage.Row} message Row
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Row.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.title = "";
                        object.description = "";
                        object.rowID = "";
                    }
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.rowID != null && message.hasOwnProperty("rowID"))
                        object.rowID = message.rowID;
                    return object;
                };

                /**
                 * Converts this Row to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.ListMessage.Row
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Row.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Row
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.ListMessage.Row
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Row.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.ListMessage.Row";
                };

                return Row;
            })();

            return ListMessage;
        })();

        Message.OrderMessage = (function() {

            /**
             * Properties of an OrderMessage.
             * @memberof WAE2E.Message
             * @interface IOrderMessage
             * @property {string|null} [orderID] OrderMessage orderID
             * @property {Uint8Array|null} [thumbnail] OrderMessage thumbnail
             * @property {number|null} [itemCount] OrderMessage itemCount
             * @property {WAE2E.Message.OrderMessage.OrderStatus|null} [status] OrderMessage status
             * @property {WAE2E.Message.OrderMessage.OrderSurface|null} [surface] OrderMessage surface
             * @property {string|null} [message] OrderMessage message
             * @property {string|null} [orderTitle] OrderMessage orderTitle
             * @property {string|null} [sellerJID] OrderMessage sellerJID
             * @property {string|null} [token] OrderMessage token
             * @property {number|Long|null} [totalAmount1000] OrderMessage totalAmount1000
             * @property {string|null} [totalCurrencyCode] OrderMessage totalCurrencyCode
             * @property {WAE2E.IContextInfo|null} [contextInfo] OrderMessage contextInfo
             * @property {number|null} [messageVersion] OrderMessage messageVersion
             * @property {WAProtocol.IMessageKey|null} [orderRequestMessageID] OrderMessage orderRequestMessageID
             */

            /**
             * Constructs a new OrderMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents an OrderMessage.
             * @implements IOrderMessage
             * @constructor
             * @param {WAE2E.Message.IOrderMessage=} [properties] Properties to set
             */
            function OrderMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OrderMessage orderID.
             * @member {string} orderID
             * @memberof WAE2E.Message.OrderMessage
             * @instance
             */
            OrderMessage.prototype.orderID = "";

            /**
             * OrderMessage thumbnail.
             * @member {Uint8Array} thumbnail
             * @memberof WAE2E.Message.OrderMessage
             * @instance
             */
            OrderMessage.prototype.thumbnail = $util.newBuffer([]);

            /**
             * OrderMessage itemCount.
             * @member {number} itemCount
             * @memberof WAE2E.Message.OrderMessage
             * @instance
             */
            OrderMessage.prototype.itemCount = 0;

            /**
             * OrderMessage status.
             * @member {WAE2E.Message.OrderMessage.OrderStatus} status
             * @memberof WAE2E.Message.OrderMessage
             * @instance
             */
            OrderMessage.prototype.status = 1;

            /**
             * OrderMessage surface.
             * @member {WAE2E.Message.OrderMessage.OrderSurface} surface
             * @memberof WAE2E.Message.OrderMessage
             * @instance
             */
            OrderMessage.prototype.surface = 1;

            /**
             * OrderMessage message.
             * @member {string} message
             * @memberof WAE2E.Message.OrderMessage
             * @instance
             */
            OrderMessage.prototype.message = "";

            /**
             * OrderMessage orderTitle.
             * @member {string} orderTitle
             * @memberof WAE2E.Message.OrderMessage
             * @instance
             */
            OrderMessage.prototype.orderTitle = "";

            /**
             * OrderMessage sellerJID.
             * @member {string} sellerJID
             * @memberof WAE2E.Message.OrderMessage
             * @instance
             */
            OrderMessage.prototype.sellerJID = "";

            /**
             * OrderMessage token.
             * @member {string} token
             * @memberof WAE2E.Message.OrderMessage
             * @instance
             */
            OrderMessage.prototype.token = "";

            /**
             * OrderMessage totalAmount1000.
             * @member {number|Long} totalAmount1000
             * @memberof WAE2E.Message.OrderMessage
             * @instance
             */
            OrderMessage.prototype.totalAmount1000 = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * OrderMessage totalCurrencyCode.
             * @member {string} totalCurrencyCode
             * @memberof WAE2E.Message.OrderMessage
             * @instance
             */
            OrderMessage.prototype.totalCurrencyCode = "";

            /**
             * OrderMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.OrderMessage
             * @instance
             */
            OrderMessage.prototype.contextInfo = null;

            /**
             * OrderMessage messageVersion.
             * @member {number} messageVersion
             * @memberof WAE2E.Message.OrderMessage
             * @instance
             */
            OrderMessage.prototype.messageVersion = 0;

            /**
             * OrderMessage orderRequestMessageID.
             * @member {WAProtocol.IMessageKey|null|undefined} orderRequestMessageID
             * @memberof WAE2E.Message.OrderMessage
             * @instance
             */
            OrderMessage.prototype.orderRequestMessageID = null;

            /**
             * Creates a new OrderMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.OrderMessage
             * @static
             * @param {WAE2E.Message.IOrderMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.OrderMessage} OrderMessage instance
             */
            OrderMessage.create = function create(properties) {
                return new OrderMessage(properties);
            };

            /**
             * Encodes the specified OrderMessage message. Does not implicitly {@link WAE2E.Message.OrderMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.OrderMessage
             * @static
             * @param {WAE2E.Message.IOrderMessage} message OrderMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OrderMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.orderID != null && Object.hasOwnProperty.call(message, "orderID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.orderID);
                if (message.thumbnail != null && Object.hasOwnProperty.call(message, "thumbnail"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.thumbnail);
                if (message.itemCount != null && Object.hasOwnProperty.call(message, "itemCount"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.itemCount);
                if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.status);
                if (message.surface != null && Object.hasOwnProperty.call(message, "surface"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.surface);
                if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.message);
                if (message.orderTitle != null && Object.hasOwnProperty.call(message, "orderTitle"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.orderTitle);
                if (message.sellerJID != null && Object.hasOwnProperty.call(message, "sellerJID"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.sellerJID);
                if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.token);
                if (message.totalAmount1000 != null && Object.hasOwnProperty.call(message, "totalAmount1000"))
                    writer.uint32(/* id 10, wireType 0 =*/80).int64(message.totalAmount1000);
                if (message.totalCurrencyCode != null && Object.hasOwnProperty.call(message, "totalCurrencyCode"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.totalCurrencyCode);
                if (message.messageVersion != null && Object.hasOwnProperty.call(message, "messageVersion"))
                    writer.uint32(/* id 12, wireType 0 =*/96).int32(message.messageVersion);
                if (message.orderRequestMessageID != null && Object.hasOwnProperty.call(message, "orderRequestMessageID"))
                    $root.WAProtocol.MessageKey.encode(message.orderRequestMessageID, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OrderMessage message, length delimited. Does not implicitly {@link WAE2E.Message.OrderMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.OrderMessage
             * @static
             * @param {WAE2E.Message.IOrderMessage} message OrderMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OrderMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OrderMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.OrderMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.OrderMessage} OrderMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OrderMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.OrderMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.orderID = reader.string();
                            break;
                        }
                    case 2: {
                            message.thumbnail = reader.bytes();
                            break;
                        }
                    case 3: {
                            message.itemCount = reader.int32();
                            break;
                        }
                    case 4: {
                            message.status = reader.int32();
                            break;
                        }
                    case 5: {
                            message.surface = reader.int32();
                            break;
                        }
                    case 6: {
                            message.message = reader.string();
                            break;
                        }
                    case 7: {
                            message.orderTitle = reader.string();
                            break;
                        }
                    case 8: {
                            message.sellerJID = reader.string();
                            break;
                        }
                    case 9: {
                            message.token = reader.string();
                            break;
                        }
                    case 10: {
                            message.totalAmount1000 = reader.int64();
                            break;
                        }
                    case 11: {
                            message.totalCurrencyCode = reader.string();
                            break;
                        }
                    case 17: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    case 12: {
                            message.messageVersion = reader.int32();
                            break;
                        }
                    case 13: {
                            message.orderRequestMessageID = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OrderMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.OrderMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.OrderMessage} OrderMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OrderMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OrderMessage message.
             * @function verify
             * @memberof WAE2E.Message.OrderMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OrderMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.orderID != null && message.hasOwnProperty("orderID"))
                    if (!$util.isString(message.orderID))
                        return "orderID: string expected";
                if (message.thumbnail != null && message.hasOwnProperty("thumbnail"))
                    if (!(message.thumbnail && typeof message.thumbnail.length === "number" || $util.isString(message.thumbnail)))
                        return "thumbnail: buffer expected";
                if (message.itemCount != null && message.hasOwnProperty("itemCount"))
                    if (!$util.isInteger(message.itemCount))
                        return "itemCount: integer expected";
                if (message.status != null && message.hasOwnProperty("status"))
                    switch (message.status) {
                    default:
                        return "status: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.surface != null && message.hasOwnProperty("surface"))
                    switch (message.surface) {
                    default:
                        return "surface: enum value expected";
                    case 1:
                        break;
                    }
                if (message.message != null && message.hasOwnProperty("message"))
                    if (!$util.isString(message.message))
                        return "message: string expected";
                if (message.orderTitle != null && message.hasOwnProperty("orderTitle"))
                    if (!$util.isString(message.orderTitle))
                        return "orderTitle: string expected";
                if (message.sellerJID != null && message.hasOwnProperty("sellerJID"))
                    if (!$util.isString(message.sellerJID))
                        return "sellerJID: string expected";
                if (message.token != null && message.hasOwnProperty("token"))
                    if (!$util.isString(message.token))
                        return "token: string expected";
                if (message.totalAmount1000 != null && message.hasOwnProperty("totalAmount1000"))
                    if (!$util.isInteger(message.totalAmount1000) && !(message.totalAmount1000 && $util.isInteger(message.totalAmount1000.low) && $util.isInteger(message.totalAmount1000.high)))
                        return "totalAmount1000: integer|Long expected";
                if (message.totalCurrencyCode != null && message.hasOwnProperty("totalCurrencyCode"))
                    if (!$util.isString(message.totalCurrencyCode))
                        return "totalCurrencyCode: string expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                if (message.messageVersion != null && message.hasOwnProperty("messageVersion"))
                    if (!$util.isInteger(message.messageVersion))
                        return "messageVersion: integer expected";
                if (message.orderRequestMessageID != null && message.hasOwnProperty("orderRequestMessageID")) {
                    var error = $root.WAProtocol.MessageKey.verify(message.orderRequestMessageID);
                    if (error)
                        return "orderRequestMessageID." + error;
                }
                return null;
            };

            /**
             * Creates an OrderMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.OrderMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.OrderMessage} OrderMessage
             */
            OrderMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.OrderMessage)
                    return object;
                var message = new $root.WAE2E.Message.OrderMessage();
                if (object.orderID != null)
                    message.orderID = String(object.orderID);
                if (object.thumbnail != null)
                    if (typeof object.thumbnail === "string")
                        $util.base64.decode(object.thumbnail, message.thumbnail = $util.newBuffer($util.base64.length(object.thumbnail)), 0);
                    else if (object.thumbnail.length >= 0)
                        message.thumbnail = object.thumbnail;
                if (object.itemCount != null)
                    message.itemCount = object.itemCount | 0;
                switch (object.status) {
                default:
                    if (typeof object.status === "number") {
                        message.status = object.status;
                        break;
                    }
                    break;
                case "INQUIRY":
                case 1:
                    message.status = 1;
                    break;
                case "ACCEPTED":
                case 2:
                    message.status = 2;
                    break;
                case "DECLINED":
                case 3:
                    message.status = 3;
                    break;
                }
                switch (object.surface) {
                default:
                    if (typeof object.surface === "number") {
                        message.surface = object.surface;
                        break;
                    }
                    break;
                case "CATALOG":
                case 1:
                    message.surface = 1;
                    break;
                }
                if (object.message != null)
                    message.message = String(object.message);
                if (object.orderTitle != null)
                    message.orderTitle = String(object.orderTitle);
                if (object.sellerJID != null)
                    message.sellerJID = String(object.sellerJID);
                if (object.token != null)
                    message.token = String(object.token);
                if (object.totalAmount1000 != null)
                    if ($util.Long)
                        (message.totalAmount1000 = $util.Long.fromValue(object.totalAmount1000)).unsigned = false;
                    else if (typeof object.totalAmount1000 === "string")
                        message.totalAmount1000 = parseInt(object.totalAmount1000, 10);
                    else if (typeof object.totalAmount1000 === "number")
                        message.totalAmount1000 = object.totalAmount1000;
                    else if (typeof object.totalAmount1000 === "object")
                        message.totalAmount1000 = new $util.LongBits(object.totalAmount1000.low >>> 0, object.totalAmount1000.high >>> 0).toNumber();
                if (object.totalCurrencyCode != null)
                    message.totalCurrencyCode = String(object.totalCurrencyCode);
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.OrderMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                if (object.messageVersion != null)
                    message.messageVersion = object.messageVersion | 0;
                if (object.orderRequestMessageID != null) {
                    if (typeof object.orderRequestMessageID !== "object")
                        throw TypeError(".WAE2E.Message.OrderMessage.orderRequestMessageID: object expected");
                    message.orderRequestMessageID = $root.WAProtocol.MessageKey.fromObject(object.orderRequestMessageID);
                }
                return message;
            };

            /**
             * Creates a plain object from an OrderMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.OrderMessage
             * @static
             * @param {WAE2E.Message.OrderMessage} message OrderMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OrderMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.orderID = "";
                    if (options.bytes === String)
                        object.thumbnail = "";
                    else {
                        object.thumbnail = [];
                        if (options.bytes !== Array)
                            object.thumbnail = $util.newBuffer(object.thumbnail);
                    }
                    object.itemCount = 0;
                    object.status = options.enums === String ? "INQUIRY" : 1;
                    object.surface = options.enums === String ? "CATALOG" : 1;
                    object.message = "";
                    object.orderTitle = "";
                    object.sellerJID = "";
                    object.token = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.totalAmount1000 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.totalAmount1000 = options.longs === String ? "0" : 0;
                    object.totalCurrencyCode = "";
                    object.messageVersion = 0;
                    object.orderRequestMessageID = null;
                    object.contextInfo = null;
                }
                if (message.orderID != null && message.hasOwnProperty("orderID"))
                    object.orderID = message.orderID;
                if (message.thumbnail != null && message.hasOwnProperty("thumbnail"))
                    object.thumbnail = options.bytes === String ? $util.base64.encode(message.thumbnail, 0, message.thumbnail.length) : options.bytes === Array ? Array.prototype.slice.call(message.thumbnail) : message.thumbnail;
                if (message.itemCount != null && message.hasOwnProperty("itemCount"))
                    object.itemCount = message.itemCount;
                if (message.status != null && message.hasOwnProperty("status"))
                    object.status = options.enums === String ? $root.WAE2E.Message.OrderMessage.OrderStatus[message.status] === undefined ? message.status : $root.WAE2E.Message.OrderMessage.OrderStatus[message.status] : message.status;
                if (message.surface != null && message.hasOwnProperty("surface"))
                    object.surface = options.enums === String ? $root.WAE2E.Message.OrderMessage.OrderSurface[message.surface] === undefined ? message.surface : $root.WAE2E.Message.OrderMessage.OrderSurface[message.surface] : message.surface;
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                if (message.orderTitle != null && message.hasOwnProperty("orderTitle"))
                    object.orderTitle = message.orderTitle;
                if (message.sellerJID != null && message.hasOwnProperty("sellerJID"))
                    object.sellerJID = message.sellerJID;
                if (message.token != null && message.hasOwnProperty("token"))
                    object.token = message.token;
                if (message.totalAmount1000 != null && message.hasOwnProperty("totalAmount1000"))
                    if (typeof message.totalAmount1000 === "number")
                        object.totalAmount1000 = options.longs === String ? String(message.totalAmount1000) : message.totalAmount1000;
                    else
                        object.totalAmount1000 = options.longs === String ? $util.Long.prototype.toString.call(message.totalAmount1000) : options.longs === Number ? new $util.LongBits(message.totalAmount1000.low >>> 0, message.totalAmount1000.high >>> 0).toNumber() : message.totalAmount1000;
                if (message.totalCurrencyCode != null && message.hasOwnProperty("totalCurrencyCode"))
                    object.totalCurrencyCode = message.totalCurrencyCode;
                if (message.messageVersion != null && message.hasOwnProperty("messageVersion"))
                    object.messageVersion = message.messageVersion;
                if (message.orderRequestMessageID != null && message.hasOwnProperty("orderRequestMessageID"))
                    object.orderRequestMessageID = $root.WAProtocol.MessageKey.toObject(message.orderRequestMessageID, options);
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                return object;
            };

            /**
             * Converts this OrderMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.OrderMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OrderMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for OrderMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.OrderMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            OrderMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.OrderMessage";
            };

            /**
             * OrderSurface enum.
             * @name WAE2E.Message.OrderMessage.OrderSurface
             * @enum {number}
             * @property {number} CATALOG=1 CATALOG value
             */
            OrderMessage.OrderSurface = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "CATALOG"] = 1;
                return values;
            })();

            /**
             * OrderStatus enum.
             * @name WAE2E.Message.OrderMessage.OrderStatus
             * @enum {number}
             * @property {number} INQUIRY=1 INQUIRY value
             * @property {number} ACCEPTED=2 ACCEPTED value
             * @property {number} DECLINED=3 DECLINED value
             */
            OrderMessage.OrderStatus = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "INQUIRY"] = 1;
                values[valuesById[2] = "ACCEPTED"] = 2;
                values[valuesById[3] = "DECLINED"] = 3;
                return values;
            })();

            return OrderMessage;
        })();

        Message.PaymentInviteMessage = (function() {

            /**
             * Properties of a PaymentInviteMessage.
             * @memberof WAE2E.Message
             * @interface IPaymentInviteMessage
             * @property {WAE2E.Message.PaymentInviteMessage.ServiceType|null} [serviceType] PaymentInviteMessage serviceType
             * @property {number|Long|null} [expiryTimestamp] PaymentInviteMessage expiryTimestamp
             */

            /**
             * Constructs a new PaymentInviteMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a PaymentInviteMessage.
             * @implements IPaymentInviteMessage
             * @constructor
             * @param {WAE2E.Message.IPaymentInviteMessage=} [properties] Properties to set
             */
            function PaymentInviteMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PaymentInviteMessage serviceType.
             * @member {WAE2E.Message.PaymentInviteMessage.ServiceType} serviceType
             * @memberof WAE2E.Message.PaymentInviteMessage
             * @instance
             */
            PaymentInviteMessage.prototype.serviceType = 0;

            /**
             * PaymentInviteMessage expiryTimestamp.
             * @member {number|Long} expiryTimestamp
             * @memberof WAE2E.Message.PaymentInviteMessage
             * @instance
             */
            PaymentInviteMessage.prototype.expiryTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new PaymentInviteMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.PaymentInviteMessage
             * @static
             * @param {WAE2E.Message.IPaymentInviteMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.PaymentInviteMessage} PaymentInviteMessage instance
             */
            PaymentInviteMessage.create = function create(properties) {
                return new PaymentInviteMessage(properties);
            };

            /**
             * Encodes the specified PaymentInviteMessage message. Does not implicitly {@link WAE2E.Message.PaymentInviteMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.PaymentInviteMessage
             * @static
             * @param {WAE2E.Message.IPaymentInviteMessage} message PaymentInviteMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PaymentInviteMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.serviceType != null && Object.hasOwnProperty.call(message, "serviceType"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.serviceType);
                if (message.expiryTimestamp != null && Object.hasOwnProperty.call(message, "expiryTimestamp"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.expiryTimestamp);
                return writer;
            };

            /**
             * Encodes the specified PaymentInviteMessage message, length delimited. Does not implicitly {@link WAE2E.Message.PaymentInviteMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.PaymentInviteMessage
             * @static
             * @param {WAE2E.Message.IPaymentInviteMessage} message PaymentInviteMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PaymentInviteMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PaymentInviteMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.PaymentInviteMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.PaymentInviteMessage} PaymentInviteMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PaymentInviteMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PaymentInviteMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.serviceType = reader.int32();
                            break;
                        }
                    case 2: {
                            message.expiryTimestamp = reader.int64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PaymentInviteMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.PaymentInviteMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.PaymentInviteMessage} PaymentInviteMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PaymentInviteMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PaymentInviteMessage message.
             * @function verify
             * @memberof WAE2E.Message.PaymentInviteMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PaymentInviteMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.serviceType != null && message.hasOwnProperty("serviceType"))
                    switch (message.serviceType) {
                    default:
                        return "serviceType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.expiryTimestamp != null && message.hasOwnProperty("expiryTimestamp"))
                    if (!$util.isInteger(message.expiryTimestamp) && !(message.expiryTimestamp && $util.isInteger(message.expiryTimestamp.low) && $util.isInteger(message.expiryTimestamp.high)))
                        return "expiryTimestamp: integer|Long expected";
                return null;
            };

            /**
             * Creates a PaymentInviteMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.PaymentInviteMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.PaymentInviteMessage} PaymentInviteMessage
             */
            PaymentInviteMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.PaymentInviteMessage)
                    return object;
                var message = new $root.WAE2E.Message.PaymentInviteMessage();
                switch (object.serviceType) {
                default:
                    if (typeof object.serviceType === "number") {
                        message.serviceType = object.serviceType;
                        break;
                    }
                    break;
                case "UNKNOWN":
                case 0:
                    message.serviceType = 0;
                    break;
                case "FBPAY":
                case 1:
                    message.serviceType = 1;
                    break;
                case "NOVI":
                case 2:
                    message.serviceType = 2;
                    break;
                case "UPI":
                case 3:
                    message.serviceType = 3;
                    break;
                }
                if (object.expiryTimestamp != null)
                    if ($util.Long)
                        (message.expiryTimestamp = $util.Long.fromValue(object.expiryTimestamp)).unsigned = false;
                    else if (typeof object.expiryTimestamp === "string")
                        message.expiryTimestamp = parseInt(object.expiryTimestamp, 10);
                    else if (typeof object.expiryTimestamp === "number")
                        message.expiryTimestamp = object.expiryTimestamp;
                    else if (typeof object.expiryTimestamp === "object")
                        message.expiryTimestamp = new $util.LongBits(object.expiryTimestamp.low >>> 0, object.expiryTimestamp.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a PaymentInviteMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.PaymentInviteMessage
             * @static
             * @param {WAE2E.Message.PaymentInviteMessage} message PaymentInviteMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PaymentInviteMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.serviceType = options.enums === String ? "UNKNOWN" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.expiryTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.expiryTimestamp = options.longs === String ? "0" : 0;
                }
                if (message.serviceType != null && message.hasOwnProperty("serviceType"))
                    object.serviceType = options.enums === String ? $root.WAE2E.Message.PaymentInviteMessage.ServiceType[message.serviceType] === undefined ? message.serviceType : $root.WAE2E.Message.PaymentInviteMessage.ServiceType[message.serviceType] : message.serviceType;
                if (message.expiryTimestamp != null && message.hasOwnProperty("expiryTimestamp"))
                    if (typeof message.expiryTimestamp === "number")
                        object.expiryTimestamp = options.longs === String ? String(message.expiryTimestamp) : message.expiryTimestamp;
                    else
                        object.expiryTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.expiryTimestamp) : options.longs === Number ? new $util.LongBits(message.expiryTimestamp.low >>> 0, message.expiryTimestamp.high >>> 0).toNumber() : message.expiryTimestamp;
                return object;
            };

            /**
             * Converts this PaymentInviteMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.PaymentInviteMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PaymentInviteMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PaymentInviteMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.PaymentInviteMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PaymentInviteMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.PaymentInviteMessage";
            };

            /**
             * ServiceType enum.
             * @name WAE2E.Message.PaymentInviteMessage.ServiceType
             * @enum {number}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} FBPAY=1 FBPAY value
             * @property {number} NOVI=2 NOVI value
             * @property {number} UPI=3 UPI value
             */
            PaymentInviteMessage.ServiceType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "FBPAY"] = 1;
                values[valuesById[2] = "NOVI"] = 2;
                values[valuesById[3] = "UPI"] = 3;
                return values;
            })();

            return PaymentInviteMessage;
        })();

        Message.HighlyStructuredMessage = (function() {

            /**
             * Properties of a HighlyStructuredMessage.
             * @memberof WAE2E.Message
             * @interface IHighlyStructuredMessage
             * @property {string|null} [namespace] HighlyStructuredMessage namespace
             * @property {string|null} [elementName] HighlyStructuredMessage elementName
             * @property {Array.<string>|null} [params] HighlyStructuredMessage params
             * @property {string|null} [fallbackLg] HighlyStructuredMessage fallbackLg
             * @property {string|null} [fallbackLc] HighlyStructuredMessage fallbackLc
             * @property {Array.<WAE2E.Message.HighlyStructuredMessage.IHSMLocalizableParameter>|null} [localizableParams] HighlyStructuredMessage localizableParams
             * @property {string|null} [deterministicLg] HighlyStructuredMessage deterministicLg
             * @property {string|null} [deterministicLc] HighlyStructuredMessage deterministicLc
             * @property {WAE2E.Message.ITemplateMessage|null} [hydratedHsm] HighlyStructuredMessage hydratedHsm
             */

            /**
             * Constructs a new HighlyStructuredMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a HighlyStructuredMessage.
             * @implements IHighlyStructuredMessage
             * @constructor
             * @param {WAE2E.Message.IHighlyStructuredMessage=} [properties] Properties to set
             */
            function HighlyStructuredMessage(properties) {
                this.params = [];
                this.localizableParams = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HighlyStructuredMessage namespace.
             * @member {string} namespace
             * @memberof WAE2E.Message.HighlyStructuredMessage
             * @instance
             */
            HighlyStructuredMessage.prototype.namespace = "";

            /**
             * HighlyStructuredMessage elementName.
             * @member {string} elementName
             * @memberof WAE2E.Message.HighlyStructuredMessage
             * @instance
             */
            HighlyStructuredMessage.prototype.elementName = "";

            /**
             * HighlyStructuredMessage params.
             * @member {Array.<string>} params
             * @memberof WAE2E.Message.HighlyStructuredMessage
             * @instance
             */
            HighlyStructuredMessage.prototype.params = $util.emptyArray;

            /**
             * HighlyStructuredMessage fallbackLg.
             * @member {string} fallbackLg
             * @memberof WAE2E.Message.HighlyStructuredMessage
             * @instance
             */
            HighlyStructuredMessage.prototype.fallbackLg = "";

            /**
             * HighlyStructuredMessage fallbackLc.
             * @member {string} fallbackLc
             * @memberof WAE2E.Message.HighlyStructuredMessage
             * @instance
             */
            HighlyStructuredMessage.prototype.fallbackLc = "";

            /**
             * HighlyStructuredMessage localizableParams.
             * @member {Array.<WAE2E.Message.HighlyStructuredMessage.IHSMLocalizableParameter>} localizableParams
             * @memberof WAE2E.Message.HighlyStructuredMessage
             * @instance
             */
            HighlyStructuredMessage.prototype.localizableParams = $util.emptyArray;

            /**
             * HighlyStructuredMessage deterministicLg.
             * @member {string} deterministicLg
             * @memberof WAE2E.Message.HighlyStructuredMessage
             * @instance
             */
            HighlyStructuredMessage.prototype.deterministicLg = "";

            /**
             * HighlyStructuredMessage deterministicLc.
             * @member {string} deterministicLc
             * @memberof WAE2E.Message.HighlyStructuredMessage
             * @instance
             */
            HighlyStructuredMessage.prototype.deterministicLc = "";

            /**
             * HighlyStructuredMessage hydratedHsm.
             * @member {WAE2E.Message.ITemplateMessage|null|undefined} hydratedHsm
             * @memberof WAE2E.Message.HighlyStructuredMessage
             * @instance
             */
            HighlyStructuredMessage.prototype.hydratedHsm = null;

            /**
             * Creates a new HighlyStructuredMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.HighlyStructuredMessage
             * @static
             * @param {WAE2E.Message.IHighlyStructuredMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.HighlyStructuredMessage} HighlyStructuredMessage instance
             */
            HighlyStructuredMessage.create = function create(properties) {
                return new HighlyStructuredMessage(properties);
            };

            /**
             * Encodes the specified HighlyStructuredMessage message. Does not implicitly {@link WAE2E.Message.HighlyStructuredMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.HighlyStructuredMessage
             * @static
             * @param {WAE2E.Message.IHighlyStructuredMessage} message HighlyStructuredMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HighlyStructuredMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.namespace != null && Object.hasOwnProperty.call(message, "namespace"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.namespace);
                if (message.elementName != null && Object.hasOwnProperty.call(message, "elementName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.elementName);
                if (message.params != null && message.params.length)
                    for (var i = 0; i < message.params.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.params[i]);
                if (message.fallbackLg != null && Object.hasOwnProperty.call(message, "fallbackLg"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.fallbackLg);
                if (message.fallbackLc != null && Object.hasOwnProperty.call(message, "fallbackLc"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.fallbackLc);
                if (message.localizableParams != null && message.localizableParams.length)
                    for (var i = 0; i < message.localizableParams.length; ++i)
                        $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.encode(message.localizableParams[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.deterministicLg != null && Object.hasOwnProperty.call(message, "deterministicLg"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.deterministicLg);
                if (message.deterministicLc != null && Object.hasOwnProperty.call(message, "deterministicLc"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.deterministicLc);
                if (message.hydratedHsm != null && Object.hasOwnProperty.call(message, "hydratedHsm"))
                    $root.WAE2E.Message.TemplateMessage.encode(message.hydratedHsm, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified HighlyStructuredMessage message, length delimited. Does not implicitly {@link WAE2E.Message.HighlyStructuredMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.HighlyStructuredMessage
             * @static
             * @param {WAE2E.Message.IHighlyStructuredMessage} message HighlyStructuredMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HighlyStructuredMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HighlyStructuredMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.HighlyStructuredMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.HighlyStructuredMessage} HighlyStructuredMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HighlyStructuredMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.HighlyStructuredMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.namespace = reader.string();
                            break;
                        }
                    case 2: {
                            message.elementName = reader.string();
                            break;
                        }
                    case 3: {
                            if (!(message.params && message.params.length))
                                message.params = [];
                            message.params.push(reader.string());
                            break;
                        }
                    case 4: {
                            message.fallbackLg = reader.string();
                            break;
                        }
                    case 5: {
                            message.fallbackLc = reader.string();
                            break;
                        }
                    case 6: {
                            if (!(message.localizableParams && message.localizableParams.length))
                                message.localizableParams = [];
                            message.localizableParams.push($root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.decode(reader, reader.uint32()));
                            break;
                        }
                    case 7: {
                            message.deterministicLg = reader.string();
                            break;
                        }
                    case 8: {
                            message.deterministicLc = reader.string();
                            break;
                        }
                    case 9: {
                            message.hydratedHsm = $root.WAE2E.Message.TemplateMessage.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HighlyStructuredMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.HighlyStructuredMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.HighlyStructuredMessage} HighlyStructuredMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HighlyStructuredMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HighlyStructuredMessage message.
             * @function verify
             * @memberof WAE2E.Message.HighlyStructuredMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HighlyStructuredMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.namespace != null && message.hasOwnProperty("namespace"))
                    if (!$util.isString(message.namespace))
                        return "namespace: string expected";
                if (message.elementName != null && message.hasOwnProperty("elementName"))
                    if (!$util.isString(message.elementName))
                        return "elementName: string expected";
                if (message.params != null && message.hasOwnProperty("params")) {
                    if (!Array.isArray(message.params))
                        return "params: array expected";
                    for (var i = 0; i < message.params.length; ++i)
                        if (!$util.isString(message.params[i]))
                            return "params: string[] expected";
                }
                if (message.fallbackLg != null && message.hasOwnProperty("fallbackLg"))
                    if (!$util.isString(message.fallbackLg))
                        return "fallbackLg: string expected";
                if (message.fallbackLc != null && message.hasOwnProperty("fallbackLc"))
                    if (!$util.isString(message.fallbackLc))
                        return "fallbackLc: string expected";
                if (message.localizableParams != null && message.hasOwnProperty("localizableParams")) {
                    if (!Array.isArray(message.localizableParams))
                        return "localizableParams: array expected";
                    for (var i = 0; i < message.localizableParams.length; ++i) {
                        var error = $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.verify(message.localizableParams[i]);
                        if (error)
                            return "localizableParams." + error;
                    }
                }
                if (message.deterministicLg != null && message.hasOwnProperty("deterministicLg"))
                    if (!$util.isString(message.deterministicLg))
                        return "deterministicLg: string expected";
                if (message.deterministicLc != null && message.hasOwnProperty("deterministicLc"))
                    if (!$util.isString(message.deterministicLc))
                        return "deterministicLc: string expected";
                if (message.hydratedHsm != null && message.hasOwnProperty("hydratedHsm")) {
                    var error = $root.WAE2E.Message.TemplateMessage.verify(message.hydratedHsm);
                    if (error)
                        return "hydratedHsm." + error;
                }
                return null;
            };

            /**
             * Creates a HighlyStructuredMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.HighlyStructuredMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.HighlyStructuredMessage} HighlyStructuredMessage
             */
            HighlyStructuredMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.HighlyStructuredMessage)
                    return object;
                var message = new $root.WAE2E.Message.HighlyStructuredMessage();
                if (object.namespace != null)
                    message.namespace = String(object.namespace);
                if (object.elementName != null)
                    message.elementName = String(object.elementName);
                if (object.params) {
                    if (!Array.isArray(object.params))
                        throw TypeError(".WAE2E.Message.HighlyStructuredMessage.params: array expected");
                    message.params = [];
                    for (var i = 0; i < object.params.length; ++i)
                        message.params[i] = String(object.params[i]);
                }
                if (object.fallbackLg != null)
                    message.fallbackLg = String(object.fallbackLg);
                if (object.fallbackLc != null)
                    message.fallbackLc = String(object.fallbackLc);
                if (object.localizableParams) {
                    if (!Array.isArray(object.localizableParams))
                        throw TypeError(".WAE2E.Message.HighlyStructuredMessage.localizableParams: array expected");
                    message.localizableParams = [];
                    for (var i = 0; i < object.localizableParams.length; ++i) {
                        if (typeof object.localizableParams[i] !== "object")
                            throw TypeError(".WAE2E.Message.HighlyStructuredMessage.localizableParams: object expected");
                        message.localizableParams[i] = $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.fromObject(object.localizableParams[i]);
                    }
                }
                if (object.deterministicLg != null)
                    message.deterministicLg = String(object.deterministicLg);
                if (object.deterministicLc != null)
                    message.deterministicLc = String(object.deterministicLc);
                if (object.hydratedHsm != null) {
                    if (typeof object.hydratedHsm !== "object")
                        throw TypeError(".WAE2E.Message.HighlyStructuredMessage.hydratedHsm: object expected");
                    message.hydratedHsm = $root.WAE2E.Message.TemplateMessage.fromObject(object.hydratedHsm);
                }
                return message;
            };

            /**
             * Creates a plain object from a HighlyStructuredMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.HighlyStructuredMessage
             * @static
             * @param {WAE2E.Message.HighlyStructuredMessage} message HighlyStructuredMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HighlyStructuredMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.params = [];
                    object.localizableParams = [];
                }
                if (options.defaults) {
                    object.namespace = "";
                    object.elementName = "";
                    object.fallbackLg = "";
                    object.fallbackLc = "";
                    object.deterministicLg = "";
                    object.deterministicLc = "";
                    object.hydratedHsm = null;
                }
                if (message.namespace != null && message.hasOwnProperty("namespace"))
                    object.namespace = message.namespace;
                if (message.elementName != null && message.hasOwnProperty("elementName"))
                    object.elementName = message.elementName;
                if (message.params && message.params.length) {
                    object.params = [];
                    for (var j = 0; j < message.params.length; ++j)
                        object.params[j] = message.params[j];
                }
                if (message.fallbackLg != null && message.hasOwnProperty("fallbackLg"))
                    object.fallbackLg = message.fallbackLg;
                if (message.fallbackLc != null && message.hasOwnProperty("fallbackLc"))
                    object.fallbackLc = message.fallbackLc;
                if (message.localizableParams && message.localizableParams.length) {
                    object.localizableParams = [];
                    for (var j = 0; j < message.localizableParams.length; ++j)
                        object.localizableParams[j] = $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.toObject(message.localizableParams[j], options);
                }
                if (message.deterministicLg != null && message.hasOwnProperty("deterministicLg"))
                    object.deterministicLg = message.deterministicLg;
                if (message.deterministicLc != null && message.hasOwnProperty("deterministicLc"))
                    object.deterministicLc = message.deterministicLc;
                if (message.hydratedHsm != null && message.hasOwnProperty("hydratedHsm"))
                    object.hydratedHsm = $root.WAE2E.Message.TemplateMessage.toObject(message.hydratedHsm, options);
                return object;
            };

            /**
             * Converts this HighlyStructuredMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.HighlyStructuredMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HighlyStructuredMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for HighlyStructuredMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.HighlyStructuredMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            HighlyStructuredMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.HighlyStructuredMessage";
            };

            HighlyStructuredMessage.HSMLocalizableParameter = (function() {

                /**
                 * Properties of a HSMLocalizableParameter.
                 * @memberof WAE2E.Message.HighlyStructuredMessage
                 * @interface IHSMLocalizableParameter
                 * @property {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.IHSMCurrency|null} [currency] HSMLocalizableParameter currency
                 * @property {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.IHSMDateTime|null} [dateTime] HSMLocalizableParameter dateTime
                 * @property {string|null} ["default"] HSMLocalizableParameter default
                 */

                /**
                 * Constructs a new HSMLocalizableParameter.
                 * @memberof WAE2E.Message.HighlyStructuredMessage
                 * @classdesc Represents a HSMLocalizableParameter.
                 * @implements IHSMLocalizableParameter
                 * @constructor
                 * @param {WAE2E.Message.HighlyStructuredMessage.IHSMLocalizableParameter=} [properties] Properties to set
                 */
                function HSMLocalizableParameter(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * HSMLocalizableParameter currency.
                 * @member {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.IHSMCurrency|null|undefined} currency
                 * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter
                 * @instance
                 */
                HSMLocalizableParameter.prototype.currency = null;

                /**
                 * HSMLocalizableParameter dateTime.
                 * @member {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.IHSMDateTime|null|undefined} dateTime
                 * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter
                 * @instance
                 */
                HSMLocalizableParameter.prototype.dateTime = null;

                /**
                 * HSMLocalizableParameter default.
                 * @member {string} default
                 * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter
                 * @instance
                 */
                HSMLocalizableParameter.prototype["default"] = "";

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * HSMLocalizableParameter paramOneof.
                 * @member {"currency"|"dateTime"|undefined} paramOneof
                 * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter
                 * @instance
                 */
                Object.defineProperty(HSMLocalizableParameter.prototype, "paramOneof", {
                    get: $util.oneOfGetter($oneOfFields = ["currency", "dateTime"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new HSMLocalizableParameter instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter
                 * @static
                 * @param {WAE2E.Message.HighlyStructuredMessage.IHSMLocalizableParameter=} [properties] Properties to set
                 * @returns {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter} HSMLocalizableParameter instance
                 */
                HSMLocalizableParameter.create = function create(properties) {
                    return new HSMLocalizableParameter(properties);
                };

                /**
                 * Encodes the specified HSMLocalizableParameter message. Does not implicitly {@link WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter
                 * @static
                 * @param {WAE2E.Message.HighlyStructuredMessage.IHSMLocalizableParameter} message HSMLocalizableParameter message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HSMLocalizableParameter.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message["default"] != null && Object.hasOwnProperty.call(message, "default"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message["default"]);
                    if (message.currency != null && Object.hasOwnProperty.call(message, "currency"))
                        $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency.encode(message.currency, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.dateTime != null && Object.hasOwnProperty.call(message, "dateTime"))
                        $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.encode(message.dateTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified HSMLocalizableParameter message, length delimited. Does not implicitly {@link WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter
                 * @static
                 * @param {WAE2E.Message.HighlyStructuredMessage.IHSMLocalizableParameter} message HSMLocalizableParameter message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HSMLocalizableParameter.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a HSMLocalizableParameter message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter} HSMLocalizableParameter
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HSMLocalizableParameter.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                message.currency = $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.dateTime = $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.decode(reader, reader.uint32());
                                break;
                            }
                        case 1: {
                                message["default"] = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a HSMLocalizableParameter message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter} HSMLocalizableParameter
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HSMLocalizableParameter.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a HSMLocalizableParameter message.
                 * @function verify
                 * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HSMLocalizableParameter.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.currency != null && message.hasOwnProperty("currency")) {
                        properties.paramOneof = 1;
                        {
                            var error = $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency.verify(message.currency);
                            if (error)
                                return "currency." + error;
                        }
                    }
                    if (message.dateTime != null && message.hasOwnProperty("dateTime")) {
                        if (properties.paramOneof === 1)
                            return "paramOneof: multiple values";
                        properties.paramOneof = 1;
                        {
                            var error = $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.verify(message.dateTime);
                            if (error)
                                return "dateTime." + error;
                        }
                    }
                    if (message["default"] != null && message.hasOwnProperty("default"))
                        if (!$util.isString(message["default"]))
                            return "default: string expected";
                    return null;
                };

                /**
                 * Creates a HSMLocalizableParameter message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter} HSMLocalizableParameter
                 */
                HSMLocalizableParameter.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter)
                        return object;
                    var message = new $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter();
                    if (object.currency != null) {
                        if (typeof object.currency !== "object")
                            throw TypeError(".WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.currency: object expected");
                        message.currency = $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency.fromObject(object.currency);
                    }
                    if (object.dateTime != null) {
                        if (typeof object.dateTime !== "object")
                            throw TypeError(".WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.dateTime: object expected");
                        message.dateTime = $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.fromObject(object.dateTime);
                    }
                    if (object["default"] != null)
                        message["default"] = String(object["default"]);
                    return message;
                };

                /**
                 * Creates a plain object from a HSMLocalizableParameter message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter
                 * @static
                 * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter} message HSMLocalizableParameter
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HSMLocalizableParameter.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object["default"] = "";
                    if (message["default"] != null && message.hasOwnProperty("default"))
                        object["default"] = message["default"];
                    if (message.currency != null && message.hasOwnProperty("currency")) {
                        object.currency = $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency.toObject(message.currency, options);
                        if (options.oneofs)
                            object.paramOneof = "currency";
                    }
                    if (message.dateTime != null && message.hasOwnProperty("dateTime")) {
                        object.dateTime = $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.toObject(message.dateTime, options);
                        if (options.oneofs)
                            object.paramOneof = "dateTime";
                    }
                    return object;
                };

                /**
                 * Converts this HSMLocalizableParameter to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HSMLocalizableParameter.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for HSMLocalizableParameter
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                HSMLocalizableParameter.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter";
                };

                HSMLocalizableParameter.HSMDateTime = (function() {

                    /**
                     * Properties of a HSMDateTime.
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter
                     * @interface IHSMDateTime
                     * @property {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.IHSMDateTimeComponent|null} [component] HSMDateTime component
                     * @property {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.IHSMDateTimeUnixEpoch|null} [unixEpoch] HSMDateTime unixEpoch
                     */

                    /**
                     * Constructs a new HSMDateTime.
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter
                     * @classdesc Represents a HSMDateTime.
                     * @implements IHSMDateTime
                     * @constructor
                     * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.IHSMDateTime=} [properties] Properties to set
                     */
                    function HSMDateTime(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * HSMDateTime component.
                     * @member {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.IHSMDateTimeComponent|null|undefined} component
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime
                     * @instance
                     */
                    HSMDateTime.prototype.component = null;

                    /**
                     * HSMDateTime unixEpoch.
                     * @member {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.IHSMDateTimeUnixEpoch|null|undefined} unixEpoch
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime
                     * @instance
                     */
                    HSMDateTime.prototype.unixEpoch = null;

                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;

                    /**
                     * HSMDateTime datetimeOneof.
                     * @member {"component"|"unixEpoch"|undefined} datetimeOneof
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime
                     * @instance
                     */
                    Object.defineProperty(HSMDateTime.prototype, "datetimeOneof", {
                        get: $util.oneOfGetter($oneOfFields = ["component", "unixEpoch"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    /**
                     * Creates a new HSMDateTime instance using the specified properties.
                     * @function create
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime
                     * @static
                     * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.IHSMDateTime=} [properties] Properties to set
                     * @returns {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime} HSMDateTime instance
                     */
                    HSMDateTime.create = function create(properties) {
                        return new HSMDateTime(properties);
                    };

                    /**
                     * Encodes the specified HSMDateTime message. Does not implicitly {@link WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.verify|verify} messages.
                     * @function encode
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime
                     * @static
                     * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.IHSMDateTime} message HSMDateTime message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    HSMDateTime.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.component != null && Object.hasOwnProperty.call(message, "component"))
                            $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.encode(message.component, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.unixEpoch != null && Object.hasOwnProperty.call(message, "unixEpoch"))
                            $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch.encode(message.unixEpoch, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified HSMDateTime message, length delimited. Does not implicitly {@link WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime
                     * @static
                     * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.IHSMDateTime} message HSMDateTime message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    HSMDateTime.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a HSMDateTime message from the specified reader or buffer.
                     * @function decode
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime} HSMDateTime
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    HSMDateTime.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.component = $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.unixEpoch = $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a HSMDateTime message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime} HSMDateTime
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    HSMDateTime.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a HSMDateTime message.
                     * @function verify
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    HSMDateTime.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.component != null && message.hasOwnProperty("component")) {
                            properties.datetimeOneof = 1;
                            {
                                var error = $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.verify(message.component);
                                if (error)
                                    return "component." + error;
                            }
                        }
                        if (message.unixEpoch != null && message.hasOwnProperty("unixEpoch")) {
                            if (properties.datetimeOneof === 1)
                                return "datetimeOneof: multiple values";
                            properties.datetimeOneof = 1;
                            {
                                var error = $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch.verify(message.unixEpoch);
                                if (error)
                                    return "unixEpoch." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a HSMDateTime message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime} HSMDateTime
                     */
                    HSMDateTime.fromObject = function fromObject(object) {
                        if (object instanceof $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime)
                            return object;
                        var message = new $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime();
                        if (object.component != null) {
                            if (typeof object.component !== "object")
                                throw TypeError(".WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.component: object expected");
                            message.component = $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.fromObject(object.component);
                        }
                        if (object.unixEpoch != null) {
                            if (typeof object.unixEpoch !== "object")
                                throw TypeError(".WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.unixEpoch: object expected");
                            message.unixEpoch = $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch.fromObject(object.unixEpoch);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a HSMDateTime message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime
                     * @static
                     * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime} message HSMDateTime
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    HSMDateTime.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.component != null && message.hasOwnProperty("component")) {
                            object.component = $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.toObject(message.component, options);
                            if (options.oneofs)
                                object.datetimeOneof = "component";
                        }
                        if (message.unixEpoch != null && message.hasOwnProperty("unixEpoch")) {
                            object.unixEpoch = $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch.toObject(message.unixEpoch, options);
                            if (options.oneofs)
                                object.datetimeOneof = "unixEpoch";
                        }
                        return object;
                    };

                    /**
                     * Converts this HSMDateTime to JSON.
                     * @function toJSON
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    HSMDateTime.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Gets the default type url for HSMDateTime
                     * @function getTypeUrl
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    HSMDateTime.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime";
                    };

                    HSMDateTime.HSMDateTimeComponent = (function() {

                        /**
                         * Properties of a HSMDateTimeComponent.
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime
                         * @interface IHSMDateTimeComponent
                         * @property {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.DayOfWeekType|null} [dayOfWeek] HSMDateTimeComponent dayOfWeek
                         * @property {number|null} [year] HSMDateTimeComponent year
                         * @property {number|null} [month] HSMDateTimeComponent month
                         * @property {number|null} [dayOfMonth] HSMDateTimeComponent dayOfMonth
                         * @property {number|null} [hour] HSMDateTimeComponent hour
                         * @property {number|null} [minute] HSMDateTimeComponent minute
                         * @property {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.CalendarType|null} [calendar] HSMDateTimeComponent calendar
                         */

                        /**
                         * Constructs a new HSMDateTimeComponent.
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime
                         * @classdesc Represents a HSMDateTimeComponent.
                         * @implements IHSMDateTimeComponent
                         * @constructor
                         * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.IHSMDateTimeComponent=} [properties] Properties to set
                         */
                        function HSMDateTimeComponent(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * HSMDateTimeComponent dayOfWeek.
                         * @member {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.DayOfWeekType} dayOfWeek
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent
                         * @instance
                         */
                        HSMDateTimeComponent.prototype.dayOfWeek = 1;

                        /**
                         * HSMDateTimeComponent year.
                         * @member {number} year
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent
                         * @instance
                         */
                        HSMDateTimeComponent.prototype.year = 0;

                        /**
                         * HSMDateTimeComponent month.
                         * @member {number} month
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent
                         * @instance
                         */
                        HSMDateTimeComponent.prototype.month = 0;

                        /**
                         * HSMDateTimeComponent dayOfMonth.
                         * @member {number} dayOfMonth
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent
                         * @instance
                         */
                        HSMDateTimeComponent.prototype.dayOfMonth = 0;

                        /**
                         * HSMDateTimeComponent hour.
                         * @member {number} hour
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent
                         * @instance
                         */
                        HSMDateTimeComponent.prototype.hour = 0;

                        /**
                         * HSMDateTimeComponent minute.
                         * @member {number} minute
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent
                         * @instance
                         */
                        HSMDateTimeComponent.prototype.minute = 0;

                        /**
                         * HSMDateTimeComponent calendar.
                         * @member {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.CalendarType} calendar
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent
                         * @instance
                         */
                        HSMDateTimeComponent.prototype.calendar = 1;

                        /**
                         * Creates a new HSMDateTimeComponent instance using the specified properties.
                         * @function create
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent
                         * @static
                         * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.IHSMDateTimeComponent=} [properties] Properties to set
                         * @returns {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent} HSMDateTimeComponent instance
                         */
                        HSMDateTimeComponent.create = function create(properties) {
                            return new HSMDateTimeComponent(properties);
                        };

                        /**
                         * Encodes the specified HSMDateTimeComponent message. Does not implicitly {@link WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.verify|verify} messages.
                         * @function encode
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent
                         * @static
                         * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.IHSMDateTimeComponent} message HSMDateTimeComponent message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HSMDateTimeComponent.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.dayOfWeek != null && Object.hasOwnProperty.call(message, "dayOfWeek"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.dayOfWeek);
                            if (message.year != null && Object.hasOwnProperty.call(message, "year"))
                                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.year);
                            if (message.month != null && Object.hasOwnProperty.call(message, "month"))
                                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.month);
                            if (message.dayOfMonth != null && Object.hasOwnProperty.call(message, "dayOfMonth"))
                                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.dayOfMonth);
                            if (message.hour != null && Object.hasOwnProperty.call(message, "hour"))
                                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.hour);
                            if (message.minute != null && Object.hasOwnProperty.call(message, "minute"))
                                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.minute);
                            if (message.calendar != null && Object.hasOwnProperty.call(message, "calendar"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.calendar);
                            return writer;
                        };

                        /**
                         * Encodes the specified HSMDateTimeComponent message, length delimited. Does not implicitly {@link WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent
                         * @static
                         * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.IHSMDateTimeComponent} message HSMDateTimeComponent message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HSMDateTimeComponent.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a HSMDateTimeComponent message from the specified reader or buffer.
                         * @function decode
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent} HSMDateTimeComponent
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HSMDateTimeComponent.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.dayOfWeek = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.year = reader.uint32();
                                        break;
                                    }
                                case 3: {
                                        message.month = reader.uint32();
                                        break;
                                    }
                                case 4: {
                                        message.dayOfMonth = reader.uint32();
                                        break;
                                    }
                                case 5: {
                                        message.hour = reader.uint32();
                                        break;
                                    }
                                case 6: {
                                        message.minute = reader.uint32();
                                        break;
                                    }
                                case 7: {
                                        message.calendar = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a HSMDateTimeComponent message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent} HSMDateTimeComponent
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HSMDateTimeComponent.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a HSMDateTimeComponent message.
                         * @function verify
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        HSMDateTimeComponent.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.dayOfWeek != null && message.hasOwnProperty("dayOfWeek"))
                                switch (message.dayOfWeek) {
                                default:
                                    return "dayOfWeek: enum value expected";
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                    break;
                                }
                            if (message.year != null && message.hasOwnProperty("year"))
                                if (!$util.isInteger(message.year))
                                    return "year: integer expected";
                            if (message.month != null && message.hasOwnProperty("month"))
                                if (!$util.isInteger(message.month))
                                    return "month: integer expected";
                            if (message.dayOfMonth != null && message.hasOwnProperty("dayOfMonth"))
                                if (!$util.isInteger(message.dayOfMonth))
                                    return "dayOfMonth: integer expected";
                            if (message.hour != null && message.hasOwnProperty("hour"))
                                if (!$util.isInteger(message.hour))
                                    return "hour: integer expected";
                            if (message.minute != null && message.hasOwnProperty("minute"))
                                if (!$util.isInteger(message.minute))
                                    return "minute: integer expected";
                            if (message.calendar != null && message.hasOwnProperty("calendar"))
                                switch (message.calendar) {
                                default:
                                    return "calendar: enum value expected";
                                case 1:
                                case 2:
                                    break;
                                }
                            return null;
                        };

                        /**
                         * Creates a HSMDateTimeComponent message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent} HSMDateTimeComponent
                         */
                        HSMDateTimeComponent.fromObject = function fromObject(object) {
                            if (object instanceof $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent)
                                return object;
                            var message = new $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent();
                            switch (object.dayOfWeek) {
                            default:
                                if (typeof object.dayOfWeek === "number") {
                                    message.dayOfWeek = object.dayOfWeek;
                                    break;
                                }
                                break;
                            case "MONDAY":
                            case 1:
                                message.dayOfWeek = 1;
                                break;
                            case "TUESDAY":
                            case 2:
                                message.dayOfWeek = 2;
                                break;
                            case "WEDNESDAY":
                            case 3:
                                message.dayOfWeek = 3;
                                break;
                            case "THURSDAY":
                            case 4:
                                message.dayOfWeek = 4;
                                break;
                            case "FRIDAY":
                            case 5:
                                message.dayOfWeek = 5;
                                break;
                            case "SATURDAY":
                            case 6:
                                message.dayOfWeek = 6;
                                break;
                            case "SUNDAY":
                            case 7:
                                message.dayOfWeek = 7;
                                break;
                            }
                            if (object.year != null)
                                message.year = object.year >>> 0;
                            if (object.month != null)
                                message.month = object.month >>> 0;
                            if (object.dayOfMonth != null)
                                message.dayOfMonth = object.dayOfMonth >>> 0;
                            if (object.hour != null)
                                message.hour = object.hour >>> 0;
                            if (object.minute != null)
                                message.minute = object.minute >>> 0;
                            switch (object.calendar) {
                            default:
                                if (typeof object.calendar === "number") {
                                    message.calendar = object.calendar;
                                    break;
                                }
                                break;
                            case "GREGORIAN":
                            case 1:
                                message.calendar = 1;
                                break;
                            case "SOLAR_HIJRI":
                            case 2:
                                message.calendar = 2;
                                break;
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a HSMDateTimeComponent message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent
                         * @static
                         * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent} message HSMDateTimeComponent
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        HSMDateTimeComponent.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.dayOfWeek = options.enums === String ? "MONDAY" : 1;
                                object.year = 0;
                                object.month = 0;
                                object.dayOfMonth = 0;
                                object.hour = 0;
                                object.minute = 0;
                                object.calendar = options.enums === String ? "GREGORIAN" : 1;
                            }
                            if (message.dayOfWeek != null && message.hasOwnProperty("dayOfWeek"))
                                object.dayOfWeek = options.enums === String ? $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.DayOfWeekType[message.dayOfWeek] === undefined ? message.dayOfWeek : $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.DayOfWeekType[message.dayOfWeek] : message.dayOfWeek;
                            if (message.year != null && message.hasOwnProperty("year"))
                                object.year = message.year;
                            if (message.month != null && message.hasOwnProperty("month"))
                                object.month = message.month;
                            if (message.dayOfMonth != null && message.hasOwnProperty("dayOfMonth"))
                                object.dayOfMonth = message.dayOfMonth;
                            if (message.hour != null && message.hasOwnProperty("hour"))
                                object.hour = message.hour;
                            if (message.minute != null && message.hasOwnProperty("minute"))
                                object.minute = message.minute;
                            if (message.calendar != null && message.hasOwnProperty("calendar"))
                                object.calendar = options.enums === String ? $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.CalendarType[message.calendar] === undefined ? message.calendar : $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.CalendarType[message.calendar] : message.calendar;
                            return object;
                        };

                        /**
                         * Converts this HSMDateTimeComponent to JSON.
                         * @function toJSON
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        HSMDateTimeComponent.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for HSMDateTimeComponent
                         * @function getTypeUrl
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        HSMDateTimeComponent.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent";
                        };

                        /**
                         * CalendarType enum.
                         * @name WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.CalendarType
                         * @enum {number}
                         * @property {number} GREGORIAN=1 GREGORIAN value
                         * @property {number} SOLAR_HIJRI=2 SOLAR_HIJRI value
                         */
                        HSMDateTimeComponent.CalendarType = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[1] = "GREGORIAN"] = 1;
                            values[valuesById[2] = "SOLAR_HIJRI"] = 2;
                            return values;
                        })();

                        /**
                         * DayOfWeekType enum.
                         * @name WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeComponent.DayOfWeekType
                         * @enum {number}
                         * @property {number} MONDAY=1 MONDAY value
                         * @property {number} TUESDAY=2 TUESDAY value
                         * @property {number} WEDNESDAY=3 WEDNESDAY value
                         * @property {number} THURSDAY=4 THURSDAY value
                         * @property {number} FRIDAY=5 FRIDAY value
                         * @property {number} SATURDAY=6 SATURDAY value
                         * @property {number} SUNDAY=7 SUNDAY value
                         */
                        HSMDateTimeComponent.DayOfWeekType = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[1] = "MONDAY"] = 1;
                            values[valuesById[2] = "TUESDAY"] = 2;
                            values[valuesById[3] = "WEDNESDAY"] = 3;
                            values[valuesById[4] = "THURSDAY"] = 4;
                            values[valuesById[5] = "FRIDAY"] = 5;
                            values[valuesById[6] = "SATURDAY"] = 6;
                            values[valuesById[7] = "SUNDAY"] = 7;
                            return values;
                        })();

                        return HSMDateTimeComponent;
                    })();

                    HSMDateTime.HSMDateTimeUnixEpoch = (function() {

                        /**
                         * Properties of a HSMDateTimeUnixEpoch.
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime
                         * @interface IHSMDateTimeUnixEpoch
                         * @property {number|Long|null} [timestamp] HSMDateTimeUnixEpoch timestamp
                         */

                        /**
                         * Constructs a new HSMDateTimeUnixEpoch.
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime
                         * @classdesc Represents a HSMDateTimeUnixEpoch.
                         * @implements IHSMDateTimeUnixEpoch
                         * @constructor
                         * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.IHSMDateTimeUnixEpoch=} [properties] Properties to set
                         */
                        function HSMDateTimeUnixEpoch(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * HSMDateTimeUnixEpoch timestamp.
                         * @member {number|Long} timestamp
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch
                         * @instance
                         */
                        HSMDateTimeUnixEpoch.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * Creates a new HSMDateTimeUnixEpoch instance using the specified properties.
                         * @function create
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch
                         * @static
                         * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.IHSMDateTimeUnixEpoch=} [properties] Properties to set
                         * @returns {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch} HSMDateTimeUnixEpoch instance
                         */
                        HSMDateTimeUnixEpoch.create = function create(properties) {
                            return new HSMDateTimeUnixEpoch(properties);
                        };

                        /**
                         * Encodes the specified HSMDateTimeUnixEpoch message. Does not implicitly {@link WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch.verify|verify} messages.
                         * @function encode
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch
                         * @static
                         * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.IHSMDateTimeUnixEpoch} message HSMDateTimeUnixEpoch message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HSMDateTimeUnixEpoch.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.timestamp);
                            return writer;
                        };

                        /**
                         * Encodes the specified HSMDateTimeUnixEpoch message, length delimited. Does not implicitly {@link WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch
                         * @static
                         * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.IHSMDateTimeUnixEpoch} message HSMDateTimeUnixEpoch message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HSMDateTimeUnixEpoch.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a HSMDateTimeUnixEpoch message from the specified reader or buffer.
                         * @function decode
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch} HSMDateTimeUnixEpoch
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HSMDateTimeUnixEpoch.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.timestamp = reader.int64();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a HSMDateTimeUnixEpoch message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch} HSMDateTimeUnixEpoch
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HSMDateTimeUnixEpoch.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a HSMDateTimeUnixEpoch message.
                         * @function verify
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        HSMDateTimeUnixEpoch.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                    return "timestamp: integer|Long expected";
                            return null;
                        };

                        /**
                         * Creates a HSMDateTimeUnixEpoch message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch} HSMDateTimeUnixEpoch
                         */
                        HSMDateTimeUnixEpoch.fromObject = function fromObject(object) {
                            if (object instanceof $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch)
                                return object;
                            var message = new $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch();
                            if (object.timestamp != null)
                                if ($util.Long)
                                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
                                else if (typeof object.timestamp === "string")
                                    message.timestamp = parseInt(object.timestamp, 10);
                                else if (typeof object.timestamp === "number")
                                    message.timestamp = object.timestamp;
                                else if (typeof object.timestamp === "object")
                                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
                            return message;
                        };

                        /**
                         * Creates a plain object from a HSMDateTimeUnixEpoch message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch
                         * @static
                         * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch} message HSMDateTimeUnixEpoch
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        HSMDateTimeUnixEpoch.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.timestamp = options.longs === String ? "0" : 0;
                            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                                if (typeof message.timestamp === "number")
                                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                                else
                                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
                            return object;
                        };

                        /**
                         * Converts this HSMDateTimeUnixEpoch to JSON.
                         * @function toJSON
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        HSMDateTimeUnixEpoch.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for HSMDateTimeUnixEpoch
                         * @function getTypeUrl
                         * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        HSMDateTimeUnixEpoch.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMDateTime.HSMDateTimeUnixEpoch";
                        };

                        return HSMDateTimeUnixEpoch;
                    })();

                    return HSMDateTime;
                })();

                HSMLocalizableParameter.HSMCurrency = (function() {

                    /**
                     * Properties of a HSMCurrency.
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter
                     * @interface IHSMCurrency
                     * @property {string|null} [currencyCode] HSMCurrency currencyCode
                     * @property {number|Long|null} [amount1000] HSMCurrency amount1000
                     */

                    /**
                     * Constructs a new HSMCurrency.
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter
                     * @classdesc Represents a HSMCurrency.
                     * @implements IHSMCurrency
                     * @constructor
                     * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.IHSMCurrency=} [properties] Properties to set
                     */
                    function HSMCurrency(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * HSMCurrency currencyCode.
                     * @member {string} currencyCode
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency
                     * @instance
                     */
                    HSMCurrency.prototype.currencyCode = "";

                    /**
                     * HSMCurrency amount1000.
                     * @member {number|Long} amount1000
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency
                     * @instance
                     */
                    HSMCurrency.prototype.amount1000 = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * Creates a new HSMCurrency instance using the specified properties.
                     * @function create
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency
                     * @static
                     * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.IHSMCurrency=} [properties] Properties to set
                     * @returns {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency} HSMCurrency instance
                     */
                    HSMCurrency.create = function create(properties) {
                        return new HSMCurrency(properties);
                    };

                    /**
                     * Encodes the specified HSMCurrency message. Does not implicitly {@link WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency.verify|verify} messages.
                     * @function encode
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency
                     * @static
                     * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.IHSMCurrency} message HSMCurrency message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    HSMCurrency.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.currencyCode != null && Object.hasOwnProperty.call(message, "currencyCode"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.currencyCode);
                        if (message.amount1000 != null && Object.hasOwnProperty.call(message, "amount1000"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.amount1000);
                        return writer;
                    };

                    /**
                     * Encodes the specified HSMCurrency message, length delimited. Does not implicitly {@link WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency
                     * @static
                     * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.IHSMCurrency} message HSMCurrency message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    HSMCurrency.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a HSMCurrency message from the specified reader or buffer.
                     * @function decode
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency} HSMCurrency
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    HSMCurrency.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.currencyCode = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.amount1000 = reader.int64();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a HSMCurrency message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency} HSMCurrency
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    HSMCurrency.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a HSMCurrency message.
                     * @function verify
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    HSMCurrency.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.currencyCode != null && message.hasOwnProperty("currencyCode"))
                            if (!$util.isString(message.currencyCode))
                                return "currencyCode: string expected";
                        if (message.amount1000 != null && message.hasOwnProperty("amount1000"))
                            if (!$util.isInteger(message.amount1000) && !(message.amount1000 && $util.isInteger(message.amount1000.low) && $util.isInteger(message.amount1000.high)))
                                return "amount1000: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a HSMCurrency message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency} HSMCurrency
                     */
                    HSMCurrency.fromObject = function fromObject(object) {
                        if (object instanceof $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency)
                            return object;
                        var message = new $root.WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency();
                        if (object.currencyCode != null)
                            message.currencyCode = String(object.currencyCode);
                        if (object.amount1000 != null)
                            if ($util.Long)
                                (message.amount1000 = $util.Long.fromValue(object.amount1000)).unsigned = false;
                            else if (typeof object.amount1000 === "string")
                                message.amount1000 = parseInt(object.amount1000, 10);
                            else if (typeof object.amount1000 === "number")
                                message.amount1000 = object.amount1000;
                            else if (typeof object.amount1000 === "object")
                                message.amount1000 = new $util.LongBits(object.amount1000.low >>> 0, object.amount1000.high >>> 0).toNumber();
                        return message;
                    };

                    /**
                     * Creates a plain object from a HSMCurrency message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency
                     * @static
                     * @param {WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency} message HSMCurrency
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    HSMCurrency.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.currencyCode = "";
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.amount1000 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.amount1000 = options.longs === String ? "0" : 0;
                        }
                        if (message.currencyCode != null && message.hasOwnProperty("currencyCode"))
                            object.currencyCode = message.currencyCode;
                        if (message.amount1000 != null && message.hasOwnProperty("amount1000"))
                            if (typeof message.amount1000 === "number")
                                object.amount1000 = options.longs === String ? String(message.amount1000) : message.amount1000;
                            else
                                object.amount1000 = options.longs === String ? $util.Long.prototype.toString.call(message.amount1000) : options.longs === Number ? new $util.LongBits(message.amount1000.low >>> 0, message.amount1000.high >>> 0).toNumber() : message.amount1000;
                        return object;
                    };

                    /**
                     * Converts this HSMCurrency to JSON.
                     * @function toJSON
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    HSMCurrency.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Gets the default type url for HSMCurrency
                     * @function getTypeUrl
                     * @memberof WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    HSMCurrency.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/WAE2E.Message.HighlyStructuredMessage.HSMLocalizableParameter.HSMCurrency";
                    };

                    return HSMCurrency;
                })();

                return HSMLocalizableParameter;
            })();

            return HighlyStructuredMessage;
        })();

        Message.HistorySyncNotification = (function() {

            /**
             * Properties of a HistorySyncNotification.
             * @memberof WAE2E.Message
             * @interface IHistorySyncNotification
             * @property {Uint8Array|null} [fileSHA256] HistorySyncNotification fileSHA256
             * @property {number|Long|null} [fileLength] HistorySyncNotification fileLength
             * @property {Uint8Array|null} [mediaKey] HistorySyncNotification mediaKey
             * @property {Uint8Array|null} [fileEncSHA256] HistorySyncNotification fileEncSHA256
             * @property {string|null} [directPath] HistorySyncNotification directPath
             * @property {WAE2E.Message.HistorySyncNotification.HistorySyncType|null} [syncType] HistorySyncNotification syncType
             * @property {number|null} [chunkOrder] HistorySyncNotification chunkOrder
             * @property {string|null} [originalMessageID] HistorySyncNotification originalMessageID
             * @property {number|null} [progress] HistorySyncNotification progress
             * @property {number|Long|null} [oldestMsgInChunkTimestampSec] HistorySyncNotification oldestMsgInChunkTimestampSec
             * @property {Uint8Array|null} [initialHistBootstrapInlinePayload] HistorySyncNotification initialHistBootstrapInlinePayload
             * @property {string|null} [peerDataRequestSessionID] HistorySyncNotification peerDataRequestSessionID
             */

            /**
             * Constructs a new HistorySyncNotification.
             * @memberof WAE2E.Message
             * @classdesc Represents a HistorySyncNotification.
             * @implements IHistorySyncNotification
             * @constructor
             * @param {WAE2E.Message.IHistorySyncNotification=} [properties] Properties to set
             */
            function HistorySyncNotification(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HistorySyncNotification fileSHA256.
             * @member {Uint8Array} fileSHA256
             * @memberof WAE2E.Message.HistorySyncNotification
             * @instance
             */
            HistorySyncNotification.prototype.fileSHA256 = $util.newBuffer([]);

            /**
             * HistorySyncNotification fileLength.
             * @member {number|Long} fileLength
             * @memberof WAE2E.Message.HistorySyncNotification
             * @instance
             */
            HistorySyncNotification.prototype.fileLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * HistorySyncNotification mediaKey.
             * @member {Uint8Array} mediaKey
             * @memberof WAE2E.Message.HistorySyncNotification
             * @instance
             */
            HistorySyncNotification.prototype.mediaKey = $util.newBuffer([]);

            /**
             * HistorySyncNotification fileEncSHA256.
             * @member {Uint8Array} fileEncSHA256
             * @memberof WAE2E.Message.HistorySyncNotification
             * @instance
             */
            HistorySyncNotification.prototype.fileEncSHA256 = $util.newBuffer([]);

            /**
             * HistorySyncNotification directPath.
             * @member {string} directPath
             * @memberof WAE2E.Message.HistorySyncNotification
             * @instance
             */
            HistorySyncNotification.prototype.directPath = "";

            /**
             * HistorySyncNotification syncType.
             * @member {WAE2E.Message.HistorySyncNotification.HistorySyncType} syncType
             * @memberof WAE2E.Message.HistorySyncNotification
             * @instance
             */
            HistorySyncNotification.prototype.syncType = 0;

            /**
             * HistorySyncNotification chunkOrder.
             * @member {number} chunkOrder
             * @memberof WAE2E.Message.HistorySyncNotification
             * @instance
             */
            HistorySyncNotification.prototype.chunkOrder = 0;

            /**
             * HistorySyncNotification originalMessageID.
             * @member {string} originalMessageID
             * @memberof WAE2E.Message.HistorySyncNotification
             * @instance
             */
            HistorySyncNotification.prototype.originalMessageID = "";

            /**
             * HistorySyncNotification progress.
             * @member {number} progress
             * @memberof WAE2E.Message.HistorySyncNotification
             * @instance
             */
            HistorySyncNotification.prototype.progress = 0;

            /**
             * HistorySyncNotification oldestMsgInChunkTimestampSec.
             * @member {number|Long} oldestMsgInChunkTimestampSec
             * @memberof WAE2E.Message.HistorySyncNotification
             * @instance
             */
            HistorySyncNotification.prototype.oldestMsgInChunkTimestampSec = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * HistorySyncNotification initialHistBootstrapInlinePayload.
             * @member {Uint8Array} initialHistBootstrapInlinePayload
             * @memberof WAE2E.Message.HistorySyncNotification
             * @instance
             */
            HistorySyncNotification.prototype.initialHistBootstrapInlinePayload = $util.newBuffer([]);

            /**
             * HistorySyncNotification peerDataRequestSessionID.
             * @member {string} peerDataRequestSessionID
             * @memberof WAE2E.Message.HistorySyncNotification
             * @instance
             */
            HistorySyncNotification.prototype.peerDataRequestSessionID = "";

            /**
             * Creates a new HistorySyncNotification instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.HistorySyncNotification
             * @static
             * @param {WAE2E.Message.IHistorySyncNotification=} [properties] Properties to set
             * @returns {WAE2E.Message.HistorySyncNotification} HistorySyncNotification instance
             */
            HistorySyncNotification.create = function create(properties) {
                return new HistorySyncNotification(properties);
            };

            /**
             * Encodes the specified HistorySyncNotification message. Does not implicitly {@link WAE2E.Message.HistorySyncNotification.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.HistorySyncNotification
             * @static
             * @param {WAE2E.Message.IHistorySyncNotification} message HistorySyncNotification message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HistorySyncNotification.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.fileSHA256 != null && Object.hasOwnProperty.call(message, "fileSHA256"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.fileSHA256);
                if (message.fileLength != null && Object.hasOwnProperty.call(message, "fileLength"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.fileLength);
                if (message.mediaKey != null && Object.hasOwnProperty.call(message, "mediaKey"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.mediaKey);
                if (message.fileEncSHA256 != null && Object.hasOwnProperty.call(message, "fileEncSHA256"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.fileEncSHA256);
                if (message.directPath != null && Object.hasOwnProperty.call(message, "directPath"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.directPath);
                if (message.syncType != null && Object.hasOwnProperty.call(message, "syncType"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.syncType);
                if (message.chunkOrder != null && Object.hasOwnProperty.call(message, "chunkOrder"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.chunkOrder);
                if (message.originalMessageID != null && Object.hasOwnProperty.call(message, "originalMessageID"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.originalMessageID);
                if (message.progress != null && Object.hasOwnProperty.call(message, "progress"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.progress);
                if (message.oldestMsgInChunkTimestampSec != null && Object.hasOwnProperty.call(message, "oldestMsgInChunkTimestampSec"))
                    writer.uint32(/* id 10, wireType 0 =*/80).int64(message.oldestMsgInChunkTimestampSec);
                if (message.initialHistBootstrapInlinePayload != null && Object.hasOwnProperty.call(message, "initialHistBootstrapInlinePayload"))
                    writer.uint32(/* id 11, wireType 2 =*/90).bytes(message.initialHistBootstrapInlinePayload);
                if (message.peerDataRequestSessionID != null && Object.hasOwnProperty.call(message, "peerDataRequestSessionID"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.peerDataRequestSessionID);
                return writer;
            };

            /**
             * Encodes the specified HistorySyncNotification message, length delimited. Does not implicitly {@link WAE2E.Message.HistorySyncNotification.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.HistorySyncNotification
             * @static
             * @param {WAE2E.Message.IHistorySyncNotification} message HistorySyncNotification message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HistorySyncNotification.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HistorySyncNotification message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.HistorySyncNotification
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.HistorySyncNotification} HistorySyncNotification
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HistorySyncNotification.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.HistorySyncNotification();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.fileSHA256 = reader.bytes();
                            break;
                        }
                    case 2: {
                            message.fileLength = reader.uint64();
                            break;
                        }
                    case 3: {
                            message.mediaKey = reader.bytes();
                            break;
                        }
                    case 4: {
                            message.fileEncSHA256 = reader.bytes();
                            break;
                        }
                    case 5: {
                            message.directPath = reader.string();
                            break;
                        }
                    case 6: {
                            message.syncType = reader.int32();
                            break;
                        }
                    case 7: {
                            message.chunkOrder = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.originalMessageID = reader.string();
                            break;
                        }
                    case 9: {
                            message.progress = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.oldestMsgInChunkTimestampSec = reader.int64();
                            break;
                        }
                    case 11: {
                            message.initialHistBootstrapInlinePayload = reader.bytes();
                            break;
                        }
                    case 12: {
                            message.peerDataRequestSessionID = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HistorySyncNotification message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.HistorySyncNotification
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.HistorySyncNotification} HistorySyncNotification
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HistorySyncNotification.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HistorySyncNotification message.
             * @function verify
             * @memberof WAE2E.Message.HistorySyncNotification
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HistorySyncNotification.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                    if (!(message.fileSHA256 && typeof message.fileSHA256.length === "number" || $util.isString(message.fileSHA256)))
                        return "fileSHA256: buffer expected";
                if (message.fileLength != null && message.hasOwnProperty("fileLength"))
                    if (!$util.isInteger(message.fileLength) && !(message.fileLength && $util.isInteger(message.fileLength.low) && $util.isInteger(message.fileLength.high)))
                        return "fileLength: integer|Long expected";
                if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                    if (!(message.mediaKey && typeof message.mediaKey.length === "number" || $util.isString(message.mediaKey)))
                        return "mediaKey: buffer expected";
                if (message.fileEncSHA256 != null && message.hasOwnProperty("fileEncSHA256"))
                    if (!(message.fileEncSHA256 && typeof message.fileEncSHA256.length === "number" || $util.isString(message.fileEncSHA256)))
                        return "fileEncSHA256: buffer expected";
                if (message.directPath != null && message.hasOwnProperty("directPath"))
                    if (!$util.isString(message.directPath))
                        return "directPath: string expected";
                if (message.syncType != null && message.hasOwnProperty("syncType"))
                    switch (message.syncType) {
                    default:
                        return "syncType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                        break;
                    }
                if (message.chunkOrder != null && message.hasOwnProperty("chunkOrder"))
                    if (!$util.isInteger(message.chunkOrder))
                        return "chunkOrder: integer expected";
                if (message.originalMessageID != null && message.hasOwnProperty("originalMessageID"))
                    if (!$util.isString(message.originalMessageID))
                        return "originalMessageID: string expected";
                if (message.progress != null && message.hasOwnProperty("progress"))
                    if (!$util.isInteger(message.progress))
                        return "progress: integer expected";
                if (message.oldestMsgInChunkTimestampSec != null && message.hasOwnProperty("oldestMsgInChunkTimestampSec"))
                    if (!$util.isInteger(message.oldestMsgInChunkTimestampSec) && !(message.oldestMsgInChunkTimestampSec && $util.isInteger(message.oldestMsgInChunkTimestampSec.low) && $util.isInteger(message.oldestMsgInChunkTimestampSec.high)))
                        return "oldestMsgInChunkTimestampSec: integer|Long expected";
                if (message.initialHistBootstrapInlinePayload != null && message.hasOwnProperty("initialHistBootstrapInlinePayload"))
                    if (!(message.initialHistBootstrapInlinePayload && typeof message.initialHistBootstrapInlinePayload.length === "number" || $util.isString(message.initialHistBootstrapInlinePayload)))
                        return "initialHistBootstrapInlinePayload: buffer expected";
                if (message.peerDataRequestSessionID != null && message.hasOwnProperty("peerDataRequestSessionID"))
                    if (!$util.isString(message.peerDataRequestSessionID))
                        return "peerDataRequestSessionID: string expected";
                return null;
            };

            /**
             * Creates a HistorySyncNotification message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.HistorySyncNotification
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.HistorySyncNotification} HistorySyncNotification
             */
            HistorySyncNotification.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.HistorySyncNotification)
                    return object;
                var message = new $root.WAE2E.Message.HistorySyncNotification();
                if (object.fileSHA256 != null)
                    if (typeof object.fileSHA256 === "string")
                        $util.base64.decode(object.fileSHA256, message.fileSHA256 = $util.newBuffer($util.base64.length(object.fileSHA256)), 0);
                    else if (object.fileSHA256.length >= 0)
                        message.fileSHA256 = object.fileSHA256;
                if (object.fileLength != null)
                    if ($util.Long)
                        (message.fileLength = $util.Long.fromValue(object.fileLength)).unsigned = true;
                    else if (typeof object.fileLength === "string")
                        message.fileLength = parseInt(object.fileLength, 10);
                    else if (typeof object.fileLength === "number")
                        message.fileLength = object.fileLength;
                    else if (typeof object.fileLength === "object")
                        message.fileLength = new $util.LongBits(object.fileLength.low >>> 0, object.fileLength.high >>> 0).toNumber(true);
                if (object.mediaKey != null)
                    if (typeof object.mediaKey === "string")
                        $util.base64.decode(object.mediaKey, message.mediaKey = $util.newBuffer($util.base64.length(object.mediaKey)), 0);
                    else if (object.mediaKey.length >= 0)
                        message.mediaKey = object.mediaKey;
                if (object.fileEncSHA256 != null)
                    if (typeof object.fileEncSHA256 === "string")
                        $util.base64.decode(object.fileEncSHA256, message.fileEncSHA256 = $util.newBuffer($util.base64.length(object.fileEncSHA256)), 0);
                    else if (object.fileEncSHA256.length >= 0)
                        message.fileEncSHA256 = object.fileEncSHA256;
                if (object.directPath != null)
                    message.directPath = String(object.directPath);
                switch (object.syncType) {
                default:
                    if (typeof object.syncType === "number") {
                        message.syncType = object.syncType;
                        break;
                    }
                    break;
                case "INITIAL_BOOTSTRAP":
                case 0:
                    message.syncType = 0;
                    break;
                case "INITIAL_STATUS_V3":
                case 1:
                    message.syncType = 1;
                    break;
                case "FULL":
                case 2:
                    message.syncType = 2;
                    break;
                case "RECENT":
                case 3:
                    message.syncType = 3;
                    break;
                case "PUSH_NAME":
                case 4:
                    message.syncType = 4;
                    break;
                case "NON_BLOCKING_DATA":
                case 5:
                    message.syncType = 5;
                    break;
                case "ON_DEMAND":
                case 6:
                    message.syncType = 6;
                    break;
                case "NO_HISTORY":
                case 7:
                    message.syncType = 7;
                    break;
                }
                if (object.chunkOrder != null)
                    message.chunkOrder = object.chunkOrder >>> 0;
                if (object.originalMessageID != null)
                    message.originalMessageID = String(object.originalMessageID);
                if (object.progress != null)
                    message.progress = object.progress >>> 0;
                if (object.oldestMsgInChunkTimestampSec != null)
                    if ($util.Long)
                        (message.oldestMsgInChunkTimestampSec = $util.Long.fromValue(object.oldestMsgInChunkTimestampSec)).unsigned = false;
                    else if (typeof object.oldestMsgInChunkTimestampSec === "string")
                        message.oldestMsgInChunkTimestampSec = parseInt(object.oldestMsgInChunkTimestampSec, 10);
                    else if (typeof object.oldestMsgInChunkTimestampSec === "number")
                        message.oldestMsgInChunkTimestampSec = object.oldestMsgInChunkTimestampSec;
                    else if (typeof object.oldestMsgInChunkTimestampSec === "object")
                        message.oldestMsgInChunkTimestampSec = new $util.LongBits(object.oldestMsgInChunkTimestampSec.low >>> 0, object.oldestMsgInChunkTimestampSec.high >>> 0).toNumber();
                if (object.initialHistBootstrapInlinePayload != null)
                    if (typeof object.initialHistBootstrapInlinePayload === "string")
                        $util.base64.decode(object.initialHistBootstrapInlinePayload, message.initialHistBootstrapInlinePayload = $util.newBuffer($util.base64.length(object.initialHistBootstrapInlinePayload)), 0);
                    else if (object.initialHistBootstrapInlinePayload.length >= 0)
                        message.initialHistBootstrapInlinePayload = object.initialHistBootstrapInlinePayload;
                if (object.peerDataRequestSessionID != null)
                    message.peerDataRequestSessionID = String(object.peerDataRequestSessionID);
                return message;
            };

            /**
             * Creates a plain object from a HistorySyncNotification message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.HistorySyncNotification
             * @static
             * @param {WAE2E.Message.HistorySyncNotification} message HistorySyncNotification
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HistorySyncNotification.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.fileSHA256 = "";
                    else {
                        object.fileSHA256 = [];
                        if (options.bytes !== Array)
                            object.fileSHA256 = $util.newBuffer(object.fileSHA256);
                    }
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.fileLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.fileLength = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.mediaKey = "";
                    else {
                        object.mediaKey = [];
                        if (options.bytes !== Array)
                            object.mediaKey = $util.newBuffer(object.mediaKey);
                    }
                    if (options.bytes === String)
                        object.fileEncSHA256 = "";
                    else {
                        object.fileEncSHA256 = [];
                        if (options.bytes !== Array)
                            object.fileEncSHA256 = $util.newBuffer(object.fileEncSHA256);
                    }
                    object.directPath = "";
                    object.syncType = options.enums === String ? "INITIAL_BOOTSTRAP" : 0;
                    object.chunkOrder = 0;
                    object.originalMessageID = "";
                    object.progress = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.oldestMsgInChunkTimestampSec = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.oldestMsgInChunkTimestampSec = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.initialHistBootstrapInlinePayload = "";
                    else {
                        object.initialHistBootstrapInlinePayload = [];
                        if (options.bytes !== Array)
                            object.initialHistBootstrapInlinePayload = $util.newBuffer(object.initialHistBootstrapInlinePayload);
                    }
                    object.peerDataRequestSessionID = "";
                }
                if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                    object.fileSHA256 = options.bytes === String ? $util.base64.encode(message.fileSHA256, 0, message.fileSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.fileSHA256) : message.fileSHA256;
                if (message.fileLength != null && message.hasOwnProperty("fileLength"))
                    if (typeof message.fileLength === "number")
                        object.fileLength = options.longs === String ? String(message.fileLength) : message.fileLength;
                    else
                        object.fileLength = options.longs === String ? $util.Long.prototype.toString.call(message.fileLength) : options.longs === Number ? new $util.LongBits(message.fileLength.low >>> 0, message.fileLength.high >>> 0).toNumber(true) : message.fileLength;
                if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                    object.mediaKey = options.bytes === String ? $util.base64.encode(message.mediaKey, 0, message.mediaKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.mediaKey) : message.mediaKey;
                if (message.fileEncSHA256 != null && message.hasOwnProperty("fileEncSHA256"))
                    object.fileEncSHA256 = options.bytes === String ? $util.base64.encode(message.fileEncSHA256, 0, message.fileEncSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.fileEncSHA256) : message.fileEncSHA256;
                if (message.directPath != null && message.hasOwnProperty("directPath"))
                    object.directPath = message.directPath;
                if (message.syncType != null && message.hasOwnProperty("syncType"))
                    object.syncType = options.enums === String ? $root.WAE2E.Message.HistorySyncNotification.HistorySyncType[message.syncType] === undefined ? message.syncType : $root.WAE2E.Message.HistorySyncNotification.HistorySyncType[message.syncType] : message.syncType;
                if (message.chunkOrder != null && message.hasOwnProperty("chunkOrder"))
                    object.chunkOrder = message.chunkOrder;
                if (message.originalMessageID != null && message.hasOwnProperty("originalMessageID"))
                    object.originalMessageID = message.originalMessageID;
                if (message.progress != null && message.hasOwnProperty("progress"))
                    object.progress = message.progress;
                if (message.oldestMsgInChunkTimestampSec != null && message.hasOwnProperty("oldestMsgInChunkTimestampSec"))
                    if (typeof message.oldestMsgInChunkTimestampSec === "number")
                        object.oldestMsgInChunkTimestampSec = options.longs === String ? String(message.oldestMsgInChunkTimestampSec) : message.oldestMsgInChunkTimestampSec;
                    else
                        object.oldestMsgInChunkTimestampSec = options.longs === String ? $util.Long.prototype.toString.call(message.oldestMsgInChunkTimestampSec) : options.longs === Number ? new $util.LongBits(message.oldestMsgInChunkTimestampSec.low >>> 0, message.oldestMsgInChunkTimestampSec.high >>> 0).toNumber() : message.oldestMsgInChunkTimestampSec;
                if (message.initialHistBootstrapInlinePayload != null && message.hasOwnProperty("initialHistBootstrapInlinePayload"))
                    object.initialHistBootstrapInlinePayload = options.bytes === String ? $util.base64.encode(message.initialHistBootstrapInlinePayload, 0, message.initialHistBootstrapInlinePayload.length) : options.bytes === Array ? Array.prototype.slice.call(message.initialHistBootstrapInlinePayload) : message.initialHistBootstrapInlinePayload;
                if (message.peerDataRequestSessionID != null && message.hasOwnProperty("peerDataRequestSessionID"))
                    object.peerDataRequestSessionID = message.peerDataRequestSessionID;
                return object;
            };

            /**
             * Converts this HistorySyncNotification to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.HistorySyncNotification
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HistorySyncNotification.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for HistorySyncNotification
             * @function getTypeUrl
             * @memberof WAE2E.Message.HistorySyncNotification
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            HistorySyncNotification.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.HistorySyncNotification";
            };

            /**
             * HistorySyncType enum.
             * @name WAE2E.Message.HistorySyncNotification.HistorySyncType
             * @enum {number}
             * @property {number} INITIAL_BOOTSTRAP=0 INITIAL_BOOTSTRAP value
             * @property {number} INITIAL_STATUS_V3=1 INITIAL_STATUS_V3 value
             * @property {number} FULL=2 FULL value
             * @property {number} RECENT=3 RECENT value
             * @property {number} PUSH_NAME=4 PUSH_NAME value
             * @property {number} NON_BLOCKING_DATA=5 NON_BLOCKING_DATA value
             * @property {number} ON_DEMAND=6 ON_DEMAND value
             * @property {number} NO_HISTORY=7 NO_HISTORY value
             */
            HistorySyncNotification.HistorySyncType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "INITIAL_BOOTSTRAP"] = 0;
                values[valuesById[1] = "INITIAL_STATUS_V3"] = 1;
                values[valuesById[2] = "FULL"] = 2;
                values[valuesById[3] = "RECENT"] = 3;
                values[valuesById[4] = "PUSH_NAME"] = 4;
                values[valuesById[5] = "NON_BLOCKING_DATA"] = 5;
                values[valuesById[6] = "ON_DEMAND"] = 6;
                values[valuesById[7] = "NO_HISTORY"] = 7;
                return values;
            })();

            return HistorySyncNotification;
        })();

        Message.RequestWelcomeMessageMetadata = (function() {

            /**
             * Properties of a RequestWelcomeMessageMetadata.
             * @memberof WAE2E.Message
             * @interface IRequestWelcomeMessageMetadata
             * @property {WAE2E.Message.RequestWelcomeMessageMetadata.LocalChatState|null} [localChatState] RequestWelcomeMessageMetadata localChatState
             */

            /**
             * Constructs a new RequestWelcomeMessageMetadata.
             * @memberof WAE2E.Message
             * @classdesc Represents a RequestWelcomeMessageMetadata.
             * @implements IRequestWelcomeMessageMetadata
             * @constructor
             * @param {WAE2E.Message.IRequestWelcomeMessageMetadata=} [properties] Properties to set
             */
            function RequestWelcomeMessageMetadata(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestWelcomeMessageMetadata localChatState.
             * @member {WAE2E.Message.RequestWelcomeMessageMetadata.LocalChatState} localChatState
             * @memberof WAE2E.Message.RequestWelcomeMessageMetadata
             * @instance
             */
            RequestWelcomeMessageMetadata.prototype.localChatState = 0;

            /**
             * Creates a new RequestWelcomeMessageMetadata instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.RequestWelcomeMessageMetadata
             * @static
             * @param {WAE2E.Message.IRequestWelcomeMessageMetadata=} [properties] Properties to set
             * @returns {WAE2E.Message.RequestWelcomeMessageMetadata} RequestWelcomeMessageMetadata instance
             */
            RequestWelcomeMessageMetadata.create = function create(properties) {
                return new RequestWelcomeMessageMetadata(properties);
            };

            /**
             * Encodes the specified RequestWelcomeMessageMetadata message. Does not implicitly {@link WAE2E.Message.RequestWelcomeMessageMetadata.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.RequestWelcomeMessageMetadata
             * @static
             * @param {WAE2E.Message.IRequestWelcomeMessageMetadata} message RequestWelcomeMessageMetadata message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestWelcomeMessageMetadata.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.localChatState != null && Object.hasOwnProperty.call(message, "localChatState"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.localChatState);
                return writer;
            };

            /**
             * Encodes the specified RequestWelcomeMessageMetadata message, length delimited. Does not implicitly {@link WAE2E.Message.RequestWelcomeMessageMetadata.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.RequestWelcomeMessageMetadata
             * @static
             * @param {WAE2E.Message.IRequestWelcomeMessageMetadata} message RequestWelcomeMessageMetadata message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestWelcomeMessageMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestWelcomeMessageMetadata message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.RequestWelcomeMessageMetadata
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.RequestWelcomeMessageMetadata} RequestWelcomeMessageMetadata
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestWelcomeMessageMetadata.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.RequestWelcomeMessageMetadata();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.localChatState = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestWelcomeMessageMetadata message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.RequestWelcomeMessageMetadata
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.RequestWelcomeMessageMetadata} RequestWelcomeMessageMetadata
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestWelcomeMessageMetadata.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestWelcomeMessageMetadata message.
             * @function verify
             * @memberof WAE2E.Message.RequestWelcomeMessageMetadata
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestWelcomeMessageMetadata.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.localChatState != null && message.hasOwnProperty("localChatState"))
                    switch (message.localChatState) {
                    default:
                        return "localChatState: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                return null;
            };

            /**
             * Creates a RequestWelcomeMessageMetadata message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.RequestWelcomeMessageMetadata
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.RequestWelcomeMessageMetadata} RequestWelcomeMessageMetadata
             */
            RequestWelcomeMessageMetadata.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.RequestWelcomeMessageMetadata)
                    return object;
                var message = new $root.WAE2E.Message.RequestWelcomeMessageMetadata();
                switch (object.localChatState) {
                default:
                    if (typeof object.localChatState === "number") {
                        message.localChatState = object.localChatState;
                        break;
                    }
                    break;
                case "EMPTY":
                case 0:
                    message.localChatState = 0;
                    break;
                case "NON_EMPTY":
                case 1:
                    message.localChatState = 1;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a RequestWelcomeMessageMetadata message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.RequestWelcomeMessageMetadata
             * @static
             * @param {WAE2E.Message.RequestWelcomeMessageMetadata} message RequestWelcomeMessageMetadata
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestWelcomeMessageMetadata.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.localChatState = options.enums === String ? "EMPTY" : 0;
                if (message.localChatState != null && message.hasOwnProperty("localChatState"))
                    object.localChatState = options.enums === String ? $root.WAE2E.Message.RequestWelcomeMessageMetadata.LocalChatState[message.localChatState] === undefined ? message.localChatState : $root.WAE2E.Message.RequestWelcomeMessageMetadata.LocalChatState[message.localChatState] : message.localChatState;
                return object;
            };

            /**
             * Converts this RequestWelcomeMessageMetadata to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.RequestWelcomeMessageMetadata
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestWelcomeMessageMetadata.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for RequestWelcomeMessageMetadata
             * @function getTypeUrl
             * @memberof WAE2E.Message.RequestWelcomeMessageMetadata
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RequestWelcomeMessageMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.RequestWelcomeMessageMetadata";
            };

            /**
             * LocalChatState enum.
             * @name WAE2E.Message.RequestWelcomeMessageMetadata.LocalChatState
             * @enum {number}
             * @property {number} EMPTY=0 EMPTY value
             * @property {number} NON_EMPTY=1 NON_EMPTY value
             */
            RequestWelcomeMessageMetadata.LocalChatState = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "EMPTY"] = 0;
                values[valuesById[1] = "NON_EMPTY"] = 1;
                return values;
            })();

            return RequestWelcomeMessageMetadata;
        })();

        Message.ProtocolMessage = (function() {

            /**
             * Properties of a ProtocolMessage.
             * @memberof WAE2E.Message
             * @interface IProtocolMessage
             * @property {WAProtocol.IMessageKey|null} [key] ProtocolMessage key
             * @property {WAE2E.Message.ProtocolMessage.Type|null} [type] ProtocolMessage type
             * @property {number|null} [ephemeralExpiration] ProtocolMessage ephemeralExpiration
             * @property {number|Long|null} [ephemeralSettingTimestamp] ProtocolMessage ephemeralSettingTimestamp
             * @property {WAE2E.Message.IHistorySyncNotification|null} [historySyncNotification] ProtocolMessage historySyncNotification
             * @property {WAE2E.Message.IAppStateSyncKeyShare|null} [appStateSyncKeyShare] ProtocolMessage appStateSyncKeyShare
             * @property {WAE2E.Message.IAppStateSyncKeyRequest|null} [appStateSyncKeyRequest] ProtocolMessage appStateSyncKeyRequest
             * @property {WAE2E.Message.IInitialSecurityNotificationSettingSync|null} [initialSecurityNotificationSettingSync] ProtocolMessage initialSecurityNotificationSettingSync
             * @property {WAE2E.Message.IAppStateFatalExceptionNotification|null} [appStateFatalExceptionNotification] ProtocolMessage appStateFatalExceptionNotification
             * @property {WAE2E.IDisappearingMode|null} [disappearingMode] ProtocolMessage disappearingMode
             * @property {WAE2E.IMessage|null} [editedMessage] ProtocolMessage editedMessage
             * @property {number|Long|null} [timestampMS] ProtocolMessage timestampMS
             * @property {WAE2E.Message.IPeerDataOperationRequestMessage|null} [peerDataOperationRequestMessage] ProtocolMessage peerDataOperationRequestMessage
             * @property {WAE2E.Message.IPeerDataOperationRequestResponseMessage|null} [peerDataOperationRequestResponseMessage] ProtocolMessage peerDataOperationRequestResponseMessage
             * @property {WAE2E.Message.IBotFeedbackMessage|null} [botFeedbackMessage] ProtocolMessage botFeedbackMessage
             * @property {string|null} [invokerJID] ProtocolMessage invokerJID
             * @property {WAE2E.Message.IRequestWelcomeMessageMetadata|null} [requestWelcomeMessageMetadata] ProtocolMessage requestWelcomeMessageMetadata
             * @property {WAE2E.IMediaNotifyMessage|null} [mediaNotifyMessage] ProtocolMessage mediaNotifyMessage
             * @property {WAE2E.Message.ICloudAPIThreadControlNotification|null} [cloudApiThreadControlNotification] ProtocolMessage cloudApiThreadControlNotification
             * @property {WAE2E.ILIDMigrationMappingSyncMessage|null} [lidMigrationMappingSyncMessage] ProtocolMessage lidMigrationMappingSyncMessage
             */

            /**
             * Constructs a new ProtocolMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a ProtocolMessage.
             * @implements IProtocolMessage
             * @constructor
             * @param {WAE2E.Message.IProtocolMessage=} [properties] Properties to set
             */
            function ProtocolMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ProtocolMessage key.
             * @member {WAProtocol.IMessageKey|null|undefined} key
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             */
            ProtocolMessage.prototype.key = null;

            /**
             * ProtocolMessage type.
             * @member {WAE2E.Message.ProtocolMessage.Type} type
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             */
            ProtocolMessage.prototype.type = 0;

            /**
             * ProtocolMessage ephemeralExpiration.
             * @member {number} ephemeralExpiration
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             */
            ProtocolMessage.prototype.ephemeralExpiration = 0;

            /**
             * ProtocolMessage ephemeralSettingTimestamp.
             * @member {number|Long} ephemeralSettingTimestamp
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             */
            ProtocolMessage.prototype.ephemeralSettingTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ProtocolMessage historySyncNotification.
             * @member {WAE2E.Message.IHistorySyncNotification|null|undefined} historySyncNotification
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             */
            ProtocolMessage.prototype.historySyncNotification = null;

            /**
             * ProtocolMessage appStateSyncKeyShare.
             * @member {WAE2E.Message.IAppStateSyncKeyShare|null|undefined} appStateSyncKeyShare
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             */
            ProtocolMessage.prototype.appStateSyncKeyShare = null;

            /**
             * ProtocolMessage appStateSyncKeyRequest.
             * @member {WAE2E.Message.IAppStateSyncKeyRequest|null|undefined} appStateSyncKeyRequest
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             */
            ProtocolMessage.prototype.appStateSyncKeyRequest = null;

            /**
             * ProtocolMessage initialSecurityNotificationSettingSync.
             * @member {WAE2E.Message.IInitialSecurityNotificationSettingSync|null|undefined} initialSecurityNotificationSettingSync
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             */
            ProtocolMessage.prototype.initialSecurityNotificationSettingSync = null;

            /**
             * ProtocolMessage appStateFatalExceptionNotification.
             * @member {WAE2E.Message.IAppStateFatalExceptionNotification|null|undefined} appStateFatalExceptionNotification
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             */
            ProtocolMessage.prototype.appStateFatalExceptionNotification = null;

            /**
             * ProtocolMessage disappearingMode.
             * @member {WAE2E.IDisappearingMode|null|undefined} disappearingMode
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             */
            ProtocolMessage.prototype.disappearingMode = null;

            /**
             * ProtocolMessage editedMessage.
             * @member {WAE2E.IMessage|null|undefined} editedMessage
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             */
            ProtocolMessage.prototype.editedMessage = null;

            /**
             * ProtocolMessage timestampMS.
             * @member {number|Long} timestampMS
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             */
            ProtocolMessage.prototype.timestampMS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ProtocolMessage peerDataOperationRequestMessage.
             * @member {WAE2E.Message.IPeerDataOperationRequestMessage|null|undefined} peerDataOperationRequestMessage
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             */
            ProtocolMessage.prototype.peerDataOperationRequestMessage = null;

            /**
             * ProtocolMessage peerDataOperationRequestResponseMessage.
             * @member {WAE2E.Message.IPeerDataOperationRequestResponseMessage|null|undefined} peerDataOperationRequestResponseMessage
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             */
            ProtocolMessage.prototype.peerDataOperationRequestResponseMessage = null;

            /**
             * ProtocolMessage botFeedbackMessage.
             * @member {WAE2E.Message.IBotFeedbackMessage|null|undefined} botFeedbackMessage
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             */
            ProtocolMessage.prototype.botFeedbackMessage = null;

            /**
             * ProtocolMessage invokerJID.
             * @member {string} invokerJID
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             */
            ProtocolMessage.prototype.invokerJID = "";

            /**
             * ProtocolMessage requestWelcomeMessageMetadata.
             * @member {WAE2E.Message.IRequestWelcomeMessageMetadata|null|undefined} requestWelcomeMessageMetadata
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             */
            ProtocolMessage.prototype.requestWelcomeMessageMetadata = null;

            /**
             * ProtocolMessage mediaNotifyMessage.
             * @member {WAE2E.IMediaNotifyMessage|null|undefined} mediaNotifyMessage
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             */
            ProtocolMessage.prototype.mediaNotifyMessage = null;

            /**
             * ProtocolMessage cloudApiThreadControlNotification.
             * @member {WAE2E.Message.ICloudAPIThreadControlNotification|null|undefined} cloudApiThreadControlNotification
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             */
            ProtocolMessage.prototype.cloudApiThreadControlNotification = null;

            /**
             * ProtocolMessage lidMigrationMappingSyncMessage.
             * @member {WAE2E.ILIDMigrationMappingSyncMessage|null|undefined} lidMigrationMappingSyncMessage
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             */
            ProtocolMessage.prototype.lidMigrationMappingSyncMessage = null;

            /**
             * Creates a new ProtocolMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.ProtocolMessage
             * @static
             * @param {WAE2E.Message.IProtocolMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.ProtocolMessage} ProtocolMessage instance
             */
            ProtocolMessage.create = function create(properties) {
                return new ProtocolMessage(properties);
            };

            /**
             * Encodes the specified ProtocolMessage message. Does not implicitly {@link WAE2E.Message.ProtocolMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.ProtocolMessage
             * @static
             * @param {WAE2E.Message.IProtocolMessage} message ProtocolMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProtocolMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    $root.WAProtocol.MessageKey.encode(message.key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                if (message.ephemeralExpiration != null && Object.hasOwnProperty.call(message, "ephemeralExpiration"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.ephemeralExpiration);
                if (message.ephemeralSettingTimestamp != null && Object.hasOwnProperty.call(message, "ephemeralSettingTimestamp"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.ephemeralSettingTimestamp);
                if (message.historySyncNotification != null && Object.hasOwnProperty.call(message, "historySyncNotification"))
                    $root.WAE2E.Message.HistorySyncNotification.encode(message.historySyncNotification, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.appStateSyncKeyShare != null && Object.hasOwnProperty.call(message, "appStateSyncKeyShare"))
                    $root.WAE2E.Message.AppStateSyncKeyShare.encode(message.appStateSyncKeyShare, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.appStateSyncKeyRequest != null && Object.hasOwnProperty.call(message, "appStateSyncKeyRequest"))
                    $root.WAE2E.Message.AppStateSyncKeyRequest.encode(message.appStateSyncKeyRequest, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.initialSecurityNotificationSettingSync != null && Object.hasOwnProperty.call(message, "initialSecurityNotificationSettingSync"))
                    $root.WAE2E.Message.InitialSecurityNotificationSettingSync.encode(message.initialSecurityNotificationSettingSync, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.appStateFatalExceptionNotification != null && Object.hasOwnProperty.call(message, "appStateFatalExceptionNotification"))
                    $root.WAE2E.Message.AppStateFatalExceptionNotification.encode(message.appStateFatalExceptionNotification, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                if (message.disappearingMode != null && Object.hasOwnProperty.call(message, "disappearingMode"))
                    $root.WAE2E.DisappearingMode.encode(message.disappearingMode, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                if (message.editedMessage != null && Object.hasOwnProperty.call(message, "editedMessage"))
                    $root.WAE2E.Message.encode(message.editedMessage, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                if (message.timestampMS != null && Object.hasOwnProperty.call(message, "timestampMS"))
                    writer.uint32(/* id 15, wireType 0 =*/120).int64(message.timestampMS);
                if (message.peerDataOperationRequestMessage != null && Object.hasOwnProperty.call(message, "peerDataOperationRequestMessage"))
                    $root.WAE2E.Message.PeerDataOperationRequestMessage.encode(message.peerDataOperationRequestMessage, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                if (message.peerDataOperationRequestResponseMessage != null && Object.hasOwnProperty.call(message, "peerDataOperationRequestResponseMessage"))
                    $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.encode(message.peerDataOperationRequestResponseMessage, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                if (message.botFeedbackMessage != null && Object.hasOwnProperty.call(message, "botFeedbackMessage"))
                    $root.WAE2E.Message.BotFeedbackMessage.encode(message.botFeedbackMessage, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
                if (message.invokerJID != null && Object.hasOwnProperty.call(message, "invokerJID"))
                    writer.uint32(/* id 19, wireType 2 =*/154).string(message.invokerJID);
                if (message.requestWelcomeMessageMetadata != null && Object.hasOwnProperty.call(message, "requestWelcomeMessageMetadata"))
                    $root.WAE2E.Message.RequestWelcomeMessageMetadata.encode(message.requestWelcomeMessageMetadata, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
                if (message.mediaNotifyMessage != null && Object.hasOwnProperty.call(message, "mediaNotifyMessage"))
                    $root.WAE2E.MediaNotifyMessage.encode(message.mediaNotifyMessage, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
                if (message.cloudApiThreadControlNotification != null && Object.hasOwnProperty.call(message, "cloudApiThreadControlNotification"))
                    $root.WAE2E.Message.CloudAPIThreadControlNotification.encode(message.cloudApiThreadControlNotification, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
                if (message.lidMigrationMappingSyncMessage != null && Object.hasOwnProperty.call(message, "lidMigrationMappingSyncMessage"))
                    $root.WAE2E.LIDMigrationMappingSyncMessage.encode(message.lidMigrationMappingSyncMessage, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ProtocolMessage message, length delimited. Does not implicitly {@link WAE2E.Message.ProtocolMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.ProtocolMessage
             * @static
             * @param {WAE2E.Message.IProtocolMessage} message ProtocolMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProtocolMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ProtocolMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.ProtocolMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.ProtocolMessage} ProtocolMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProtocolMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ProtocolMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.key = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.type = reader.int32();
                            break;
                        }
                    case 4: {
                            message.ephemeralExpiration = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.ephemeralSettingTimestamp = reader.int64();
                            break;
                        }
                    case 6: {
                            message.historySyncNotification = $root.WAE2E.Message.HistorySyncNotification.decode(reader, reader.uint32());
                            break;
                        }
                    case 7: {
                            message.appStateSyncKeyShare = $root.WAE2E.Message.AppStateSyncKeyShare.decode(reader, reader.uint32());
                            break;
                        }
                    case 8: {
                            message.appStateSyncKeyRequest = $root.WAE2E.Message.AppStateSyncKeyRequest.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            message.initialSecurityNotificationSettingSync = $root.WAE2E.Message.InitialSecurityNotificationSettingSync.decode(reader, reader.uint32());
                            break;
                        }
                    case 10: {
                            message.appStateFatalExceptionNotification = $root.WAE2E.Message.AppStateFatalExceptionNotification.decode(reader, reader.uint32());
                            break;
                        }
                    case 11: {
                            message.disappearingMode = $root.WAE2E.DisappearingMode.decode(reader, reader.uint32());
                            break;
                        }
                    case 14: {
                            message.editedMessage = $root.WAE2E.Message.decode(reader, reader.uint32());
                            break;
                        }
                    case 15: {
                            message.timestampMS = reader.int64();
                            break;
                        }
                    case 16: {
                            message.peerDataOperationRequestMessage = $root.WAE2E.Message.PeerDataOperationRequestMessage.decode(reader, reader.uint32());
                            break;
                        }
                    case 17: {
                            message.peerDataOperationRequestResponseMessage = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.decode(reader, reader.uint32());
                            break;
                        }
                    case 18: {
                            message.botFeedbackMessage = $root.WAE2E.Message.BotFeedbackMessage.decode(reader, reader.uint32());
                            break;
                        }
                    case 19: {
                            message.invokerJID = reader.string();
                            break;
                        }
                    case 20: {
                            message.requestWelcomeMessageMetadata = $root.WAE2E.Message.RequestWelcomeMessageMetadata.decode(reader, reader.uint32());
                            break;
                        }
                    case 21: {
                            message.mediaNotifyMessage = $root.WAE2E.MediaNotifyMessage.decode(reader, reader.uint32());
                            break;
                        }
                    case 22: {
                            message.cloudApiThreadControlNotification = $root.WAE2E.Message.CloudAPIThreadControlNotification.decode(reader, reader.uint32());
                            break;
                        }
                    case 23: {
                            message.lidMigrationMappingSyncMessage = $root.WAE2E.LIDMigrationMappingSyncMessage.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ProtocolMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.ProtocolMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.ProtocolMessage} ProtocolMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProtocolMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ProtocolMessage message.
             * @function verify
             * @memberof WAE2E.Message.ProtocolMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProtocolMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key")) {
                    var error = $root.WAProtocol.MessageKey.verify(message.key);
                    if (error)
                        return "key." + error;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 14:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                        break;
                    }
                if (message.ephemeralExpiration != null && message.hasOwnProperty("ephemeralExpiration"))
                    if (!$util.isInteger(message.ephemeralExpiration))
                        return "ephemeralExpiration: integer expected";
                if (message.ephemeralSettingTimestamp != null && message.hasOwnProperty("ephemeralSettingTimestamp"))
                    if (!$util.isInteger(message.ephemeralSettingTimestamp) && !(message.ephemeralSettingTimestamp && $util.isInteger(message.ephemeralSettingTimestamp.low) && $util.isInteger(message.ephemeralSettingTimestamp.high)))
                        return "ephemeralSettingTimestamp: integer|Long expected";
                if (message.historySyncNotification != null && message.hasOwnProperty("historySyncNotification")) {
                    var error = $root.WAE2E.Message.HistorySyncNotification.verify(message.historySyncNotification);
                    if (error)
                        return "historySyncNotification." + error;
                }
                if (message.appStateSyncKeyShare != null && message.hasOwnProperty("appStateSyncKeyShare")) {
                    var error = $root.WAE2E.Message.AppStateSyncKeyShare.verify(message.appStateSyncKeyShare);
                    if (error)
                        return "appStateSyncKeyShare." + error;
                }
                if (message.appStateSyncKeyRequest != null && message.hasOwnProperty("appStateSyncKeyRequest")) {
                    var error = $root.WAE2E.Message.AppStateSyncKeyRequest.verify(message.appStateSyncKeyRequest);
                    if (error)
                        return "appStateSyncKeyRequest." + error;
                }
                if (message.initialSecurityNotificationSettingSync != null && message.hasOwnProperty("initialSecurityNotificationSettingSync")) {
                    var error = $root.WAE2E.Message.InitialSecurityNotificationSettingSync.verify(message.initialSecurityNotificationSettingSync);
                    if (error)
                        return "initialSecurityNotificationSettingSync." + error;
                }
                if (message.appStateFatalExceptionNotification != null && message.hasOwnProperty("appStateFatalExceptionNotification")) {
                    var error = $root.WAE2E.Message.AppStateFatalExceptionNotification.verify(message.appStateFatalExceptionNotification);
                    if (error)
                        return "appStateFatalExceptionNotification." + error;
                }
                if (message.disappearingMode != null && message.hasOwnProperty("disappearingMode")) {
                    var error = $root.WAE2E.DisappearingMode.verify(message.disappearingMode);
                    if (error)
                        return "disappearingMode." + error;
                }
                if (message.editedMessage != null && message.hasOwnProperty("editedMessage")) {
                    var error = $root.WAE2E.Message.verify(message.editedMessage);
                    if (error)
                        return "editedMessage." + error;
                }
                if (message.timestampMS != null && message.hasOwnProperty("timestampMS"))
                    if (!$util.isInteger(message.timestampMS) && !(message.timestampMS && $util.isInteger(message.timestampMS.low) && $util.isInteger(message.timestampMS.high)))
                        return "timestampMS: integer|Long expected";
                if (message.peerDataOperationRequestMessage != null && message.hasOwnProperty("peerDataOperationRequestMessage")) {
                    var error = $root.WAE2E.Message.PeerDataOperationRequestMessage.verify(message.peerDataOperationRequestMessage);
                    if (error)
                        return "peerDataOperationRequestMessage." + error;
                }
                if (message.peerDataOperationRequestResponseMessage != null && message.hasOwnProperty("peerDataOperationRequestResponseMessage")) {
                    var error = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.verify(message.peerDataOperationRequestResponseMessage);
                    if (error)
                        return "peerDataOperationRequestResponseMessage." + error;
                }
                if (message.botFeedbackMessage != null && message.hasOwnProperty("botFeedbackMessage")) {
                    var error = $root.WAE2E.Message.BotFeedbackMessage.verify(message.botFeedbackMessage);
                    if (error)
                        return "botFeedbackMessage." + error;
                }
                if (message.invokerJID != null && message.hasOwnProperty("invokerJID"))
                    if (!$util.isString(message.invokerJID))
                        return "invokerJID: string expected";
                if (message.requestWelcomeMessageMetadata != null && message.hasOwnProperty("requestWelcomeMessageMetadata")) {
                    var error = $root.WAE2E.Message.RequestWelcomeMessageMetadata.verify(message.requestWelcomeMessageMetadata);
                    if (error)
                        return "requestWelcomeMessageMetadata." + error;
                }
                if (message.mediaNotifyMessage != null && message.hasOwnProperty("mediaNotifyMessage")) {
                    var error = $root.WAE2E.MediaNotifyMessage.verify(message.mediaNotifyMessage);
                    if (error)
                        return "mediaNotifyMessage." + error;
                }
                if (message.cloudApiThreadControlNotification != null && message.hasOwnProperty("cloudApiThreadControlNotification")) {
                    var error = $root.WAE2E.Message.CloudAPIThreadControlNotification.verify(message.cloudApiThreadControlNotification);
                    if (error)
                        return "cloudApiThreadControlNotification." + error;
                }
                if (message.lidMigrationMappingSyncMessage != null && message.hasOwnProperty("lidMigrationMappingSyncMessage")) {
                    var error = $root.WAE2E.LIDMigrationMappingSyncMessage.verify(message.lidMigrationMappingSyncMessage);
                    if (error)
                        return "lidMigrationMappingSyncMessage." + error;
                }
                return null;
            };

            /**
             * Creates a ProtocolMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.ProtocolMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.ProtocolMessage} ProtocolMessage
             */
            ProtocolMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.ProtocolMessage)
                    return object;
                var message = new $root.WAE2E.Message.ProtocolMessage();
                if (object.key != null) {
                    if (typeof object.key !== "object")
                        throw TypeError(".WAE2E.Message.ProtocolMessage.key: object expected");
                    message.key = $root.WAProtocol.MessageKey.fromObject(object.key);
                }
                switch (object.type) {
                default:
                    if (typeof object.type === "number") {
                        message.type = object.type;
                        break;
                    }
                    break;
                case "REVOKE":
                case 0:
                    message.type = 0;
                    break;
                case "EPHEMERAL_SETTING":
                case 3:
                    message.type = 3;
                    break;
                case "EPHEMERAL_SYNC_RESPONSE":
                case 4:
                    message.type = 4;
                    break;
                case "HISTORY_SYNC_NOTIFICATION":
                case 5:
                    message.type = 5;
                    break;
                case "APP_STATE_SYNC_KEY_SHARE":
                case 6:
                    message.type = 6;
                    break;
                case "APP_STATE_SYNC_KEY_REQUEST":
                case 7:
                    message.type = 7;
                    break;
                case "MSG_FANOUT_BACKFILL_REQUEST":
                case 8:
                    message.type = 8;
                    break;
                case "INITIAL_SECURITY_NOTIFICATION_SETTING_SYNC":
                case 9:
                    message.type = 9;
                    break;
                case "APP_STATE_FATAL_EXCEPTION_NOTIFICATION":
                case 10:
                    message.type = 10;
                    break;
                case "SHARE_PHONE_NUMBER":
                case 11:
                    message.type = 11;
                    break;
                case "MESSAGE_EDIT":
                case 14:
                    message.type = 14;
                    break;
                case "PEER_DATA_OPERATION_REQUEST_MESSAGE":
                case 16:
                    message.type = 16;
                    break;
                case "PEER_DATA_OPERATION_REQUEST_RESPONSE_MESSAGE":
                case 17:
                    message.type = 17;
                    break;
                case "REQUEST_WELCOME_MESSAGE":
                case 18:
                    message.type = 18;
                    break;
                case "BOT_FEEDBACK_MESSAGE":
                case 19:
                    message.type = 19;
                    break;
                case "MEDIA_NOTIFY_MESSAGE":
                case 20:
                    message.type = 20;
                    break;
                case "CLOUD_API_THREAD_CONTROL_NOTIFICATION":
                case 21:
                    message.type = 21;
                    break;
                case "LID_MIGRATION_MAPPING_SYNC":
                case 22:
                    message.type = 22;
                    break;
                case "REMINDER_MESSAGE":
                case 23:
                    message.type = 23;
                    break;
                case "BOT_MEMU_ONBOARDING_MESSAGE":
                case 24:
                    message.type = 24;
                    break;
                }
                if (object.ephemeralExpiration != null)
                    message.ephemeralExpiration = object.ephemeralExpiration >>> 0;
                if (object.ephemeralSettingTimestamp != null)
                    if ($util.Long)
                        (message.ephemeralSettingTimestamp = $util.Long.fromValue(object.ephemeralSettingTimestamp)).unsigned = false;
                    else if (typeof object.ephemeralSettingTimestamp === "string")
                        message.ephemeralSettingTimestamp = parseInt(object.ephemeralSettingTimestamp, 10);
                    else if (typeof object.ephemeralSettingTimestamp === "number")
                        message.ephemeralSettingTimestamp = object.ephemeralSettingTimestamp;
                    else if (typeof object.ephemeralSettingTimestamp === "object")
                        message.ephemeralSettingTimestamp = new $util.LongBits(object.ephemeralSettingTimestamp.low >>> 0, object.ephemeralSettingTimestamp.high >>> 0).toNumber();
                if (object.historySyncNotification != null) {
                    if (typeof object.historySyncNotification !== "object")
                        throw TypeError(".WAE2E.Message.ProtocolMessage.historySyncNotification: object expected");
                    message.historySyncNotification = $root.WAE2E.Message.HistorySyncNotification.fromObject(object.historySyncNotification);
                }
                if (object.appStateSyncKeyShare != null) {
                    if (typeof object.appStateSyncKeyShare !== "object")
                        throw TypeError(".WAE2E.Message.ProtocolMessage.appStateSyncKeyShare: object expected");
                    message.appStateSyncKeyShare = $root.WAE2E.Message.AppStateSyncKeyShare.fromObject(object.appStateSyncKeyShare);
                }
                if (object.appStateSyncKeyRequest != null) {
                    if (typeof object.appStateSyncKeyRequest !== "object")
                        throw TypeError(".WAE2E.Message.ProtocolMessage.appStateSyncKeyRequest: object expected");
                    message.appStateSyncKeyRequest = $root.WAE2E.Message.AppStateSyncKeyRequest.fromObject(object.appStateSyncKeyRequest);
                }
                if (object.initialSecurityNotificationSettingSync != null) {
                    if (typeof object.initialSecurityNotificationSettingSync !== "object")
                        throw TypeError(".WAE2E.Message.ProtocolMessage.initialSecurityNotificationSettingSync: object expected");
                    message.initialSecurityNotificationSettingSync = $root.WAE2E.Message.InitialSecurityNotificationSettingSync.fromObject(object.initialSecurityNotificationSettingSync);
                }
                if (object.appStateFatalExceptionNotification != null) {
                    if (typeof object.appStateFatalExceptionNotification !== "object")
                        throw TypeError(".WAE2E.Message.ProtocolMessage.appStateFatalExceptionNotification: object expected");
                    message.appStateFatalExceptionNotification = $root.WAE2E.Message.AppStateFatalExceptionNotification.fromObject(object.appStateFatalExceptionNotification);
                }
                if (object.disappearingMode != null) {
                    if (typeof object.disappearingMode !== "object")
                        throw TypeError(".WAE2E.Message.ProtocolMessage.disappearingMode: object expected");
                    message.disappearingMode = $root.WAE2E.DisappearingMode.fromObject(object.disappearingMode);
                }
                if (object.editedMessage != null) {
                    if (typeof object.editedMessage !== "object")
                        throw TypeError(".WAE2E.Message.ProtocolMessage.editedMessage: object expected");
                    message.editedMessage = $root.WAE2E.Message.fromObject(object.editedMessage);
                }
                if (object.timestampMS != null)
                    if ($util.Long)
                        (message.timestampMS = $util.Long.fromValue(object.timestampMS)).unsigned = false;
                    else if (typeof object.timestampMS === "string")
                        message.timestampMS = parseInt(object.timestampMS, 10);
                    else if (typeof object.timestampMS === "number")
                        message.timestampMS = object.timestampMS;
                    else if (typeof object.timestampMS === "object")
                        message.timestampMS = new $util.LongBits(object.timestampMS.low >>> 0, object.timestampMS.high >>> 0).toNumber();
                if (object.peerDataOperationRequestMessage != null) {
                    if (typeof object.peerDataOperationRequestMessage !== "object")
                        throw TypeError(".WAE2E.Message.ProtocolMessage.peerDataOperationRequestMessage: object expected");
                    message.peerDataOperationRequestMessage = $root.WAE2E.Message.PeerDataOperationRequestMessage.fromObject(object.peerDataOperationRequestMessage);
                }
                if (object.peerDataOperationRequestResponseMessage != null) {
                    if (typeof object.peerDataOperationRequestResponseMessage !== "object")
                        throw TypeError(".WAE2E.Message.ProtocolMessage.peerDataOperationRequestResponseMessage: object expected");
                    message.peerDataOperationRequestResponseMessage = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.fromObject(object.peerDataOperationRequestResponseMessage);
                }
                if (object.botFeedbackMessage != null) {
                    if (typeof object.botFeedbackMessage !== "object")
                        throw TypeError(".WAE2E.Message.ProtocolMessage.botFeedbackMessage: object expected");
                    message.botFeedbackMessage = $root.WAE2E.Message.BotFeedbackMessage.fromObject(object.botFeedbackMessage);
                }
                if (object.invokerJID != null)
                    message.invokerJID = String(object.invokerJID);
                if (object.requestWelcomeMessageMetadata != null) {
                    if (typeof object.requestWelcomeMessageMetadata !== "object")
                        throw TypeError(".WAE2E.Message.ProtocolMessage.requestWelcomeMessageMetadata: object expected");
                    message.requestWelcomeMessageMetadata = $root.WAE2E.Message.RequestWelcomeMessageMetadata.fromObject(object.requestWelcomeMessageMetadata);
                }
                if (object.mediaNotifyMessage != null) {
                    if (typeof object.mediaNotifyMessage !== "object")
                        throw TypeError(".WAE2E.Message.ProtocolMessage.mediaNotifyMessage: object expected");
                    message.mediaNotifyMessage = $root.WAE2E.MediaNotifyMessage.fromObject(object.mediaNotifyMessage);
                }
                if (object.cloudApiThreadControlNotification != null) {
                    if (typeof object.cloudApiThreadControlNotification !== "object")
                        throw TypeError(".WAE2E.Message.ProtocolMessage.cloudApiThreadControlNotification: object expected");
                    message.cloudApiThreadControlNotification = $root.WAE2E.Message.CloudAPIThreadControlNotification.fromObject(object.cloudApiThreadControlNotification);
                }
                if (object.lidMigrationMappingSyncMessage != null) {
                    if (typeof object.lidMigrationMappingSyncMessage !== "object")
                        throw TypeError(".WAE2E.Message.ProtocolMessage.lidMigrationMappingSyncMessage: object expected");
                    message.lidMigrationMappingSyncMessage = $root.WAE2E.LIDMigrationMappingSyncMessage.fromObject(object.lidMigrationMappingSyncMessage);
                }
                return message;
            };

            /**
             * Creates a plain object from a ProtocolMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.ProtocolMessage
             * @static
             * @param {WAE2E.Message.ProtocolMessage} message ProtocolMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProtocolMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.key = null;
                    object.type = options.enums === String ? "REVOKE" : 0;
                    object.ephemeralExpiration = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.ephemeralSettingTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.ephemeralSettingTimestamp = options.longs === String ? "0" : 0;
                    object.historySyncNotification = null;
                    object.appStateSyncKeyShare = null;
                    object.appStateSyncKeyRequest = null;
                    object.initialSecurityNotificationSettingSync = null;
                    object.appStateFatalExceptionNotification = null;
                    object.disappearingMode = null;
                    object.editedMessage = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.timestampMS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.timestampMS = options.longs === String ? "0" : 0;
                    object.peerDataOperationRequestMessage = null;
                    object.peerDataOperationRequestResponseMessage = null;
                    object.botFeedbackMessage = null;
                    object.invokerJID = "";
                    object.requestWelcomeMessageMetadata = null;
                    object.mediaNotifyMessage = null;
                    object.cloudApiThreadControlNotification = null;
                    object.lidMigrationMappingSyncMessage = null;
                }
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = $root.WAProtocol.MessageKey.toObject(message.key, options);
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.WAE2E.Message.ProtocolMessage.Type[message.type] === undefined ? message.type : $root.WAE2E.Message.ProtocolMessage.Type[message.type] : message.type;
                if (message.ephemeralExpiration != null && message.hasOwnProperty("ephemeralExpiration"))
                    object.ephemeralExpiration = message.ephemeralExpiration;
                if (message.ephemeralSettingTimestamp != null && message.hasOwnProperty("ephemeralSettingTimestamp"))
                    if (typeof message.ephemeralSettingTimestamp === "number")
                        object.ephemeralSettingTimestamp = options.longs === String ? String(message.ephemeralSettingTimestamp) : message.ephemeralSettingTimestamp;
                    else
                        object.ephemeralSettingTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.ephemeralSettingTimestamp) : options.longs === Number ? new $util.LongBits(message.ephemeralSettingTimestamp.low >>> 0, message.ephemeralSettingTimestamp.high >>> 0).toNumber() : message.ephemeralSettingTimestamp;
                if (message.historySyncNotification != null && message.hasOwnProperty("historySyncNotification"))
                    object.historySyncNotification = $root.WAE2E.Message.HistorySyncNotification.toObject(message.historySyncNotification, options);
                if (message.appStateSyncKeyShare != null && message.hasOwnProperty("appStateSyncKeyShare"))
                    object.appStateSyncKeyShare = $root.WAE2E.Message.AppStateSyncKeyShare.toObject(message.appStateSyncKeyShare, options);
                if (message.appStateSyncKeyRequest != null && message.hasOwnProperty("appStateSyncKeyRequest"))
                    object.appStateSyncKeyRequest = $root.WAE2E.Message.AppStateSyncKeyRequest.toObject(message.appStateSyncKeyRequest, options);
                if (message.initialSecurityNotificationSettingSync != null && message.hasOwnProperty("initialSecurityNotificationSettingSync"))
                    object.initialSecurityNotificationSettingSync = $root.WAE2E.Message.InitialSecurityNotificationSettingSync.toObject(message.initialSecurityNotificationSettingSync, options);
                if (message.appStateFatalExceptionNotification != null && message.hasOwnProperty("appStateFatalExceptionNotification"))
                    object.appStateFatalExceptionNotification = $root.WAE2E.Message.AppStateFatalExceptionNotification.toObject(message.appStateFatalExceptionNotification, options);
                if (message.disappearingMode != null && message.hasOwnProperty("disappearingMode"))
                    object.disappearingMode = $root.WAE2E.DisappearingMode.toObject(message.disappearingMode, options);
                if (message.editedMessage != null && message.hasOwnProperty("editedMessage"))
                    object.editedMessage = $root.WAE2E.Message.toObject(message.editedMessage, options);
                if (message.timestampMS != null && message.hasOwnProperty("timestampMS"))
                    if (typeof message.timestampMS === "number")
                        object.timestampMS = options.longs === String ? String(message.timestampMS) : message.timestampMS;
                    else
                        object.timestampMS = options.longs === String ? $util.Long.prototype.toString.call(message.timestampMS) : options.longs === Number ? new $util.LongBits(message.timestampMS.low >>> 0, message.timestampMS.high >>> 0).toNumber() : message.timestampMS;
                if (message.peerDataOperationRequestMessage != null && message.hasOwnProperty("peerDataOperationRequestMessage"))
                    object.peerDataOperationRequestMessage = $root.WAE2E.Message.PeerDataOperationRequestMessage.toObject(message.peerDataOperationRequestMessage, options);
                if (message.peerDataOperationRequestResponseMessage != null && message.hasOwnProperty("peerDataOperationRequestResponseMessage"))
                    object.peerDataOperationRequestResponseMessage = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.toObject(message.peerDataOperationRequestResponseMessage, options);
                if (message.botFeedbackMessage != null && message.hasOwnProperty("botFeedbackMessage"))
                    object.botFeedbackMessage = $root.WAE2E.Message.BotFeedbackMessage.toObject(message.botFeedbackMessage, options);
                if (message.invokerJID != null && message.hasOwnProperty("invokerJID"))
                    object.invokerJID = message.invokerJID;
                if (message.requestWelcomeMessageMetadata != null && message.hasOwnProperty("requestWelcomeMessageMetadata"))
                    object.requestWelcomeMessageMetadata = $root.WAE2E.Message.RequestWelcomeMessageMetadata.toObject(message.requestWelcomeMessageMetadata, options);
                if (message.mediaNotifyMessage != null && message.hasOwnProperty("mediaNotifyMessage"))
                    object.mediaNotifyMessage = $root.WAE2E.MediaNotifyMessage.toObject(message.mediaNotifyMessage, options);
                if (message.cloudApiThreadControlNotification != null && message.hasOwnProperty("cloudApiThreadControlNotification"))
                    object.cloudApiThreadControlNotification = $root.WAE2E.Message.CloudAPIThreadControlNotification.toObject(message.cloudApiThreadControlNotification, options);
                if (message.lidMigrationMappingSyncMessage != null && message.hasOwnProperty("lidMigrationMappingSyncMessage"))
                    object.lidMigrationMappingSyncMessage = $root.WAE2E.LIDMigrationMappingSyncMessage.toObject(message.lidMigrationMappingSyncMessage, options);
                return object;
            };

            /**
             * Converts this ProtocolMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.ProtocolMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProtocolMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ProtocolMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.ProtocolMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ProtocolMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.ProtocolMessage";
            };

            /**
             * Type enum.
             * @name WAE2E.Message.ProtocolMessage.Type
             * @enum {number}
             * @property {number} REVOKE=0 REVOKE value
             * @property {number} EPHEMERAL_SETTING=3 EPHEMERAL_SETTING value
             * @property {number} EPHEMERAL_SYNC_RESPONSE=4 EPHEMERAL_SYNC_RESPONSE value
             * @property {number} HISTORY_SYNC_NOTIFICATION=5 HISTORY_SYNC_NOTIFICATION value
             * @property {number} APP_STATE_SYNC_KEY_SHARE=6 APP_STATE_SYNC_KEY_SHARE value
             * @property {number} APP_STATE_SYNC_KEY_REQUEST=7 APP_STATE_SYNC_KEY_REQUEST value
             * @property {number} MSG_FANOUT_BACKFILL_REQUEST=8 MSG_FANOUT_BACKFILL_REQUEST value
             * @property {number} INITIAL_SECURITY_NOTIFICATION_SETTING_SYNC=9 INITIAL_SECURITY_NOTIFICATION_SETTING_SYNC value
             * @property {number} APP_STATE_FATAL_EXCEPTION_NOTIFICATION=10 APP_STATE_FATAL_EXCEPTION_NOTIFICATION value
             * @property {number} SHARE_PHONE_NUMBER=11 SHARE_PHONE_NUMBER value
             * @property {number} MESSAGE_EDIT=14 MESSAGE_EDIT value
             * @property {number} PEER_DATA_OPERATION_REQUEST_MESSAGE=16 PEER_DATA_OPERATION_REQUEST_MESSAGE value
             * @property {number} PEER_DATA_OPERATION_REQUEST_RESPONSE_MESSAGE=17 PEER_DATA_OPERATION_REQUEST_RESPONSE_MESSAGE value
             * @property {number} REQUEST_WELCOME_MESSAGE=18 REQUEST_WELCOME_MESSAGE value
             * @property {number} BOT_FEEDBACK_MESSAGE=19 BOT_FEEDBACK_MESSAGE value
             * @property {number} MEDIA_NOTIFY_MESSAGE=20 MEDIA_NOTIFY_MESSAGE value
             * @property {number} CLOUD_API_THREAD_CONTROL_NOTIFICATION=21 CLOUD_API_THREAD_CONTROL_NOTIFICATION value
             * @property {number} LID_MIGRATION_MAPPING_SYNC=22 LID_MIGRATION_MAPPING_SYNC value
             * @property {number} REMINDER_MESSAGE=23 REMINDER_MESSAGE value
             * @property {number} BOT_MEMU_ONBOARDING_MESSAGE=24 BOT_MEMU_ONBOARDING_MESSAGE value
             */
            ProtocolMessage.Type = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "REVOKE"] = 0;
                values[valuesById[3] = "EPHEMERAL_SETTING"] = 3;
                values[valuesById[4] = "EPHEMERAL_SYNC_RESPONSE"] = 4;
                values[valuesById[5] = "HISTORY_SYNC_NOTIFICATION"] = 5;
                values[valuesById[6] = "APP_STATE_SYNC_KEY_SHARE"] = 6;
                values[valuesById[7] = "APP_STATE_SYNC_KEY_REQUEST"] = 7;
                values[valuesById[8] = "MSG_FANOUT_BACKFILL_REQUEST"] = 8;
                values[valuesById[9] = "INITIAL_SECURITY_NOTIFICATION_SETTING_SYNC"] = 9;
                values[valuesById[10] = "APP_STATE_FATAL_EXCEPTION_NOTIFICATION"] = 10;
                values[valuesById[11] = "SHARE_PHONE_NUMBER"] = 11;
                values[valuesById[14] = "MESSAGE_EDIT"] = 14;
                values[valuesById[16] = "PEER_DATA_OPERATION_REQUEST_MESSAGE"] = 16;
                values[valuesById[17] = "PEER_DATA_OPERATION_REQUEST_RESPONSE_MESSAGE"] = 17;
                values[valuesById[18] = "REQUEST_WELCOME_MESSAGE"] = 18;
                values[valuesById[19] = "BOT_FEEDBACK_MESSAGE"] = 19;
                values[valuesById[20] = "MEDIA_NOTIFY_MESSAGE"] = 20;
                values[valuesById[21] = "CLOUD_API_THREAD_CONTROL_NOTIFICATION"] = 21;
                values[valuesById[22] = "LID_MIGRATION_MAPPING_SYNC"] = 22;
                values[valuesById[23] = "REMINDER_MESSAGE"] = 23;
                values[valuesById[24] = "BOT_MEMU_ONBOARDING_MESSAGE"] = 24;
                return values;
            })();

            return ProtocolMessage;
        })();

        Message.CloudAPIThreadControlNotification = (function() {

            /**
             * Properties of a CloudAPIThreadControlNotification.
             * @memberof WAE2E.Message
             * @interface ICloudAPIThreadControlNotification
             * @property {WAE2E.Message.CloudAPIThreadControlNotification.CloudAPIThreadControl|null} [status] CloudAPIThreadControlNotification status
             * @property {number|Long|null} [senderNotificationTimestampMS] CloudAPIThreadControlNotification senderNotificationTimestampMS
             * @property {string|null} [consumerLid] CloudAPIThreadControlNotification consumerLid
             * @property {string|null} [consumerPhoneNumber] CloudAPIThreadControlNotification consumerPhoneNumber
             */

            /**
             * Constructs a new CloudAPIThreadControlNotification.
             * @memberof WAE2E.Message
             * @classdesc Represents a CloudAPIThreadControlNotification.
             * @implements ICloudAPIThreadControlNotification
             * @constructor
             * @param {WAE2E.Message.ICloudAPIThreadControlNotification=} [properties] Properties to set
             */
            function CloudAPIThreadControlNotification(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CloudAPIThreadControlNotification status.
             * @member {WAE2E.Message.CloudAPIThreadControlNotification.CloudAPIThreadControl} status
             * @memberof WAE2E.Message.CloudAPIThreadControlNotification
             * @instance
             */
            CloudAPIThreadControlNotification.prototype.status = 0;

            /**
             * CloudAPIThreadControlNotification senderNotificationTimestampMS.
             * @member {number|Long} senderNotificationTimestampMS
             * @memberof WAE2E.Message.CloudAPIThreadControlNotification
             * @instance
             */
            CloudAPIThreadControlNotification.prototype.senderNotificationTimestampMS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * CloudAPIThreadControlNotification consumerLid.
             * @member {string} consumerLid
             * @memberof WAE2E.Message.CloudAPIThreadControlNotification
             * @instance
             */
            CloudAPIThreadControlNotification.prototype.consumerLid = "";

            /**
             * CloudAPIThreadControlNotification consumerPhoneNumber.
             * @member {string} consumerPhoneNumber
             * @memberof WAE2E.Message.CloudAPIThreadControlNotification
             * @instance
             */
            CloudAPIThreadControlNotification.prototype.consumerPhoneNumber = "";

            /**
             * Creates a new CloudAPIThreadControlNotification instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.CloudAPIThreadControlNotification
             * @static
             * @param {WAE2E.Message.ICloudAPIThreadControlNotification=} [properties] Properties to set
             * @returns {WAE2E.Message.CloudAPIThreadControlNotification} CloudAPIThreadControlNotification instance
             */
            CloudAPIThreadControlNotification.create = function create(properties) {
                return new CloudAPIThreadControlNotification(properties);
            };

            /**
             * Encodes the specified CloudAPIThreadControlNotification message. Does not implicitly {@link WAE2E.Message.CloudAPIThreadControlNotification.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.CloudAPIThreadControlNotification
             * @static
             * @param {WAE2E.Message.ICloudAPIThreadControlNotification} message CloudAPIThreadControlNotification message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CloudAPIThreadControlNotification.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.status);
                if (message.senderNotificationTimestampMS != null && Object.hasOwnProperty.call(message, "senderNotificationTimestampMS"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.senderNotificationTimestampMS);
                if (message.consumerLid != null && Object.hasOwnProperty.call(message, "consumerLid"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.consumerLid);
                if (message.consumerPhoneNumber != null && Object.hasOwnProperty.call(message, "consumerPhoneNumber"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.consumerPhoneNumber);
                return writer;
            };

            /**
             * Encodes the specified CloudAPIThreadControlNotification message, length delimited. Does not implicitly {@link WAE2E.Message.CloudAPIThreadControlNotification.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.CloudAPIThreadControlNotification
             * @static
             * @param {WAE2E.Message.ICloudAPIThreadControlNotification} message CloudAPIThreadControlNotification message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CloudAPIThreadControlNotification.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CloudAPIThreadControlNotification message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.CloudAPIThreadControlNotification
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.CloudAPIThreadControlNotification} CloudAPIThreadControlNotification
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CloudAPIThreadControlNotification.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.CloudAPIThreadControlNotification();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.status = reader.int32();
                            break;
                        }
                    case 2: {
                            message.senderNotificationTimestampMS = reader.int64();
                            break;
                        }
                    case 3: {
                            message.consumerLid = reader.string();
                            break;
                        }
                    case 4: {
                            message.consumerPhoneNumber = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CloudAPIThreadControlNotification message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.CloudAPIThreadControlNotification
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.CloudAPIThreadControlNotification} CloudAPIThreadControlNotification
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CloudAPIThreadControlNotification.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CloudAPIThreadControlNotification message.
             * @function verify
             * @memberof WAE2E.Message.CloudAPIThreadControlNotification
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CloudAPIThreadControlNotification.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.status != null && message.hasOwnProperty("status"))
                    switch (message.status) {
                    default:
                        return "status: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.senderNotificationTimestampMS != null && message.hasOwnProperty("senderNotificationTimestampMS"))
                    if (!$util.isInteger(message.senderNotificationTimestampMS) && !(message.senderNotificationTimestampMS && $util.isInteger(message.senderNotificationTimestampMS.low) && $util.isInteger(message.senderNotificationTimestampMS.high)))
                        return "senderNotificationTimestampMS: integer|Long expected";
                if (message.consumerLid != null && message.hasOwnProperty("consumerLid"))
                    if (!$util.isString(message.consumerLid))
                        return "consumerLid: string expected";
                if (message.consumerPhoneNumber != null && message.hasOwnProperty("consumerPhoneNumber"))
                    if (!$util.isString(message.consumerPhoneNumber))
                        return "consumerPhoneNumber: string expected";
                return null;
            };

            /**
             * Creates a CloudAPIThreadControlNotification message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.CloudAPIThreadControlNotification
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.CloudAPIThreadControlNotification} CloudAPIThreadControlNotification
             */
            CloudAPIThreadControlNotification.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.CloudAPIThreadControlNotification)
                    return object;
                var message = new $root.WAE2E.Message.CloudAPIThreadControlNotification();
                switch (object.status) {
                default:
                    if (typeof object.status === "number") {
                        message.status = object.status;
                        break;
                    }
                    break;
                case "UNKNOWN":
                case 0:
                    message.status = 0;
                    break;
                case "CONTROL_PASSED":
                case 1:
                    message.status = 1;
                    break;
                case "CONTROL_TAKEN":
                case 2:
                    message.status = 2;
                    break;
                }
                if (object.senderNotificationTimestampMS != null)
                    if ($util.Long)
                        (message.senderNotificationTimestampMS = $util.Long.fromValue(object.senderNotificationTimestampMS)).unsigned = false;
                    else if (typeof object.senderNotificationTimestampMS === "string")
                        message.senderNotificationTimestampMS = parseInt(object.senderNotificationTimestampMS, 10);
                    else if (typeof object.senderNotificationTimestampMS === "number")
                        message.senderNotificationTimestampMS = object.senderNotificationTimestampMS;
                    else if (typeof object.senderNotificationTimestampMS === "object")
                        message.senderNotificationTimestampMS = new $util.LongBits(object.senderNotificationTimestampMS.low >>> 0, object.senderNotificationTimestampMS.high >>> 0).toNumber();
                if (object.consumerLid != null)
                    message.consumerLid = String(object.consumerLid);
                if (object.consumerPhoneNumber != null)
                    message.consumerPhoneNumber = String(object.consumerPhoneNumber);
                return message;
            };

            /**
             * Creates a plain object from a CloudAPIThreadControlNotification message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.CloudAPIThreadControlNotification
             * @static
             * @param {WAE2E.Message.CloudAPIThreadControlNotification} message CloudAPIThreadControlNotification
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CloudAPIThreadControlNotification.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.status = options.enums === String ? "UNKNOWN" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.senderNotificationTimestampMS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.senderNotificationTimestampMS = options.longs === String ? "0" : 0;
                    object.consumerLid = "";
                    object.consumerPhoneNumber = "";
                }
                if (message.status != null && message.hasOwnProperty("status"))
                    object.status = options.enums === String ? $root.WAE2E.Message.CloudAPIThreadControlNotification.CloudAPIThreadControl[message.status] === undefined ? message.status : $root.WAE2E.Message.CloudAPIThreadControlNotification.CloudAPIThreadControl[message.status] : message.status;
                if (message.senderNotificationTimestampMS != null && message.hasOwnProperty("senderNotificationTimestampMS"))
                    if (typeof message.senderNotificationTimestampMS === "number")
                        object.senderNotificationTimestampMS = options.longs === String ? String(message.senderNotificationTimestampMS) : message.senderNotificationTimestampMS;
                    else
                        object.senderNotificationTimestampMS = options.longs === String ? $util.Long.prototype.toString.call(message.senderNotificationTimestampMS) : options.longs === Number ? new $util.LongBits(message.senderNotificationTimestampMS.low >>> 0, message.senderNotificationTimestampMS.high >>> 0).toNumber() : message.senderNotificationTimestampMS;
                if (message.consumerLid != null && message.hasOwnProperty("consumerLid"))
                    object.consumerLid = message.consumerLid;
                if (message.consumerPhoneNumber != null && message.hasOwnProperty("consumerPhoneNumber"))
                    object.consumerPhoneNumber = message.consumerPhoneNumber;
                return object;
            };

            /**
             * Converts this CloudAPIThreadControlNotification to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.CloudAPIThreadControlNotification
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CloudAPIThreadControlNotification.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CloudAPIThreadControlNotification
             * @function getTypeUrl
             * @memberof WAE2E.Message.CloudAPIThreadControlNotification
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CloudAPIThreadControlNotification.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.CloudAPIThreadControlNotification";
            };

            /**
             * CloudAPIThreadControl enum.
             * @name WAE2E.Message.CloudAPIThreadControlNotification.CloudAPIThreadControl
             * @enum {number}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} CONTROL_PASSED=1 CONTROL_PASSED value
             * @property {number} CONTROL_TAKEN=2 CONTROL_TAKEN value
             */
            CloudAPIThreadControlNotification.CloudAPIThreadControl = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "CONTROL_PASSED"] = 1;
                values[valuesById[2] = "CONTROL_TAKEN"] = 2;
                return values;
            })();

            return CloudAPIThreadControlNotification;
        })();

        Message.BotFeedbackMessage = (function() {

            /**
             * Properties of a BotFeedbackMessage.
             * @memberof WAE2E.Message
             * @interface IBotFeedbackMessage
             * @property {WAProtocol.IMessageKey|null} [messageKey] BotFeedbackMessage messageKey
             * @property {WAE2E.Message.BotFeedbackMessage.BotFeedbackKind|null} [kind] BotFeedbackMessage kind
             * @property {string|null} [text] BotFeedbackMessage text
             * @property {number|Long|null} [kindNegative] BotFeedbackMessage kindNegative
             * @property {number|Long|null} [kindPositive] BotFeedbackMessage kindPositive
             * @property {WAE2E.Message.BotFeedbackMessage.ReportKind|null} [kindReport] BotFeedbackMessage kindReport
             */

            /**
             * Constructs a new BotFeedbackMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a BotFeedbackMessage.
             * @implements IBotFeedbackMessage
             * @constructor
             * @param {WAE2E.Message.IBotFeedbackMessage=} [properties] Properties to set
             */
            function BotFeedbackMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BotFeedbackMessage messageKey.
             * @member {WAProtocol.IMessageKey|null|undefined} messageKey
             * @memberof WAE2E.Message.BotFeedbackMessage
             * @instance
             */
            BotFeedbackMessage.prototype.messageKey = null;

            /**
             * BotFeedbackMessage kind.
             * @member {WAE2E.Message.BotFeedbackMessage.BotFeedbackKind} kind
             * @memberof WAE2E.Message.BotFeedbackMessage
             * @instance
             */
            BotFeedbackMessage.prototype.kind = 0;

            /**
             * BotFeedbackMessage text.
             * @member {string} text
             * @memberof WAE2E.Message.BotFeedbackMessage
             * @instance
             */
            BotFeedbackMessage.prototype.text = "";

            /**
             * BotFeedbackMessage kindNegative.
             * @member {number|Long} kindNegative
             * @memberof WAE2E.Message.BotFeedbackMessage
             * @instance
             */
            BotFeedbackMessage.prototype.kindNegative = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * BotFeedbackMessage kindPositive.
             * @member {number|Long} kindPositive
             * @memberof WAE2E.Message.BotFeedbackMessage
             * @instance
             */
            BotFeedbackMessage.prototype.kindPositive = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * BotFeedbackMessage kindReport.
             * @member {WAE2E.Message.BotFeedbackMessage.ReportKind} kindReport
             * @memberof WAE2E.Message.BotFeedbackMessage
             * @instance
             */
            BotFeedbackMessage.prototype.kindReport = 0;

            /**
             * Creates a new BotFeedbackMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.BotFeedbackMessage
             * @static
             * @param {WAE2E.Message.IBotFeedbackMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.BotFeedbackMessage} BotFeedbackMessage instance
             */
            BotFeedbackMessage.create = function create(properties) {
                return new BotFeedbackMessage(properties);
            };

            /**
             * Encodes the specified BotFeedbackMessage message. Does not implicitly {@link WAE2E.Message.BotFeedbackMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.BotFeedbackMessage
             * @static
             * @param {WAE2E.Message.IBotFeedbackMessage} message BotFeedbackMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BotFeedbackMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.messageKey != null && Object.hasOwnProperty.call(message, "messageKey"))
                    $root.WAProtocol.MessageKey.encode(message.messageKey, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.kind);
                if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.text);
                if (message.kindNegative != null && Object.hasOwnProperty.call(message, "kindNegative"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.kindNegative);
                if (message.kindPositive != null && Object.hasOwnProperty.call(message, "kindPositive"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.kindPositive);
                if (message.kindReport != null && Object.hasOwnProperty.call(message, "kindReport"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.kindReport);
                return writer;
            };

            /**
             * Encodes the specified BotFeedbackMessage message, length delimited. Does not implicitly {@link WAE2E.Message.BotFeedbackMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.BotFeedbackMessage
             * @static
             * @param {WAE2E.Message.IBotFeedbackMessage} message BotFeedbackMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BotFeedbackMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BotFeedbackMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.BotFeedbackMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.BotFeedbackMessage} BotFeedbackMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BotFeedbackMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.BotFeedbackMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.messageKey = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.kind = reader.int32();
                            break;
                        }
                    case 3: {
                            message.text = reader.string();
                            break;
                        }
                    case 4: {
                            message.kindNegative = reader.uint64();
                            break;
                        }
                    case 5: {
                            message.kindPositive = reader.uint64();
                            break;
                        }
                    case 6: {
                            message.kindReport = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BotFeedbackMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.BotFeedbackMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.BotFeedbackMessage} BotFeedbackMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BotFeedbackMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BotFeedbackMessage message.
             * @function verify
             * @memberof WAE2E.Message.BotFeedbackMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BotFeedbackMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.messageKey != null && message.hasOwnProperty("messageKey")) {
                    var error = $root.WAProtocol.MessageKey.verify(message.messageKey);
                    if (error)
                        return "messageKey." + error;
                }
                if (message.kind != null && message.hasOwnProperty("kind"))
                    switch (message.kind) {
                    default:
                        return "kind: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                        break;
                    }
                if (message.text != null && message.hasOwnProperty("text"))
                    if (!$util.isString(message.text))
                        return "text: string expected";
                if (message.kindNegative != null && message.hasOwnProperty("kindNegative"))
                    if (!$util.isInteger(message.kindNegative) && !(message.kindNegative && $util.isInteger(message.kindNegative.low) && $util.isInteger(message.kindNegative.high)))
                        return "kindNegative: integer|Long expected";
                if (message.kindPositive != null && message.hasOwnProperty("kindPositive"))
                    if (!$util.isInteger(message.kindPositive) && !(message.kindPositive && $util.isInteger(message.kindPositive.low) && $util.isInteger(message.kindPositive.high)))
                        return "kindPositive: integer|Long expected";
                if (message.kindReport != null && message.hasOwnProperty("kindReport"))
                    switch (message.kindReport) {
                    default:
                        return "kindReport: enum value expected";
                    case 0:
                        break;
                    }
                return null;
            };

            /**
             * Creates a BotFeedbackMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.BotFeedbackMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.BotFeedbackMessage} BotFeedbackMessage
             */
            BotFeedbackMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.BotFeedbackMessage)
                    return object;
                var message = new $root.WAE2E.Message.BotFeedbackMessage();
                if (object.messageKey != null) {
                    if (typeof object.messageKey !== "object")
                        throw TypeError(".WAE2E.Message.BotFeedbackMessage.messageKey: object expected");
                    message.messageKey = $root.WAProtocol.MessageKey.fromObject(object.messageKey);
                }
                switch (object.kind) {
                default:
                    if (typeof object.kind === "number") {
                        message.kind = object.kind;
                        break;
                    }
                    break;
                case "BOT_FEEDBACK_POSITIVE":
                case 0:
                    message.kind = 0;
                    break;
                case "BOT_FEEDBACK_NEGATIVE_GENERIC":
                case 1:
                    message.kind = 1;
                    break;
                case "BOT_FEEDBACK_NEGATIVE_HELPFUL":
                case 2:
                    message.kind = 2;
                    break;
                case "BOT_FEEDBACK_NEGATIVE_INTERESTING":
                case 3:
                    message.kind = 3;
                    break;
                case "BOT_FEEDBACK_NEGATIVE_ACCURATE":
                case 4:
                    message.kind = 4;
                    break;
                case "BOT_FEEDBACK_NEGATIVE_SAFE":
                case 5:
                    message.kind = 5;
                    break;
                case "BOT_FEEDBACK_NEGATIVE_OTHER":
                case 6:
                    message.kind = 6;
                    break;
                case "BOT_FEEDBACK_NEGATIVE_REFUSED":
                case 7:
                    message.kind = 7;
                    break;
                case "BOT_FEEDBACK_NEGATIVE_NOT_VISUALLY_APPEALING":
                case 8:
                    message.kind = 8;
                    break;
                case "BOT_FEEDBACK_NEGATIVE_NOT_RELEVANT_TO_TEXT":
                case 9:
                    message.kind = 9;
                    break;
                }
                if (object.text != null)
                    message.text = String(object.text);
                if (object.kindNegative != null)
                    if ($util.Long)
                        (message.kindNegative = $util.Long.fromValue(object.kindNegative)).unsigned = true;
                    else if (typeof object.kindNegative === "string")
                        message.kindNegative = parseInt(object.kindNegative, 10);
                    else if (typeof object.kindNegative === "number")
                        message.kindNegative = object.kindNegative;
                    else if (typeof object.kindNegative === "object")
                        message.kindNegative = new $util.LongBits(object.kindNegative.low >>> 0, object.kindNegative.high >>> 0).toNumber(true);
                if (object.kindPositive != null)
                    if ($util.Long)
                        (message.kindPositive = $util.Long.fromValue(object.kindPositive)).unsigned = true;
                    else if (typeof object.kindPositive === "string")
                        message.kindPositive = parseInt(object.kindPositive, 10);
                    else if (typeof object.kindPositive === "number")
                        message.kindPositive = object.kindPositive;
                    else if (typeof object.kindPositive === "object")
                        message.kindPositive = new $util.LongBits(object.kindPositive.low >>> 0, object.kindPositive.high >>> 0).toNumber(true);
                switch (object.kindReport) {
                default:
                    if (typeof object.kindReport === "number") {
                        message.kindReport = object.kindReport;
                        break;
                    }
                    break;
                case "GENERIC":
                case 0:
                    message.kindReport = 0;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a BotFeedbackMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.BotFeedbackMessage
             * @static
             * @param {WAE2E.Message.BotFeedbackMessage} message BotFeedbackMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BotFeedbackMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.messageKey = null;
                    object.kind = options.enums === String ? "BOT_FEEDBACK_POSITIVE" : 0;
                    object.text = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.kindNegative = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.kindNegative = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.kindPositive = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.kindPositive = options.longs === String ? "0" : 0;
                    object.kindReport = options.enums === String ? "GENERIC" : 0;
                }
                if (message.messageKey != null && message.hasOwnProperty("messageKey"))
                    object.messageKey = $root.WAProtocol.MessageKey.toObject(message.messageKey, options);
                if (message.kind != null && message.hasOwnProperty("kind"))
                    object.kind = options.enums === String ? $root.WAE2E.Message.BotFeedbackMessage.BotFeedbackKind[message.kind] === undefined ? message.kind : $root.WAE2E.Message.BotFeedbackMessage.BotFeedbackKind[message.kind] : message.kind;
                if (message.text != null && message.hasOwnProperty("text"))
                    object.text = message.text;
                if (message.kindNegative != null && message.hasOwnProperty("kindNegative"))
                    if (typeof message.kindNegative === "number")
                        object.kindNegative = options.longs === String ? String(message.kindNegative) : message.kindNegative;
                    else
                        object.kindNegative = options.longs === String ? $util.Long.prototype.toString.call(message.kindNegative) : options.longs === Number ? new $util.LongBits(message.kindNegative.low >>> 0, message.kindNegative.high >>> 0).toNumber(true) : message.kindNegative;
                if (message.kindPositive != null && message.hasOwnProperty("kindPositive"))
                    if (typeof message.kindPositive === "number")
                        object.kindPositive = options.longs === String ? String(message.kindPositive) : message.kindPositive;
                    else
                        object.kindPositive = options.longs === String ? $util.Long.prototype.toString.call(message.kindPositive) : options.longs === Number ? new $util.LongBits(message.kindPositive.low >>> 0, message.kindPositive.high >>> 0).toNumber(true) : message.kindPositive;
                if (message.kindReport != null && message.hasOwnProperty("kindReport"))
                    object.kindReport = options.enums === String ? $root.WAE2E.Message.BotFeedbackMessage.ReportKind[message.kindReport] === undefined ? message.kindReport : $root.WAE2E.Message.BotFeedbackMessage.ReportKind[message.kindReport] : message.kindReport;
                return object;
            };

            /**
             * Converts this BotFeedbackMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.BotFeedbackMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BotFeedbackMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for BotFeedbackMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.BotFeedbackMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            BotFeedbackMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.BotFeedbackMessage";
            };

            /**
             * ReportKind enum.
             * @name WAE2E.Message.BotFeedbackMessage.ReportKind
             * @enum {number}
             * @property {number} GENERIC=0 GENERIC value
             */
            BotFeedbackMessage.ReportKind = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "GENERIC"] = 0;
                return values;
            })();

            /**
             * BotFeedbackKindMultiplePositive enum.
             * @name WAE2E.Message.BotFeedbackMessage.BotFeedbackKindMultiplePositive
             * @enum {number}
             * @property {number} BOT_FEEDBACK_MULTIPLE_POSITIVE_GENERIC=1 BOT_FEEDBACK_MULTIPLE_POSITIVE_GENERIC value
             */
            BotFeedbackMessage.BotFeedbackKindMultiplePositive = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "BOT_FEEDBACK_MULTIPLE_POSITIVE_GENERIC"] = 1;
                return values;
            })();

            /**
             * BotFeedbackKindMultipleNegative enum.
             * @name WAE2E.Message.BotFeedbackMessage.BotFeedbackKindMultipleNegative
             * @enum {number}
             * @property {number} BOT_FEEDBACK_MULTIPLE_NEGATIVE_GENERIC=1 BOT_FEEDBACK_MULTIPLE_NEGATIVE_GENERIC value
             * @property {number} BOT_FEEDBACK_MULTIPLE_NEGATIVE_HELPFUL=2 BOT_FEEDBACK_MULTIPLE_NEGATIVE_HELPFUL value
             * @property {number} BOT_FEEDBACK_MULTIPLE_NEGATIVE_INTERESTING=4 BOT_FEEDBACK_MULTIPLE_NEGATIVE_INTERESTING value
             * @property {number} BOT_FEEDBACK_MULTIPLE_NEGATIVE_ACCURATE=8 BOT_FEEDBACK_MULTIPLE_NEGATIVE_ACCURATE value
             * @property {number} BOT_FEEDBACK_MULTIPLE_NEGATIVE_SAFE=16 BOT_FEEDBACK_MULTIPLE_NEGATIVE_SAFE value
             * @property {number} BOT_FEEDBACK_MULTIPLE_NEGATIVE_OTHER=32 BOT_FEEDBACK_MULTIPLE_NEGATIVE_OTHER value
             * @property {number} BOT_FEEDBACK_MULTIPLE_NEGATIVE_REFUSED=64 BOT_FEEDBACK_MULTIPLE_NEGATIVE_REFUSED value
             * @property {number} BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_VISUALLY_APPEALING=128 BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_VISUALLY_APPEALING value
             * @property {number} BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_RELEVANT_TO_TEXT=256 BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_RELEVANT_TO_TEXT value
             */
            BotFeedbackMessage.BotFeedbackKindMultipleNegative = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "BOT_FEEDBACK_MULTIPLE_NEGATIVE_GENERIC"] = 1;
                values[valuesById[2] = "BOT_FEEDBACK_MULTIPLE_NEGATIVE_HELPFUL"] = 2;
                values[valuesById[4] = "BOT_FEEDBACK_MULTIPLE_NEGATIVE_INTERESTING"] = 4;
                values[valuesById[8] = "BOT_FEEDBACK_MULTIPLE_NEGATIVE_ACCURATE"] = 8;
                values[valuesById[16] = "BOT_FEEDBACK_MULTIPLE_NEGATIVE_SAFE"] = 16;
                values[valuesById[32] = "BOT_FEEDBACK_MULTIPLE_NEGATIVE_OTHER"] = 32;
                values[valuesById[64] = "BOT_FEEDBACK_MULTIPLE_NEGATIVE_REFUSED"] = 64;
                values[valuesById[128] = "BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_VISUALLY_APPEALING"] = 128;
                values[valuesById[256] = "BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_RELEVANT_TO_TEXT"] = 256;
                return values;
            })();

            /**
             * BotFeedbackKind enum.
             * @name WAE2E.Message.BotFeedbackMessage.BotFeedbackKind
             * @enum {number}
             * @property {number} BOT_FEEDBACK_POSITIVE=0 BOT_FEEDBACK_POSITIVE value
             * @property {number} BOT_FEEDBACK_NEGATIVE_GENERIC=1 BOT_FEEDBACK_NEGATIVE_GENERIC value
             * @property {number} BOT_FEEDBACK_NEGATIVE_HELPFUL=2 BOT_FEEDBACK_NEGATIVE_HELPFUL value
             * @property {number} BOT_FEEDBACK_NEGATIVE_INTERESTING=3 BOT_FEEDBACK_NEGATIVE_INTERESTING value
             * @property {number} BOT_FEEDBACK_NEGATIVE_ACCURATE=4 BOT_FEEDBACK_NEGATIVE_ACCURATE value
             * @property {number} BOT_FEEDBACK_NEGATIVE_SAFE=5 BOT_FEEDBACK_NEGATIVE_SAFE value
             * @property {number} BOT_FEEDBACK_NEGATIVE_OTHER=6 BOT_FEEDBACK_NEGATIVE_OTHER value
             * @property {number} BOT_FEEDBACK_NEGATIVE_REFUSED=7 BOT_FEEDBACK_NEGATIVE_REFUSED value
             * @property {number} BOT_FEEDBACK_NEGATIVE_NOT_VISUALLY_APPEALING=8 BOT_FEEDBACK_NEGATIVE_NOT_VISUALLY_APPEALING value
             * @property {number} BOT_FEEDBACK_NEGATIVE_NOT_RELEVANT_TO_TEXT=9 BOT_FEEDBACK_NEGATIVE_NOT_RELEVANT_TO_TEXT value
             */
            BotFeedbackMessage.BotFeedbackKind = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "BOT_FEEDBACK_POSITIVE"] = 0;
                values[valuesById[1] = "BOT_FEEDBACK_NEGATIVE_GENERIC"] = 1;
                values[valuesById[2] = "BOT_FEEDBACK_NEGATIVE_HELPFUL"] = 2;
                values[valuesById[3] = "BOT_FEEDBACK_NEGATIVE_INTERESTING"] = 3;
                values[valuesById[4] = "BOT_FEEDBACK_NEGATIVE_ACCURATE"] = 4;
                values[valuesById[5] = "BOT_FEEDBACK_NEGATIVE_SAFE"] = 5;
                values[valuesById[6] = "BOT_FEEDBACK_NEGATIVE_OTHER"] = 6;
                values[valuesById[7] = "BOT_FEEDBACK_NEGATIVE_REFUSED"] = 7;
                values[valuesById[8] = "BOT_FEEDBACK_NEGATIVE_NOT_VISUALLY_APPEALING"] = 8;
                values[valuesById[9] = "BOT_FEEDBACK_NEGATIVE_NOT_RELEVANT_TO_TEXT"] = 9;
                return values;
            })();

            return BotFeedbackMessage;
        })();

        Message.VideoMessage = (function() {

            /**
             * Properties of a VideoMessage.
             * @memberof WAE2E.Message
             * @interface IVideoMessage
             * @property {string|null} [URL] VideoMessage URL
             * @property {string|null} [mimetype] VideoMessage mimetype
             * @property {Uint8Array|null} [fileSHA256] VideoMessage fileSHA256
             * @property {number|Long|null} [fileLength] VideoMessage fileLength
             * @property {number|null} [seconds] VideoMessage seconds
             * @property {Uint8Array|null} [mediaKey] VideoMessage mediaKey
             * @property {string|null} [caption] VideoMessage caption
             * @property {boolean|null} [gifPlayback] VideoMessage gifPlayback
             * @property {number|null} [height] VideoMessage height
             * @property {number|null} [width] VideoMessage width
             * @property {Uint8Array|null} [fileEncSHA256] VideoMessage fileEncSHA256
             * @property {Array.<WAE2E.IInteractiveAnnotation>|null} [interactiveAnnotations] VideoMessage interactiveAnnotations
             * @property {string|null} [directPath] VideoMessage directPath
             * @property {number|Long|null} [mediaKeyTimestamp] VideoMessage mediaKeyTimestamp
             * @property {Uint8Array|null} [JPEGThumbnail] VideoMessage JPEGThumbnail
             * @property {WAE2E.IContextInfo|null} [contextInfo] VideoMessage contextInfo
             * @property {Uint8Array|null} [streamingSidecar] VideoMessage streamingSidecar
             * @property {WAE2E.Message.VideoMessage.Attribution|null} [gifAttribution] VideoMessage gifAttribution
             * @property {boolean|null} [viewOnce] VideoMessage viewOnce
             * @property {string|null} [thumbnailDirectPath] VideoMessage thumbnailDirectPath
             * @property {Uint8Array|null} [thumbnailSHA256] VideoMessage thumbnailSHA256
             * @property {Uint8Array|null} [thumbnailEncSHA256] VideoMessage thumbnailEncSHA256
             * @property {string|null} [staticURL] VideoMessage staticURL
             * @property {Array.<WAE2E.IInteractiveAnnotation>|null} [annotations] VideoMessage annotations
             * @property {string|null} [accessibilityLabel] VideoMessage accessibilityLabel
             * @property {Array.<WAE2E.IProcessedVideo>|null} [processedVideos] VideoMessage processedVideos
             */

            /**
             * Constructs a new VideoMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a VideoMessage.
             * @implements IVideoMessage
             * @constructor
             * @param {WAE2E.Message.IVideoMessage=} [properties] Properties to set
             */
            function VideoMessage(properties) {
                this.interactiveAnnotations = [];
                this.annotations = [];
                this.processedVideos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * VideoMessage URL.
             * @member {string} URL
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.URL = "";

            /**
             * VideoMessage mimetype.
             * @member {string} mimetype
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.mimetype = "";

            /**
             * VideoMessage fileSHA256.
             * @member {Uint8Array} fileSHA256
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.fileSHA256 = $util.newBuffer([]);

            /**
             * VideoMessage fileLength.
             * @member {number|Long} fileLength
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.fileLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * VideoMessage seconds.
             * @member {number} seconds
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.seconds = 0;

            /**
             * VideoMessage mediaKey.
             * @member {Uint8Array} mediaKey
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.mediaKey = $util.newBuffer([]);

            /**
             * VideoMessage caption.
             * @member {string} caption
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.caption = "";

            /**
             * VideoMessage gifPlayback.
             * @member {boolean} gifPlayback
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.gifPlayback = false;

            /**
             * VideoMessage height.
             * @member {number} height
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.height = 0;

            /**
             * VideoMessage width.
             * @member {number} width
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.width = 0;

            /**
             * VideoMessage fileEncSHA256.
             * @member {Uint8Array} fileEncSHA256
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.fileEncSHA256 = $util.newBuffer([]);

            /**
             * VideoMessage interactiveAnnotations.
             * @member {Array.<WAE2E.IInteractiveAnnotation>} interactiveAnnotations
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.interactiveAnnotations = $util.emptyArray;

            /**
             * VideoMessage directPath.
             * @member {string} directPath
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.directPath = "";

            /**
             * VideoMessage mediaKeyTimestamp.
             * @member {number|Long} mediaKeyTimestamp
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.mediaKeyTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * VideoMessage JPEGThumbnail.
             * @member {Uint8Array} JPEGThumbnail
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.JPEGThumbnail = $util.newBuffer([]);

            /**
             * VideoMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.contextInfo = null;

            /**
             * VideoMessage streamingSidecar.
             * @member {Uint8Array} streamingSidecar
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.streamingSidecar = $util.newBuffer([]);

            /**
             * VideoMessage gifAttribution.
             * @member {WAE2E.Message.VideoMessage.Attribution} gifAttribution
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.gifAttribution = 0;

            /**
             * VideoMessage viewOnce.
             * @member {boolean} viewOnce
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.viewOnce = false;

            /**
             * VideoMessage thumbnailDirectPath.
             * @member {string} thumbnailDirectPath
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.thumbnailDirectPath = "";

            /**
             * VideoMessage thumbnailSHA256.
             * @member {Uint8Array} thumbnailSHA256
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.thumbnailSHA256 = $util.newBuffer([]);

            /**
             * VideoMessage thumbnailEncSHA256.
             * @member {Uint8Array} thumbnailEncSHA256
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.thumbnailEncSHA256 = $util.newBuffer([]);

            /**
             * VideoMessage staticURL.
             * @member {string} staticURL
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.staticURL = "";

            /**
             * VideoMessage annotations.
             * @member {Array.<WAE2E.IInteractiveAnnotation>} annotations
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.annotations = $util.emptyArray;

            /**
             * VideoMessage accessibilityLabel.
             * @member {string} accessibilityLabel
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.accessibilityLabel = "";

            /**
             * VideoMessage processedVideos.
             * @member {Array.<WAE2E.IProcessedVideo>} processedVideos
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             */
            VideoMessage.prototype.processedVideos = $util.emptyArray;

            /**
             * Creates a new VideoMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.VideoMessage
             * @static
             * @param {WAE2E.Message.IVideoMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.VideoMessage} VideoMessage instance
             */
            VideoMessage.create = function create(properties) {
                return new VideoMessage(properties);
            };

            /**
             * Encodes the specified VideoMessage message. Does not implicitly {@link WAE2E.Message.VideoMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.VideoMessage
             * @static
             * @param {WAE2E.Message.IVideoMessage} message VideoMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VideoMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.URL != null && Object.hasOwnProperty.call(message, "URL"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.URL);
                if (message.mimetype != null && Object.hasOwnProperty.call(message, "mimetype"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.mimetype);
                if (message.fileSHA256 != null && Object.hasOwnProperty.call(message, "fileSHA256"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.fileSHA256);
                if (message.fileLength != null && Object.hasOwnProperty.call(message, "fileLength"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.fileLength);
                if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.seconds);
                if (message.mediaKey != null && Object.hasOwnProperty.call(message, "mediaKey"))
                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.mediaKey);
                if (message.caption != null && Object.hasOwnProperty.call(message, "caption"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.caption);
                if (message.gifPlayback != null && Object.hasOwnProperty.call(message, "gifPlayback"))
                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.gifPlayback);
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.height);
                if (message.width != null && Object.hasOwnProperty.call(message, "width"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.width);
                if (message.fileEncSHA256 != null && Object.hasOwnProperty.call(message, "fileEncSHA256"))
                    writer.uint32(/* id 11, wireType 2 =*/90).bytes(message.fileEncSHA256);
                if (message.interactiveAnnotations != null && message.interactiveAnnotations.length)
                    for (var i = 0; i < message.interactiveAnnotations.length; ++i)
                        $root.WAE2E.InteractiveAnnotation.encode(message.interactiveAnnotations[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                if (message.directPath != null && Object.hasOwnProperty.call(message, "directPath"))
                    writer.uint32(/* id 13, wireType 2 =*/106).string(message.directPath);
                if (message.mediaKeyTimestamp != null && Object.hasOwnProperty.call(message, "mediaKeyTimestamp"))
                    writer.uint32(/* id 14, wireType 0 =*/112).int64(message.mediaKeyTimestamp);
                if (message.JPEGThumbnail != null && Object.hasOwnProperty.call(message, "JPEGThumbnail"))
                    writer.uint32(/* id 16, wireType 2 =*/130).bytes(message.JPEGThumbnail);
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                if (message.streamingSidecar != null && Object.hasOwnProperty.call(message, "streamingSidecar"))
                    writer.uint32(/* id 18, wireType 2 =*/146).bytes(message.streamingSidecar);
                if (message.gifAttribution != null && Object.hasOwnProperty.call(message, "gifAttribution"))
                    writer.uint32(/* id 19, wireType 0 =*/152).int32(message.gifAttribution);
                if (message.viewOnce != null && Object.hasOwnProperty.call(message, "viewOnce"))
                    writer.uint32(/* id 20, wireType 0 =*/160).bool(message.viewOnce);
                if (message.thumbnailDirectPath != null && Object.hasOwnProperty.call(message, "thumbnailDirectPath"))
                    writer.uint32(/* id 21, wireType 2 =*/170).string(message.thumbnailDirectPath);
                if (message.thumbnailSHA256 != null && Object.hasOwnProperty.call(message, "thumbnailSHA256"))
                    writer.uint32(/* id 22, wireType 2 =*/178).bytes(message.thumbnailSHA256);
                if (message.thumbnailEncSHA256 != null && Object.hasOwnProperty.call(message, "thumbnailEncSHA256"))
                    writer.uint32(/* id 23, wireType 2 =*/186).bytes(message.thumbnailEncSHA256);
                if (message.staticURL != null && Object.hasOwnProperty.call(message, "staticURL"))
                    writer.uint32(/* id 24, wireType 2 =*/194).string(message.staticURL);
                if (message.annotations != null && message.annotations.length)
                    for (var i = 0; i < message.annotations.length; ++i)
                        $root.WAE2E.InteractiveAnnotation.encode(message.annotations[i], writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();
                if (message.accessibilityLabel != null && Object.hasOwnProperty.call(message, "accessibilityLabel"))
                    writer.uint32(/* id 26, wireType 2 =*/210).string(message.accessibilityLabel);
                if (message.processedVideos != null && message.processedVideos.length)
                    for (var i = 0; i < message.processedVideos.length; ++i)
                        $root.WAE2E.ProcessedVideo.encode(message.processedVideos[i], writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified VideoMessage message, length delimited. Does not implicitly {@link WAE2E.Message.VideoMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.VideoMessage
             * @static
             * @param {WAE2E.Message.IVideoMessage} message VideoMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VideoMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a VideoMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.VideoMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.VideoMessage} VideoMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VideoMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.VideoMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.URL = reader.string();
                            break;
                        }
                    case 2: {
                            message.mimetype = reader.string();
                            break;
                        }
                    case 3: {
                            message.fileSHA256 = reader.bytes();
                            break;
                        }
                    case 4: {
                            message.fileLength = reader.uint64();
                            break;
                        }
                    case 5: {
                            message.seconds = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.mediaKey = reader.bytes();
                            break;
                        }
                    case 7: {
                            message.caption = reader.string();
                            break;
                        }
                    case 8: {
                            message.gifPlayback = reader.bool();
                            break;
                        }
                    case 9: {
                            message.height = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.width = reader.uint32();
                            break;
                        }
                    case 11: {
                            message.fileEncSHA256 = reader.bytes();
                            break;
                        }
                    case 12: {
                            if (!(message.interactiveAnnotations && message.interactiveAnnotations.length))
                                message.interactiveAnnotations = [];
                            message.interactiveAnnotations.push($root.WAE2E.InteractiveAnnotation.decode(reader, reader.uint32()));
                            break;
                        }
                    case 13: {
                            message.directPath = reader.string();
                            break;
                        }
                    case 14: {
                            message.mediaKeyTimestamp = reader.int64();
                            break;
                        }
                    case 16: {
                            message.JPEGThumbnail = reader.bytes();
                            break;
                        }
                    case 17: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    case 18: {
                            message.streamingSidecar = reader.bytes();
                            break;
                        }
                    case 19: {
                            message.gifAttribution = reader.int32();
                            break;
                        }
                    case 20: {
                            message.viewOnce = reader.bool();
                            break;
                        }
                    case 21: {
                            message.thumbnailDirectPath = reader.string();
                            break;
                        }
                    case 22: {
                            message.thumbnailSHA256 = reader.bytes();
                            break;
                        }
                    case 23: {
                            message.thumbnailEncSHA256 = reader.bytes();
                            break;
                        }
                    case 24: {
                            message.staticURL = reader.string();
                            break;
                        }
                    case 25: {
                            if (!(message.annotations && message.annotations.length))
                                message.annotations = [];
                            message.annotations.push($root.WAE2E.InteractiveAnnotation.decode(reader, reader.uint32()));
                            break;
                        }
                    case 26: {
                            message.accessibilityLabel = reader.string();
                            break;
                        }
                    case 27: {
                            if (!(message.processedVideos && message.processedVideos.length))
                                message.processedVideos = [];
                            message.processedVideos.push($root.WAE2E.ProcessedVideo.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a VideoMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.VideoMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.VideoMessage} VideoMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VideoMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a VideoMessage message.
             * @function verify
             * @memberof WAE2E.Message.VideoMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VideoMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.URL != null && message.hasOwnProperty("URL"))
                    if (!$util.isString(message.URL))
                        return "URL: string expected";
                if (message.mimetype != null && message.hasOwnProperty("mimetype"))
                    if (!$util.isString(message.mimetype))
                        return "mimetype: string expected";
                if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                    if (!(message.fileSHA256 && typeof message.fileSHA256.length === "number" || $util.isString(message.fileSHA256)))
                        return "fileSHA256: buffer expected";
                if (message.fileLength != null && message.hasOwnProperty("fileLength"))
                    if (!$util.isInteger(message.fileLength) && !(message.fileLength && $util.isInteger(message.fileLength.low) && $util.isInteger(message.fileLength.high)))
                        return "fileLength: integer|Long expected";
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (!$util.isInteger(message.seconds))
                        return "seconds: integer expected";
                if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                    if (!(message.mediaKey && typeof message.mediaKey.length === "number" || $util.isString(message.mediaKey)))
                        return "mediaKey: buffer expected";
                if (message.caption != null && message.hasOwnProperty("caption"))
                    if (!$util.isString(message.caption))
                        return "caption: string expected";
                if (message.gifPlayback != null && message.hasOwnProperty("gifPlayback"))
                    if (typeof message.gifPlayback !== "boolean")
                        return "gifPlayback: boolean expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height))
                        return "height: integer expected";
                if (message.width != null && message.hasOwnProperty("width"))
                    if (!$util.isInteger(message.width))
                        return "width: integer expected";
                if (message.fileEncSHA256 != null && message.hasOwnProperty("fileEncSHA256"))
                    if (!(message.fileEncSHA256 && typeof message.fileEncSHA256.length === "number" || $util.isString(message.fileEncSHA256)))
                        return "fileEncSHA256: buffer expected";
                if (message.interactiveAnnotations != null && message.hasOwnProperty("interactiveAnnotations")) {
                    if (!Array.isArray(message.interactiveAnnotations))
                        return "interactiveAnnotations: array expected";
                    for (var i = 0; i < message.interactiveAnnotations.length; ++i) {
                        var error = $root.WAE2E.InteractiveAnnotation.verify(message.interactiveAnnotations[i]);
                        if (error)
                            return "interactiveAnnotations." + error;
                    }
                }
                if (message.directPath != null && message.hasOwnProperty("directPath"))
                    if (!$util.isString(message.directPath))
                        return "directPath: string expected";
                if (message.mediaKeyTimestamp != null && message.hasOwnProperty("mediaKeyTimestamp"))
                    if (!$util.isInteger(message.mediaKeyTimestamp) && !(message.mediaKeyTimestamp && $util.isInteger(message.mediaKeyTimestamp.low) && $util.isInteger(message.mediaKeyTimestamp.high)))
                        return "mediaKeyTimestamp: integer|Long expected";
                if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail"))
                    if (!(message.JPEGThumbnail && typeof message.JPEGThumbnail.length === "number" || $util.isString(message.JPEGThumbnail)))
                        return "JPEGThumbnail: buffer expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                if (message.streamingSidecar != null && message.hasOwnProperty("streamingSidecar"))
                    if (!(message.streamingSidecar && typeof message.streamingSidecar.length === "number" || $util.isString(message.streamingSidecar)))
                        return "streamingSidecar: buffer expected";
                if (message.gifAttribution != null && message.hasOwnProperty("gifAttribution"))
                    switch (message.gifAttribution) {
                    default:
                        return "gifAttribution: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.viewOnce != null && message.hasOwnProperty("viewOnce"))
                    if (typeof message.viewOnce !== "boolean")
                        return "viewOnce: boolean expected";
                if (message.thumbnailDirectPath != null && message.hasOwnProperty("thumbnailDirectPath"))
                    if (!$util.isString(message.thumbnailDirectPath))
                        return "thumbnailDirectPath: string expected";
                if (message.thumbnailSHA256 != null && message.hasOwnProperty("thumbnailSHA256"))
                    if (!(message.thumbnailSHA256 && typeof message.thumbnailSHA256.length === "number" || $util.isString(message.thumbnailSHA256)))
                        return "thumbnailSHA256: buffer expected";
                if (message.thumbnailEncSHA256 != null && message.hasOwnProperty("thumbnailEncSHA256"))
                    if (!(message.thumbnailEncSHA256 && typeof message.thumbnailEncSHA256.length === "number" || $util.isString(message.thumbnailEncSHA256)))
                        return "thumbnailEncSHA256: buffer expected";
                if (message.staticURL != null && message.hasOwnProperty("staticURL"))
                    if (!$util.isString(message.staticURL))
                        return "staticURL: string expected";
                if (message.annotations != null && message.hasOwnProperty("annotations")) {
                    if (!Array.isArray(message.annotations))
                        return "annotations: array expected";
                    for (var i = 0; i < message.annotations.length; ++i) {
                        var error = $root.WAE2E.InteractiveAnnotation.verify(message.annotations[i]);
                        if (error)
                            return "annotations." + error;
                    }
                }
                if (message.accessibilityLabel != null && message.hasOwnProperty("accessibilityLabel"))
                    if (!$util.isString(message.accessibilityLabel))
                        return "accessibilityLabel: string expected";
                if (message.processedVideos != null && message.hasOwnProperty("processedVideos")) {
                    if (!Array.isArray(message.processedVideos))
                        return "processedVideos: array expected";
                    for (var i = 0; i < message.processedVideos.length; ++i) {
                        var error = $root.WAE2E.ProcessedVideo.verify(message.processedVideos[i]);
                        if (error)
                            return "processedVideos." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a VideoMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.VideoMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.VideoMessage} VideoMessage
             */
            VideoMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.VideoMessage)
                    return object;
                var message = new $root.WAE2E.Message.VideoMessage();
                if (object.URL != null)
                    message.URL = String(object.URL);
                if (object.mimetype != null)
                    message.mimetype = String(object.mimetype);
                if (object.fileSHA256 != null)
                    if (typeof object.fileSHA256 === "string")
                        $util.base64.decode(object.fileSHA256, message.fileSHA256 = $util.newBuffer($util.base64.length(object.fileSHA256)), 0);
                    else if (object.fileSHA256.length >= 0)
                        message.fileSHA256 = object.fileSHA256;
                if (object.fileLength != null)
                    if ($util.Long)
                        (message.fileLength = $util.Long.fromValue(object.fileLength)).unsigned = true;
                    else if (typeof object.fileLength === "string")
                        message.fileLength = parseInt(object.fileLength, 10);
                    else if (typeof object.fileLength === "number")
                        message.fileLength = object.fileLength;
                    else if (typeof object.fileLength === "object")
                        message.fileLength = new $util.LongBits(object.fileLength.low >>> 0, object.fileLength.high >>> 0).toNumber(true);
                if (object.seconds != null)
                    message.seconds = object.seconds >>> 0;
                if (object.mediaKey != null)
                    if (typeof object.mediaKey === "string")
                        $util.base64.decode(object.mediaKey, message.mediaKey = $util.newBuffer($util.base64.length(object.mediaKey)), 0);
                    else if (object.mediaKey.length >= 0)
                        message.mediaKey = object.mediaKey;
                if (object.caption != null)
                    message.caption = String(object.caption);
                if (object.gifPlayback != null)
                    message.gifPlayback = Boolean(object.gifPlayback);
                if (object.height != null)
                    message.height = object.height >>> 0;
                if (object.width != null)
                    message.width = object.width >>> 0;
                if (object.fileEncSHA256 != null)
                    if (typeof object.fileEncSHA256 === "string")
                        $util.base64.decode(object.fileEncSHA256, message.fileEncSHA256 = $util.newBuffer($util.base64.length(object.fileEncSHA256)), 0);
                    else if (object.fileEncSHA256.length >= 0)
                        message.fileEncSHA256 = object.fileEncSHA256;
                if (object.interactiveAnnotations) {
                    if (!Array.isArray(object.interactiveAnnotations))
                        throw TypeError(".WAE2E.Message.VideoMessage.interactiveAnnotations: array expected");
                    message.interactiveAnnotations = [];
                    for (var i = 0; i < object.interactiveAnnotations.length; ++i) {
                        if (typeof object.interactiveAnnotations[i] !== "object")
                            throw TypeError(".WAE2E.Message.VideoMessage.interactiveAnnotations: object expected");
                        message.interactiveAnnotations[i] = $root.WAE2E.InteractiveAnnotation.fromObject(object.interactiveAnnotations[i]);
                    }
                }
                if (object.directPath != null)
                    message.directPath = String(object.directPath);
                if (object.mediaKeyTimestamp != null)
                    if ($util.Long)
                        (message.mediaKeyTimestamp = $util.Long.fromValue(object.mediaKeyTimestamp)).unsigned = false;
                    else if (typeof object.mediaKeyTimestamp === "string")
                        message.mediaKeyTimestamp = parseInt(object.mediaKeyTimestamp, 10);
                    else if (typeof object.mediaKeyTimestamp === "number")
                        message.mediaKeyTimestamp = object.mediaKeyTimestamp;
                    else if (typeof object.mediaKeyTimestamp === "object")
                        message.mediaKeyTimestamp = new $util.LongBits(object.mediaKeyTimestamp.low >>> 0, object.mediaKeyTimestamp.high >>> 0).toNumber();
                if (object.JPEGThumbnail != null)
                    if (typeof object.JPEGThumbnail === "string")
                        $util.base64.decode(object.JPEGThumbnail, message.JPEGThumbnail = $util.newBuffer($util.base64.length(object.JPEGThumbnail)), 0);
                    else if (object.JPEGThumbnail.length >= 0)
                        message.JPEGThumbnail = object.JPEGThumbnail;
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.VideoMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                if (object.streamingSidecar != null)
                    if (typeof object.streamingSidecar === "string")
                        $util.base64.decode(object.streamingSidecar, message.streamingSidecar = $util.newBuffer($util.base64.length(object.streamingSidecar)), 0);
                    else if (object.streamingSidecar.length >= 0)
                        message.streamingSidecar = object.streamingSidecar;
                switch (object.gifAttribution) {
                default:
                    if (typeof object.gifAttribution === "number") {
                        message.gifAttribution = object.gifAttribution;
                        break;
                    }
                    break;
                case "NONE":
                case 0:
                    message.gifAttribution = 0;
                    break;
                case "GIPHY":
                case 1:
                    message.gifAttribution = 1;
                    break;
                case "TENOR":
                case 2:
                    message.gifAttribution = 2;
                    break;
                }
                if (object.viewOnce != null)
                    message.viewOnce = Boolean(object.viewOnce);
                if (object.thumbnailDirectPath != null)
                    message.thumbnailDirectPath = String(object.thumbnailDirectPath);
                if (object.thumbnailSHA256 != null)
                    if (typeof object.thumbnailSHA256 === "string")
                        $util.base64.decode(object.thumbnailSHA256, message.thumbnailSHA256 = $util.newBuffer($util.base64.length(object.thumbnailSHA256)), 0);
                    else if (object.thumbnailSHA256.length >= 0)
                        message.thumbnailSHA256 = object.thumbnailSHA256;
                if (object.thumbnailEncSHA256 != null)
                    if (typeof object.thumbnailEncSHA256 === "string")
                        $util.base64.decode(object.thumbnailEncSHA256, message.thumbnailEncSHA256 = $util.newBuffer($util.base64.length(object.thumbnailEncSHA256)), 0);
                    else if (object.thumbnailEncSHA256.length >= 0)
                        message.thumbnailEncSHA256 = object.thumbnailEncSHA256;
                if (object.staticURL != null)
                    message.staticURL = String(object.staticURL);
                if (object.annotations) {
                    if (!Array.isArray(object.annotations))
                        throw TypeError(".WAE2E.Message.VideoMessage.annotations: array expected");
                    message.annotations = [];
                    for (var i = 0; i < object.annotations.length; ++i) {
                        if (typeof object.annotations[i] !== "object")
                            throw TypeError(".WAE2E.Message.VideoMessage.annotations: object expected");
                        message.annotations[i] = $root.WAE2E.InteractiveAnnotation.fromObject(object.annotations[i]);
                    }
                }
                if (object.accessibilityLabel != null)
                    message.accessibilityLabel = String(object.accessibilityLabel);
                if (object.processedVideos) {
                    if (!Array.isArray(object.processedVideos))
                        throw TypeError(".WAE2E.Message.VideoMessage.processedVideos: array expected");
                    message.processedVideos = [];
                    for (var i = 0; i < object.processedVideos.length; ++i) {
                        if (typeof object.processedVideos[i] !== "object")
                            throw TypeError(".WAE2E.Message.VideoMessage.processedVideos: object expected");
                        message.processedVideos[i] = $root.WAE2E.ProcessedVideo.fromObject(object.processedVideos[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a VideoMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.VideoMessage
             * @static
             * @param {WAE2E.Message.VideoMessage} message VideoMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VideoMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.interactiveAnnotations = [];
                    object.annotations = [];
                    object.processedVideos = [];
                }
                if (options.defaults) {
                    object.URL = "";
                    object.mimetype = "";
                    if (options.bytes === String)
                        object.fileSHA256 = "";
                    else {
                        object.fileSHA256 = [];
                        if (options.bytes !== Array)
                            object.fileSHA256 = $util.newBuffer(object.fileSHA256);
                    }
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.fileLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.fileLength = options.longs === String ? "0" : 0;
                    object.seconds = 0;
                    if (options.bytes === String)
                        object.mediaKey = "";
                    else {
                        object.mediaKey = [];
                        if (options.bytes !== Array)
                            object.mediaKey = $util.newBuffer(object.mediaKey);
                    }
                    object.caption = "";
                    object.gifPlayback = false;
                    object.height = 0;
                    object.width = 0;
                    if (options.bytes === String)
                        object.fileEncSHA256 = "";
                    else {
                        object.fileEncSHA256 = [];
                        if (options.bytes !== Array)
                            object.fileEncSHA256 = $util.newBuffer(object.fileEncSHA256);
                    }
                    object.directPath = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.mediaKeyTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.mediaKeyTimestamp = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.JPEGThumbnail = "";
                    else {
                        object.JPEGThumbnail = [];
                        if (options.bytes !== Array)
                            object.JPEGThumbnail = $util.newBuffer(object.JPEGThumbnail);
                    }
                    object.contextInfo = null;
                    if (options.bytes === String)
                        object.streamingSidecar = "";
                    else {
                        object.streamingSidecar = [];
                        if (options.bytes !== Array)
                            object.streamingSidecar = $util.newBuffer(object.streamingSidecar);
                    }
                    object.gifAttribution = options.enums === String ? "NONE" : 0;
                    object.viewOnce = false;
                    object.thumbnailDirectPath = "";
                    if (options.bytes === String)
                        object.thumbnailSHA256 = "";
                    else {
                        object.thumbnailSHA256 = [];
                        if (options.bytes !== Array)
                            object.thumbnailSHA256 = $util.newBuffer(object.thumbnailSHA256);
                    }
                    if (options.bytes === String)
                        object.thumbnailEncSHA256 = "";
                    else {
                        object.thumbnailEncSHA256 = [];
                        if (options.bytes !== Array)
                            object.thumbnailEncSHA256 = $util.newBuffer(object.thumbnailEncSHA256);
                    }
                    object.staticURL = "";
                    object.accessibilityLabel = "";
                }
                if (message.URL != null && message.hasOwnProperty("URL"))
                    object.URL = message.URL;
                if (message.mimetype != null && message.hasOwnProperty("mimetype"))
                    object.mimetype = message.mimetype;
                if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                    object.fileSHA256 = options.bytes === String ? $util.base64.encode(message.fileSHA256, 0, message.fileSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.fileSHA256) : message.fileSHA256;
                if (message.fileLength != null && message.hasOwnProperty("fileLength"))
                    if (typeof message.fileLength === "number")
                        object.fileLength = options.longs === String ? String(message.fileLength) : message.fileLength;
                    else
                        object.fileLength = options.longs === String ? $util.Long.prototype.toString.call(message.fileLength) : options.longs === Number ? new $util.LongBits(message.fileLength.low >>> 0, message.fileLength.high >>> 0).toNumber(true) : message.fileLength;
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    object.seconds = message.seconds;
                if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                    object.mediaKey = options.bytes === String ? $util.base64.encode(message.mediaKey, 0, message.mediaKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.mediaKey) : message.mediaKey;
                if (message.caption != null && message.hasOwnProperty("caption"))
                    object.caption = message.caption;
                if (message.gifPlayback != null && message.hasOwnProperty("gifPlayback"))
                    object.gifPlayback = message.gifPlayback;
                if (message.height != null && message.hasOwnProperty("height"))
                    object.height = message.height;
                if (message.width != null && message.hasOwnProperty("width"))
                    object.width = message.width;
                if (message.fileEncSHA256 != null && message.hasOwnProperty("fileEncSHA256"))
                    object.fileEncSHA256 = options.bytes === String ? $util.base64.encode(message.fileEncSHA256, 0, message.fileEncSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.fileEncSHA256) : message.fileEncSHA256;
                if (message.interactiveAnnotations && message.interactiveAnnotations.length) {
                    object.interactiveAnnotations = [];
                    for (var j = 0; j < message.interactiveAnnotations.length; ++j)
                        object.interactiveAnnotations[j] = $root.WAE2E.InteractiveAnnotation.toObject(message.interactiveAnnotations[j], options);
                }
                if (message.directPath != null && message.hasOwnProperty("directPath"))
                    object.directPath = message.directPath;
                if (message.mediaKeyTimestamp != null && message.hasOwnProperty("mediaKeyTimestamp"))
                    if (typeof message.mediaKeyTimestamp === "number")
                        object.mediaKeyTimestamp = options.longs === String ? String(message.mediaKeyTimestamp) : message.mediaKeyTimestamp;
                    else
                        object.mediaKeyTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.mediaKeyTimestamp) : options.longs === Number ? new $util.LongBits(message.mediaKeyTimestamp.low >>> 0, message.mediaKeyTimestamp.high >>> 0).toNumber() : message.mediaKeyTimestamp;
                if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail"))
                    object.JPEGThumbnail = options.bytes === String ? $util.base64.encode(message.JPEGThumbnail, 0, message.JPEGThumbnail.length) : options.bytes === Array ? Array.prototype.slice.call(message.JPEGThumbnail) : message.JPEGThumbnail;
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                if (message.streamingSidecar != null && message.hasOwnProperty("streamingSidecar"))
                    object.streamingSidecar = options.bytes === String ? $util.base64.encode(message.streamingSidecar, 0, message.streamingSidecar.length) : options.bytes === Array ? Array.prototype.slice.call(message.streamingSidecar) : message.streamingSidecar;
                if (message.gifAttribution != null && message.hasOwnProperty("gifAttribution"))
                    object.gifAttribution = options.enums === String ? $root.WAE2E.Message.VideoMessage.Attribution[message.gifAttribution] === undefined ? message.gifAttribution : $root.WAE2E.Message.VideoMessage.Attribution[message.gifAttribution] : message.gifAttribution;
                if (message.viewOnce != null && message.hasOwnProperty("viewOnce"))
                    object.viewOnce = message.viewOnce;
                if (message.thumbnailDirectPath != null && message.hasOwnProperty("thumbnailDirectPath"))
                    object.thumbnailDirectPath = message.thumbnailDirectPath;
                if (message.thumbnailSHA256 != null && message.hasOwnProperty("thumbnailSHA256"))
                    object.thumbnailSHA256 = options.bytes === String ? $util.base64.encode(message.thumbnailSHA256, 0, message.thumbnailSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.thumbnailSHA256) : message.thumbnailSHA256;
                if (message.thumbnailEncSHA256 != null && message.hasOwnProperty("thumbnailEncSHA256"))
                    object.thumbnailEncSHA256 = options.bytes === String ? $util.base64.encode(message.thumbnailEncSHA256, 0, message.thumbnailEncSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.thumbnailEncSHA256) : message.thumbnailEncSHA256;
                if (message.staticURL != null && message.hasOwnProperty("staticURL"))
                    object.staticURL = message.staticURL;
                if (message.annotations && message.annotations.length) {
                    object.annotations = [];
                    for (var j = 0; j < message.annotations.length; ++j)
                        object.annotations[j] = $root.WAE2E.InteractiveAnnotation.toObject(message.annotations[j], options);
                }
                if (message.accessibilityLabel != null && message.hasOwnProperty("accessibilityLabel"))
                    object.accessibilityLabel = message.accessibilityLabel;
                if (message.processedVideos && message.processedVideos.length) {
                    object.processedVideos = [];
                    for (var j = 0; j < message.processedVideos.length; ++j)
                        object.processedVideos[j] = $root.WAE2E.ProcessedVideo.toObject(message.processedVideos[j], options);
                }
                return object;
            };

            /**
             * Converts this VideoMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.VideoMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VideoMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for VideoMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.VideoMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            VideoMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.VideoMessage";
            };

            /**
             * Attribution enum.
             * @name WAE2E.Message.VideoMessage.Attribution
             * @enum {number}
             * @property {number} NONE=0 NONE value
             * @property {number} GIPHY=1 GIPHY value
             * @property {number} TENOR=2 TENOR value
             */
            VideoMessage.Attribution = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NONE"] = 0;
                values[valuesById[1] = "GIPHY"] = 1;
                values[valuesById[2] = "TENOR"] = 2;
                return values;
            })();

            return VideoMessage;
        })();

        Message.ExtendedTextMessage = (function() {

            /**
             * Properties of an ExtendedTextMessage.
             * @memberof WAE2E.Message
             * @interface IExtendedTextMessage
             * @property {string|null} [text] ExtendedTextMessage text
             * @property {string|null} [matchedText] ExtendedTextMessage matchedText
             * @property {string|null} [canonicalURL] ExtendedTextMessage canonicalURL
             * @property {string|null} [description] ExtendedTextMessage description
             * @property {string|null} [title] ExtendedTextMessage title
             * @property {number|null} [textArgb] ExtendedTextMessage textArgb
             * @property {number|null} [backgroundArgb] ExtendedTextMessage backgroundArgb
             * @property {WAE2E.Message.ExtendedTextMessage.FontType|null} [font] ExtendedTextMessage font
             * @property {WAE2E.Message.ExtendedTextMessage.PreviewType|null} [previewType] ExtendedTextMessage previewType
             * @property {Uint8Array|null} [JPEGThumbnail] ExtendedTextMessage JPEGThumbnail
             * @property {WAE2E.IContextInfo|null} [contextInfo] ExtendedTextMessage contextInfo
             * @property {boolean|null} [doNotPlayInline] ExtendedTextMessage doNotPlayInline
             * @property {string|null} [thumbnailDirectPath] ExtendedTextMessage thumbnailDirectPath
             * @property {Uint8Array|null} [thumbnailSHA256] ExtendedTextMessage thumbnailSHA256
             * @property {Uint8Array|null} [thumbnailEncSHA256] ExtendedTextMessage thumbnailEncSHA256
             * @property {Uint8Array|null} [mediaKey] ExtendedTextMessage mediaKey
             * @property {number|Long|null} [mediaKeyTimestamp] ExtendedTextMessage mediaKeyTimestamp
             * @property {number|null} [thumbnailHeight] ExtendedTextMessage thumbnailHeight
             * @property {number|null} [thumbnailWidth] ExtendedTextMessage thumbnailWidth
             * @property {WAE2E.Message.ExtendedTextMessage.InviteLinkGroupType|null} [inviteLinkGroupType] ExtendedTextMessage inviteLinkGroupType
             * @property {string|null} [inviteLinkParentGroupSubjectV2] ExtendedTextMessage inviteLinkParentGroupSubjectV2
             * @property {Uint8Array|null} [inviteLinkParentGroupThumbnailV2] ExtendedTextMessage inviteLinkParentGroupThumbnailV2
             * @property {WAE2E.Message.ExtendedTextMessage.InviteLinkGroupType|null} [inviteLinkGroupTypeV2] ExtendedTextMessage inviteLinkGroupTypeV2
             * @property {boolean|null} [viewOnce] ExtendedTextMessage viewOnce
             * @property {number|null} [videoHeight] ExtendedTextMessage videoHeight
             * @property {number|null} [videoWidth] ExtendedTextMessage videoWidth
             */

            /**
             * Constructs a new ExtendedTextMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents an ExtendedTextMessage.
             * @implements IExtendedTextMessage
             * @constructor
             * @param {WAE2E.Message.IExtendedTextMessage=} [properties] Properties to set
             */
            function ExtendedTextMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ExtendedTextMessage text.
             * @member {string} text
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.text = "";

            /**
             * ExtendedTextMessage matchedText.
             * @member {string} matchedText
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.matchedText = "";

            /**
             * ExtendedTextMessage canonicalURL.
             * @member {string} canonicalURL
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.canonicalURL = "";

            /**
             * ExtendedTextMessage description.
             * @member {string} description
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.description = "";

            /**
             * ExtendedTextMessage title.
             * @member {string} title
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.title = "";

            /**
             * ExtendedTextMessage textArgb.
             * @member {number} textArgb
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.textArgb = 0;

            /**
             * ExtendedTextMessage backgroundArgb.
             * @member {number} backgroundArgb
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.backgroundArgb = 0;

            /**
             * ExtendedTextMessage font.
             * @member {WAE2E.Message.ExtendedTextMessage.FontType} font
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.font = 0;

            /**
             * ExtendedTextMessage previewType.
             * @member {WAE2E.Message.ExtendedTextMessage.PreviewType} previewType
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.previewType = 0;

            /**
             * ExtendedTextMessage JPEGThumbnail.
             * @member {Uint8Array} JPEGThumbnail
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.JPEGThumbnail = $util.newBuffer([]);

            /**
             * ExtendedTextMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.contextInfo = null;

            /**
             * ExtendedTextMessage doNotPlayInline.
             * @member {boolean} doNotPlayInline
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.doNotPlayInline = false;

            /**
             * ExtendedTextMessage thumbnailDirectPath.
             * @member {string} thumbnailDirectPath
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.thumbnailDirectPath = "";

            /**
             * ExtendedTextMessage thumbnailSHA256.
             * @member {Uint8Array} thumbnailSHA256
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.thumbnailSHA256 = $util.newBuffer([]);

            /**
             * ExtendedTextMessage thumbnailEncSHA256.
             * @member {Uint8Array} thumbnailEncSHA256
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.thumbnailEncSHA256 = $util.newBuffer([]);

            /**
             * ExtendedTextMessage mediaKey.
             * @member {Uint8Array} mediaKey
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.mediaKey = $util.newBuffer([]);

            /**
             * ExtendedTextMessage mediaKeyTimestamp.
             * @member {number|Long} mediaKeyTimestamp
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.mediaKeyTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ExtendedTextMessage thumbnailHeight.
             * @member {number} thumbnailHeight
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.thumbnailHeight = 0;

            /**
             * ExtendedTextMessage thumbnailWidth.
             * @member {number} thumbnailWidth
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.thumbnailWidth = 0;

            /**
             * ExtendedTextMessage inviteLinkGroupType.
             * @member {WAE2E.Message.ExtendedTextMessage.InviteLinkGroupType} inviteLinkGroupType
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.inviteLinkGroupType = 0;

            /**
             * ExtendedTextMessage inviteLinkParentGroupSubjectV2.
             * @member {string} inviteLinkParentGroupSubjectV2
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.inviteLinkParentGroupSubjectV2 = "";

            /**
             * ExtendedTextMessage inviteLinkParentGroupThumbnailV2.
             * @member {Uint8Array} inviteLinkParentGroupThumbnailV2
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.inviteLinkParentGroupThumbnailV2 = $util.newBuffer([]);

            /**
             * ExtendedTextMessage inviteLinkGroupTypeV2.
             * @member {WAE2E.Message.ExtendedTextMessage.InviteLinkGroupType} inviteLinkGroupTypeV2
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.inviteLinkGroupTypeV2 = 0;

            /**
             * ExtendedTextMessage viewOnce.
             * @member {boolean} viewOnce
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.viewOnce = false;

            /**
             * ExtendedTextMessage videoHeight.
             * @member {number} videoHeight
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.videoHeight = 0;

            /**
             * ExtendedTextMessage videoWidth.
             * @member {number} videoWidth
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             */
            ExtendedTextMessage.prototype.videoWidth = 0;

            /**
             * Creates a new ExtendedTextMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @static
             * @param {WAE2E.Message.IExtendedTextMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.ExtendedTextMessage} ExtendedTextMessage instance
             */
            ExtendedTextMessage.create = function create(properties) {
                return new ExtendedTextMessage(properties);
            };

            /**
             * Encodes the specified ExtendedTextMessage message. Does not implicitly {@link WAE2E.Message.ExtendedTextMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @static
             * @param {WAE2E.Message.IExtendedTextMessage} message ExtendedTextMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExtendedTextMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                if (message.matchedText != null && Object.hasOwnProperty.call(message, "matchedText"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.matchedText);
                if (message.canonicalURL != null && Object.hasOwnProperty.call(message, "canonicalURL"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.canonicalURL);
                if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.description);
                if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.title);
                if (message.textArgb != null && Object.hasOwnProperty.call(message, "textArgb"))
                    writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.textArgb);
                if (message.backgroundArgb != null && Object.hasOwnProperty.call(message, "backgroundArgb"))
                    writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.backgroundArgb);
                if (message.font != null && Object.hasOwnProperty.call(message, "font"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.font);
                if (message.previewType != null && Object.hasOwnProperty.call(message, "previewType"))
                    writer.uint32(/* id 10, wireType 0 =*/80).int32(message.previewType);
                if (message.JPEGThumbnail != null && Object.hasOwnProperty.call(message, "JPEGThumbnail"))
                    writer.uint32(/* id 16, wireType 2 =*/130).bytes(message.JPEGThumbnail);
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                if (message.doNotPlayInline != null && Object.hasOwnProperty.call(message, "doNotPlayInline"))
                    writer.uint32(/* id 18, wireType 0 =*/144).bool(message.doNotPlayInline);
                if (message.thumbnailDirectPath != null && Object.hasOwnProperty.call(message, "thumbnailDirectPath"))
                    writer.uint32(/* id 19, wireType 2 =*/154).string(message.thumbnailDirectPath);
                if (message.thumbnailSHA256 != null && Object.hasOwnProperty.call(message, "thumbnailSHA256"))
                    writer.uint32(/* id 20, wireType 2 =*/162).bytes(message.thumbnailSHA256);
                if (message.thumbnailEncSHA256 != null && Object.hasOwnProperty.call(message, "thumbnailEncSHA256"))
                    writer.uint32(/* id 21, wireType 2 =*/170).bytes(message.thumbnailEncSHA256);
                if (message.mediaKey != null && Object.hasOwnProperty.call(message, "mediaKey"))
                    writer.uint32(/* id 22, wireType 2 =*/178).bytes(message.mediaKey);
                if (message.mediaKeyTimestamp != null && Object.hasOwnProperty.call(message, "mediaKeyTimestamp"))
                    writer.uint32(/* id 23, wireType 0 =*/184).int64(message.mediaKeyTimestamp);
                if (message.thumbnailHeight != null && Object.hasOwnProperty.call(message, "thumbnailHeight"))
                    writer.uint32(/* id 24, wireType 0 =*/192).uint32(message.thumbnailHeight);
                if (message.thumbnailWidth != null && Object.hasOwnProperty.call(message, "thumbnailWidth"))
                    writer.uint32(/* id 25, wireType 0 =*/200).uint32(message.thumbnailWidth);
                if (message.inviteLinkGroupType != null && Object.hasOwnProperty.call(message, "inviteLinkGroupType"))
                    writer.uint32(/* id 26, wireType 0 =*/208).int32(message.inviteLinkGroupType);
                if (message.inviteLinkParentGroupSubjectV2 != null && Object.hasOwnProperty.call(message, "inviteLinkParentGroupSubjectV2"))
                    writer.uint32(/* id 27, wireType 2 =*/218).string(message.inviteLinkParentGroupSubjectV2);
                if (message.inviteLinkParentGroupThumbnailV2 != null && Object.hasOwnProperty.call(message, "inviteLinkParentGroupThumbnailV2"))
                    writer.uint32(/* id 28, wireType 2 =*/226).bytes(message.inviteLinkParentGroupThumbnailV2);
                if (message.inviteLinkGroupTypeV2 != null && Object.hasOwnProperty.call(message, "inviteLinkGroupTypeV2"))
                    writer.uint32(/* id 29, wireType 0 =*/232).int32(message.inviteLinkGroupTypeV2);
                if (message.viewOnce != null && Object.hasOwnProperty.call(message, "viewOnce"))
                    writer.uint32(/* id 30, wireType 0 =*/240).bool(message.viewOnce);
                if (message.videoHeight != null && Object.hasOwnProperty.call(message, "videoHeight"))
                    writer.uint32(/* id 31, wireType 0 =*/248).uint32(message.videoHeight);
                if (message.videoWidth != null && Object.hasOwnProperty.call(message, "videoWidth"))
                    writer.uint32(/* id 32, wireType 0 =*/256).uint32(message.videoWidth);
                return writer;
            };

            /**
             * Encodes the specified ExtendedTextMessage message, length delimited. Does not implicitly {@link WAE2E.Message.ExtendedTextMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @static
             * @param {WAE2E.Message.IExtendedTextMessage} message ExtendedTextMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExtendedTextMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ExtendedTextMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.ExtendedTextMessage} ExtendedTextMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExtendedTextMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ExtendedTextMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.text = reader.string();
                            break;
                        }
                    case 2: {
                            message.matchedText = reader.string();
                            break;
                        }
                    case 4: {
                            message.canonicalURL = reader.string();
                            break;
                        }
                    case 5: {
                            message.description = reader.string();
                            break;
                        }
                    case 6: {
                            message.title = reader.string();
                            break;
                        }
                    case 7: {
                            message.textArgb = reader.fixed32();
                            break;
                        }
                    case 8: {
                            message.backgroundArgb = reader.fixed32();
                            break;
                        }
                    case 9: {
                            message.font = reader.int32();
                            break;
                        }
                    case 10: {
                            message.previewType = reader.int32();
                            break;
                        }
                    case 16: {
                            message.JPEGThumbnail = reader.bytes();
                            break;
                        }
                    case 17: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    case 18: {
                            message.doNotPlayInline = reader.bool();
                            break;
                        }
                    case 19: {
                            message.thumbnailDirectPath = reader.string();
                            break;
                        }
                    case 20: {
                            message.thumbnailSHA256 = reader.bytes();
                            break;
                        }
                    case 21: {
                            message.thumbnailEncSHA256 = reader.bytes();
                            break;
                        }
                    case 22: {
                            message.mediaKey = reader.bytes();
                            break;
                        }
                    case 23: {
                            message.mediaKeyTimestamp = reader.int64();
                            break;
                        }
                    case 24: {
                            message.thumbnailHeight = reader.uint32();
                            break;
                        }
                    case 25: {
                            message.thumbnailWidth = reader.uint32();
                            break;
                        }
                    case 26: {
                            message.inviteLinkGroupType = reader.int32();
                            break;
                        }
                    case 27: {
                            message.inviteLinkParentGroupSubjectV2 = reader.string();
                            break;
                        }
                    case 28: {
                            message.inviteLinkParentGroupThumbnailV2 = reader.bytes();
                            break;
                        }
                    case 29: {
                            message.inviteLinkGroupTypeV2 = reader.int32();
                            break;
                        }
                    case 30: {
                            message.viewOnce = reader.bool();
                            break;
                        }
                    case 31: {
                            message.videoHeight = reader.uint32();
                            break;
                        }
                    case 32: {
                            message.videoWidth = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ExtendedTextMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.ExtendedTextMessage} ExtendedTextMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExtendedTextMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ExtendedTextMessage message.
             * @function verify
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ExtendedTextMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.text != null && message.hasOwnProperty("text"))
                    if (!$util.isString(message.text))
                        return "text: string expected";
                if (message.matchedText != null && message.hasOwnProperty("matchedText"))
                    if (!$util.isString(message.matchedText))
                        return "matchedText: string expected";
                if (message.canonicalURL != null && message.hasOwnProperty("canonicalURL"))
                    if (!$util.isString(message.canonicalURL))
                        return "canonicalURL: string expected";
                if (message.description != null && message.hasOwnProperty("description"))
                    if (!$util.isString(message.description))
                        return "description: string expected";
                if (message.title != null && message.hasOwnProperty("title"))
                    if (!$util.isString(message.title))
                        return "title: string expected";
                if (message.textArgb != null && message.hasOwnProperty("textArgb"))
                    if (!$util.isInteger(message.textArgb))
                        return "textArgb: integer expected";
                if (message.backgroundArgb != null && message.hasOwnProperty("backgroundArgb"))
                    if (!$util.isInteger(message.backgroundArgb))
                        return "backgroundArgb: integer expected";
                if (message.font != null && message.hasOwnProperty("font"))
                    switch (message.font) {
                    default:
                        return "font: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                        break;
                    }
                if (message.previewType != null && message.hasOwnProperty("previewType"))
                    switch (message.previewType) {
                    default:
                        return "previewType: enum value expected";
                    case 0:
                    case 1:
                    case 4:
                    case 5:
                    case 6:
                        break;
                    }
                if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail"))
                    if (!(message.JPEGThumbnail && typeof message.JPEGThumbnail.length === "number" || $util.isString(message.JPEGThumbnail)))
                        return "JPEGThumbnail: buffer expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                if (message.doNotPlayInline != null && message.hasOwnProperty("doNotPlayInline"))
                    if (typeof message.doNotPlayInline !== "boolean")
                        return "doNotPlayInline: boolean expected";
                if (message.thumbnailDirectPath != null && message.hasOwnProperty("thumbnailDirectPath"))
                    if (!$util.isString(message.thumbnailDirectPath))
                        return "thumbnailDirectPath: string expected";
                if (message.thumbnailSHA256 != null && message.hasOwnProperty("thumbnailSHA256"))
                    if (!(message.thumbnailSHA256 && typeof message.thumbnailSHA256.length === "number" || $util.isString(message.thumbnailSHA256)))
                        return "thumbnailSHA256: buffer expected";
                if (message.thumbnailEncSHA256 != null && message.hasOwnProperty("thumbnailEncSHA256"))
                    if (!(message.thumbnailEncSHA256 && typeof message.thumbnailEncSHA256.length === "number" || $util.isString(message.thumbnailEncSHA256)))
                        return "thumbnailEncSHA256: buffer expected";
                if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                    if (!(message.mediaKey && typeof message.mediaKey.length === "number" || $util.isString(message.mediaKey)))
                        return "mediaKey: buffer expected";
                if (message.mediaKeyTimestamp != null && message.hasOwnProperty("mediaKeyTimestamp"))
                    if (!$util.isInteger(message.mediaKeyTimestamp) && !(message.mediaKeyTimestamp && $util.isInteger(message.mediaKeyTimestamp.low) && $util.isInteger(message.mediaKeyTimestamp.high)))
                        return "mediaKeyTimestamp: integer|Long expected";
                if (message.thumbnailHeight != null && message.hasOwnProperty("thumbnailHeight"))
                    if (!$util.isInteger(message.thumbnailHeight))
                        return "thumbnailHeight: integer expected";
                if (message.thumbnailWidth != null && message.hasOwnProperty("thumbnailWidth"))
                    if (!$util.isInteger(message.thumbnailWidth))
                        return "thumbnailWidth: integer expected";
                if (message.inviteLinkGroupType != null && message.hasOwnProperty("inviteLinkGroupType"))
                    switch (message.inviteLinkGroupType) {
                    default:
                        return "inviteLinkGroupType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.inviteLinkParentGroupSubjectV2 != null && message.hasOwnProperty("inviteLinkParentGroupSubjectV2"))
                    if (!$util.isString(message.inviteLinkParentGroupSubjectV2))
                        return "inviteLinkParentGroupSubjectV2: string expected";
                if (message.inviteLinkParentGroupThumbnailV2 != null && message.hasOwnProperty("inviteLinkParentGroupThumbnailV2"))
                    if (!(message.inviteLinkParentGroupThumbnailV2 && typeof message.inviteLinkParentGroupThumbnailV2.length === "number" || $util.isString(message.inviteLinkParentGroupThumbnailV2)))
                        return "inviteLinkParentGroupThumbnailV2: buffer expected";
                if (message.inviteLinkGroupTypeV2 != null && message.hasOwnProperty("inviteLinkGroupTypeV2"))
                    switch (message.inviteLinkGroupTypeV2) {
                    default:
                        return "inviteLinkGroupTypeV2: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.viewOnce != null && message.hasOwnProperty("viewOnce"))
                    if (typeof message.viewOnce !== "boolean")
                        return "viewOnce: boolean expected";
                if (message.videoHeight != null && message.hasOwnProperty("videoHeight"))
                    if (!$util.isInteger(message.videoHeight))
                        return "videoHeight: integer expected";
                if (message.videoWidth != null && message.hasOwnProperty("videoWidth"))
                    if (!$util.isInteger(message.videoWidth))
                        return "videoWidth: integer expected";
                return null;
            };

            /**
             * Creates an ExtendedTextMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.ExtendedTextMessage} ExtendedTextMessage
             */
            ExtendedTextMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.ExtendedTextMessage)
                    return object;
                var message = new $root.WAE2E.Message.ExtendedTextMessage();
                if (object.text != null)
                    message.text = String(object.text);
                if (object.matchedText != null)
                    message.matchedText = String(object.matchedText);
                if (object.canonicalURL != null)
                    message.canonicalURL = String(object.canonicalURL);
                if (object.description != null)
                    message.description = String(object.description);
                if (object.title != null)
                    message.title = String(object.title);
                if (object.textArgb != null)
                    message.textArgb = object.textArgb >>> 0;
                if (object.backgroundArgb != null)
                    message.backgroundArgb = object.backgroundArgb >>> 0;
                switch (object.font) {
                default:
                    if (typeof object.font === "number") {
                        message.font = object.font;
                        break;
                    }
                    break;
                case "SYSTEM":
                case 0:
                    message.font = 0;
                    break;
                case "SYSTEM_TEXT":
                case 1:
                    message.font = 1;
                    break;
                case "FB_SCRIPT":
                case 2:
                    message.font = 2;
                    break;
                case "SYSTEM_BOLD":
                case 6:
                    message.font = 6;
                    break;
                case "MORNINGBREEZE_REGULAR":
                case 7:
                    message.font = 7;
                    break;
                case "CALISTOGA_REGULAR":
                case 8:
                    message.font = 8;
                    break;
                case "EXO2_EXTRABOLD":
                case 9:
                    message.font = 9;
                    break;
                case "COURIERPRIME_BOLD":
                case 10:
                    message.font = 10;
                    break;
                }
                switch (object.previewType) {
                default:
                    if (typeof object.previewType === "number") {
                        message.previewType = object.previewType;
                        break;
                    }
                    break;
                case "NONE":
                case 0:
                    message.previewType = 0;
                    break;
                case "VIDEO":
                case 1:
                    message.previewType = 1;
                    break;
                case "PLACEHOLDER":
                case 4:
                    message.previewType = 4;
                    break;
                case "IMAGE":
                case 5:
                    message.previewType = 5;
                    break;
                case "PAYMENT_LINKS":
                case 6:
                    message.previewType = 6;
                    break;
                }
                if (object.JPEGThumbnail != null)
                    if (typeof object.JPEGThumbnail === "string")
                        $util.base64.decode(object.JPEGThumbnail, message.JPEGThumbnail = $util.newBuffer($util.base64.length(object.JPEGThumbnail)), 0);
                    else if (object.JPEGThumbnail.length >= 0)
                        message.JPEGThumbnail = object.JPEGThumbnail;
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.ExtendedTextMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                if (object.doNotPlayInline != null)
                    message.doNotPlayInline = Boolean(object.doNotPlayInline);
                if (object.thumbnailDirectPath != null)
                    message.thumbnailDirectPath = String(object.thumbnailDirectPath);
                if (object.thumbnailSHA256 != null)
                    if (typeof object.thumbnailSHA256 === "string")
                        $util.base64.decode(object.thumbnailSHA256, message.thumbnailSHA256 = $util.newBuffer($util.base64.length(object.thumbnailSHA256)), 0);
                    else if (object.thumbnailSHA256.length >= 0)
                        message.thumbnailSHA256 = object.thumbnailSHA256;
                if (object.thumbnailEncSHA256 != null)
                    if (typeof object.thumbnailEncSHA256 === "string")
                        $util.base64.decode(object.thumbnailEncSHA256, message.thumbnailEncSHA256 = $util.newBuffer($util.base64.length(object.thumbnailEncSHA256)), 0);
                    else if (object.thumbnailEncSHA256.length >= 0)
                        message.thumbnailEncSHA256 = object.thumbnailEncSHA256;
                if (object.mediaKey != null)
                    if (typeof object.mediaKey === "string")
                        $util.base64.decode(object.mediaKey, message.mediaKey = $util.newBuffer($util.base64.length(object.mediaKey)), 0);
                    else if (object.mediaKey.length >= 0)
                        message.mediaKey = object.mediaKey;
                if (object.mediaKeyTimestamp != null)
                    if ($util.Long)
                        (message.mediaKeyTimestamp = $util.Long.fromValue(object.mediaKeyTimestamp)).unsigned = false;
                    else if (typeof object.mediaKeyTimestamp === "string")
                        message.mediaKeyTimestamp = parseInt(object.mediaKeyTimestamp, 10);
                    else if (typeof object.mediaKeyTimestamp === "number")
                        message.mediaKeyTimestamp = object.mediaKeyTimestamp;
                    else if (typeof object.mediaKeyTimestamp === "object")
                        message.mediaKeyTimestamp = new $util.LongBits(object.mediaKeyTimestamp.low >>> 0, object.mediaKeyTimestamp.high >>> 0).toNumber();
                if (object.thumbnailHeight != null)
                    message.thumbnailHeight = object.thumbnailHeight >>> 0;
                if (object.thumbnailWidth != null)
                    message.thumbnailWidth = object.thumbnailWidth >>> 0;
                switch (object.inviteLinkGroupType) {
                default:
                    if (typeof object.inviteLinkGroupType === "number") {
                        message.inviteLinkGroupType = object.inviteLinkGroupType;
                        break;
                    }
                    break;
                case "DEFAULT":
                case 0:
                    message.inviteLinkGroupType = 0;
                    break;
                case "PARENT":
                case 1:
                    message.inviteLinkGroupType = 1;
                    break;
                case "SUB":
                case 2:
                    message.inviteLinkGroupType = 2;
                    break;
                case "DEFAULT_SUB":
                case 3:
                    message.inviteLinkGroupType = 3;
                    break;
                }
                if (object.inviteLinkParentGroupSubjectV2 != null)
                    message.inviteLinkParentGroupSubjectV2 = String(object.inviteLinkParentGroupSubjectV2);
                if (object.inviteLinkParentGroupThumbnailV2 != null)
                    if (typeof object.inviteLinkParentGroupThumbnailV2 === "string")
                        $util.base64.decode(object.inviteLinkParentGroupThumbnailV2, message.inviteLinkParentGroupThumbnailV2 = $util.newBuffer($util.base64.length(object.inviteLinkParentGroupThumbnailV2)), 0);
                    else if (object.inviteLinkParentGroupThumbnailV2.length >= 0)
                        message.inviteLinkParentGroupThumbnailV2 = object.inviteLinkParentGroupThumbnailV2;
                switch (object.inviteLinkGroupTypeV2) {
                default:
                    if (typeof object.inviteLinkGroupTypeV2 === "number") {
                        message.inviteLinkGroupTypeV2 = object.inviteLinkGroupTypeV2;
                        break;
                    }
                    break;
                case "DEFAULT":
                case 0:
                    message.inviteLinkGroupTypeV2 = 0;
                    break;
                case "PARENT":
                case 1:
                    message.inviteLinkGroupTypeV2 = 1;
                    break;
                case "SUB":
                case 2:
                    message.inviteLinkGroupTypeV2 = 2;
                    break;
                case "DEFAULT_SUB":
                case 3:
                    message.inviteLinkGroupTypeV2 = 3;
                    break;
                }
                if (object.viewOnce != null)
                    message.viewOnce = Boolean(object.viewOnce);
                if (object.videoHeight != null)
                    message.videoHeight = object.videoHeight >>> 0;
                if (object.videoWidth != null)
                    message.videoWidth = object.videoWidth >>> 0;
                return message;
            };

            /**
             * Creates a plain object from an ExtendedTextMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @static
             * @param {WAE2E.Message.ExtendedTextMessage} message ExtendedTextMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ExtendedTextMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.text = "";
                    object.matchedText = "";
                    object.canonicalURL = "";
                    object.description = "";
                    object.title = "";
                    object.textArgb = 0;
                    object.backgroundArgb = 0;
                    object.font = options.enums === String ? "SYSTEM" : 0;
                    object.previewType = options.enums === String ? "NONE" : 0;
                    if (options.bytes === String)
                        object.JPEGThumbnail = "";
                    else {
                        object.JPEGThumbnail = [];
                        if (options.bytes !== Array)
                            object.JPEGThumbnail = $util.newBuffer(object.JPEGThumbnail);
                    }
                    object.contextInfo = null;
                    object.doNotPlayInline = false;
                    object.thumbnailDirectPath = "";
                    if (options.bytes === String)
                        object.thumbnailSHA256 = "";
                    else {
                        object.thumbnailSHA256 = [];
                        if (options.bytes !== Array)
                            object.thumbnailSHA256 = $util.newBuffer(object.thumbnailSHA256);
                    }
                    if (options.bytes === String)
                        object.thumbnailEncSHA256 = "";
                    else {
                        object.thumbnailEncSHA256 = [];
                        if (options.bytes !== Array)
                            object.thumbnailEncSHA256 = $util.newBuffer(object.thumbnailEncSHA256);
                    }
                    if (options.bytes === String)
                        object.mediaKey = "";
                    else {
                        object.mediaKey = [];
                        if (options.bytes !== Array)
                            object.mediaKey = $util.newBuffer(object.mediaKey);
                    }
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.mediaKeyTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.mediaKeyTimestamp = options.longs === String ? "0" : 0;
                    object.thumbnailHeight = 0;
                    object.thumbnailWidth = 0;
                    object.inviteLinkGroupType = options.enums === String ? "DEFAULT" : 0;
                    object.inviteLinkParentGroupSubjectV2 = "";
                    if (options.bytes === String)
                        object.inviteLinkParentGroupThumbnailV2 = "";
                    else {
                        object.inviteLinkParentGroupThumbnailV2 = [];
                        if (options.bytes !== Array)
                            object.inviteLinkParentGroupThumbnailV2 = $util.newBuffer(object.inviteLinkParentGroupThumbnailV2);
                    }
                    object.inviteLinkGroupTypeV2 = options.enums === String ? "DEFAULT" : 0;
                    object.viewOnce = false;
                    object.videoHeight = 0;
                    object.videoWidth = 0;
                }
                if (message.text != null && message.hasOwnProperty("text"))
                    object.text = message.text;
                if (message.matchedText != null && message.hasOwnProperty("matchedText"))
                    object.matchedText = message.matchedText;
                if (message.canonicalURL != null && message.hasOwnProperty("canonicalURL"))
                    object.canonicalURL = message.canonicalURL;
                if (message.description != null && message.hasOwnProperty("description"))
                    object.description = message.description;
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                if (message.textArgb != null && message.hasOwnProperty("textArgb"))
                    object.textArgb = message.textArgb;
                if (message.backgroundArgb != null && message.hasOwnProperty("backgroundArgb"))
                    object.backgroundArgb = message.backgroundArgb;
                if (message.font != null && message.hasOwnProperty("font"))
                    object.font = options.enums === String ? $root.WAE2E.Message.ExtendedTextMessage.FontType[message.font] === undefined ? message.font : $root.WAE2E.Message.ExtendedTextMessage.FontType[message.font] : message.font;
                if (message.previewType != null && message.hasOwnProperty("previewType"))
                    object.previewType = options.enums === String ? $root.WAE2E.Message.ExtendedTextMessage.PreviewType[message.previewType] === undefined ? message.previewType : $root.WAE2E.Message.ExtendedTextMessage.PreviewType[message.previewType] : message.previewType;
                if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail"))
                    object.JPEGThumbnail = options.bytes === String ? $util.base64.encode(message.JPEGThumbnail, 0, message.JPEGThumbnail.length) : options.bytes === Array ? Array.prototype.slice.call(message.JPEGThumbnail) : message.JPEGThumbnail;
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                if (message.doNotPlayInline != null && message.hasOwnProperty("doNotPlayInline"))
                    object.doNotPlayInline = message.doNotPlayInline;
                if (message.thumbnailDirectPath != null && message.hasOwnProperty("thumbnailDirectPath"))
                    object.thumbnailDirectPath = message.thumbnailDirectPath;
                if (message.thumbnailSHA256 != null && message.hasOwnProperty("thumbnailSHA256"))
                    object.thumbnailSHA256 = options.bytes === String ? $util.base64.encode(message.thumbnailSHA256, 0, message.thumbnailSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.thumbnailSHA256) : message.thumbnailSHA256;
                if (message.thumbnailEncSHA256 != null && message.hasOwnProperty("thumbnailEncSHA256"))
                    object.thumbnailEncSHA256 = options.bytes === String ? $util.base64.encode(message.thumbnailEncSHA256, 0, message.thumbnailEncSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.thumbnailEncSHA256) : message.thumbnailEncSHA256;
                if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                    object.mediaKey = options.bytes === String ? $util.base64.encode(message.mediaKey, 0, message.mediaKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.mediaKey) : message.mediaKey;
                if (message.mediaKeyTimestamp != null && message.hasOwnProperty("mediaKeyTimestamp"))
                    if (typeof message.mediaKeyTimestamp === "number")
                        object.mediaKeyTimestamp = options.longs === String ? String(message.mediaKeyTimestamp) : message.mediaKeyTimestamp;
                    else
                        object.mediaKeyTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.mediaKeyTimestamp) : options.longs === Number ? new $util.LongBits(message.mediaKeyTimestamp.low >>> 0, message.mediaKeyTimestamp.high >>> 0).toNumber() : message.mediaKeyTimestamp;
                if (message.thumbnailHeight != null && message.hasOwnProperty("thumbnailHeight"))
                    object.thumbnailHeight = message.thumbnailHeight;
                if (message.thumbnailWidth != null && message.hasOwnProperty("thumbnailWidth"))
                    object.thumbnailWidth = message.thumbnailWidth;
                if (message.inviteLinkGroupType != null && message.hasOwnProperty("inviteLinkGroupType"))
                    object.inviteLinkGroupType = options.enums === String ? $root.WAE2E.Message.ExtendedTextMessage.InviteLinkGroupType[message.inviteLinkGroupType] === undefined ? message.inviteLinkGroupType : $root.WAE2E.Message.ExtendedTextMessage.InviteLinkGroupType[message.inviteLinkGroupType] : message.inviteLinkGroupType;
                if (message.inviteLinkParentGroupSubjectV2 != null && message.hasOwnProperty("inviteLinkParentGroupSubjectV2"))
                    object.inviteLinkParentGroupSubjectV2 = message.inviteLinkParentGroupSubjectV2;
                if (message.inviteLinkParentGroupThumbnailV2 != null && message.hasOwnProperty("inviteLinkParentGroupThumbnailV2"))
                    object.inviteLinkParentGroupThumbnailV2 = options.bytes === String ? $util.base64.encode(message.inviteLinkParentGroupThumbnailV2, 0, message.inviteLinkParentGroupThumbnailV2.length) : options.bytes === Array ? Array.prototype.slice.call(message.inviteLinkParentGroupThumbnailV2) : message.inviteLinkParentGroupThumbnailV2;
                if (message.inviteLinkGroupTypeV2 != null && message.hasOwnProperty("inviteLinkGroupTypeV2"))
                    object.inviteLinkGroupTypeV2 = options.enums === String ? $root.WAE2E.Message.ExtendedTextMessage.InviteLinkGroupType[message.inviteLinkGroupTypeV2] === undefined ? message.inviteLinkGroupTypeV2 : $root.WAE2E.Message.ExtendedTextMessage.InviteLinkGroupType[message.inviteLinkGroupTypeV2] : message.inviteLinkGroupTypeV2;
                if (message.viewOnce != null && message.hasOwnProperty("viewOnce"))
                    object.viewOnce = message.viewOnce;
                if (message.videoHeight != null && message.hasOwnProperty("videoHeight"))
                    object.videoHeight = message.videoHeight;
                if (message.videoWidth != null && message.hasOwnProperty("videoWidth"))
                    object.videoWidth = message.videoWidth;
                return object;
            };

            /**
             * Converts this ExtendedTextMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ExtendedTextMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ExtendedTextMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.ExtendedTextMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ExtendedTextMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.ExtendedTextMessage";
            };

            /**
             * InviteLinkGroupType enum.
             * @name WAE2E.Message.ExtendedTextMessage.InviteLinkGroupType
             * @enum {number}
             * @property {number} DEFAULT=0 DEFAULT value
             * @property {number} PARENT=1 PARENT value
             * @property {number} SUB=2 SUB value
             * @property {number} DEFAULT_SUB=3 DEFAULT_SUB value
             */
            ExtendedTextMessage.InviteLinkGroupType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DEFAULT"] = 0;
                values[valuesById[1] = "PARENT"] = 1;
                values[valuesById[2] = "SUB"] = 2;
                values[valuesById[3] = "DEFAULT_SUB"] = 3;
                return values;
            })();

            /**
             * PreviewType enum.
             * @name WAE2E.Message.ExtendedTextMessage.PreviewType
             * @enum {number}
             * @property {number} NONE=0 NONE value
             * @property {number} VIDEO=1 VIDEO value
             * @property {number} PLACEHOLDER=4 PLACEHOLDER value
             * @property {number} IMAGE=5 IMAGE value
             * @property {number} PAYMENT_LINKS=6 PAYMENT_LINKS value
             */
            ExtendedTextMessage.PreviewType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NONE"] = 0;
                values[valuesById[1] = "VIDEO"] = 1;
                values[valuesById[4] = "PLACEHOLDER"] = 4;
                values[valuesById[5] = "IMAGE"] = 5;
                values[valuesById[6] = "PAYMENT_LINKS"] = 6;
                return values;
            })();

            /**
             * FontType enum.
             * @name WAE2E.Message.ExtendedTextMessage.FontType
             * @enum {number}
             * @property {number} SYSTEM=0 SYSTEM value
             * @property {number} SYSTEM_TEXT=1 SYSTEM_TEXT value
             * @property {number} FB_SCRIPT=2 FB_SCRIPT value
             * @property {number} SYSTEM_BOLD=6 SYSTEM_BOLD value
             * @property {number} MORNINGBREEZE_REGULAR=7 MORNINGBREEZE_REGULAR value
             * @property {number} CALISTOGA_REGULAR=8 CALISTOGA_REGULAR value
             * @property {number} EXO2_EXTRABOLD=9 EXO2_EXTRABOLD value
             * @property {number} COURIERPRIME_BOLD=10 COURIERPRIME_BOLD value
             */
            ExtendedTextMessage.FontType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "SYSTEM"] = 0;
                values[valuesById[1] = "SYSTEM_TEXT"] = 1;
                values[valuesById[2] = "FB_SCRIPT"] = 2;
                values[valuesById[6] = "SYSTEM_BOLD"] = 6;
                values[valuesById[7] = "MORNINGBREEZE_REGULAR"] = 7;
                values[valuesById[8] = "CALISTOGA_REGULAR"] = 8;
                values[valuesById[9] = "EXO2_EXTRABOLD"] = 9;
                values[valuesById[10] = "COURIERPRIME_BOLD"] = 10;
                return values;
            })();

            return ExtendedTextMessage;
        })();

        Message.InvoiceMessage = (function() {

            /**
             * Properties of an InvoiceMessage.
             * @memberof WAE2E.Message
             * @interface IInvoiceMessage
             * @property {string|null} [note] InvoiceMessage note
             * @property {string|null} [token] InvoiceMessage token
             * @property {WAE2E.Message.InvoiceMessage.AttachmentType|null} [attachmentType] InvoiceMessage attachmentType
             * @property {string|null} [attachmentMimetype] InvoiceMessage attachmentMimetype
             * @property {Uint8Array|null} [attachmentMediaKey] InvoiceMessage attachmentMediaKey
             * @property {number|Long|null} [attachmentMediaKeyTimestamp] InvoiceMessage attachmentMediaKeyTimestamp
             * @property {Uint8Array|null} [attachmentFileSHA256] InvoiceMessage attachmentFileSHA256
             * @property {Uint8Array|null} [attachmentFileEncSHA256] InvoiceMessage attachmentFileEncSHA256
             * @property {string|null} [attachmentDirectPath] InvoiceMessage attachmentDirectPath
             * @property {Uint8Array|null} [attachmentJPEGThumbnail] InvoiceMessage attachmentJPEGThumbnail
             */

            /**
             * Constructs a new InvoiceMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents an InvoiceMessage.
             * @implements IInvoiceMessage
             * @constructor
             * @param {WAE2E.Message.IInvoiceMessage=} [properties] Properties to set
             */
            function InvoiceMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * InvoiceMessage note.
             * @member {string} note
             * @memberof WAE2E.Message.InvoiceMessage
             * @instance
             */
            InvoiceMessage.prototype.note = "";

            /**
             * InvoiceMessage token.
             * @member {string} token
             * @memberof WAE2E.Message.InvoiceMessage
             * @instance
             */
            InvoiceMessage.prototype.token = "";

            /**
             * InvoiceMessage attachmentType.
             * @member {WAE2E.Message.InvoiceMessage.AttachmentType} attachmentType
             * @memberof WAE2E.Message.InvoiceMessage
             * @instance
             */
            InvoiceMessage.prototype.attachmentType = 0;

            /**
             * InvoiceMessage attachmentMimetype.
             * @member {string} attachmentMimetype
             * @memberof WAE2E.Message.InvoiceMessage
             * @instance
             */
            InvoiceMessage.prototype.attachmentMimetype = "";

            /**
             * InvoiceMessage attachmentMediaKey.
             * @member {Uint8Array} attachmentMediaKey
             * @memberof WAE2E.Message.InvoiceMessage
             * @instance
             */
            InvoiceMessage.prototype.attachmentMediaKey = $util.newBuffer([]);

            /**
             * InvoiceMessage attachmentMediaKeyTimestamp.
             * @member {number|Long} attachmentMediaKeyTimestamp
             * @memberof WAE2E.Message.InvoiceMessage
             * @instance
             */
            InvoiceMessage.prototype.attachmentMediaKeyTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * InvoiceMessage attachmentFileSHA256.
             * @member {Uint8Array} attachmentFileSHA256
             * @memberof WAE2E.Message.InvoiceMessage
             * @instance
             */
            InvoiceMessage.prototype.attachmentFileSHA256 = $util.newBuffer([]);

            /**
             * InvoiceMessage attachmentFileEncSHA256.
             * @member {Uint8Array} attachmentFileEncSHA256
             * @memberof WAE2E.Message.InvoiceMessage
             * @instance
             */
            InvoiceMessage.prototype.attachmentFileEncSHA256 = $util.newBuffer([]);

            /**
             * InvoiceMessage attachmentDirectPath.
             * @member {string} attachmentDirectPath
             * @memberof WAE2E.Message.InvoiceMessage
             * @instance
             */
            InvoiceMessage.prototype.attachmentDirectPath = "";

            /**
             * InvoiceMessage attachmentJPEGThumbnail.
             * @member {Uint8Array} attachmentJPEGThumbnail
             * @memberof WAE2E.Message.InvoiceMessage
             * @instance
             */
            InvoiceMessage.prototype.attachmentJPEGThumbnail = $util.newBuffer([]);

            /**
             * Creates a new InvoiceMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.InvoiceMessage
             * @static
             * @param {WAE2E.Message.IInvoiceMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.InvoiceMessage} InvoiceMessage instance
             */
            InvoiceMessage.create = function create(properties) {
                return new InvoiceMessage(properties);
            };

            /**
             * Encodes the specified InvoiceMessage message. Does not implicitly {@link WAE2E.Message.InvoiceMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.InvoiceMessage
             * @static
             * @param {WAE2E.Message.IInvoiceMessage} message InvoiceMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InvoiceMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.note != null && Object.hasOwnProperty.call(message, "note"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.note);
                if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);
                if (message.attachmentType != null && Object.hasOwnProperty.call(message, "attachmentType"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.attachmentType);
                if (message.attachmentMimetype != null && Object.hasOwnProperty.call(message, "attachmentMimetype"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.attachmentMimetype);
                if (message.attachmentMediaKey != null && Object.hasOwnProperty.call(message, "attachmentMediaKey"))
                    writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.attachmentMediaKey);
                if (message.attachmentMediaKeyTimestamp != null && Object.hasOwnProperty.call(message, "attachmentMediaKeyTimestamp"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.attachmentMediaKeyTimestamp);
                if (message.attachmentFileSHA256 != null && Object.hasOwnProperty.call(message, "attachmentFileSHA256"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.attachmentFileSHA256);
                if (message.attachmentFileEncSHA256 != null && Object.hasOwnProperty.call(message, "attachmentFileEncSHA256"))
                    writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.attachmentFileEncSHA256);
                if (message.attachmentDirectPath != null && Object.hasOwnProperty.call(message, "attachmentDirectPath"))
                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.attachmentDirectPath);
                if (message.attachmentJPEGThumbnail != null && Object.hasOwnProperty.call(message, "attachmentJPEGThumbnail"))
                    writer.uint32(/* id 10, wireType 2 =*/82).bytes(message.attachmentJPEGThumbnail);
                return writer;
            };

            /**
             * Encodes the specified InvoiceMessage message, length delimited. Does not implicitly {@link WAE2E.Message.InvoiceMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.InvoiceMessage
             * @static
             * @param {WAE2E.Message.IInvoiceMessage} message InvoiceMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InvoiceMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an InvoiceMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.InvoiceMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.InvoiceMessage} InvoiceMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InvoiceMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.InvoiceMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.note = reader.string();
                            break;
                        }
                    case 2: {
                            message.token = reader.string();
                            break;
                        }
                    case 3: {
                            message.attachmentType = reader.int32();
                            break;
                        }
                    case 4: {
                            message.attachmentMimetype = reader.string();
                            break;
                        }
                    case 5: {
                            message.attachmentMediaKey = reader.bytes();
                            break;
                        }
                    case 6: {
                            message.attachmentMediaKeyTimestamp = reader.int64();
                            break;
                        }
                    case 7: {
                            message.attachmentFileSHA256 = reader.bytes();
                            break;
                        }
                    case 8: {
                            message.attachmentFileEncSHA256 = reader.bytes();
                            break;
                        }
                    case 9: {
                            message.attachmentDirectPath = reader.string();
                            break;
                        }
                    case 10: {
                            message.attachmentJPEGThumbnail = reader.bytes();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an InvoiceMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.InvoiceMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.InvoiceMessage} InvoiceMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InvoiceMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an InvoiceMessage message.
             * @function verify
             * @memberof WAE2E.Message.InvoiceMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            InvoiceMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.note != null && message.hasOwnProperty("note"))
                    if (!$util.isString(message.note))
                        return "note: string expected";
                if (message.token != null && message.hasOwnProperty("token"))
                    if (!$util.isString(message.token))
                        return "token: string expected";
                if (message.attachmentType != null && message.hasOwnProperty("attachmentType"))
                    switch (message.attachmentType) {
                    default:
                        return "attachmentType: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.attachmentMimetype != null && message.hasOwnProperty("attachmentMimetype"))
                    if (!$util.isString(message.attachmentMimetype))
                        return "attachmentMimetype: string expected";
                if (message.attachmentMediaKey != null && message.hasOwnProperty("attachmentMediaKey"))
                    if (!(message.attachmentMediaKey && typeof message.attachmentMediaKey.length === "number" || $util.isString(message.attachmentMediaKey)))
                        return "attachmentMediaKey: buffer expected";
                if (message.attachmentMediaKeyTimestamp != null && message.hasOwnProperty("attachmentMediaKeyTimestamp"))
                    if (!$util.isInteger(message.attachmentMediaKeyTimestamp) && !(message.attachmentMediaKeyTimestamp && $util.isInteger(message.attachmentMediaKeyTimestamp.low) && $util.isInteger(message.attachmentMediaKeyTimestamp.high)))
                        return "attachmentMediaKeyTimestamp: integer|Long expected";
                if (message.attachmentFileSHA256 != null && message.hasOwnProperty("attachmentFileSHA256"))
                    if (!(message.attachmentFileSHA256 && typeof message.attachmentFileSHA256.length === "number" || $util.isString(message.attachmentFileSHA256)))
                        return "attachmentFileSHA256: buffer expected";
                if (message.attachmentFileEncSHA256 != null && message.hasOwnProperty("attachmentFileEncSHA256"))
                    if (!(message.attachmentFileEncSHA256 && typeof message.attachmentFileEncSHA256.length === "number" || $util.isString(message.attachmentFileEncSHA256)))
                        return "attachmentFileEncSHA256: buffer expected";
                if (message.attachmentDirectPath != null && message.hasOwnProperty("attachmentDirectPath"))
                    if (!$util.isString(message.attachmentDirectPath))
                        return "attachmentDirectPath: string expected";
                if (message.attachmentJPEGThumbnail != null && message.hasOwnProperty("attachmentJPEGThumbnail"))
                    if (!(message.attachmentJPEGThumbnail && typeof message.attachmentJPEGThumbnail.length === "number" || $util.isString(message.attachmentJPEGThumbnail)))
                        return "attachmentJPEGThumbnail: buffer expected";
                return null;
            };

            /**
             * Creates an InvoiceMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.InvoiceMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.InvoiceMessage} InvoiceMessage
             */
            InvoiceMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.InvoiceMessage)
                    return object;
                var message = new $root.WAE2E.Message.InvoiceMessage();
                if (object.note != null)
                    message.note = String(object.note);
                if (object.token != null)
                    message.token = String(object.token);
                switch (object.attachmentType) {
                default:
                    if (typeof object.attachmentType === "number") {
                        message.attachmentType = object.attachmentType;
                        break;
                    }
                    break;
                case "IMAGE":
                case 0:
                    message.attachmentType = 0;
                    break;
                case "PDF":
                case 1:
                    message.attachmentType = 1;
                    break;
                }
                if (object.attachmentMimetype != null)
                    message.attachmentMimetype = String(object.attachmentMimetype);
                if (object.attachmentMediaKey != null)
                    if (typeof object.attachmentMediaKey === "string")
                        $util.base64.decode(object.attachmentMediaKey, message.attachmentMediaKey = $util.newBuffer($util.base64.length(object.attachmentMediaKey)), 0);
                    else if (object.attachmentMediaKey.length >= 0)
                        message.attachmentMediaKey = object.attachmentMediaKey;
                if (object.attachmentMediaKeyTimestamp != null)
                    if ($util.Long)
                        (message.attachmentMediaKeyTimestamp = $util.Long.fromValue(object.attachmentMediaKeyTimestamp)).unsigned = false;
                    else if (typeof object.attachmentMediaKeyTimestamp === "string")
                        message.attachmentMediaKeyTimestamp = parseInt(object.attachmentMediaKeyTimestamp, 10);
                    else if (typeof object.attachmentMediaKeyTimestamp === "number")
                        message.attachmentMediaKeyTimestamp = object.attachmentMediaKeyTimestamp;
                    else if (typeof object.attachmentMediaKeyTimestamp === "object")
                        message.attachmentMediaKeyTimestamp = new $util.LongBits(object.attachmentMediaKeyTimestamp.low >>> 0, object.attachmentMediaKeyTimestamp.high >>> 0).toNumber();
                if (object.attachmentFileSHA256 != null)
                    if (typeof object.attachmentFileSHA256 === "string")
                        $util.base64.decode(object.attachmentFileSHA256, message.attachmentFileSHA256 = $util.newBuffer($util.base64.length(object.attachmentFileSHA256)), 0);
                    else if (object.attachmentFileSHA256.length >= 0)
                        message.attachmentFileSHA256 = object.attachmentFileSHA256;
                if (object.attachmentFileEncSHA256 != null)
                    if (typeof object.attachmentFileEncSHA256 === "string")
                        $util.base64.decode(object.attachmentFileEncSHA256, message.attachmentFileEncSHA256 = $util.newBuffer($util.base64.length(object.attachmentFileEncSHA256)), 0);
                    else if (object.attachmentFileEncSHA256.length >= 0)
                        message.attachmentFileEncSHA256 = object.attachmentFileEncSHA256;
                if (object.attachmentDirectPath != null)
                    message.attachmentDirectPath = String(object.attachmentDirectPath);
                if (object.attachmentJPEGThumbnail != null)
                    if (typeof object.attachmentJPEGThumbnail === "string")
                        $util.base64.decode(object.attachmentJPEGThumbnail, message.attachmentJPEGThumbnail = $util.newBuffer($util.base64.length(object.attachmentJPEGThumbnail)), 0);
                    else if (object.attachmentJPEGThumbnail.length >= 0)
                        message.attachmentJPEGThumbnail = object.attachmentJPEGThumbnail;
                return message;
            };

            /**
             * Creates a plain object from an InvoiceMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.InvoiceMessage
             * @static
             * @param {WAE2E.Message.InvoiceMessage} message InvoiceMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            InvoiceMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.note = "";
                    object.token = "";
                    object.attachmentType = options.enums === String ? "IMAGE" : 0;
                    object.attachmentMimetype = "";
                    if (options.bytes === String)
                        object.attachmentMediaKey = "";
                    else {
                        object.attachmentMediaKey = [];
                        if (options.bytes !== Array)
                            object.attachmentMediaKey = $util.newBuffer(object.attachmentMediaKey);
                    }
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.attachmentMediaKeyTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.attachmentMediaKeyTimestamp = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.attachmentFileSHA256 = "";
                    else {
                        object.attachmentFileSHA256 = [];
                        if (options.bytes !== Array)
                            object.attachmentFileSHA256 = $util.newBuffer(object.attachmentFileSHA256);
                    }
                    if (options.bytes === String)
                        object.attachmentFileEncSHA256 = "";
                    else {
                        object.attachmentFileEncSHA256 = [];
                        if (options.bytes !== Array)
                            object.attachmentFileEncSHA256 = $util.newBuffer(object.attachmentFileEncSHA256);
                    }
                    object.attachmentDirectPath = "";
                    if (options.bytes === String)
                        object.attachmentJPEGThumbnail = "";
                    else {
                        object.attachmentJPEGThumbnail = [];
                        if (options.bytes !== Array)
                            object.attachmentJPEGThumbnail = $util.newBuffer(object.attachmentJPEGThumbnail);
                    }
                }
                if (message.note != null && message.hasOwnProperty("note"))
                    object.note = message.note;
                if (message.token != null && message.hasOwnProperty("token"))
                    object.token = message.token;
                if (message.attachmentType != null && message.hasOwnProperty("attachmentType"))
                    object.attachmentType = options.enums === String ? $root.WAE2E.Message.InvoiceMessage.AttachmentType[message.attachmentType] === undefined ? message.attachmentType : $root.WAE2E.Message.InvoiceMessage.AttachmentType[message.attachmentType] : message.attachmentType;
                if (message.attachmentMimetype != null && message.hasOwnProperty("attachmentMimetype"))
                    object.attachmentMimetype = message.attachmentMimetype;
                if (message.attachmentMediaKey != null && message.hasOwnProperty("attachmentMediaKey"))
                    object.attachmentMediaKey = options.bytes === String ? $util.base64.encode(message.attachmentMediaKey, 0, message.attachmentMediaKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.attachmentMediaKey) : message.attachmentMediaKey;
                if (message.attachmentMediaKeyTimestamp != null && message.hasOwnProperty("attachmentMediaKeyTimestamp"))
                    if (typeof message.attachmentMediaKeyTimestamp === "number")
                        object.attachmentMediaKeyTimestamp = options.longs === String ? String(message.attachmentMediaKeyTimestamp) : message.attachmentMediaKeyTimestamp;
                    else
                        object.attachmentMediaKeyTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.attachmentMediaKeyTimestamp) : options.longs === Number ? new $util.LongBits(message.attachmentMediaKeyTimestamp.low >>> 0, message.attachmentMediaKeyTimestamp.high >>> 0).toNumber() : message.attachmentMediaKeyTimestamp;
                if (message.attachmentFileSHA256 != null && message.hasOwnProperty("attachmentFileSHA256"))
                    object.attachmentFileSHA256 = options.bytes === String ? $util.base64.encode(message.attachmentFileSHA256, 0, message.attachmentFileSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.attachmentFileSHA256) : message.attachmentFileSHA256;
                if (message.attachmentFileEncSHA256 != null && message.hasOwnProperty("attachmentFileEncSHA256"))
                    object.attachmentFileEncSHA256 = options.bytes === String ? $util.base64.encode(message.attachmentFileEncSHA256, 0, message.attachmentFileEncSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.attachmentFileEncSHA256) : message.attachmentFileEncSHA256;
                if (message.attachmentDirectPath != null && message.hasOwnProperty("attachmentDirectPath"))
                    object.attachmentDirectPath = message.attachmentDirectPath;
                if (message.attachmentJPEGThumbnail != null && message.hasOwnProperty("attachmentJPEGThumbnail"))
                    object.attachmentJPEGThumbnail = options.bytes === String ? $util.base64.encode(message.attachmentJPEGThumbnail, 0, message.attachmentJPEGThumbnail.length) : options.bytes === Array ? Array.prototype.slice.call(message.attachmentJPEGThumbnail) : message.attachmentJPEGThumbnail;
                return object;
            };

            /**
             * Converts this InvoiceMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.InvoiceMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            InvoiceMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for InvoiceMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.InvoiceMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            InvoiceMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.InvoiceMessage";
            };

            /**
             * AttachmentType enum.
             * @name WAE2E.Message.InvoiceMessage.AttachmentType
             * @enum {number}
             * @property {number} IMAGE=0 IMAGE value
             * @property {number} PDF=1 PDF value
             */
            InvoiceMessage.AttachmentType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "IMAGE"] = 0;
                values[valuesById[1] = "PDF"] = 1;
                return values;
            })();

            return InvoiceMessage;
        })();

        Message.ImageMessage = (function() {

            /**
             * Properties of an ImageMessage.
             * @memberof WAE2E.Message
             * @interface IImageMessage
             * @property {string|null} [URL] ImageMessage URL
             * @property {string|null} [mimetype] ImageMessage mimetype
             * @property {string|null} [caption] ImageMessage caption
             * @property {Uint8Array|null} [fileSHA256] ImageMessage fileSHA256
             * @property {number|Long|null} [fileLength] ImageMessage fileLength
             * @property {number|null} [height] ImageMessage height
             * @property {number|null} [width] ImageMessage width
             * @property {Uint8Array|null} [mediaKey] ImageMessage mediaKey
             * @property {Uint8Array|null} [fileEncSHA256] ImageMessage fileEncSHA256
             * @property {Array.<WAE2E.IInteractiveAnnotation>|null} [interactiveAnnotations] ImageMessage interactiveAnnotations
             * @property {string|null} [directPath] ImageMessage directPath
             * @property {number|Long|null} [mediaKeyTimestamp] ImageMessage mediaKeyTimestamp
             * @property {Uint8Array|null} [JPEGThumbnail] ImageMessage JPEGThumbnail
             * @property {WAE2E.IContextInfo|null} [contextInfo] ImageMessage contextInfo
             * @property {Uint8Array|null} [firstScanSidecar] ImageMessage firstScanSidecar
             * @property {number|null} [firstScanLength] ImageMessage firstScanLength
             * @property {number|null} [experimentGroupID] ImageMessage experimentGroupID
             * @property {Uint8Array|null} [scansSidecar] ImageMessage scansSidecar
             * @property {Array.<number>|null} [scanLengths] ImageMessage scanLengths
             * @property {Uint8Array|null} [midQualityFileSHA256] ImageMessage midQualityFileSHA256
             * @property {Uint8Array|null} [midQualityFileEncSHA256] ImageMessage midQualityFileEncSHA256
             * @property {boolean|null} [viewOnce] ImageMessage viewOnce
             * @property {string|null} [thumbnailDirectPath] ImageMessage thumbnailDirectPath
             * @property {Uint8Array|null} [thumbnailSHA256] ImageMessage thumbnailSHA256
             * @property {Uint8Array|null} [thumbnailEncSHA256] ImageMessage thumbnailEncSHA256
             * @property {string|null} [staticURL] ImageMessage staticURL
             * @property {Array.<WAE2E.IInteractiveAnnotation>|null} [annotations] ImageMessage annotations
             * @property {WAE2E.Message.ImageMessage.ImageSourceType|null} [imageSourceType] ImageMessage imageSourceType
             * @property {string|null} [accessibilityLabel] ImageMessage accessibilityLabel
             */

            /**
             * Constructs a new ImageMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents an ImageMessage.
             * @implements IImageMessage
             * @constructor
             * @param {WAE2E.Message.IImageMessage=} [properties] Properties to set
             */
            function ImageMessage(properties) {
                this.interactiveAnnotations = [];
                this.scanLengths = [];
                this.annotations = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ImageMessage URL.
             * @member {string} URL
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.URL = "";

            /**
             * ImageMessage mimetype.
             * @member {string} mimetype
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.mimetype = "";

            /**
             * ImageMessage caption.
             * @member {string} caption
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.caption = "";

            /**
             * ImageMessage fileSHA256.
             * @member {Uint8Array} fileSHA256
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.fileSHA256 = $util.newBuffer([]);

            /**
             * ImageMessage fileLength.
             * @member {number|Long} fileLength
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.fileLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * ImageMessage height.
             * @member {number} height
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.height = 0;

            /**
             * ImageMessage width.
             * @member {number} width
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.width = 0;

            /**
             * ImageMessage mediaKey.
             * @member {Uint8Array} mediaKey
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.mediaKey = $util.newBuffer([]);

            /**
             * ImageMessage fileEncSHA256.
             * @member {Uint8Array} fileEncSHA256
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.fileEncSHA256 = $util.newBuffer([]);

            /**
             * ImageMessage interactiveAnnotations.
             * @member {Array.<WAE2E.IInteractiveAnnotation>} interactiveAnnotations
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.interactiveAnnotations = $util.emptyArray;

            /**
             * ImageMessage directPath.
             * @member {string} directPath
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.directPath = "";

            /**
             * ImageMessage mediaKeyTimestamp.
             * @member {number|Long} mediaKeyTimestamp
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.mediaKeyTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ImageMessage JPEGThumbnail.
             * @member {Uint8Array} JPEGThumbnail
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.JPEGThumbnail = $util.newBuffer([]);

            /**
             * ImageMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.contextInfo = null;

            /**
             * ImageMessage firstScanSidecar.
             * @member {Uint8Array} firstScanSidecar
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.firstScanSidecar = $util.newBuffer([]);

            /**
             * ImageMessage firstScanLength.
             * @member {number} firstScanLength
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.firstScanLength = 0;

            /**
             * ImageMessage experimentGroupID.
             * @member {number} experimentGroupID
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.experimentGroupID = 0;

            /**
             * ImageMessage scansSidecar.
             * @member {Uint8Array} scansSidecar
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.scansSidecar = $util.newBuffer([]);

            /**
             * ImageMessage scanLengths.
             * @member {Array.<number>} scanLengths
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.scanLengths = $util.emptyArray;

            /**
             * ImageMessage midQualityFileSHA256.
             * @member {Uint8Array} midQualityFileSHA256
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.midQualityFileSHA256 = $util.newBuffer([]);

            /**
             * ImageMessage midQualityFileEncSHA256.
             * @member {Uint8Array} midQualityFileEncSHA256
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.midQualityFileEncSHA256 = $util.newBuffer([]);

            /**
             * ImageMessage viewOnce.
             * @member {boolean} viewOnce
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.viewOnce = false;

            /**
             * ImageMessage thumbnailDirectPath.
             * @member {string} thumbnailDirectPath
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.thumbnailDirectPath = "";

            /**
             * ImageMessage thumbnailSHA256.
             * @member {Uint8Array} thumbnailSHA256
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.thumbnailSHA256 = $util.newBuffer([]);

            /**
             * ImageMessage thumbnailEncSHA256.
             * @member {Uint8Array} thumbnailEncSHA256
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.thumbnailEncSHA256 = $util.newBuffer([]);

            /**
             * ImageMessage staticURL.
             * @member {string} staticURL
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.staticURL = "";

            /**
             * ImageMessage annotations.
             * @member {Array.<WAE2E.IInteractiveAnnotation>} annotations
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.annotations = $util.emptyArray;

            /**
             * ImageMessage imageSourceType.
             * @member {WAE2E.Message.ImageMessage.ImageSourceType} imageSourceType
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.imageSourceType = 0;

            /**
             * ImageMessage accessibilityLabel.
             * @member {string} accessibilityLabel
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             */
            ImageMessage.prototype.accessibilityLabel = "";

            /**
             * Creates a new ImageMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.ImageMessage
             * @static
             * @param {WAE2E.Message.IImageMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.ImageMessage} ImageMessage instance
             */
            ImageMessage.create = function create(properties) {
                return new ImageMessage(properties);
            };

            /**
             * Encodes the specified ImageMessage message. Does not implicitly {@link WAE2E.Message.ImageMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.ImageMessage
             * @static
             * @param {WAE2E.Message.IImageMessage} message ImageMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ImageMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.URL != null && Object.hasOwnProperty.call(message, "URL"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.URL);
                if (message.mimetype != null && Object.hasOwnProperty.call(message, "mimetype"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.mimetype);
                if (message.caption != null && Object.hasOwnProperty.call(message, "caption"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.caption);
                if (message.fileSHA256 != null && Object.hasOwnProperty.call(message, "fileSHA256"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.fileSHA256);
                if (message.fileLength != null && Object.hasOwnProperty.call(message, "fileLength"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.fileLength);
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.height);
                if (message.width != null && Object.hasOwnProperty.call(message, "width"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.width);
                if (message.mediaKey != null && Object.hasOwnProperty.call(message, "mediaKey"))
                    writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.mediaKey);
                if (message.fileEncSHA256 != null && Object.hasOwnProperty.call(message, "fileEncSHA256"))
                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.fileEncSHA256);
                if (message.interactiveAnnotations != null && message.interactiveAnnotations.length)
                    for (var i = 0; i < message.interactiveAnnotations.length; ++i)
                        $root.WAE2E.InteractiveAnnotation.encode(message.interactiveAnnotations[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                if (message.directPath != null && Object.hasOwnProperty.call(message, "directPath"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.directPath);
                if (message.mediaKeyTimestamp != null && Object.hasOwnProperty.call(message, "mediaKeyTimestamp"))
                    writer.uint32(/* id 12, wireType 0 =*/96).int64(message.mediaKeyTimestamp);
                if (message.JPEGThumbnail != null && Object.hasOwnProperty.call(message, "JPEGThumbnail"))
                    writer.uint32(/* id 16, wireType 2 =*/130).bytes(message.JPEGThumbnail);
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                if (message.firstScanSidecar != null && Object.hasOwnProperty.call(message, "firstScanSidecar"))
                    writer.uint32(/* id 18, wireType 2 =*/146).bytes(message.firstScanSidecar);
                if (message.firstScanLength != null && Object.hasOwnProperty.call(message, "firstScanLength"))
                    writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.firstScanLength);
                if (message.experimentGroupID != null && Object.hasOwnProperty.call(message, "experimentGroupID"))
                    writer.uint32(/* id 20, wireType 0 =*/160).uint32(message.experimentGroupID);
                if (message.scansSidecar != null && Object.hasOwnProperty.call(message, "scansSidecar"))
                    writer.uint32(/* id 21, wireType 2 =*/170).bytes(message.scansSidecar);
                if (message.scanLengths != null && message.scanLengths.length)
                    for (var i = 0; i < message.scanLengths.length; ++i)
                        writer.uint32(/* id 22, wireType 0 =*/176).uint32(message.scanLengths[i]);
                if (message.midQualityFileSHA256 != null && Object.hasOwnProperty.call(message, "midQualityFileSHA256"))
                    writer.uint32(/* id 23, wireType 2 =*/186).bytes(message.midQualityFileSHA256);
                if (message.midQualityFileEncSHA256 != null && Object.hasOwnProperty.call(message, "midQualityFileEncSHA256"))
                    writer.uint32(/* id 24, wireType 2 =*/194).bytes(message.midQualityFileEncSHA256);
                if (message.viewOnce != null && Object.hasOwnProperty.call(message, "viewOnce"))
                    writer.uint32(/* id 25, wireType 0 =*/200).bool(message.viewOnce);
                if (message.thumbnailDirectPath != null && Object.hasOwnProperty.call(message, "thumbnailDirectPath"))
                    writer.uint32(/* id 26, wireType 2 =*/210).string(message.thumbnailDirectPath);
                if (message.thumbnailSHA256 != null && Object.hasOwnProperty.call(message, "thumbnailSHA256"))
                    writer.uint32(/* id 27, wireType 2 =*/218).bytes(message.thumbnailSHA256);
                if (message.thumbnailEncSHA256 != null && Object.hasOwnProperty.call(message, "thumbnailEncSHA256"))
                    writer.uint32(/* id 28, wireType 2 =*/226).bytes(message.thumbnailEncSHA256);
                if (message.staticURL != null && Object.hasOwnProperty.call(message, "staticURL"))
                    writer.uint32(/* id 29, wireType 2 =*/234).string(message.staticURL);
                if (message.annotations != null && message.annotations.length)
                    for (var i = 0; i < message.annotations.length; ++i)
                        $root.WAE2E.InteractiveAnnotation.encode(message.annotations[i], writer.uint32(/* id 30, wireType 2 =*/242).fork()).ldelim();
                if (message.imageSourceType != null && Object.hasOwnProperty.call(message, "imageSourceType"))
                    writer.uint32(/* id 31, wireType 0 =*/248).int32(message.imageSourceType);
                if (message.accessibilityLabel != null && Object.hasOwnProperty.call(message, "accessibilityLabel"))
                    writer.uint32(/* id 32, wireType 2 =*/258).string(message.accessibilityLabel);
                return writer;
            };

            /**
             * Encodes the specified ImageMessage message, length delimited. Does not implicitly {@link WAE2E.Message.ImageMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.ImageMessage
             * @static
             * @param {WAE2E.Message.IImageMessage} message ImageMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ImageMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ImageMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.ImageMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.ImageMessage} ImageMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ImageMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ImageMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.URL = reader.string();
                            break;
                        }
                    case 2: {
                            message.mimetype = reader.string();
                            break;
                        }
                    case 3: {
                            message.caption = reader.string();
                            break;
                        }
                    case 4: {
                            message.fileSHA256 = reader.bytes();
                            break;
                        }
                    case 5: {
                            message.fileLength = reader.uint64();
                            break;
                        }
                    case 6: {
                            message.height = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.width = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.mediaKey = reader.bytes();
                            break;
                        }
                    case 9: {
                            message.fileEncSHA256 = reader.bytes();
                            break;
                        }
                    case 10: {
                            if (!(message.interactiveAnnotations && message.interactiveAnnotations.length))
                                message.interactiveAnnotations = [];
                            message.interactiveAnnotations.push($root.WAE2E.InteractiveAnnotation.decode(reader, reader.uint32()));
                            break;
                        }
                    case 11: {
                            message.directPath = reader.string();
                            break;
                        }
                    case 12: {
                            message.mediaKeyTimestamp = reader.int64();
                            break;
                        }
                    case 16: {
                            message.JPEGThumbnail = reader.bytes();
                            break;
                        }
                    case 17: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    case 18: {
                            message.firstScanSidecar = reader.bytes();
                            break;
                        }
                    case 19: {
                            message.firstScanLength = reader.uint32();
                            break;
                        }
                    case 20: {
                            message.experimentGroupID = reader.uint32();
                            break;
                        }
                    case 21: {
                            message.scansSidecar = reader.bytes();
                            break;
                        }
                    case 22: {
                            if (!(message.scanLengths && message.scanLengths.length))
                                message.scanLengths = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.scanLengths.push(reader.uint32());
                            } else
                                message.scanLengths.push(reader.uint32());
                            break;
                        }
                    case 23: {
                            message.midQualityFileSHA256 = reader.bytes();
                            break;
                        }
                    case 24: {
                            message.midQualityFileEncSHA256 = reader.bytes();
                            break;
                        }
                    case 25: {
                            message.viewOnce = reader.bool();
                            break;
                        }
                    case 26: {
                            message.thumbnailDirectPath = reader.string();
                            break;
                        }
                    case 27: {
                            message.thumbnailSHA256 = reader.bytes();
                            break;
                        }
                    case 28: {
                            message.thumbnailEncSHA256 = reader.bytes();
                            break;
                        }
                    case 29: {
                            message.staticURL = reader.string();
                            break;
                        }
                    case 30: {
                            if (!(message.annotations && message.annotations.length))
                                message.annotations = [];
                            message.annotations.push($root.WAE2E.InteractiveAnnotation.decode(reader, reader.uint32()));
                            break;
                        }
                    case 31: {
                            message.imageSourceType = reader.int32();
                            break;
                        }
                    case 32: {
                            message.accessibilityLabel = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ImageMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.ImageMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.ImageMessage} ImageMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ImageMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ImageMessage message.
             * @function verify
             * @memberof WAE2E.Message.ImageMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ImageMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.URL != null && message.hasOwnProperty("URL"))
                    if (!$util.isString(message.URL))
                        return "URL: string expected";
                if (message.mimetype != null && message.hasOwnProperty("mimetype"))
                    if (!$util.isString(message.mimetype))
                        return "mimetype: string expected";
                if (message.caption != null && message.hasOwnProperty("caption"))
                    if (!$util.isString(message.caption))
                        return "caption: string expected";
                if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                    if (!(message.fileSHA256 && typeof message.fileSHA256.length === "number" || $util.isString(message.fileSHA256)))
                        return "fileSHA256: buffer expected";
                if (message.fileLength != null && message.hasOwnProperty("fileLength"))
                    if (!$util.isInteger(message.fileLength) && !(message.fileLength && $util.isInteger(message.fileLength.low) && $util.isInteger(message.fileLength.high)))
                        return "fileLength: integer|Long expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height))
                        return "height: integer expected";
                if (message.width != null && message.hasOwnProperty("width"))
                    if (!$util.isInteger(message.width))
                        return "width: integer expected";
                if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                    if (!(message.mediaKey && typeof message.mediaKey.length === "number" || $util.isString(message.mediaKey)))
                        return "mediaKey: buffer expected";
                if (message.fileEncSHA256 != null && message.hasOwnProperty("fileEncSHA256"))
                    if (!(message.fileEncSHA256 && typeof message.fileEncSHA256.length === "number" || $util.isString(message.fileEncSHA256)))
                        return "fileEncSHA256: buffer expected";
                if (message.interactiveAnnotations != null && message.hasOwnProperty("interactiveAnnotations")) {
                    if (!Array.isArray(message.interactiveAnnotations))
                        return "interactiveAnnotations: array expected";
                    for (var i = 0; i < message.interactiveAnnotations.length; ++i) {
                        var error = $root.WAE2E.InteractiveAnnotation.verify(message.interactiveAnnotations[i]);
                        if (error)
                            return "interactiveAnnotations." + error;
                    }
                }
                if (message.directPath != null && message.hasOwnProperty("directPath"))
                    if (!$util.isString(message.directPath))
                        return "directPath: string expected";
                if (message.mediaKeyTimestamp != null && message.hasOwnProperty("mediaKeyTimestamp"))
                    if (!$util.isInteger(message.mediaKeyTimestamp) && !(message.mediaKeyTimestamp && $util.isInteger(message.mediaKeyTimestamp.low) && $util.isInteger(message.mediaKeyTimestamp.high)))
                        return "mediaKeyTimestamp: integer|Long expected";
                if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail"))
                    if (!(message.JPEGThumbnail && typeof message.JPEGThumbnail.length === "number" || $util.isString(message.JPEGThumbnail)))
                        return "JPEGThumbnail: buffer expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                if (message.firstScanSidecar != null && message.hasOwnProperty("firstScanSidecar"))
                    if (!(message.firstScanSidecar && typeof message.firstScanSidecar.length === "number" || $util.isString(message.firstScanSidecar)))
                        return "firstScanSidecar: buffer expected";
                if (message.firstScanLength != null && message.hasOwnProperty("firstScanLength"))
                    if (!$util.isInteger(message.firstScanLength))
                        return "firstScanLength: integer expected";
                if (message.experimentGroupID != null && message.hasOwnProperty("experimentGroupID"))
                    if (!$util.isInteger(message.experimentGroupID))
                        return "experimentGroupID: integer expected";
                if (message.scansSidecar != null && message.hasOwnProperty("scansSidecar"))
                    if (!(message.scansSidecar && typeof message.scansSidecar.length === "number" || $util.isString(message.scansSidecar)))
                        return "scansSidecar: buffer expected";
                if (message.scanLengths != null && message.hasOwnProperty("scanLengths")) {
                    if (!Array.isArray(message.scanLengths))
                        return "scanLengths: array expected";
                    for (var i = 0; i < message.scanLengths.length; ++i)
                        if (!$util.isInteger(message.scanLengths[i]))
                            return "scanLengths: integer[] expected";
                }
                if (message.midQualityFileSHA256 != null && message.hasOwnProperty("midQualityFileSHA256"))
                    if (!(message.midQualityFileSHA256 && typeof message.midQualityFileSHA256.length === "number" || $util.isString(message.midQualityFileSHA256)))
                        return "midQualityFileSHA256: buffer expected";
                if (message.midQualityFileEncSHA256 != null && message.hasOwnProperty("midQualityFileEncSHA256"))
                    if (!(message.midQualityFileEncSHA256 && typeof message.midQualityFileEncSHA256.length === "number" || $util.isString(message.midQualityFileEncSHA256)))
                        return "midQualityFileEncSHA256: buffer expected";
                if (message.viewOnce != null && message.hasOwnProperty("viewOnce"))
                    if (typeof message.viewOnce !== "boolean")
                        return "viewOnce: boolean expected";
                if (message.thumbnailDirectPath != null && message.hasOwnProperty("thumbnailDirectPath"))
                    if (!$util.isString(message.thumbnailDirectPath))
                        return "thumbnailDirectPath: string expected";
                if (message.thumbnailSHA256 != null && message.hasOwnProperty("thumbnailSHA256"))
                    if (!(message.thumbnailSHA256 && typeof message.thumbnailSHA256.length === "number" || $util.isString(message.thumbnailSHA256)))
                        return "thumbnailSHA256: buffer expected";
                if (message.thumbnailEncSHA256 != null && message.hasOwnProperty("thumbnailEncSHA256"))
                    if (!(message.thumbnailEncSHA256 && typeof message.thumbnailEncSHA256.length === "number" || $util.isString(message.thumbnailEncSHA256)))
                        return "thumbnailEncSHA256: buffer expected";
                if (message.staticURL != null && message.hasOwnProperty("staticURL"))
                    if (!$util.isString(message.staticURL))
                        return "staticURL: string expected";
                if (message.annotations != null && message.hasOwnProperty("annotations")) {
                    if (!Array.isArray(message.annotations))
                        return "annotations: array expected";
                    for (var i = 0; i < message.annotations.length; ++i) {
                        var error = $root.WAE2E.InteractiveAnnotation.verify(message.annotations[i]);
                        if (error)
                            return "annotations." + error;
                    }
                }
                if (message.imageSourceType != null && message.hasOwnProperty("imageSourceType"))
                    switch (message.imageSourceType) {
                    default:
                        return "imageSourceType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.accessibilityLabel != null && message.hasOwnProperty("accessibilityLabel"))
                    if (!$util.isString(message.accessibilityLabel))
                        return "accessibilityLabel: string expected";
                return null;
            };

            /**
             * Creates an ImageMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.ImageMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.ImageMessage} ImageMessage
             */
            ImageMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.ImageMessage)
                    return object;
                var message = new $root.WAE2E.Message.ImageMessage();
                if (object.URL != null)
                    message.URL = String(object.URL);
                if (object.mimetype != null)
                    message.mimetype = String(object.mimetype);
                if (object.caption != null)
                    message.caption = String(object.caption);
                if (object.fileSHA256 != null)
                    if (typeof object.fileSHA256 === "string")
                        $util.base64.decode(object.fileSHA256, message.fileSHA256 = $util.newBuffer($util.base64.length(object.fileSHA256)), 0);
                    else if (object.fileSHA256.length >= 0)
                        message.fileSHA256 = object.fileSHA256;
                if (object.fileLength != null)
                    if ($util.Long)
                        (message.fileLength = $util.Long.fromValue(object.fileLength)).unsigned = true;
                    else if (typeof object.fileLength === "string")
                        message.fileLength = parseInt(object.fileLength, 10);
                    else if (typeof object.fileLength === "number")
                        message.fileLength = object.fileLength;
                    else if (typeof object.fileLength === "object")
                        message.fileLength = new $util.LongBits(object.fileLength.low >>> 0, object.fileLength.high >>> 0).toNumber(true);
                if (object.height != null)
                    message.height = object.height >>> 0;
                if (object.width != null)
                    message.width = object.width >>> 0;
                if (object.mediaKey != null)
                    if (typeof object.mediaKey === "string")
                        $util.base64.decode(object.mediaKey, message.mediaKey = $util.newBuffer($util.base64.length(object.mediaKey)), 0);
                    else if (object.mediaKey.length >= 0)
                        message.mediaKey = object.mediaKey;
                if (object.fileEncSHA256 != null)
                    if (typeof object.fileEncSHA256 === "string")
                        $util.base64.decode(object.fileEncSHA256, message.fileEncSHA256 = $util.newBuffer($util.base64.length(object.fileEncSHA256)), 0);
                    else if (object.fileEncSHA256.length >= 0)
                        message.fileEncSHA256 = object.fileEncSHA256;
                if (object.interactiveAnnotations) {
                    if (!Array.isArray(object.interactiveAnnotations))
                        throw TypeError(".WAE2E.Message.ImageMessage.interactiveAnnotations: array expected");
                    message.interactiveAnnotations = [];
                    for (var i = 0; i < object.interactiveAnnotations.length; ++i) {
                        if (typeof object.interactiveAnnotations[i] !== "object")
                            throw TypeError(".WAE2E.Message.ImageMessage.interactiveAnnotations: object expected");
                        message.interactiveAnnotations[i] = $root.WAE2E.InteractiveAnnotation.fromObject(object.interactiveAnnotations[i]);
                    }
                }
                if (object.directPath != null)
                    message.directPath = String(object.directPath);
                if (object.mediaKeyTimestamp != null)
                    if ($util.Long)
                        (message.mediaKeyTimestamp = $util.Long.fromValue(object.mediaKeyTimestamp)).unsigned = false;
                    else if (typeof object.mediaKeyTimestamp === "string")
                        message.mediaKeyTimestamp = parseInt(object.mediaKeyTimestamp, 10);
                    else if (typeof object.mediaKeyTimestamp === "number")
                        message.mediaKeyTimestamp = object.mediaKeyTimestamp;
                    else if (typeof object.mediaKeyTimestamp === "object")
                        message.mediaKeyTimestamp = new $util.LongBits(object.mediaKeyTimestamp.low >>> 0, object.mediaKeyTimestamp.high >>> 0).toNumber();
                if (object.JPEGThumbnail != null)
                    if (typeof object.JPEGThumbnail === "string")
                        $util.base64.decode(object.JPEGThumbnail, message.JPEGThumbnail = $util.newBuffer($util.base64.length(object.JPEGThumbnail)), 0);
                    else if (object.JPEGThumbnail.length >= 0)
                        message.JPEGThumbnail = object.JPEGThumbnail;
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.ImageMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                if (object.firstScanSidecar != null)
                    if (typeof object.firstScanSidecar === "string")
                        $util.base64.decode(object.firstScanSidecar, message.firstScanSidecar = $util.newBuffer($util.base64.length(object.firstScanSidecar)), 0);
                    else if (object.firstScanSidecar.length >= 0)
                        message.firstScanSidecar = object.firstScanSidecar;
                if (object.firstScanLength != null)
                    message.firstScanLength = object.firstScanLength >>> 0;
                if (object.experimentGroupID != null)
                    message.experimentGroupID = object.experimentGroupID >>> 0;
                if (object.scansSidecar != null)
                    if (typeof object.scansSidecar === "string")
                        $util.base64.decode(object.scansSidecar, message.scansSidecar = $util.newBuffer($util.base64.length(object.scansSidecar)), 0);
                    else if (object.scansSidecar.length >= 0)
                        message.scansSidecar = object.scansSidecar;
                if (object.scanLengths) {
                    if (!Array.isArray(object.scanLengths))
                        throw TypeError(".WAE2E.Message.ImageMessage.scanLengths: array expected");
                    message.scanLengths = [];
                    for (var i = 0; i < object.scanLengths.length; ++i)
                        message.scanLengths[i] = object.scanLengths[i] >>> 0;
                }
                if (object.midQualityFileSHA256 != null)
                    if (typeof object.midQualityFileSHA256 === "string")
                        $util.base64.decode(object.midQualityFileSHA256, message.midQualityFileSHA256 = $util.newBuffer($util.base64.length(object.midQualityFileSHA256)), 0);
                    else if (object.midQualityFileSHA256.length >= 0)
                        message.midQualityFileSHA256 = object.midQualityFileSHA256;
                if (object.midQualityFileEncSHA256 != null)
                    if (typeof object.midQualityFileEncSHA256 === "string")
                        $util.base64.decode(object.midQualityFileEncSHA256, message.midQualityFileEncSHA256 = $util.newBuffer($util.base64.length(object.midQualityFileEncSHA256)), 0);
                    else if (object.midQualityFileEncSHA256.length >= 0)
                        message.midQualityFileEncSHA256 = object.midQualityFileEncSHA256;
                if (object.viewOnce != null)
                    message.viewOnce = Boolean(object.viewOnce);
                if (object.thumbnailDirectPath != null)
                    message.thumbnailDirectPath = String(object.thumbnailDirectPath);
                if (object.thumbnailSHA256 != null)
                    if (typeof object.thumbnailSHA256 === "string")
                        $util.base64.decode(object.thumbnailSHA256, message.thumbnailSHA256 = $util.newBuffer($util.base64.length(object.thumbnailSHA256)), 0);
                    else if (object.thumbnailSHA256.length >= 0)
                        message.thumbnailSHA256 = object.thumbnailSHA256;
                if (object.thumbnailEncSHA256 != null)
                    if (typeof object.thumbnailEncSHA256 === "string")
                        $util.base64.decode(object.thumbnailEncSHA256, message.thumbnailEncSHA256 = $util.newBuffer($util.base64.length(object.thumbnailEncSHA256)), 0);
                    else if (object.thumbnailEncSHA256.length >= 0)
                        message.thumbnailEncSHA256 = object.thumbnailEncSHA256;
                if (object.staticURL != null)
                    message.staticURL = String(object.staticURL);
                if (object.annotations) {
                    if (!Array.isArray(object.annotations))
                        throw TypeError(".WAE2E.Message.ImageMessage.annotations: array expected");
                    message.annotations = [];
                    for (var i = 0; i < object.annotations.length; ++i) {
                        if (typeof object.annotations[i] !== "object")
                            throw TypeError(".WAE2E.Message.ImageMessage.annotations: object expected");
                        message.annotations[i] = $root.WAE2E.InteractiveAnnotation.fromObject(object.annotations[i]);
                    }
                }
                switch (object.imageSourceType) {
                default:
                    if (typeof object.imageSourceType === "number") {
                        message.imageSourceType = object.imageSourceType;
                        break;
                    }
                    break;
                case "USER_IMAGE":
                case 0:
                    message.imageSourceType = 0;
                    break;
                case "AI_GENERATED":
                case 1:
                    message.imageSourceType = 1;
                    break;
                case "AI_MODIFIED":
                case 2:
                    message.imageSourceType = 2;
                    break;
                }
                if (object.accessibilityLabel != null)
                    message.accessibilityLabel = String(object.accessibilityLabel);
                return message;
            };

            /**
             * Creates a plain object from an ImageMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.ImageMessage
             * @static
             * @param {WAE2E.Message.ImageMessage} message ImageMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ImageMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.interactiveAnnotations = [];
                    object.scanLengths = [];
                    object.annotations = [];
                }
                if (options.defaults) {
                    object.URL = "";
                    object.mimetype = "";
                    object.caption = "";
                    if (options.bytes === String)
                        object.fileSHA256 = "";
                    else {
                        object.fileSHA256 = [];
                        if (options.bytes !== Array)
                            object.fileSHA256 = $util.newBuffer(object.fileSHA256);
                    }
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.fileLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.fileLength = options.longs === String ? "0" : 0;
                    object.height = 0;
                    object.width = 0;
                    if (options.bytes === String)
                        object.mediaKey = "";
                    else {
                        object.mediaKey = [];
                        if (options.bytes !== Array)
                            object.mediaKey = $util.newBuffer(object.mediaKey);
                    }
                    if (options.bytes === String)
                        object.fileEncSHA256 = "";
                    else {
                        object.fileEncSHA256 = [];
                        if (options.bytes !== Array)
                            object.fileEncSHA256 = $util.newBuffer(object.fileEncSHA256);
                    }
                    object.directPath = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.mediaKeyTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.mediaKeyTimestamp = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.JPEGThumbnail = "";
                    else {
                        object.JPEGThumbnail = [];
                        if (options.bytes !== Array)
                            object.JPEGThumbnail = $util.newBuffer(object.JPEGThumbnail);
                    }
                    object.contextInfo = null;
                    if (options.bytes === String)
                        object.firstScanSidecar = "";
                    else {
                        object.firstScanSidecar = [];
                        if (options.bytes !== Array)
                            object.firstScanSidecar = $util.newBuffer(object.firstScanSidecar);
                    }
                    object.firstScanLength = 0;
                    object.experimentGroupID = 0;
                    if (options.bytes === String)
                        object.scansSidecar = "";
                    else {
                        object.scansSidecar = [];
                        if (options.bytes !== Array)
                            object.scansSidecar = $util.newBuffer(object.scansSidecar);
                    }
                    if (options.bytes === String)
                        object.midQualityFileSHA256 = "";
                    else {
                        object.midQualityFileSHA256 = [];
                        if (options.bytes !== Array)
                            object.midQualityFileSHA256 = $util.newBuffer(object.midQualityFileSHA256);
                    }
                    if (options.bytes === String)
                        object.midQualityFileEncSHA256 = "";
                    else {
                        object.midQualityFileEncSHA256 = [];
                        if (options.bytes !== Array)
                            object.midQualityFileEncSHA256 = $util.newBuffer(object.midQualityFileEncSHA256);
                    }
                    object.viewOnce = false;
                    object.thumbnailDirectPath = "";
                    if (options.bytes === String)
                        object.thumbnailSHA256 = "";
                    else {
                        object.thumbnailSHA256 = [];
                        if (options.bytes !== Array)
                            object.thumbnailSHA256 = $util.newBuffer(object.thumbnailSHA256);
                    }
                    if (options.bytes === String)
                        object.thumbnailEncSHA256 = "";
                    else {
                        object.thumbnailEncSHA256 = [];
                        if (options.bytes !== Array)
                            object.thumbnailEncSHA256 = $util.newBuffer(object.thumbnailEncSHA256);
                    }
                    object.staticURL = "";
                    object.imageSourceType = options.enums === String ? "USER_IMAGE" : 0;
                    object.accessibilityLabel = "";
                }
                if (message.URL != null && message.hasOwnProperty("URL"))
                    object.URL = message.URL;
                if (message.mimetype != null && message.hasOwnProperty("mimetype"))
                    object.mimetype = message.mimetype;
                if (message.caption != null && message.hasOwnProperty("caption"))
                    object.caption = message.caption;
                if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                    object.fileSHA256 = options.bytes === String ? $util.base64.encode(message.fileSHA256, 0, message.fileSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.fileSHA256) : message.fileSHA256;
                if (message.fileLength != null && message.hasOwnProperty("fileLength"))
                    if (typeof message.fileLength === "number")
                        object.fileLength = options.longs === String ? String(message.fileLength) : message.fileLength;
                    else
                        object.fileLength = options.longs === String ? $util.Long.prototype.toString.call(message.fileLength) : options.longs === Number ? new $util.LongBits(message.fileLength.low >>> 0, message.fileLength.high >>> 0).toNumber(true) : message.fileLength;
                if (message.height != null && message.hasOwnProperty("height"))
                    object.height = message.height;
                if (message.width != null && message.hasOwnProperty("width"))
                    object.width = message.width;
                if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                    object.mediaKey = options.bytes === String ? $util.base64.encode(message.mediaKey, 0, message.mediaKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.mediaKey) : message.mediaKey;
                if (message.fileEncSHA256 != null && message.hasOwnProperty("fileEncSHA256"))
                    object.fileEncSHA256 = options.bytes === String ? $util.base64.encode(message.fileEncSHA256, 0, message.fileEncSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.fileEncSHA256) : message.fileEncSHA256;
                if (message.interactiveAnnotations && message.interactiveAnnotations.length) {
                    object.interactiveAnnotations = [];
                    for (var j = 0; j < message.interactiveAnnotations.length; ++j)
                        object.interactiveAnnotations[j] = $root.WAE2E.InteractiveAnnotation.toObject(message.interactiveAnnotations[j], options);
                }
                if (message.directPath != null && message.hasOwnProperty("directPath"))
                    object.directPath = message.directPath;
                if (message.mediaKeyTimestamp != null && message.hasOwnProperty("mediaKeyTimestamp"))
                    if (typeof message.mediaKeyTimestamp === "number")
                        object.mediaKeyTimestamp = options.longs === String ? String(message.mediaKeyTimestamp) : message.mediaKeyTimestamp;
                    else
                        object.mediaKeyTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.mediaKeyTimestamp) : options.longs === Number ? new $util.LongBits(message.mediaKeyTimestamp.low >>> 0, message.mediaKeyTimestamp.high >>> 0).toNumber() : message.mediaKeyTimestamp;
                if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail"))
                    object.JPEGThumbnail = options.bytes === String ? $util.base64.encode(message.JPEGThumbnail, 0, message.JPEGThumbnail.length) : options.bytes === Array ? Array.prototype.slice.call(message.JPEGThumbnail) : message.JPEGThumbnail;
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                if (message.firstScanSidecar != null && message.hasOwnProperty("firstScanSidecar"))
                    object.firstScanSidecar = options.bytes === String ? $util.base64.encode(message.firstScanSidecar, 0, message.firstScanSidecar.length) : options.bytes === Array ? Array.prototype.slice.call(message.firstScanSidecar) : message.firstScanSidecar;
                if (message.firstScanLength != null && message.hasOwnProperty("firstScanLength"))
                    object.firstScanLength = message.firstScanLength;
                if (message.experimentGroupID != null && message.hasOwnProperty("experimentGroupID"))
                    object.experimentGroupID = message.experimentGroupID;
                if (message.scansSidecar != null && message.hasOwnProperty("scansSidecar"))
                    object.scansSidecar = options.bytes === String ? $util.base64.encode(message.scansSidecar, 0, message.scansSidecar.length) : options.bytes === Array ? Array.prototype.slice.call(message.scansSidecar) : message.scansSidecar;
                if (message.scanLengths && message.scanLengths.length) {
                    object.scanLengths = [];
                    for (var j = 0; j < message.scanLengths.length; ++j)
                        object.scanLengths[j] = message.scanLengths[j];
                }
                if (message.midQualityFileSHA256 != null && message.hasOwnProperty("midQualityFileSHA256"))
                    object.midQualityFileSHA256 = options.bytes === String ? $util.base64.encode(message.midQualityFileSHA256, 0, message.midQualityFileSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.midQualityFileSHA256) : message.midQualityFileSHA256;
                if (message.midQualityFileEncSHA256 != null && message.hasOwnProperty("midQualityFileEncSHA256"))
                    object.midQualityFileEncSHA256 = options.bytes === String ? $util.base64.encode(message.midQualityFileEncSHA256, 0, message.midQualityFileEncSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.midQualityFileEncSHA256) : message.midQualityFileEncSHA256;
                if (message.viewOnce != null && message.hasOwnProperty("viewOnce"))
                    object.viewOnce = message.viewOnce;
                if (message.thumbnailDirectPath != null && message.hasOwnProperty("thumbnailDirectPath"))
                    object.thumbnailDirectPath = message.thumbnailDirectPath;
                if (message.thumbnailSHA256 != null && message.hasOwnProperty("thumbnailSHA256"))
                    object.thumbnailSHA256 = options.bytes === String ? $util.base64.encode(message.thumbnailSHA256, 0, message.thumbnailSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.thumbnailSHA256) : message.thumbnailSHA256;
                if (message.thumbnailEncSHA256 != null && message.hasOwnProperty("thumbnailEncSHA256"))
                    object.thumbnailEncSHA256 = options.bytes === String ? $util.base64.encode(message.thumbnailEncSHA256, 0, message.thumbnailEncSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.thumbnailEncSHA256) : message.thumbnailEncSHA256;
                if (message.staticURL != null && message.hasOwnProperty("staticURL"))
                    object.staticURL = message.staticURL;
                if (message.annotations && message.annotations.length) {
                    object.annotations = [];
                    for (var j = 0; j < message.annotations.length; ++j)
                        object.annotations[j] = $root.WAE2E.InteractiveAnnotation.toObject(message.annotations[j], options);
                }
                if (message.imageSourceType != null && message.hasOwnProperty("imageSourceType"))
                    object.imageSourceType = options.enums === String ? $root.WAE2E.Message.ImageMessage.ImageSourceType[message.imageSourceType] === undefined ? message.imageSourceType : $root.WAE2E.Message.ImageMessage.ImageSourceType[message.imageSourceType] : message.imageSourceType;
                if (message.accessibilityLabel != null && message.hasOwnProperty("accessibilityLabel"))
                    object.accessibilityLabel = message.accessibilityLabel;
                return object;
            };

            /**
             * Converts this ImageMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.ImageMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ImageMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ImageMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.ImageMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ImageMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.ImageMessage";
            };

            /**
             * ImageSourceType enum.
             * @name WAE2E.Message.ImageMessage.ImageSourceType
             * @enum {number}
             * @property {number} USER_IMAGE=0 USER_IMAGE value
             * @property {number} AI_GENERATED=1 AI_GENERATED value
             * @property {number} AI_MODIFIED=2 AI_MODIFIED value
             */
            ImageMessage.ImageSourceType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "USER_IMAGE"] = 0;
                values[valuesById[1] = "AI_GENERATED"] = 1;
                values[valuesById[2] = "AI_MODIFIED"] = 2;
                return values;
            })();

            return ImageMessage;
        })();

        Message.AlbumMessage = (function() {

            /**
             * Properties of an AlbumMessage.
             * @memberof WAE2E.Message
             * @interface IAlbumMessage
             * @property {string|null} [caption] AlbumMessage caption
             */

            /**
             * Constructs a new AlbumMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents an AlbumMessage.
             * @implements IAlbumMessage
             * @constructor
             * @param {WAE2E.Message.IAlbumMessage=} [properties] Properties to set
             */
            function AlbumMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AlbumMessage caption.
             * @member {string} caption
             * @memberof WAE2E.Message.AlbumMessage
             * @instance
             */
            AlbumMessage.prototype.caption = "";

            /**
             * Creates a new AlbumMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.AlbumMessage
             * @static
             * @param {WAE2E.Message.IAlbumMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.AlbumMessage} AlbumMessage instance
             */
            AlbumMessage.create = function create(properties) {
                return new AlbumMessage(properties);
            };

            /**
             * Encodes the specified AlbumMessage message. Does not implicitly {@link WAE2E.Message.AlbumMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.AlbumMessage
             * @static
             * @param {WAE2E.Message.IAlbumMessage} message AlbumMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AlbumMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.caption != null && Object.hasOwnProperty.call(message, "caption"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.caption);
                return writer;
            };

            /**
             * Encodes the specified AlbumMessage message, length delimited. Does not implicitly {@link WAE2E.Message.AlbumMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.AlbumMessage
             * @static
             * @param {WAE2E.Message.IAlbumMessage} message AlbumMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AlbumMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AlbumMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.AlbumMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.AlbumMessage} AlbumMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AlbumMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.AlbumMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.caption = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AlbumMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.AlbumMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.AlbumMessage} AlbumMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AlbumMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AlbumMessage message.
             * @function verify
             * @memberof WAE2E.Message.AlbumMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AlbumMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.caption != null && message.hasOwnProperty("caption"))
                    if (!$util.isString(message.caption))
                        return "caption: string expected";
                return null;
            };

            /**
             * Creates an AlbumMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.AlbumMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.AlbumMessage} AlbumMessage
             */
            AlbumMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.AlbumMessage)
                    return object;
                var message = new $root.WAE2E.Message.AlbumMessage();
                if (object.caption != null)
                    message.caption = String(object.caption);
                return message;
            };

            /**
             * Creates a plain object from an AlbumMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.AlbumMessage
             * @static
             * @param {WAE2E.Message.AlbumMessage} message AlbumMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AlbumMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.caption = "";
                if (message.caption != null && message.hasOwnProperty("caption"))
                    object.caption = message.caption;
                return object;
            };

            /**
             * Converts this AlbumMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.AlbumMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AlbumMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for AlbumMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.AlbumMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            AlbumMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.AlbumMessage";
            };

            return AlbumMessage;
        })();

        Message.MessageHistoryBundle = (function() {

            /**
             * Properties of a MessageHistoryBundle.
             * @memberof WAE2E.Message
             * @interface IMessageHistoryBundle
             * @property {string|null} [mimetype] MessageHistoryBundle mimetype
             * @property {Uint8Array|null} [fileSHA256] MessageHistoryBundle fileSHA256
             * @property {Uint8Array|null} [mediaKey] MessageHistoryBundle mediaKey
             * @property {Uint8Array|null} [fileEncSHA256] MessageHistoryBundle fileEncSHA256
             * @property {string|null} [directPath] MessageHistoryBundle directPath
             * @property {number|Long|null} [mediaKeyTimestamp] MessageHistoryBundle mediaKeyTimestamp
             * @property {WAE2E.IContextInfo|null} [contextInfo] MessageHistoryBundle contextInfo
             * @property {Array.<string>|null} [participants] MessageHistoryBundle participants
             */

            /**
             * Constructs a new MessageHistoryBundle.
             * @memberof WAE2E.Message
             * @classdesc Represents a MessageHistoryBundle.
             * @implements IMessageHistoryBundle
             * @constructor
             * @param {WAE2E.Message.IMessageHistoryBundle=} [properties] Properties to set
             */
            function MessageHistoryBundle(properties) {
                this.participants = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MessageHistoryBundle mimetype.
             * @member {string} mimetype
             * @memberof WAE2E.Message.MessageHistoryBundle
             * @instance
             */
            MessageHistoryBundle.prototype.mimetype = "";

            /**
             * MessageHistoryBundle fileSHA256.
             * @member {Uint8Array} fileSHA256
             * @memberof WAE2E.Message.MessageHistoryBundle
             * @instance
             */
            MessageHistoryBundle.prototype.fileSHA256 = $util.newBuffer([]);

            /**
             * MessageHistoryBundle mediaKey.
             * @member {Uint8Array} mediaKey
             * @memberof WAE2E.Message.MessageHistoryBundle
             * @instance
             */
            MessageHistoryBundle.prototype.mediaKey = $util.newBuffer([]);

            /**
             * MessageHistoryBundle fileEncSHA256.
             * @member {Uint8Array} fileEncSHA256
             * @memberof WAE2E.Message.MessageHistoryBundle
             * @instance
             */
            MessageHistoryBundle.prototype.fileEncSHA256 = $util.newBuffer([]);

            /**
             * MessageHistoryBundle directPath.
             * @member {string} directPath
             * @memberof WAE2E.Message.MessageHistoryBundle
             * @instance
             */
            MessageHistoryBundle.prototype.directPath = "";

            /**
             * MessageHistoryBundle mediaKeyTimestamp.
             * @member {number|Long} mediaKeyTimestamp
             * @memberof WAE2E.Message.MessageHistoryBundle
             * @instance
             */
            MessageHistoryBundle.prototype.mediaKeyTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * MessageHistoryBundle contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.MessageHistoryBundle
             * @instance
             */
            MessageHistoryBundle.prototype.contextInfo = null;

            /**
             * MessageHistoryBundle participants.
             * @member {Array.<string>} participants
             * @memberof WAE2E.Message.MessageHistoryBundle
             * @instance
             */
            MessageHistoryBundle.prototype.participants = $util.emptyArray;

            /**
             * Creates a new MessageHistoryBundle instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.MessageHistoryBundle
             * @static
             * @param {WAE2E.Message.IMessageHistoryBundle=} [properties] Properties to set
             * @returns {WAE2E.Message.MessageHistoryBundle} MessageHistoryBundle instance
             */
            MessageHistoryBundle.create = function create(properties) {
                return new MessageHistoryBundle(properties);
            };

            /**
             * Encodes the specified MessageHistoryBundle message. Does not implicitly {@link WAE2E.Message.MessageHistoryBundle.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.MessageHistoryBundle
             * @static
             * @param {WAE2E.Message.IMessageHistoryBundle} message MessageHistoryBundle message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageHistoryBundle.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mimetype != null && Object.hasOwnProperty.call(message, "mimetype"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.mimetype);
                if (message.fileSHA256 != null && Object.hasOwnProperty.call(message, "fileSHA256"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.fileSHA256);
                if (message.mediaKey != null && Object.hasOwnProperty.call(message, "mediaKey"))
                    writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.mediaKey);
                if (message.fileEncSHA256 != null && Object.hasOwnProperty.call(message, "fileEncSHA256"))
                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.fileEncSHA256);
                if (message.directPath != null && Object.hasOwnProperty.call(message, "directPath"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.directPath);
                if (message.mediaKeyTimestamp != null && Object.hasOwnProperty.call(message, "mediaKeyTimestamp"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int64(message.mediaKeyTimestamp);
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.participants != null && message.participants.length)
                    for (var i = 0; i < message.participants.length; ++i)
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.participants[i]);
                return writer;
            };

            /**
             * Encodes the specified MessageHistoryBundle message, length delimited. Does not implicitly {@link WAE2E.Message.MessageHistoryBundle.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.MessageHistoryBundle
             * @static
             * @param {WAE2E.Message.IMessageHistoryBundle} message MessageHistoryBundle message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageHistoryBundle.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MessageHistoryBundle message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.MessageHistoryBundle
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.MessageHistoryBundle} MessageHistoryBundle
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageHistoryBundle.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.MessageHistoryBundle();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2: {
                            message.mimetype = reader.string();
                            break;
                        }
                    case 3: {
                            message.fileSHA256 = reader.bytes();
                            break;
                        }
                    case 5: {
                            message.mediaKey = reader.bytes();
                            break;
                        }
                    case 6: {
                            message.fileEncSHA256 = reader.bytes();
                            break;
                        }
                    case 7: {
                            message.directPath = reader.string();
                            break;
                        }
                    case 8: {
                            message.mediaKeyTimestamp = reader.int64();
                            break;
                        }
                    case 9: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    case 10: {
                            if (!(message.participants && message.participants.length))
                                message.participants = [];
                            message.participants.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MessageHistoryBundle message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.MessageHistoryBundle
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.MessageHistoryBundle} MessageHistoryBundle
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageHistoryBundle.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MessageHistoryBundle message.
             * @function verify
             * @memberof WAE2E.Message.MessageHistoryBundle
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MessageHistoryBundle.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mimetype != null && message.hasOwnProperty("mimetype"))
                    if (!$util.isString(message.mimetype))
                        return "mimetype: string expected";
                if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                    if (!(message.fileSHA256 && typeof message.fileSHA256.length === "number" || $util.isString(message.fileSHA256)))
                        return "fileSHA256: buffer expected";
                if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                    if (!(message.mediaKey && typeof message.mediaKey.length === "number" || $util.isString(message.mediaKey)))
                        return "mediaKey: buffer expected";
                if (message.fileEncSHA256 != null && message.hasOwnProperty("fileEncSHA256"))
                    if (!(message.fileEncSHA256 && typeof message.fileEncSHA256.length === "number" || $util.isString(message.fileEncSHA256)))
                        return "fileEncSHA256: buffer expected";
                if (message.directPath != null && message.hasOwnProperty("directPath"))
                    if (!$util.isString(message.directPath))
                        return "directPath: string expected";
                if (message.mediaKeyTimestamp != null && message.hasOwnProperty("mediaKeyTimestamp"))
                    if (!$util.isInteger(message.mediaKeyTimestamp) && !(message.mediaKeyTimestamp && $util.isInteger(message.mediaKeyTimestamp.low) && $util.isInteger(message.mediaKeyTimestamp.high)))
                        return "mediaKeyTimestamp: integer|Long expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                if (message.participants != null && message.hasOwnProperty("participants")) {
                    if (!Array.isArray(message.participants))
                        return "participants: array expected";
                    for (var i = 0; i < message.participants.length; ++i)
                        if (!$util.isString(message.participants[i]))
                            return "participants: string[] expected";
                }
                return null;
            };

            /**
             * Creates a MessageHistoryBundle message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.MessageHistoryBundle
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.MessageHistoryBundle} MessageHistoryBundle
             */
            MessageHistoryBundle.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.MessageHistoryBundle)
                    return object;
                var message = new $root.WAE2E.Message.MessageHistoryBundle();
                if (object.mimetype != null)
                    message.mimetype = String(object.mimetype);
                if (object.fileSHA256 != null)
                    if (typeof object.fileSHA256 === "string")
                        $util.base64.decode(object.fileSHA256, message.fileSHA256 = $util.newBuffer($util.base64.length(object.fileSHA256)), 0);
                    else if (object.fileSHA256.length >= 0)
                        message.fileSHA256 = object.fileSHA256;
                if (object.mediaKey != null)
                    if (typeof object.mediaKey === "string")
                        $util.base64.decode(object.mediaKey, message.mediaKey = $util.newBuffer($util.base64.length(object.mediaKey)), 0);
                    else if (object.mediaKey.length >= 0)
                        message.mediaKey = object.mediaKey;
                if (object.fileEncSHA256 != null)
                    if (typeof object.fileEncSHA256 === "string")
                        $util.base64.decode(object.fileEncSHA256, message.fileEncSHA256 = $util.newBuffer($util.base64.length(object.fileEncSHA256)), 0);
                    else if (object.fileEncSHA256.length >= 0)
                        message.fileEncSHA256 = object.fileEncSHA256;
                if (object.directPath != null)
                    message.directPath = String(object.directPath);
                if (object.mediaKeyTimestamp != null)
                    if ($util.Long)
                        (message.mediaKeyTimestamp = $util.Long.fromValue(object.mediaKeyTimestamp)).unsigned = false;
                    else if (typeof object.mediaKeyTimestamp === "string")
                        message.mediaKeyTimestamp = parseInt(object.mediaKeyTimestamp, 10);
                    else if (typeof object.mediaKeyTimestamp === "number")
                        message.mediaKeyTimestamp = object.mediaKeyTimestamp;
                    else if (typeof object.mediaKeyTimestamp === "object")
                        message.mediaKeyTimestamp = new $util.LongBits(object.mediaKeyTimestamp.low >>> 0, object.mediaKeyTimestamp.high >>> 0).toNumber();
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.MessageHistoryBundle.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                if (object.participants) {
                    if (!Array.isArray(object.participants))
                        throw TypeError(".WAE2E.Message.MessageHistoryBundle.participants: array expected");
                    message.participants = [];
                    for (var i = 0; i < object.participants.length; ++i)
                        message.participants[i] = String(object.participants[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a MessageHistoryBundle message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.MessageHistoryBundle
             * @static
             * @param {WAE2E.Message.MessageHistoryBundle} message MessageHistoryBundle
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MessageHistoryBundle.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.participants = [];
                if (options.defaults) {
                    object.mimetype = "";
                    if (options.bytes === String)
                        object.fileSHA256 = "";
                    else {
                        object.fileSHA256 = [];
                        if (options.bytes !== Array)
                            object.fileSHA256 = $util.newBuffer(object.fileSHA256);
                    }
                    if (options.bytes === String)
                        object.mediaKey = "";
                    else {
                        object.mediaKey = [];
                        if (options.bytes !== Array)
                            object.mediaKey = $util.newBuffer(object.mediaKey);
                    }
                    if (options.bytes === String)
                        object.fileEncSHA256 = "";
                    else {
                        object.fileEncSHA256 = [];
                        if (options.bytes !== Array)
                            object.fileEncSHA256 = $util.newBuffer(object.fileEncSHA256);
                    }
                    object.directPath = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.mediaKeyTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.mediaKeyTimestamp = options.longs === String ? "0" : 0;
                    object.contextInfo = null;
                }
                if (message.mimetype != null && message.hasOwnProperty("mimetype"))
                    object.mimetype = message.mimetype;
                if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                    object.fileSHA256 = options.bytes === String ? $util.base64.encode(message.fileSHA256, 0, message.fileSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.fileSHA256) : message.fileSHA256;
                if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                    object.mediaKey = options.bytes === String ? $util.base64.encode(message.mediaKey, 0, message.mediaKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.mediaKey) : message.mediaKey;
                if (message.fileEncSHA256 != null && message.hasOwnProperty("fileEncSHA256"))
                    object.fileEncSHA256 = options.bytes === String ? $util.base64.encode(message.fileEncSHA256, 0, message.fileEncSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.fileEncSHA256) : message.fileEncSHA256;
                if (message.directPath != null && message.hasOwnProperty("directPath"))
                    object.directPath = message.directPath;
                if (message.mediaKeyTimestamp != null && message.hasOwnProperty("mediaKeyTimestamp"))
                    if (typeof message.mediaKeyTimestamp === "number")
                        object.mediaKeyTimestamp = options.longs === String ? String(message.mediaKeyTimestamp) : message.mediaKeyTimestamp;
                    else
                        object.mediaKeyTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.mediaKeyTimestamp) : options.longs === Number ? new $util.LongBits(message.mediaKeyTimestamp.low >>> 0, message.mediaKeyTimestamp.high >>> 0).toNumber() : message.mediaKeyTimestamp;
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                if (message.participants && message.participants.length) {
                    object.participants = [];
                    for (var j = 0; j < message.participants.length; ++j)
                        object.participants[j] = message.participants[j];
                }
                return object;
            };

            /**
             * Converts this MessageHistoryBundle to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.MessageHistoryBundle
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MessageHistoryBundle.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for MessageHistoryBundle
             * @function getTypeUrl
             * @memberof WAE2E.Message.MessageHistoryBundle
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            MessageHistoryBundle.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.MessageHistoryBundle";
            };

            return MessageHistoryBundle;
        })();

        Message.EncEventResponseMessage = (function() {

            /**
             * Properties of an EncEventResponseMessage.
             * @memberof WAE2E.Message
             * @interface IEncEventResponseMessage
             * @property {WAProtocol.IMessageKey|null} [eventCreationMessageKey] EncEventResponseMessage eventCreationMessageKey
             * @property {Uint8Array|null} [encPayload] EncEventResponseMessage encPayload
             * @property {Uint8Array|null} [encIV] EncEventResponseMessage encIV
             */

            /**
             * Constructs a new EncEventResponseMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents an EncEventResponseMessage.
             * @implements IEncEventResponseMessage
             * @constructor
             * @param {WAE2E.Message.IEncEventResponseMessage=} [properties] Properties to set
             */
            function EncEventResponseMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EncEventResponseMessage eventCreationMessageKey.
             * @member {WAProtocol.IMessageKey|null|undefined} eventCreationMessageKey
             * @memberof WAE2E.Message.EncEventResponseMessage
             * @instance
             */
            EncEventResponseMessage.prototype.eventCreationMessageKey = null;

            /**
             * EncEventResponseMessage encPayload.
             * @member {Uint8Array} encPayload
             * @memberof WAE2E.Message.EncEventResponseMessage
             * @instance
             */
            EncEventResponseMessage.prototype.encPayload = $util.newBuffer([]);

            /**
             * EncEventResponseMessage encIV.
             * @member {Uint8Array} encIV
             * @memberof WAE2E.Message.EncEventResponseMessage
             * @instance
             */
            EncEventResponseMessage.prototype.encIV = $util.newBuffer([]);

            /**
             * Creates a new EncEventResponseMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.EncEventResponseMessage
             * @static
             * @param {WAE2E.Message.IEncEventResponseMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.EncEventResponseMessage} EncEventResponseMessage instance
             */
            EncEventResponseMessage.create = function create(properties) {
                return new EncEventResponseMessage(properties);
            };

            /**
             * Encodes the specified EncEventResponseMessage message. Does not implicitly {@link WAE2E.Message.EncEventResponseMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.EncEventResponseMessage
             * @static
             * @param {WAE2E.Message.IEncEventResponseMessage} message EncEventResponseMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EncEventResponseMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.eventCreationMessageKey != null && Object.hasOwnProperty.call(message, "eventCreationMessageKey"))
                    $root.WAProtocol.MessageKey.encode(message.eventCreationMessageKey, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.encPayload != null && Object.hasOwnProperty.call(message, "encPayload"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.encPayload);
                if (message.encIV != null && Object.hasOwnProperty.call(message, "encIV"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.encIV);
                return writer;
            };

            /**
             * Encodes the specified EncEventResponseMessage message, length delimited. Does not implicitly {@link WAE2E.Message.EncEventResponseMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.EncEventResponseMessage
             * @static
             * @param {WAE2E.Message.IEncEventResponseMessage} message EncEventResponseMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EncEventResponseMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EncEventResponseMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.EncEventResponseMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.EncEventResponseMessage} EncEventResponseMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EncEventResponseMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.EncEventResponseMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.eventCreationMessageKey = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.encPayload = reader.bytes();
                            break;
                        }
                    case 3: {
                            message.encIV = reader.bytes();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EncEventResponseMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.EncEventResponseMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.EncEventResponseMessage} EncEventResponseMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EncEventResponseMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EncEventResponseMessage message.
             * @function verify
             * @memberof WAE2E.Message.EncEventResponseMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EncEventResponseMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.eventCreationMessageKey != null && message.hasOwnProperty("eventCreationMessageKey")) {
                    var error = $root.WAProtocol.MessageKey.verify(message.eventCreationMessageKey);
                    if (error)
                        return "eventCreationMessageKey." + error;
                }
                if (message.encPayload != null && message.hasOwnProperty("encPayload"))
                    if (!(message.encPayload && typeof message.encPayload.length === "number" || $util.isString(message.encPayload)))
                        return "encPayload: buffer expected";
                if (message.encIV != null && message.hasOwnProperty("encIV"))
                    if (!(message.encIV && typeof message.encIV.length === "number" || $util.isString(message.encIV)))
                        return "encIV: buffer expected";
                return null;
            };

            /**
             * Creates an EncEventResponseMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.EncEventResponseMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.EncEventResponseMessage} EncEventResponseMessage
             */
            EncEventResponseMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.EncEventResponseMessage)
                    return object;
                var message = new $root.WAE2E.Message.EncEventResponseMessage();
                if (object.eventCreationMessageKey != null) {
                    if (typeof object.eventCreationMessageKey !== "object")
                        throw TypeError(".WAE2E.Message.EncEventResponseMessage.eventCreationMessageKey: object expected");
                    message.eventCreationMessageKey = $root.WAProtocol.MessageKey.fromObject(object.eventCreationMessageKey);
                }
                if (object.encPayload != null)
                    if (typeof object.encPayload === "string")
                        $util.base64.decode(object.encPayload, message.encPayload = $util.newBuffer($util.base64.length(object.encPayload)), 0);
                    else if (object.encPayload.length >= 0)
                        message.encPayload = object.encPayload;
                if (object.encIV != null)
                    if (typeof object.encIV === "string")
                        $util.base64.decode(object.encIV, message.encIV = $util.newBuffer($util.base64.length(object.encIV)), 0);
                    else if (object.encIV.length >= 0)
                        message.encIV = object.encIV;
                return message;
            };

            /**
             * Creates a plain object from an EncEventResponseMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.EncEventResponseMessage
             * @static
             * @param {WAE2E.Message.EncEventResponseMessage} message EncEventResponseMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EncEventResponseMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.eventCreationMessageKey = null;
                    if (options.bytes === String)
                        object.encPayload = "";
                    else {
                        object.encPayload = [];
                        if (options.bytes !== Array)
                            object.encPayload = $util.newBuffer(object.encPayload);
                    }
                    if (options.bytes === String)
                        object.encIV = "";
                    else {
                        object.encIV = [];
                        if (options.bytes !== Array)
                            object.encIV = $util.newBuffer(object.encIV);
                    }
                }
                if (message.eventCreationMessageKey != null && message.hasOwnProperty("eventCreationMessageKey"))
                    object.eventCreationMessageKey = $root.WAProtocol.MessageKey.toObject(message.eventCreationMessageKey, options);
                if (message.encPayload != null && message.hasOwnProperty("encPayload"))
                    object.encPayload = options.bytes === String ? $util.base64.encode(message.encPayload, 0, message.encPayload.length) : options.bytes === Array ? Array.prototype.slice.call(message.encPayload) : message.encPayload;
                if (message.encIV != null && message.hasOwnProperty("encIV"))
                    object.encIV = options.bytes === String ? $util.base64.encode(message.encIV, 0, message.encIV.length) : options.bytes === Array ? Array.prototype.slice.call(message.encIV) : message.encIV;
                return object;
            };

            /**
             * Converts this EncEventResponseMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.EncEventResponseMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EncEventResponseMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for EncEventResponseMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.EncEventResponseMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            EncEventResponseMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.EncEventResponseMessage";
            };

            return EncEventResponseMessage;
        })();

        Message.EventMessage = (function() {

            /**
             * Properties of an EventMessage.
             * @memberof WAE2E.Message
             * @interface IEventMessage
             * @property {WAE2E.IContextInfo|null} [contextInfo] EventMessage contextInfo
             * @property {boolean|null} [isCanceled] EventMessage isCanceled
             * @property {string|null} [name] EventMessage name
             * @property {string|null} [description] EventMessage description
             * @property {WAE2E.Message.ILocationMessage|null} [location] EventMessage location
             * @property {string|null} [joinLink] EventMessage joinLink
             * @property {number|Long|null} [startTime] EventMessage startTime
             * @property {number|Long|null} [endTime] EventMessage endTime
             * @property {boolean|null} [extraGuestsAllowed] EventMessage extraGuestsAllowed
             */

            /**
             * Constructs a new EventMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents an EventMessage.
             * @implements IEventMessage
             * @constructor
             * @param {WAE2E.Message.IEventMessage=} [properties] Properties to set
             */
            function EventMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.EventMessage
             * @instance
             */
            EventMessage.prototype.contextInfo = null;

            /**
             * EventMessage isCanceled.
             * @member {boolean} isCanceled
             * @memberof WAE2E.Message.EventMessage
             * @instance
             */
            EventMessage.prototype.isCanceled = false;

            /**
             * EventMessage name.
             * @member {string} name
             * @memberof WAE2E.Message.EventMessage
             * @instance
             */
            EventMessage.prototype.name = "";

            /**
             * EventMessage description.
             * @member {string} description
             * @memberof WAE2E.Message.EventMessage
             * @instance
             */
            EventMessage.prototype.description = "";

            /**
             * EventMessage location.
             * @member {WAE2E.Message.ILocationMessage|null|undefined} location
             * @memberof WAE2E.Message.EventMessage
             * @instance
             */
            EventMessage.prototype.location = null;

            /**
             * EventMessage joinLink.
             * @member {string} joinLink
             * @memberof WAE2E.Message.EventMessage
             * @instance
             */
            EventMessage.prototype.joinLink = "";

            /**
             * EventMessage startTime.
             * @member {number|Long} startTime
             * @memberof WAE2E.Message.EventMessage
             * @instance
             */
            EventMessage.prototype.startTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * EventMessage endTime.
             * @member {number|Long} endTime
             * @memberof WAE2E.Message.EventMessage
             * @instance
             */
            EventMessage.prototype.endTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * EventMessage extraGuestsAllowed.
             * @member {boolean} extraGuestsAllowed
             * @memberof WAE2E.Message.EventMessage
             * @instance
             */
            EventMessage.prototype.extraGuestsAllowed = false;

            /**
             * Creates a new EventMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.EventMessage
             * @static
             * @param {WAE2E.Message.IEventMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.EventMessage} EventMessage instance
             */
            EventMessage.create = function create(properties) {
                return new EventMessage(properties);
            };

            /**
             * Encodes the specified EventMessage message. Does not implicitly {@link WAE2E.Message.EventMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.EventMessage
             * @static
             * @param {WAE2E.Message.IEventMessage} message EventMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.isCanceled != null && Object.hasOwnProperty.call(message, "isCanceled"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isCanceled);
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
                if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.description);
                if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                    $root.WAE2E.Message.LocationMessage.encode(message.location, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.joinLink != null && Object.hasOwnProperty.call(message, "joinLink"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.joinLink);
                if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int64(message.startTime);
                if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int64(message.endTime);
                if (message.extraGuestsAllowed != null && Object.hasOwnProperty.call(message, "extraGuestsAllowed"))
                    writer.uint32(/* id 9, wireType 0 =*/72).bool(message.extraGuestsAllowed);
                return writer;
            };

            /**
             * Encodes the specified EventMessage message, length delimited. Does not implicitly {@link WAE2E.Message.EventMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.EventMessage
             * @static
             * @param {WAE2E.Message.IEventMessage} message EventMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.EventMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.EventMessage} EventMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.EventMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.isCanceled = reader.bool();
                            break;
                        }
                    case 3: {
                            message.name = reader.string();
                            break;
                        }
                    case 4: {
                            message.description = reader.string();
                            break;
                        }
                    case 5: {
                            message.location = $root.WAE2E.Message.LocationMessage.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.joinLink = reader.string();
                            break;
                        }
                    case 7: {
                            message.startTime = reader.int64();
                            break;
                        }
                    case 8: {
                            message.endTime = reader.int64();
                            break;
                        }
                    case 9: {
                            message.extraGuestsAllowed = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.EventMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.EventMessage} EventMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventMessage message.
             * @function verify
             * @memberof WAE2E.Message.EventMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                if (message.isCanceled != null && message.hasOwnProperty("isCanceled"))
                    if (typeof message.isCanceled !== "boolean")
                        return "isCanceled: boolean expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.description != null && message.hasOwnProperty("description"))
                    if (!$util.isString(message.description))
                        return "description: string expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    var error = $root.WAE2E.Message.LocationMessage.verify(message.location);
                    if (error)
                        return "location." + error;
                }
                if (message.joinLink != null && message.hasOwnProperty("joinLink"))
                    if (!$util.isString(message.joinLink))
                        return "joinLink: string expected";
                if (message.startTime != null && message.hasOwnProperty("startTime"))
                    if (!$util.isInteger(message.startTime) && !(message.startTime && $util.isInteger(message.startTime.low) && $util.isInteger(message.startTime.high)))
                        return "startTime: integer|Long expected";
                if (message.endTime != null && message.hasOwnProperty("endTime"))
                    if (!$util.isInteger(message.endTime) && !(message.endTime && $util.isInteger(message.endTime.low) && $util.isInteger(message.endTime.high)))
                        return "endTime: integer|Long expected";
                if (message.extraGuestsAllowed != null && message.hasOwnProperty("extraGuestsAllowed"))
                    if (typeof message.extraGuestsAllowed !== "boolean")
                        return "extraGuestsAllowed: boolean expected";
                return null;
            };

            /**
             * Creates an EventMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.EventMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.EventMessage} EventMessage
             */
            EventMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.EventMessage)
                    return object;
                var message = new $root.WAE2E.Message.EventMessage();
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.EventMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                if (object.isCanceled != null)
                    message.isCanceled = Boolean(object.isCanceled);
                if (object.name != null)
                    message.name = String(object.name);
                if (object.description != null)
                    message.description = String(object.description);
                if (object.location != null) {
                    if (typeof object.location !== "object")
                        throw TypeError(".WAE2E.Message.EventMessage.location: object expected");
                    message.location = $root.WAE2E.Message.LocationMessage.fromObject(object.location);
                }
                if (object.joinLink != null)
                    message.joinLink = String(object.joinLink);
                if (object.startTime != null)
                    if ($util.Long)
                        (message.startTime = $util.Long.fromValue(object.startTime)).unsigned = false;
                    else if (typeof object.startTime === "string")
                        message.startTime = parseInt(object.startTime, 10);
                    else if (typeof object.startTime === "number")
                        message.startTime = object.startTime;
                    else if (typeof object.startTime === "object")
                        message.startTime = new $util.LongBits(object.startTime.low >>> 0, object.startTime.high >>> 0).toNumber();
                if (object.endTime != null)
                    if ($util.Long)
                        (message.endTime = $util.Long.fromValue(object.endTime)).unsigned = false;
                    else if (typeof object.endTime === "string")
                        message.endTime = parseInt(object.endTime, 10);
                    else if (typeof object.endTime === "number")
                        message.endTime = object.endTime;
                    else if (typeof object.endTime === "object")
                        message.endTime = new $util.LongBits(object.endTime.low >>> 0, object.endTime.high >>> 0).toNumber();
                if (object.extraGuestsAllowed != null)
                    message.extraGuestsAllowed = Boolean(object.extraGuestsAllowed);
                return message;
            };

            /**
             * Creates a plain object from an EventMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.EventMessage
             * @static
             * @param {WAE2E.Message.EventMessage} message EventMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.contextInfo = null;
                    object.isCanceled = false;
                    object.name = "";
                    object.description = "";
                    object.location = null;
                    object.joinLink = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.startTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.startTime = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.endTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.endTime = options.longs === String ? "0" : 0;
                    object.extraGuestsAllowed = false;
                }
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                if (message.isCanceled != null && message.hasOwnProperty("isCanceled"))
                    object.isCanceled = message.isCanceled;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.description != null && message.hasOwnProperty("description"))
                    object.description = message.description;
                if (message.location != null && message.hasOwnProperty("location"))
                    object.location = $root.WAE2E.Message.LocationMessage.toObject(message.location, options);
                if (message.joinLink != null && message.hasOwnProperty("joinLink"))
                    object.joinLink = message.joinLink;
                if (message.startTime != null && message.hasOwnProperty("startTime"))
                    if (typeof message.startTime === "number")
                        object.startTime = options.longs === String ? String(message.startTime) : message.startTime;
                    else
                        object.startTime = options.longs === String ? $util.Long.prototype.toString.call(message.startTime) : options.longs === Number ? new $util.LongBits(message.startTime.low >>> 0, message.startTime.high >>> 0).toNumber() : message.startTime;
                if (message.endTime != null && message.hasOwnProperty("endTime"))
                    if (typeof message.endTime === "number")
                        object.endTime = options.longs === String ? String(message.endTime) : message.endTime;
                    else
                        object.endTime = options.longs === String ? $util.Long.prototype.toString.call(message.endTime) : options.longs === Number ? new $util.LongBits(message.endTime.low >>> 0, message.endTime.high >>> 0).toNumber() : message.endTime;
                if (message.extraGuestsAllowed != null && message.hasOwnProperty("extraGuestsAllowed"))
                    object.extraGuestsAllowed = message.extraGuestsAllowed;
                return object;
            };

            /**
             * Converts this EventMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.EventMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for EventMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.EventMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            EventMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.EventMessage";
            };

            return EventMessage;
        })();

        Message.CommentMessage = (function() {

            /**
             * Properties of a CommentMessage.
             * @memberof WAE2E.Message
             * @interface ICommentMessage
             * @property {WAE2E.IMessage|null} [message] CommentMessage message
             * @property {WAProtocol.IMessageKey|null} [targetMessageKey] CommentMessage targetMessageKey
             */

            /**
             * Constructs a new CommentMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a CommentMessage.
             * @implements ICommentMessage
             * @constructor
             * @param {WAE2E.Message.ICommentMessage=} [properties] Properties to set
             */
            function CommentMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CommentMessage message.
             * @member {WAE2E.IMessage|null|undefined} message
             * @memberof WAE2E.Message.CommentMessage
             * @instance
             */
            CommentMessage.prototype.message = null;

            /**
             * CommentMessage targetMessageKey.
             * @member {WAProtocol.IMessageKey|null|undefined} targetMessageKey
             * @memberof WAE2E.Message.CommentMessage
             * @instance
             */
            CommentMessage.prototype.targetMessageKey = null;

            /**
             * Creates a new CommentMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.CommentMessage
             * @static
             * @param {WAE2E.Message.ICommentMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.CommentMessage} CommentMessage instance
             */
            CommentMessage.create = function create(properties) {
                return new CommentMessage(properties);
            };

            /**
             * Encodes the specified CommentMessage message. Does not implicitly {@link WAE2E.Message.CommentMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.CommentMessage
             * @static
             * @param {WAE2E.Message.ICommentMessage} message CommentMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CommentMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                    $root.WAE2E.Message.encode(message.message, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.targetMessageKey != null && Object.hasOwnProperty.call(message, "targetMessageKey"))
                    $root.WAProtocol.MessageKey.encode(message.targetMessageKey, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CommentMessage message, length delimited. Does not implicitly {@link WAE2E.Message.CommentMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.CommentMessage
             * @static
             * @param {WAE2E.Message.ICommentMessage} message CommentMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CommentMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CommentMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.CommentMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.CommentMessage} CommentMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CommentMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.CommentMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.message = $root.WAE2E.Message.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.targetMessageKey = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CommentMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.CommentMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.CommentMessage} CommentMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CommentMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CommentMessage message.
             * @function verify
             * @memberof WAE2E.Message.CommentMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CommentMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.message != null && message.hasOwnProperty("message")) {
                    var error = $root.WAE2E.Message.verify(message.message);
                    if (error)
                        return "message." + error;
                }
                if (message.targetMessageKey != null && message.hasOwnProperty("targetMessageKey")) {
                    var error = $root.WAProtocol.MessageKey.verify(message.targetMessageKey);
                    if (error)
                        return "targetMessageKey." + error;
                }
                return null;
            };

            /**
             * Creates a CommentMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.CommentMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.CommentMessage} CommentMessage
             */
            CommentMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.CommentMessage)
                    return object;
                var message = new $root.WAE2E.Message.CommentMessage();
                if (object.message != null) {
                    if (typeof object.message !== "object")
                        throw TypeError(".WAE2E.Message.CommentMessage.message: object expected");
                    message.message = $root.WAE2E.Message.fromObject(object.message);
                }
                if (object.targetMessageKey != null) {
                    if (typeof object.targetMessageKey !== "object")
                        throw TypeError(".WAE2E.Message.CommentMessage.targetMessageKey: object expected");
                    message.targetMessageKey = $root.WAProtocol.MessageKey.fromObject(object.targetMessageKey);
                }
                return message;
            };

            /**
             * Creates a plain object from a CommentMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.CommentMessage
             * @static
             * @param {WAE2E.Message.CommentMessage} message CommentMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CommentMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.message = null;
                    object.targetMessageKey = null;
                }
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = $root.WAE2E.Message.toObject(message.message, options);
                if (message.targetMessageKey != null && message.hasOwnProperty("targetMessageKey"))
                    object.targetMessageKey = $root.WAProtocol.MessageKey.toObject(message.targetMessageKey, options);
                return object;
            };

            /**
             * Converts this CommentMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.CommentMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CommentMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CommentMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.CommentMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CommentMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.CommentMessage";
            };

            return CommentMessage;
        })();

        Message.EncCommentMessage = (function() {

            /**
             * Properties of an EncCommentMessage.
             * @memberof WAE2E.Message
             * @interface IEncCommentMessage
             * @property {WAProtocol.IMessageKey|null} [targetMessageKey] EncCommentMessage targetMessageKey
             * @property {Uint8Array|null} [encPayload] EncCommentMessage encPayload
             * @property {Uint8Array|null} [encIV] EncCommentMessage encIV
             */

            /**
             * Constructs a new EncCommentMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents an EncCommentMessage.
             * @implements IEncCommentMessage
             * @constructor
             * @param {WAE2E.Message.IEncCommentMessage=} [properties] Properties to set
             */
            function EncCommentMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EncCommentMessage targetMessageKey.
             * @member {WAProtocol.IMessageKey|null|undefined} targetMessageKey
             * @memberof WAE2E.Message.EncCommentMessage
             * @instance
             */
            EncCommentMessage.prototype.targetMessageKey = null;

            /**
             * EncCommentMessage encPayload.
             * @member {Uint8Array} encPayload
             * @memberof WAE2E.Message.EncCommentMessage
             * @instance
             */
            EncCommentMessage.prototype.encPayload = $util.newBuffer([]);

            /**
             * EncCommentMessage encIV.
             * @member {Uint8Array} encIV
             * @memberof WAE2E.Message.EncCommentMessage
             * @instance
             */
            EncCommentMessage.prototype.encIV = $util.newBuffer([]);

            /**
             * Creates a new EncCommentMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.EncCommentMessage
             * @static
             * @param {WAE2E.Message.IEncCommentMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.EncCommentMessage} EncCommentMessage instance
             */
            EncCommentMessage.create = function create(properties) {
                return new EncCommentMessage(properties);
            };

            /**
             * Encodes the specified EncCommentMessage message. Does not implicitly {@link WAE2E.Message.EncCommentMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.EncCommentMessage
             * @static
             * @param {WAE2E.Message.IEncCommentMessage} message EncCommentMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EncCommentMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.targetMessageKey != null && Object.hasOwnProperty.call(message, "targetMessageKey"))
                    $root.WAProtocol.MessageKey.encode(message.targetMessageKey, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.encPayload != null && Object.hasOwnProperty.call(message, "encPayload"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.encPayload);
                if (message.encIV != null && Object.hasOwnProperty.call(message, "encIV"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.encIV);
                return writer;
            };

            /**
             * Encodes the specified EncCommentMessage message, length delimited. Does not implicitly {@link WAE2E.Message.EncCommentMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.EncCommentMessage
             * @static
             * @param {WAE2E.Message.IEncCommentMessage} message EncCommentMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EncCommentMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EncCommentMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.EncCommentMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.EncCommentMessage} EncCommentMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EncCommentMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.EncCommentMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.targetMessageKey = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.encPayload = reader.bytes();
                            break;
                        }
                    case 3: {
                            message.encIV = reader.bytes();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EncCommentMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.EncCommentMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.EncCommentMessage} EncCommentMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EncCommentMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EncCommentMessage message.
             * @function verify
             * @memberof WAE2E.Message.EncCommentMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EncCommentMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.targetMessageKey != null && message.hasOwnProperty("targetMessageKey")) {
                    var error = $root.WAProtocol.MessageKey.verify(message.targetMessageKey);
                    if (error)
                        return "targetMessageKey." + error;
                }
                if (message.encPayload != null && message.hasOwnProperty("encPayload"))
                    if (!(message.encPayload && typeof message.encPayload.length === "number" || $util.isString(message.encPayload)))
                        return "encPayload: buffer expected";
                if (message.encIV != null && message.hasOwnProperty("encIV"))
                    if (!(message.encIV && typeof message.encIV.length === "number" || $util.isString(message.encIV)))
                        return "encIV: buffer expected";
                return null;
            };

            /**
             * Creates an EncCommentMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.EncCommentMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.EncCommentMessage} EncCommentMessage
             */
            EncCommentMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.EncCommentMessage)
                    return object;
                var message = new $root.WAE2E.Message.EncCommentMessage();
                if (object.targetMessageKey != null) {
                    if (typeof object.targetMessageKey !== "object")
                        throw TypeError(".WAE2E.Message.EncCommentMessage.targetMessageKey: object expected");
                    message.targetMessageKey = $root.WAProtocol.MessageKey.fromObject(object.targetMessageKey);
                }
                if (object.encPayload != null)
                    if (typeof object.encPayload === "string")
                        $util.base64.decode(object.encPayload, message.encPayload = $util.newBuffer($util.base64.length(object.encPayload)), 0);
                    else if (object.encPayload.length >= 0)
                        message.encPayload = object.encPayload;
                if (object.encIV != null)
                    if (typeof object.encIV === "string")
                        $util.base64.decode(object.encIV, message.encIV = $util.newBuffer($util.base64.length(object.encIV)), 0);
                    else if (object.encIV.length >= 0)
                        message.encIV = object.encIV;
                return message;
            };

            /**
             * Creates a plain object from an EncCommentMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.EncCommentMessage
             * @static
             * @param {WAE2E.Message.EncCommentMessage} message EncCommentMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EncCommentMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.targetMessageKey = null;
                    if (options.bytes === String)
                        object.encPayload = "";
                    else {
                        object.encPayload = [];
                        if (options.bytes !== Array)
                            object.encPayload = $util.newBuffer(object.encPayload);
                    }
                    if (options.bytes === String)
                        object.encIV = "";
                    else {
                        object.encIV = [];
                        if (options.bytes !== Array)
                            object.encIV = $util.newBuffer(object.encIV);
                    }
                }
                if (message.targetMessageKey != null && message.hasOwnProperty("targetMessageKey"))
                    object.targetMessageKey = $root.WAProtocol.MessageKey.toObject(message.targetMessageKey, options);
                if (message.encPayload != null && message.hasOwnProperty("encPayload"))
                    object.encPayload = options.bytes === String ? $util.base64.encode(message.encPayload, 0, message.encPayload.length) : options.bytes === Array ? Array.prototype.slice.call(message.encPayload) : message.encPayload;
                if (message.encIV != null && message.hasOwnProperty("encIV"))
                    object.encIV = options.bytes === String ? $util.base64.encode(message.encIV, 0, message.encIV.length) : options.bytes === Array ? Array.prototype.slice.call(message.encIV) : message.encIV;
                return object;
            };

            /**
             * Converts this EncCommentMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.EncCommentMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EncCommentMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for EncCommentMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.EncCommentMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            EncCommentMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.EncCommentMessage";
            };

            return EncCommentMessage;
        })();

        Message.EncReactionMessage = (function() {

            /**
             * Properties of an EncReactionMessage.
             * @memberof WAE2E.Message
             * @interface IEncReactionMessage
             * @property {WAProtocol.IMessageKey|null} [targetMessageKey] EncReactionMessage targetMessageKey
             * @property {Uint8Array|null} [encPayload] EncReactionMessage encPayload
             * @property {Uint8Array|null} [encIV] EncReactionMessage encIV
             */

            /**
             * Constructs a new EncReactionMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents an EncReactionMessage.
             * @implements IEncReactionMessage
             * @constructor
             * @param {WAE2E.Message.IEncReactionMessage=} [properties] Properties to set
             */
            function EncReactionMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EncReactionMessage targetMessageKey.
             * @member {WAProtocol.IMessageKey|null|undefined} targetMessageKey
             * @memberof WAE2E.Message.EncReactionMessage
             * @instance
             */
            EncReactionMessage.prototype.targetMessageKey = null;

            /**
             * EncReactionMessage encPayload.
             * @member {Uint8Array} encPayload
             * @memberof WAE2E.Message.EncReactionMessage
             * @instance
             */
            EncReactionMessage.prototype.encPayload = $util.newBuffer([]);

            /**
             * EncReactionMessage encIV.
             * @member {Uint8Array} encIV
             * @memberof WAE2E.Message.EncReactionMessage
             * @instance
             */
            EncReactionMessage.prototype.encIV = $util.newBuffer([]);

            /**
             * Creates a new EncReactionMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.EncReactionMessage
             * @static
             * @param {WAE2E.Message.IEncReactionMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.EncReactionMessage} EncReactionMessage instance
             */
            EncReactionMessage.create = function create(properties) {
                return new EncReactionMessage(properties);
            };

            /**
             * Encodes the specified EncReactionMessage message. Does not implicitly {@link WAE2E.Message.EncReactionMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.EncReactionMessage
             * @static
             * @param {WAE2E.Message.IEncReactionMessage} message EncReactionMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EncReactionMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.targetMessageKey != null && Object.hasOwnProperty.call(message, "targetMessageKey"))
                    $root.WAProtocol.MessageKey.encode(message.targetMessageKey, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.encPayload != null && Object.hasOwnProperty.call(message, "encPayload"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.encPayload);
                if (message.encIV != null && Object.hasOwnProperty.call(message, "encIV"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.encIV);
                return writer;
            };

            /**
             * Encodes the specified EncReactionMessage message, length delimited. Does not implicitly {@link WAE2E.Message.EncReactionMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.EncReactionMessage
             * @static
             * @param {WAE2E.Message.IEncReactionMessage} message EncReactionMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EncReactionMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EncReactionMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.EncReactionMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.EncReactionMessage} EncReactionMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EncReactionMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.EncReactionMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.targetMessageKey = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.encPayload = reader.bytes();
                            break;
                        }
                    case 3: {
                            message.encIV = reader.bytes();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EncReactionMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.EncReactionMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.EncReactionMessage} EncReactionMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EncReactionMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EncReactionMessage message.
             * @function verify
             * @memberof WAE2E.Message.EncReactionMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EncReactionMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.targetMessageKey != null && message.hasOwnProperty("targetMessageKey")) {
                    var error = $root.WAProtocol.MessageKey.verify(message.targetMessageKey);
                    if (error)
                        return "targetMessageKey." + error;
                }
                if (message.encPayload != null && message.hasOwnProperty("encPayload"))
                    if (!(message.encPayload && typeof message.encPayload.length === "number" || $util.isString(message.encPayload)))
                        return "encPayload: buffer expected";
                if (message.encIV != null && message.hasOwnProperty("encIV"))
                    if (!(message.encIV && typeof message.encIV.length === "number" || $util.isString(message.encIV)))
                        return "encIV: buffer expected";
                return null;
            };

            /**
             * Creates an EncReactionMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.EncReactionMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.EncReactionMessage} EncReactionMessage
             */
            EncReactionMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.EncReactionMessage)
                    return object;
                var message = new $root.WAE2E.Message.EncReactionMessage();
                if (object.targetMessageKey != null) {
                    if (typeof object.targetMessageKey !== "object")
                        throw TypeError(".WAE2E.Message.EncReactionMessage.targetMessageKey: object expected");
                    message.targetMessageKey = $root.WAProtocol.MessageKey.fromObject(object.targetMessageKey);
                }
                if (object.encPayload != null)
                    if (typeof object.encPayload === "string")
                        $util.base64.decode(object.encPayload, message.encPayload = $util.newBuffer($util.base64.length(object.encPayload)), 0);
                    else if (object.encPayload.length >= 0)
                        message.encPayload = object.encPayload;
                if (object.encIV != null)
                    if (typeof object.encIV === "string")
                        $util.base64.decode(object.encIV, message.encIV = $util.newBuffer($util.base64.length(object.encIV)), 0);
                    else if (object.encIV.length >= 0)
                        message.encIV = object.encIV;
                return message;
            };

            /**
             * Creates a plain object from an EncReactionMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.EncReactionMessage
             * @static
             * @param {WAE2E.Message.EncReactionMessage} message EncReactionMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EncReactionMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.targetMessageKey = null;
                    if (options.bytes === String)
                        object.encPayload = "";
                    else {
                        object.encPayload = [];
                        if (options.bytes !== Array)
                            object.encPayload = $util.newBuffer(object.encPayload);
                    }
                    if (options.bytes === String)
                        object.encIV = "";
                    else {
                        object.encIV = [];
                        if (options.bytes !== Array)
                            object.encIV = $util.newBuffer(object.encIV);
                    }
                }
                if (message.targetMessageKey != null && message.hasOwnProperty("targetMessageKey"))
                    object.targetMessageKey = $root.WAProtocol.MessageKey.toObject(message.targetMessageKey, options);
                if (message.encPayload != null && message.hasOwnProperty("encPayload"))
                    object.encPayload = options.bytes === String ? $util.base64.encode(message.encPayload, 0, message.encPayload.length) : options.bytes === Array ? Array.prototype.slice.call(message.encPayload) : message.encPayload;
                if (message.encIV != null && message.hasOwnProperty("encIV"))
                    object.encIV = options.bytes === String ? $util.base64.encode(message.encIV, 0, message.encIV.length) : options.bytes === Array ? Array.prototype.slice.call(message.encIV) : message.encIV;
                return object;
            };

            /**
             * Converts this EncReactionMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.EncReactionMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EncReactionMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for EncReactionMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.EncReactionMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            EncReactionMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.EncReactionMessage";
            };

            return EncReactionMessage;
        })();

        Message.KeepInChatMessage = (function() {

            /**
             * Properties of a KeepInChatMessage.
             * @memberof WAE2E.Message
             * @interface IKeepInChatMessage
             * @property {WAProtocol.IMessageKey|null} [key] KeepInChatMessage key
             * @property {WAE2E.KeepType|null} [keepType] KeepInChatMessage keepType
             * @property {number|Long|null} [timestampMS] KeepInChatMessage timestampMS
             */

            /**
             * Constructs a new KeepInChatMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a KeepInChatMessage.
             * @implements IKeepInChatMessage
             * @constructor
             * @param {WAE2E.Message.IKeepInChatMessage=} [properties] Properties to set
             */
            function KeepInChatMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * KeepInChatMessage key.
             * @member {WAProtocol.IMessageKey|null|undefined} key
             * @memberof WAE2E.Message.KeepInChatMessage
             * @instance
             */
            KeepInChatMessage.prototype.key = null;

            /**
             * KeepInChatMessage keepType.
             * @member {WAE2E.KeepType} keepType
             * @memberof WAE2E.Message.KeepInChatMessage
             * @instance
             */
            KeepInChatMessage.prototype.keepType = 0;

            /**
             * KeepInChatMessage timestampMS.
             * @member {number|Long} timestampMS
             * @memberof WAE2E.Message.KeepInChatMessage
             * @instance
             */
            KeepInChatMessage.prototype.timestampMS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new KeepInChatMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.KeepInChatMessage
             * @static
             * @param {WAE2E.Message.IKeepInChatMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.KeepInChatMessage} KeepInChatMessage instance
             */
            KeepInChatMessage.create = function create(properties) {
                return new KeepInChatMessage(properties);
            };

            /**
             * Encodes the specified KeepInChatMessage message. Does not implicitly {@link WAE2E.Message.KeepInChatMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.KeepInChatMessage
             * @static
             * @param {WAE2E.Message.IKeepInChatMessage} message KeepInChatMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            KeepInChatMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    $root.WAProtocol.MessageKey.encode(message.key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.keepType != null && Object.hasOwnProperty.call(message, "keepType"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.keepType);
                if (message.timestampMS != null && Object.hasOwnProperty.call(message, "timestampMS"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.timestampMS);
                return writer;
            };

            /**
             * Encodes the specified KeepInChatMessage message, length delimited. Does not implicitly {@link WAE2E.Message.KeepInChatMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.KeepInChatMessage
             * @static
             * @param {WAE2E.Message.IKeepInChatMessage} message KeepInChatMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            KeepInChatMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a KeepInChatMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.KeepInChatMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.KeepInChatMessage} KeepInChatMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            KeepInChatMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.KeepInChatMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.key = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.keepType = reader.int32();
                            break;
                        }
                    case 3: {
                            message.timestampMS = reader.int64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a KeepInChatMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.KeepInChatMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.KeepInChatMessage} KeepInChatMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            KeepInChatMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a KeepInChatMessage message.
             * @function verify
             * @memberof WAE2E.Message.KeepInChatMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            KeepInChatMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key")) {
                    var error = $root.WAProtocol.MessageKey.verify(message.key);
                    if (error)
                        return "key." + error;
                }
                if (message.keepType != null && message.hasOwnProperty("keepType"))
                    switch (message.keepType) {
                    default:
                        return "keepType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.timestampMS != null && message.hasOwnProperty("timestampMS"))
                    if (!$util.isInteger(message.timestampMS) && !(message.timestampMS && $util.isInteger(message.timestampMS.low) && $util.isInteger(message.timestampMS.high)))
                        return "timestampMS: integer|Long expected";
                return null;
            };

            /**
             * Creates a KeepInChatMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.KeepInChatMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.KeepInChatMessage} KeepInChatMessage
             */
            KeepInChatMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.KeepInChatMessage)
                    return object;
                var message = new $root.WAE2E.Message.KeepInChatMessage();
                if (object.key != null) {
                    if (typeof object.key !== "object")
                        throw TypeError(".WAE2E.Message.KeepInChatMessage.key: object expected");
                    message.key = $root.WAProtocol.MessageKey.fromObject(object.key);
                }
                switch (object.keepType) {
                default:
                    if (typeof object.keepType === "number") {
                        message.keepType = object.keepType;
                        break;
                    }
                    break;
                case "UNKNOWN":
                case 0:
                    message.keepType = 0;
                    break;
                case "KEEP_FOR_ALL":
                case 1:
                    message.keepType = 1;
                    break;
                case "UNDO_KEEP_FOR_ALL":
                case 2:
                    message.keepType = 2;
                    break;
                }
                if (object.timestampMS != null)
                    if ($util.Long)
                        (message.timestampMS = $util.Long.fromValue(object.timestampMS)).unsigned = false;
                    else if (typeof object.timestampMS === "string")
                        message.timestampMS = parseInt(object.timestampMS, 10);
                    else if (typeof object.timestampMS === "number")
                        message.timestampMS = object.timestampMS;
                    else if (typeof object.timestampMS === "object")
                        message.timestampMS = new $util.LongBits(object.timestampMS.low >>> 0, object.timestampMS.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a KeepInChatMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.KeepInChatMessage
             * @static
             * @param {WAE2E.Message.KeepInChatMessage} message KeepInChatMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            KeepInChatMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.key = null;
                    object.keepType = options.enums === String ? "UNKNOWN" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.timestampMS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.timestampMS = options.longs === String ? "0" : 0;
                }
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = $root.WAProtocol.MessageKey.toObject(message.key, options);
                if (message.keepType != null && message.hasOwnProperty("keepType"))
                    object.keepType = options.enums === String ? $root.WAE2E.KeepType[message.keepType] === undefined ? message.keepType : $root.WAE2E.KeepType[message.keepType] : message.keepType;
                if (message.timestampMS != null && message.hasOwnProperty("timestampMS"))
                    if (typeof message.timestampMS === "number")
                        object.timestampMS = options.longs === String ? String(message.timestampMS) : message.timestampMS;
                    else
                        object.timestampMS = options.longs === String ? $util.Long.prototype.toString.call(message.timestampMS) : options.longs === Number ? new $util.LongBits(message.timestampMS.low >>> 0, message.timestampMS.high >>> 0).toNumber() : message.timestampMS;
                return object;
            };

            /**
             * Converts this KeepInChatMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.KeepInChatMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            KeepInChatMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for KeepInChatMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.KeepInChatMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            KeepInChatMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.KeepInChatMessage";
            };

            return KeepInChatMessage;
        })();

        Message.PollResultSnapshotMessage = (function() {

            /**
             * Properties of a PollResultSnapshotMessage.
             * @memberof WAE2E.Message
             * @interface IPollResultSnapshotMessage
             * @property {string|null} [name] PollResultSnapshotMessage name
             * @property {Array.<WAE2E.Message.PollResultSnapshotMessage.IPollVote>|null} [pollVotes] PollResultSnapshotMessage pollVotes
             * @property {WAE2E.IContextInfo|null} [contextInfo] PollResultSnapshotMessage contextInfo
             */

            /**
             * Constructs a new PollResultSnapshotMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a PollResultSnapshotMessage.
             * @implements IPollResultSnapshotMessage
             * @constructor
             * @param {WAE2E.Message.IPollResultSnapshotMessage=} [properties] Properties to set
             */
            function PollResultSnapshotMessage(properties) {
                this.pollVotes = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PollResultSnapshotMessage name.
             * @member {string} name
             * @memberof WAE2E.Message.PollResultSnapshotMessage
             * @instance
             */
            PollResultSnapshotMessage.prototype.name = "";

            /**
             * PollResultSnapshotMessage pollVotes.
             * @member {Array.<WAE2E.Message.PollResultSnapshotMessage.IPollVote>} pollVotes
             * @memberof WAE2E.Message.PollResultSnapshotMessage
             * @instance
             */
            PollResultSnapshotMessage.prototype.pollVotes = $util.emptyArray;

            /**
             * PollResultSnapshotMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.PollResultSnapshotMessage
             * @instance
             */
            PollResultSnapshotMessage.prototype.contextInfo = null;

            /**
             * Creates a new PollResultSnapshotMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.PollResultSnapshotMessage
             * @static
             * @param {WAE2E.Message.IPollResultSnapshotMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.PollResultSnapshotMessage} PollResultSnapshotMessage instance
             */
            PollResultSnapshotMessage.create = function create(properties) {
                return new PollResultSnapshotMessage(properties);
            };

            /**
             * Encodes the specified PollResultSnapshotMessage message. Does not implicitly {@link WAE2E.Message.PollResultSnapshotMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.PollResultSnapshotMessage
             * @static
             * @param {WAE2E.Message.IPollResultSnapshotMessage} message PollResultSnapshotMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PollResultSnapshotMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.pollVotes != null && message.pollVotes.length)
                    for (var i = 0; i < message.pollVotes.length; ++i)
                        $root.WAE2E.Message.PollResultSnapshotMessage.PollVote.encode(message.pollVotes[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PollResultSnapshotMessage message, length delimited. Does not implicitly {@link WAE2E.Message.PollResultSnapshotMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.PollResultSnapshotMessage
             * @static
             * @param {WAE2E.Message.IPollResultSnapshotMessage} message PollResultSnapshotMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PollResultSnapshotMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PollResultSnapshotMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.PollResultSnapshotMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.PollResultSnapshotMessage} PollResultSnapshotMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PollResultSnapshotMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PollResultSnapshotMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 2: {
                            if (!(message.pollVotes && message.pollVotes.length))
                                message.pollVotes = [];
                            message.pollVotes.push($root.WAE2E.Message.PollResultSnapshotMessage.PollVote.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PollResultSnapshotMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.PollResultSnapshotMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.PollResultSnapshotMessage} PollResultSnapshotMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PollResultSnapshotMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PollResultSnapshotMessage message.
             * @function verify
             * @memberof WAE2E.Message.PollResultSnapshotMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PollResultSnapshotMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.pollVotes != null && message.hasOwnProperty("pollVotes")) {
                    if (!Array.isArray(message.pollVotes))
                        return "pollVotes: array expected";
                    for (var i = 0; i < message.pollVotes.length; ++i) {
                        var error = $root.WAE2E.Message.PollResultSnapshotMessage.PollVote.verify(message.pollVotes[i]);
                        if (error)
                            return "pollVotes." + error;
                    }
                }
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                return null;
            };

            /**
             * Creates a PollResultSnapshotMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.PollResultSnapshotMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.PollResultSnapshotMessage} PollResultSnapshotMessage
             */
            PollResultSnapshotMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.PollResultSnapshotMessage)
                    return object;
                var message = new $root.WAE2E.Message.PollResultSnapshotMessage();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.pollVotes) {
                    if (!Array.isArray(object.pollVotes))
                        throw TypeError(".WAE2E.Message.PollResultSnapshotMessage.pollVotes: array expected");
                    message.pollVotes = [];
                    for (var i = 0; i < object.pollVotes.length; ++i) {
                        if (typeof object.pollVotes[i] !== "object")
                            throw TypeError(".WAE2E.Message.PollResultSnapshotMessage.pollVotes: object expected");
                        message.pollVotes[i] = $root.WAE2E.Message.PollResultSnapshotMessage.PollVote.fromObject(object.pollVotes[i]);
                    }
                }
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.PollResultSnapshotMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                return message;
            };

            /**
             * Creates a plain object from a PollResultSnapshotMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.PollResultSnapshotMessage
             * @static
             * @param {WAE2E.Message.PollResultSnapshotMessage} message PollResultSnapshotMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PollResultSnapshotMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.pollVotes = [];
                if (options.defaults) {
                    object.name = "";
                    object.contextInfo = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.pollVotes && message.pollVotes.length) {
                    object.pollVotes = [];
                    for (var j = 0; j < message.pollVotes.length; ++j)
                        object.pollVotes[j] = $root.WAE2E.Message.PollResultSnapshotMessage.PollVote.toObject(message.pollVotes[j], options);
                }
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                return object;
            };

            /**
             * Converts this PollResultSnapshotMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.PollResultSnapshotMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PollResultSnapshotMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PollResultSnapshotMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.PollResultSnapshotMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PollResultSnapshotMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.PollResultSnapshotMessage";
            };

            PollResultSnapshotMessage.PollVote = (function() {

                /**
                 * Properties of a PollVote.
                 * @memberof WAE2E.Message.PollResultSnapshotMessage
                 * @interface IPollVote
                 * @property {string|null} [optionName] PollVote optionName
                 * @property {number|Long|null} [optionVoteCount] PollVote optionVoteCount
                 */

                /**
                 * Constructs a new PollVote.
                 * @memberof WAE2E.Message.PollResultSnapshotMessage
                 * @classdesc Represents a PollVote.
                 * @implements IPollVote
                 * @constructor
                 * @param {WAE2E.Message.PollResultSnapshotMessage.IPollVote=} [properties] Properties to set
                 */
                function PollVote(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * PollVote optionName.
                 * @member {string} optionName
                 * @memberof WAE2E.Message.PollResultSnapshotMessage.PollVote
                 * @instance
                 */
                PollVote.prototype.optionName = "";

                /**
                 * PollVote optionVoteCount.
                 * @member {number|Long} optionVoteCount
                 * @memberof WAE2E.Message.PollResultSnapshotMessage.PollVote
                 * @instance
                 */
                PollVote.prototype.optionVoteCount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * Creates a new PollVote instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.PollResultSnapshotMessage.PollVote
                 * @static
                 * @param {WAE2E.Message.PollResultSnapshotMessage.IPollVote=} [properties] Properties to set
                 * @returns {WAE2E.Message.PollResultSnapshotMessage.PollVote} PollVote instance
                 */
                PollVote.create = function create(properties) {
                    return new PollVote(properties);
                };

                /**
                 * Encodes the specified PollVote message. Does not implicitly {@link WAE2E.Message.PollResultSnapshotMessage.PollVote.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.PollResultSnapshotMessage.PollVote
                 * @static
                 * @param {WAE2E.Message.PollResultSnapshotMessage.IPollVote} message PollVote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PollVote.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.optionName != null && Object.hasOwnProperty.call(message, "optionName"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.optionName);
                    if (message.optionVoteCount != null && Object.hasOwnProperty.call(message, "optionVoteCount"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.optionVoteCount);
                    return writer;
                };

                /**
                 * Encodes the specified PollVote message, length delimited. Does not implicitly {@link WAE2E.Message.PollResultSnapshotMessage.PollVote.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.PollResultSnapshotMessage.PollVote
                 * @static
                 * @param {WAE2E.Message.PollResultSnapshotMessage.IPollVote} message PollVote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PollVote.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a PollVote message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.PollResultSnapshotMessage.PollVote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.PollResultSnapshotMessage.PollVote} PollVote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PollVote.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PollResultSnapshotMessage.PollVote();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.optionName = reader.string();
                                break;
                            }
                        case 2: {
                                message.optionVoteCount = reader.int64();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a PollVote message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.PollResultSnapshotMessage.PollVote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.PollResultSnapshotMessage.PollVote} PollVote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PollVote.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a PollVote message.
                 * @function verify
                 * @memberof WAE2E.Message.PollResultSnapshotMessage.PollVote
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PollVote.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.optionName != null && message.hasOwnProperty("optionName"))
                        if (!$util.isString(message.optionName))
                            return "optionName: string expected";
                    if (message.optionVoteCount != null && message.hasOwnProperty("optionVoteCount"))
                        if (!$util.isInteger(message.optionVoteCount) && !(message.optionVoteCount && $util.isInteger(message.optionVoteCount.low) && $util.isInteger(message.optionVoteCount.high)))
                            return "optionVoteCount: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a PollVote message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.PollResultSnapshotMessage.PollVote
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.PollResultSnapshotMessage.PollVote} PollVote
                 */
                PollVote.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.PollResultSnapshotMessage.PollVote)
                        return object;
                    var message = new $root.WAE2E.Message.PollResultSnapshotMessage.PollVote();
                    if (object.optionName != null)
                        message.optionName = String(object.optionName);
                    if (object.optionVoteCount != null)
                        if ($util.Long)
                            (message.optionVoteCount = $util.Long.fromValue(object.optionVoteCount)).unsigned = false;
                        else if (typeof object.optionVoteCount === "string")
                            message.optionVoteCount = parseInt(object.optionVoteCount, 10);
                        else if (typeof object.optionVoteCount === "number")
                            message.optionVoteCount = object.optionVoteCount;
                        else if (typeof object.optionVoteCount === "object")
                            message.optionVoteCount = new $util.LongBits(object.optionVoteCount.low >>> 0, object.optionVoteCount.high >>> 0).toNumber();
                    return message;
                };

                /**
                 * Creates a plain object from a PollVote message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.PollResultSnapshotMessage.PollVote
                 * @static
                 * @param {WAE2E.Message.PollResultSnapshotMessage.PollVote} message PollVote
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PollVote.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.optionName = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.optionVoteCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.optionVoteCount = options.longs === String ? "0" : 0;
                    }
                    if (message.optionName != null && message.hasOwnProperty("optionName"))
                        object.optionName = message.optionName;
                    if (message.optionVoteCount != null && message.hasOwnProperty("optionVoteCount"))
                        if (typeof message.optionVoteCount === "number")
                            object.optionVoteCount = options.longs === String ? String(message.optionVoteCount) : message.optionVoteCount;
                        else
                            object.optionVoteCount = options.longs === String ? $util.Long.prototype.toString.call(message.optionVoteCount) : options.longs === Number ? new $util.LongBits(message.optionVoteCount.low >>> 0, message.optionVoteCount.high >>> 0).toNumber() : message.optionVoteCount;
                    return object;
                };

                /**
                 * Converts this PollVote to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.PollResultSnapshotMessage.PollVote
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PollVote.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for PollVote
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.PollResultSnapshotMessage.PollVote
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                PollVote.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.PollResultSnapshotMessage.PollVote";
                };

                return PollVote;
            })();

            return PollResultSnapshotMessage;
        })();

        Message.PollVoteMessage = (function() {

            /**
             * Properties of a PollVoteMessage.
             * @memberof WAE2E.Message
             * @interface IPollVoteMessage
             * @property {Array.<Uint8Array>|null} [selectedOptions] PollVoteMessage selectedOptions
             */

            /**
             * Constructs a new PollVoteMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a PollVoteMessage.
             * @implements IPollVoteMessage
             * @constructor
             * @param {WAE2E.Message.IPollVoteMessage=} [properties] Properties to set
             */
            function PollVoteMessage(properties) {
                this.selectedOptions = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PollVoteMessage selectedOptions.
             * @member {Array.<Uint8Array>} selectedOptions
             * @memberof WAE2E.Message.PollVoteMessage
             * @instance
             */
            PollVoteMessage.prototype.selectedOptions = $util.emptyArray;

            /**
             * Creates a new PollVoteMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.PollVoteMessage
             * @static
             * @param {WAE2E.Message.IPollVoteMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.PollVoteMessage} PollVoteMessage instance
             */
            PollVoteMessage.create = function create(properties) {
                return new PollVoteMessage(properties);
            };

            /**
             * Encodes the specified PollVoteMessage message. Does not implicitly {@link WAE2E.Message.PollVoteMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.PollVoteMessage
             * @static
             * @param {WAE2E.Message.IPollVoteMessage} message PollVoteMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PollVoteMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.selectedOptions != null && message.selectedOptions.length)
                    for (var i = 0; i < message.selectedOptions.length; ++i)
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.selectedOptions[i]);
                return writer;
            };

            /**
             * Encodes the specified PollVoteMessage message, length delimited. Does not implicitly {@link WAE2E.Message.PollVoteMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.PollVoteMessage
             * @static
             * @param {WAE2E.Message.IPollVoteMessage} message PollVoteMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PollVoteMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PollVoteMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.PollVoteMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.PollVoteMessage} PollVoteMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PollVoteMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PollVoteMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.selectedOptions && message.selectedOptions.length))
                                message.selectedOptions = [];
                            message.selectedOptions.push(reader.bytes());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PollVoteMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.PollVoteMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.PollVoteMessage} PollVoteMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PollVoteMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PollVoteMessage message.
             * @function verify
             * @memberof WAE2E.Message.PollVoteMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PollVoteMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.selectedOptions != null && message.hasOwnProperty("selectedOptions")) {
                    if (!Array.isArray(message.selectedOptions))
                        return "selectedOptions: array expected";
                    for (var i = 0; i < message.selectedOptions.length; ++i)
                        if (!(message.selectedOptions[i] && typeof message.selectedOptions[i].length === "number" || $util.isString(message.selectedOptions[i])))
                            return "selectedOptions: buffer[] expected";
                }
                return null;
            };

            /**
             * Creates a PollVoteMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.PollVoteMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.PollVoteMessage} PollVoteMessage
             */
            PollVoteMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.PollVoteMessage)
                    return object;
                var message = new $root.WAE2E.Message.PollVoteMessage();
                if (object.selectedOptions) {
                    if (!Array.isArray(object.selectedOptions))
                        throw TypeError(".WAE2E.Message.PollVoteMessage.selectedOptions: array expected");
                    message.selectedOptions = [];
                    for (var i = 0; i < object.selectedOptions.length; ++i)
                        if (typeof object.selectedOptions[i] === "string")
                            $util.base64.decode(object.selectedOptions[i], message.selectedOptions[i] = $util.newBuffer($util.base64.length(object.selectedOptions[i])), 0);
                        else if (object.selectedOptions[i].length >= 0)
                            message.selectedOptions[i] = object.selectedOptions[i];
                }
                return message;
            };

            /**
             * Creates a plain object from a PollVoteMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.PollVoteMessage
             * @static
             * @param {WAE2E.Message.PollVoteMessage} message PollVoteMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PollVoteMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.selectedOptions = [];
                if (message.selectedOptions && message.selectedOptions.length) {
                    object.selectedOptions = [];
                    for (var j = 0; j < message.selectedOptions.length; ++j)
                        object.selectedOptions[j] = options.bytes === String ? $util.base64.encode(message.selectedOptions[j], 0, message.selectedOptions[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.selectedOptions[j]) : message.selectedOptions[j];
                }
                return object;
            };

            /**
             * Converts this PollVoteMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.PollVoteMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PollVoteMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PollVoteMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.PollVoteMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PollVoteMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.PollVoteMessage";
            };

            return PollVoteMessage;
        })();

        Message.PollEncValue = (function() {

            /**
             * Properties of a PollEncValue.
             * @memberof WAE2E.Message
             * @interface IPollEncValue
             * @property {Uint8Array|null} [encPayload] PollEncValue encPayload
             * @property {Uint8Array|null} [encIV] PollEncValue encIV
             */

            /**
             * Constructs a new PollEncValue.
             * @memberof WAE2E.Message
             * @classdesc Represents a PollEncValue.
             * @implements IPollEncValue
             * @constructor
             * @param {WAE2E.Message.IPollEncValue=} [properties] Properties to set
             */
            function PollEncValue(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PollEncValue encPayload.
             * @member {Uint8Array} encPayload
             * @memberof WAE2E.Message.PollEncValue
             * @instance
             */
            PollEncValue.prototype.encPayload = $util.newBuffer([]);

            /**
             * PollEncValue encIV.
             * @member {Uint8Array} encIV
             * @memberof WAE2E.Message.PollEncValue
             * @instance
             */
            PollEncValue.prototype.encIV = $util.newBuffer([]);

            /**
             * Creates a new PollEncValue instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.PollEncValue
             * @static
             * @param {WAE2E.Message.IPollEncValue=} [properties] Properties to set
             * @returns {WAE2E.Message.PollEncValue} PollEncValue instance
             */
            PollEncValue.create = function create(properties) {
                return new PollEncValue(properties);
            };

            /**
             * Encodes the specified PollEncValue message. Does not implicitly {@link WAE2E.Message.PollEncValue.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.PollEncValue
             * @static
             * @param {WAE2E.Message.IPollEncValue} message PollEncValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PollEncValue.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.encPayload != null && Object.hasOwnProperty.call(message, "encPayload"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.encPayload);
                if (message.encIV != null && Object.hasOwnProperty.call(message, "encIV"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.encIV);
                return writer;
            };

            /**
             * Encodes the specified PollEncValue message, length delimited. Does not implicitly {@link WAE2E.Message.PollEncValue.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.PollEncValue
             * @static
             * @param {WAE2E.Message.IPollEncValue} message PollEncValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PollEncValue.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PollEncValue message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.PollEncValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.PollEncValue} PollEncValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PollEncValue.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PollEncValue();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.encPayload = reader.bytes();
                            break;
                        }
                    case 2: {
                            message.encIV = reader.bytes();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PollEncValue message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.PollEncValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.PollEncValue} PollEncValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PollEncValue.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PollEncValue message.
             * @function verify
             * @memberof WAE2E.Message.PollEncValue
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PollEncValue.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.encPayload != null && message.hasOwnProperty("encPayload"))
                    if (!(message.encPayload && typeof message.encPayload.length === "number" || $util.isString(message.encPayload)))
                        return "encPayload: buffer expected";
                if (message.encIV != null && message.hasOwnProperty("encIV"))
                    if (!(message.encIV && typeof message.encIV.length === "number" || $util.isString(message.encIV)))
                        return "encIV: buffer expected";
                return null;
            };

            /**
             * Creates a PollEncValue message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.PollEncValue
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.PollEncValue} PollEncValue
             */
            PollEncValue.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.PollEncValue)
                    return object;
                var message = new $root.WAE2E.Message.PollEncValue();
                if (object.encPayload != null)
                    if (typeof object.encPayload === "string")
                        $util.base64.decode(object.encPayload, message.encPayload = $util.newBuffer($util.base64.length(object.encPayload)), 0);
                    else if (object.encPayload.length >= 0)
                        message.encPayload = object.encPayload;
                if (object.encIV != null)
                    if (typeof object.encIV === "string")
                        $util.base64.decode(object.encIV, message.encIV = $util.newBuffer($util.base64.length(object.encIV)), 0);
                    else if (object.encIV.length >= 0)
                        message.encIV = object.encIV;
                return message;
            };

            /**
             * Creates a plain object from a PollEncValue message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.PollEncValue
             * @static
             * @param {WAE2E.Message.PollEncValue} message PollEncValue
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PollEncValue.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.encPayload = "";
                    else {
                        object.encPayload = [];
                        if (options.bytes !== Array)
                            object.encPayload = $util.newBuffer(object.encPayload);
                    }
                    if (options.bytes === String)
                        object.encIV = "";
                    else {
                        object.encIV = [];
                        if (options.bytes !== Array)
                            object.encIV = $util.newBuffer(object.encIV);
                    }
                }
                if (message.encPayload != null && message.hasOwnProperty("encPayload"))
                    object.encPayload = options.bytes === String ? $util.base64.encode(message.encPayload, 0, message.encPayload.length) : options.bytes === Array ? Array.prototype.slice.call(message.encPayload) : message.encPayload;
                if (message.encIV != null && message.hasOwnProperty("encIV"))
                    object.encIV = options.bytes === String ? $util.base64.encode(message.encIV, 0, message.encIV.length) : options.bytes === Array ? Array.prototype.slice.call(message.encIV) : message.encIV;
                return object;
            };

            /**
             * Converts this PollEncValue to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.PollEncValue
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PollEncValue.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PollEncValue
             * @function getTypeUrl
             * @memberof WAE2E.Message.PollEncValue
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PollEncValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.PollEncValue";
            };

            return PollEncValue;
        })();

        Message.PollUpdateMessageMetadata = (function() {

            /**
             * Properties of a PollUpdateMessageMetadata.
             * @memberof WAE2E.Message
             * @interface IPollUpdateMessageMetadata
             */

            /**
             * Constructs a new PollUpdateMessageMetadata.
             * @memberof WAE2E.Message
             * @classdesc Represents a PollUpdateMessageMetadata.
             * @implements IPollUpdateMessageMetadata
             * @constructor
             * @param {WAE2E.Message.IPollUpdateMessageMetadata=} [properties] Properties to set
             */
            function PollUpdateMessageMetadata(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new PollUpdateMessageMetadata instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.PollUpdateMessageMetadata
             * @static
             * @param {WAE2E.Message.IPollUpdateMessageMetadata=} [properties] Properties to set
             * @returns {WAE2E.Message.PollUpdateMessageMetadata} PollUpdateMessageMetadata instance
             */
            PollUpdateMessageMetadata.create = function create(properties) {
                return new PollUpdateMessageMetadata(properties);
            };

            /**
             * Encodes the specified PollUpdateMessageMetadata message. Does not implicitly {@link WAE2E.Message.PollUpdateMessageMetadata.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.PollUpdateMessageMetadata
             * @static
             * @param {WAE2E.Message.IPollUpdateMessageMetadata} message PollUpdateMessageMetadata message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PollUpdateMessageMetadata.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified PollUpdateMessageMetadata message, length delimited. Does not implicitly {@link WAE2E.Message.PollUpdateMessageMetadata.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.PollUpdateMessageMetadata
             * @static
             * @param {WAE2E.Message.IPollUpdateMessageMetadata} message PollUpdateMessageMetadata message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PollUpdateMessageMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PollUpdateMessageMetadata message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.PollUpdateMessageMetadata
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.PollUpdateMessageMetadata} PollUpdateMessageMetadata
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PollUpdateMessageMetadata.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PollUpdateMessageMetadata();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PollUpdateMessageMetadata message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.PollUpdateMessageMetadata
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.PollUpdateMessageMetadata} PollUpdateMessageMetadata
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PollUpdateMessageMetadata.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PollUpdateMessageMetadata message.
             * @function verify
             * @memberof WAE2E.Message.PollUpdateMessageMetadata
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PollUpdateMessageMetadata.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a PollUpdateMessageMetadata message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.PollUpdateMessageMetadata
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.PollUpdateMessageMetadata} PollUpdateMessageMetadata
             */
            PollUpdateMessageMetadata.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.PollUpdateMessageMetadata)
                    return object;
                return new $root.WAE2E.Message.PollUpdateMessageMetadata();
            };

            /**
             * Creates a plain object from a PollUpdateMessageMetadata message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.PollUpdateMessageMetadata
             * @static
             * @param {WAE2E.Message.PollUpdateMessageMetadata} message PollUpdateMessageMetadata
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PollUpdateMessageMetadata.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this PollUpdateMessageMetadata to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.PollUpdateMessageMetadata
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PollUpdateMessageMetadata.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PollUpdateMessageMetadata
             * @function getTypeUrl
             * @memberof WAE2E.Message.PollUpdateMessageMetadata
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PollUpdateMessageMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.PollUpdateMessageMetadata";
            };

            return PollUpdateMessageMetadata;
        })();

        Message.PollUpdateMessage = (function() {

            /**
             * Properties of a PollUpdateMessage.
             * @memberof WAE2E.Message
             * @interface IPollUpdateMessage
             * @property {WAProtocol.IMessageKey|null} [pollCreationMessageKey] PollUpdateMessage pollCreationMessageKey
             * @property {WAE2E.Message.IPollEncValue|null} [vote] PollUpdateMessage vote
             * @property {WAE2E.Message.IPollUpdateMessageMetadata|null} [metadata] PollUpdateMessage metadata
             * @property {number|Long|null} [senderTimestampMS] PollUpdateMessage senderTimestampMS
             */

            /**
             * Constructs a new PollUpdateMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a PollUpdateMessage.
             * @implements IPollUpdateMessage
             * @constructor
             * @param {WAE2E.Message.IPollUpdateMessage=} [properties] Properties to set
             */
            function PollUpdateMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PollUpdateMessage pollCreationMessageKey.
             * @member {WAProtocol.IMessageKey|null|undefined} pollCreationMessageKey
             * @memberof WAE2E.Message.PollUpdateMessage
             * @instance
             */
            PollUpdateMessage.prototype.pollCreationMessageKey = null;

            /**
             * PollUpdateMessage vote.
             * @member {WAE2E.Message.IPollEncValue|null|undefined} vote
             * @memberof WAE2E.Message.PollUpdateMessage
             * @instance
             */
            PollUpdateMessage.prototype.vote = null;

            /**
             * PollUpdateMessage metadata.
             * @member {WAE2E.Message.IPollUpdateMessageMetadata|null|undefined} metadata
             * @memberof WAE2E.Message.PollUpdateMessage
             * @instance
             */
            PollUpdateMessage.prototype.metadata = null;

            /**
             * PollUpdateMessage senderTimestampMS.
             * @member {number|Long} senderTimestampMS
             * @memberof WAE2E.Message.PollUpdateMessage
             * @instance
             */
            PollUpdateMessage.prototype.senderTimestampMS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new PollUpdateMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.PollUpdateMessage
             * @static
             * @param {WAE2E.Message.IPollUpdateMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.PollUpdateMessage} PollUpdateMessage instance
             */
            PollUpdateMessage.create = function create(properties) {
                return new PollUpdateMessage(properties);
            };

            /**
             * Encodes the specified PollUpdateMessage message. Does not implicitly {@link WAE2E.Message.PollUpdateMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.PollUpdateMessage
             * @static
             * @param {WAE2E.Message.IPollUpdateMessage} message PollUpdateMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PollUpdateMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.pollCreationMessageKey != null && Object.hasOwnProperty.call(message, "pollCreationMessageKey"))
                    $root.WAProtocol.MessageKey.encode(message.pollCreationMessageKey, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.vote != null && Object.hasOwnProperty.call(message, "vote"))
                    $root.WAE2E.Message.PollEncValue.encode(message.vote, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                    $root.WAE2E.Message.PollUpdateMessageMetadata.encode(message.metadata, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.senderTimestampMS != null && Object.hasOwnProperty.call(message, "senderTimestampMS"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.senderTimestampMS);
                return writer;
            };

            /**
             * Encodes the specified PollUpdateMessage message, length delimited. Does not implicitly {@link WAE2E.Message.PollUpdateMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.PollUpdateMessage
             * @static
             * @param {WAE2E.Message.IPollUpdateMessage} message PollUpdateMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PollUpdateMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PollUpdateMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.PollUpdateMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.PollUpdateMessage} PollUpdateMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PollUpdateMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PollUpdateMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.pollCreationMessageKey = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.vote = $root.WAE2E.Message.PollEncValue.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.metadata = $root.WAE2E.Message.PollUpdateMessageMetadata.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.senderTimestampMS = reader.int64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PollUpdateMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.PollUpdateMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.PollUpdateMessage} PollUpdateMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PollUpdateMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PollUpdateMessage message.
             * @function verify
             * @memberof WAE2E.Message.PollUpdateMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PollUpdateMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pollCreationMessageKey != null && message.hasOwnProperty("pollCreationMessageKey")) {
                    var error = $root.WAProtocol.MessageKey.verify(message.pollCreationMessageKey);
                    if (error)
                        return "pollCreationMessageKey." + error;
                }
                if (message.vote != null && message.hasOwnProperty("vote")) {
                    var error = $root.WAE2E.Message.PollEncValue.verify(message.vote);
                    if (error)
                        return "vote." + error;
                }
                if (message.metadata != null && message.hasOwnProperty("metadata")) {
                    var error = $root.WAE2E.Message.PollUpdateMessageMetadata.verify(message.metadata);
                    if (error)
                        return "metadata." + error;
                }
                if (message.senderTimestampMS != null && message.hasOwnProperty("senderTimestampMS"))
                    if (!$util.isInteger(message.senderTimestampMS) && !(message.senderTimestampMS && $util.isInteger(message.senderTimestampMS.low) && $util.isInteger(message.senderTimestampMS.high)))
                        return "senderTimestampMS: integer|Long expected";
                return null;
            };

            /**
             * Creates a PollUpdateMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.PollUpdateMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.PollUpdateMessage} PollUpdateMessage
             */
            PollUpdateMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.PollUpdateMessage)
                    return object;
                var message = new $root.WAE2E.Message.PollUpdateMessage();
                if (object.pollCreationMessageKey != null) {
                    if (typeof object.pollCreationMessageKey !== "object")
                        throw TypeError(".WAE2E.Message.PollUpdateMessage.pollCreationMessageKey: object expected");
                    message.pollCreationMessageKey = $root.WAProtocol.MessageKey.fromObject(object.pollCreationMessageKey);
                }
                if (object.vote != null) {
                    if (typeof object.vote !== "object")
                        throw TypeError(".WAE2E.Message.PollUpdateMessage.vote: object expected");
                    message.vote = $root.WAE2E.Message.PollEncValue.fromObject(object.vote);
                }
                if (object.metadata != null) {
                    if (typeof object.metadata !== "object")
                        throw TypeError(".WAE2E.Message.PollUpdateMessage.metadata: object expected");
                    message.metadata = $root.WAE2E.Message.PollUpdateMessageMetadata.fromObject(object.metadata);
                }
                if (object.senderTimestampMS != null)
                    if ($util.Long)
                        (message.senderTimestampMS = $util.Long.fromValue(object.senderTimestampMS)).unsigned = false;
                    else if (typeof object.senderTimestampMS === "string")
                        message.senderTimestampMS = parseInt(object.senderTimestampMS, 10);
                    else if (typeof object.senderTimestampMS === "number")
                        message.senderTimestampMS = object.senderTimestampMS;
                    else if (typeof object.senderTimestampMS === "object")
                        message.senderTimestampMS = new $util.LongBits(object.senderTimestampMS.low >>> 0, object.senderTimestampMS.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a PollUpdateMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.PollUpdateMessage
             * @static
             * @param {WAE2E.Message.PollUpdateMessage} message PollUpdateMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PollUpdateMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.pollCreationMessageKey = null;
                    object.vote = null;
                    object.metadata = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.senderTimestampMS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.senderTimestampMS = options.longs === String ? "0" : 0;
                }
                if (message.pollCreationMessageKey != null && message.hasOwnProperty("pollCreationMessageKey"))
                    object.pollCreationMessageKey = $root.WAProtocol.MessageKey.toObject(message.pollCreationMessageKey, options);
                if (message.vote != null && message.hasOwnProperty("vote"))
                    object.vote = $root.WAE2E.Message.PollEncValue.toObject(message.vote, options);
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    object.metadata = $root.WAE2E.Message.PollUpdateMessageMetadata.toObject(message.metadata, options);
                if (message.senderTimestampMS != null && message.hasOwnProperty("senderTimestampMS"))
                    if (typeof message.senderTimestampMS === "number")
                        object.senderTimestampMS = options.longs === String ? String(message.senderTimestampMS) : message.senderTimestampMS;
                    else
                        object.senderTimestampMS = options.longs === String ? $util.Long.prototype.toString.call(message.senderTimestampMS) : options.longs === Number ? new $util.LongBits(message.senderTimestampMS.low >>> 0, message.senderTimestampMS.high >>> 0).toNumber() : message.senderTimestampMS;
                return object;
            };

            /**
             * Converts this PollUpdateMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.PollUpdateMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PollUpdateMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PollUpdateMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.PollUpdateMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PollUpdateMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.PollUpdateMessage";
            };

            return PollUpdateMessage;
        })();

        Message.PollCreationMessage = (function() {

            /**
             * Properties of a PollCreationMessage.
             * @memberof WAE2E.Message
             * @interface IPollCreationMessage
             * @property {Uint8Array|null} [encKey] PollCreationMessage encKey
             * @property {string|null} [name] PollCreationMessage name
             * @property {Array.<WAE2E.Message.PollCreationMessage.IOption>|null} [options] PollCreationMessage options
             * @property {number|null} [selectableOptionsCount] PollCreationMessage selectableOptionsCount
             * @property {WAE2E.IContextInfo|null} [contextInfo] PollCreationMessage contextInfo
             */

            /**
             * Constructs a new PollCreationMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a PollCreationMessage.
             * @implements IPollCreationMessage
             * @constructor
             * @param {WAE2E.Message.IPollCreationMessage=} [properties] Properties to set
             */
            function PollCreationMessage(properties) {
                this.options = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PollCreationMessage encKey.
             * @member {Uint8Array} encKey
             * @memberof WAE2E.Message.PollCreationMessage
             * @instance
             */
            PollCreationMessage.prototype.encKey = $util.newBuffer([]);

            /**
             * PollCreationMessage name.
             * @member {string} name
             * @memberof WAE2E.Message.PollCreationMessage
             * @instance
             */
            PollCreationMessage.prototype.name = "";

            /**
             * PollCreationMessage options.
             * @member {Array.<WAE2E.Message.PollCreationMessage.IOption>} options
             * @memberof WAE2E.Message.PollCreationMessage
             * @instance
             */
            PollCreationMessage.prototype.options = $util.emptyArray;

            /**
             * PollCreationMessage selectableOptionsCount.
             * @member {number} selectableOptionsCount
             * @memberof WAE2E.Message.PollCreationMessage
             * @instance
             */
            PollCreationMessage.prototype.selectableOptionsCount = 0;

            /**
             * PollCreationMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.PollCreationMessage
             * @instance
             */
            PollCreationMessage.prototype.contextInfo = null;

            /**
             * Creates a new PollCreationMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.PollCreationMessage
             * @static
             * @param {WAE2E.Message.IPollCreationMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.PollCreationMessage} PollCreationMessage instance
             */
            PollCreationMessage.create = function create(properties) {
                return new PollCreationMessage(properties);
            };

            /**
             * Encodes the specified PollCreationMessage message. Does not implicitly {@link WAE2E.Message.PollCreationMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.PollCreationMessage
             * @static
             * @param {WAE2E.Message.IPollCreationMessage} message PollCreationMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PollCreationMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.encKey != null && Object.hasOwnProperty.call(message, "encKey"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.encKey);
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                if (message.options != null && message.options.length)
                    for (var i = 0; i < message.options.length; ++i)
                        $root.WAE2E.Message.PollCreationMessage.Option.encode(message.options[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.selectableOptionsCount != null && Object.hasOwnProperty.call(message, "selectableOptionsCount"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.selectableOptionsCount);
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PollCreationMessage message, length delimited. Does not implicitly {@link WAE2E.Message.PollCreationMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.PollCreationMessage
             * @static
             * @param {WAE2E.Message.IPollCreationMessage} message PollCreationMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PollCreationMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PollCreationMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.PollCreationMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.PollCreationMessage} PollCreationMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PollCreationMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PollCreationMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.encKey = reader.bytes();
                            break;
                        }
                    case 2: {
                            message.name = reader.string();
                            break;
                        }
                    case 3: {
                            if (!(message.options && message.options.length))
                                message.options = [];
                            message.options.push($root.WAE2E.Message.PollCreationMessage.Option.decode(reader, reader.uint32()));
                            break;
                        }
                    case 4: {
                            message.selectableOptionsCount = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PollCreationMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.PollCreationMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.PollCreationMessage} PollCreationMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PollCreationMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PollCreationMessage message.
             * @function verify
             * @memberof WAE2E.Message.PollCreationMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PollCreationMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.encKey != null && message.hasOwnProperty("encKey"))
                    if (!(message.encKey && typeof message.encKey.length === "number" || $util.isString(message.encKey)))
                        return "encKey: buffer expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    if (!Array.isArray(message.options))
                        return "options: array expected";
                    for (var i = 0; i < message.options.length; ++i) {
                        var error = $root.WAE2E.Message.PollCreationMessage.Option.verify(message.options[i]);
                        if (error)
                            return "options." + error;
                    }
                }
                if (message.selectableOptionsCount != null && message.hasOwnProperty("selectableOptionsCount"))
                    if (!$util.isInteger(message.selectableOptionsCount))
                        return "selectableOptionsCount: integer expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                return null;
            };

            /**
             * Creates a PollCreationMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.PollCreationMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.PollCreationMessage} PollCreationMessage
             */
            PollCreationMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.PollCreationMessage)
                    return object;
                var message = new $root.WAE2E.Message.PollCreationMessage();
                if (object.encKey != null)
                    if (typeof object.encKey === "string")
                        $util.base64.decode(object.encKey, message.encKey = $util.newBuffer($util.base64.length(object.encKey)), 0);
                    else if (object.encKey.length >= 0)
                        message.encKey = object.encKey;
                if (object.name != null)
                    message.name = String(object.name);
                if (object.options) {
                    if (!Array.isArray(object.options))
                        throw TypeError(".WAE2E.Message.PollCreationMessage.options: array expected");
                    message.options = [];
                    for (var i = 0; i < object.options.length; ++i) {
                        if (typeof object.options[i] !== "object")
                            throw TypeError(".WAE2E.Message.PollCreationMessage.options: object expected");
                        message.options[i] = $root.WAE2E.Message.PollCreationMessage.Option.fromObject(object.options[i]);
                    }
                }
                if (object.selectableOptionsCount != null)
                    message.selectableOptionsCount = object.selectableOptionsCount >>> 0;
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.PollCreationMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                return message;
            };

            /**
             * Creates a plain object from a PollCreationMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.PollCreationMessage
             * @static
             * @param {WAE2E.Message.PollCreationMessage} message PollCreationMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PollCreationMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.options = [];
                if (options.defaults) {
                    if (options.bytes === String)
                        object.encKey = "";
                    else {
                        object.encKey = [];
                        if (options.bytes !== Array)
                            object.encKey = $util.newBuffer(object.encKey);
                    }
                    object.name = "";
                    object.selectableOptionsCount = 0;
                    object.contextInfo = null;
                }
                if (message.encKey != null && message.hasOwnProperty("encKey"))
                    object.encKey = options.bytes === String ? $util.base64.encode(message.encKey, 0, message.encKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.encKey) : message.encKey;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.options && message.options.length) {
                    object.options = [];
                    for (var j = 0; j < message.options.length; ++j)
                        object.options[j] = $root.WAE2E.Message.PollCreationMessage.Option.toObject(message.options[j], options);
                }
                if (message.selectableOptionsCount != null && message.hasOwnProperty("selectableOptionsCount"))
                    object.selectableOptionsCount = message.selectableOptionsCount;
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                return object;
            };

            /**
             * Converts this PollCreationMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.PollCreationMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PollCreationMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PollCreationMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.PollCreationMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PollCreationMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.PollCreationMessage";
            };

            PollCreationMessage.Option = (function() {

                /**
                 * Properties of an Option.
                 * @memberof WAE2E.Message.PollCreationMessage
                 * @interface IOption
                 * @property {string|null} [optionName] Option optionName
                 */

                /**
                 * Constructs a new Option.
                 * @memberof WAE2E.Message.PollCreationMessage
                 * @classdesc Represents an Option.
                 * @implements IOption
                 * @constructor
                 * @param {WAE2E.Message.PollCreationMessage.IOption=} [properties] Properties to set
                 */
                function Option(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Option optionName.
                 * @member {string} optionName
                 * @memberof WAE2E.Message.PollCreationMessage.Option
                 * @instance
                 */
                Option.prototype.optionName = "";

                /**
                 * Creates a new Option instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.PollCreationMessage.Option
                 * @static
                 * @param {WAE2E.Message.PollCreationMessage.IOption=} [properties] Properties to set
                 * @returns {WAE2E.Message.PollCreationMessage.Option} Option instance
                 */
                Option.create = function create(properties) {
                    return new Option(properties);
                };

                /**
                 * Encodes the specified Option message. Does not implicitly {@link WAE2E.Message.PollCreationMessage.Option.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.PollCreationMessage.Option
                 * @static
                 * @param {WAE2E.Message.PollCreationMessage.IOption} message Option message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Option.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.optionName != null && Object.hasOwnProperty.call(message, "optionName"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.optionName);
                    return writer;
                };

                /**
                 * Encodes the specified Option message, length delimited. Does not implicitly {@link WAE2E.Message.PollCreationMessage.Option.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.PollCreationMessage.Option
                 * @static
                 * @param {WAE2E.Message.PollCreationMessage.IOption} message Option message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Option.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an Option message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.PollCreationMessage.Option
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.PollCreationMessage.Option} Option
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Option.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PollCreationMessage.Option();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.optionName = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an Option message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.PollCreationMessage.Option
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.PollCreationMessage.Option} Option
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Option.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an Option message.
                 * @function verify
                 * @memberof WAE2E.Message.PollCreationMessage.Option
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Option.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.optionName != null && message.hasOwnProperty("optionName"))
                        if (!$util.isString(message.optionName))
                            return "optionName: string expected";
                    return null;
                };

                /**
                 * Creates an Option message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.PollCreationMessage.Option
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.PollCreationMessage.Option} Option
                 */
                Option.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.PollCreationMessage.Option)
                        return object;
                    var message = new $root.WAE2E.Message.PollCreationMessage.Option();
                    if (object.optionName != null)
                        message.optionName = String(object.optionName);
                    return message;
                };

                /**
                 * Creates a plain object from an Option message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.PollCreationMessage.Option
                 * @static
                 * @param {WAE2E.Message.PollCreationMessage.Option} message Option
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Option.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.optionName = "";
                    if (message.optionName != null && message.hasOwnProperty("optionName"))
                        object.optionName = message.optionName;
                    return object;
                };

                /**
                 * Converts this Option to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.PollCreationMessage.Option
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Option.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Option
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.PollCreationMessage.Option
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Option.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.PollCreationMessage.Option";
                };

                return Option;
            })();

            return PollCreationMessage;
        })();

        Message.StickerSyncRMRMessage = (function() {

            /**
             * Properties of a StickerSyncRMRMessage.
             * @memberof WAE2E.Message
             * @interface IStickerSyncRMRMessage
             * @property {Array.<string>|null} [filehash] StickerSyncRMRMessage filehash
             * @property {string|null} [rmrSource] StickerSyncRMRMessage rmrSource
             * @property {number|Long|null} [requestTimestamp] StickerSyncRMRMessage requestTimestamp
             */

            /**
             * Constructs a new StickerSyncRMRMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a StickerSyncRMRMessage.
             * @implements IStickerSyncRMRMessage
             * @constructor
             * @param {WAE2E.Message.IStickerSyncRMRMessage=} [properties] Properties to set
             */
            function StickerSyncRMRMessage(properties) {
                this.filehash = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StickerSyncRMRMessage filehash.
             * @member {Array.<string>} filehash
             * @memberof WAE2E.Message.StickerSyncRMRMessage
             * @instance
             */
            StickerSyncRMRMessage.prototype.filehash = $util.emptyArray;

            /**
             * StickerSyncRMRMessage rmrSource.
             * @member {string} rmrSource
             * @memberof WAE2E.Message.StickerSyncRMRMessage
             * @instance
             */
            StickerSyncRMRMessage.prototype.rmrSource = "";

            /**
             * StickerSyncRMRMessage requestTimestamp.
             * @member {number|Long} requestTimestamp
             * @memberof WAE2E.Message.StickerSyncRMRMessage
             * @instance
             */
            StickerSyncRMRMessage.prototype.requestTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new StickerSyncRMRMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.StickerSyncRMRMessage
             * @static
             * @param {WAE2E.Message.IStickerSyncRMRMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.StickerSyncRMRMessage} StickerSyncRMRMessage instance
             */
            StickerSyncRMRMessage.create = function create(properties) {
                return new StickerSyncRMRMessage(properties);
            };

            /**
             * Encodes the specified StickerSyncRMRMessage message. Does not implicitly {@link WAE2E.Message.StickerSyncRMRMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.StickerSyncRMRMessage
             * @static
             * @param {WAE2E.Message.IStickerSyncRMRMessage} message StickerSyncRMRMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StickerSyncRMRMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.filehash != null && message.filehash.length)
                    for (var i = 0; i < message.filehash.length; ++i)
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.filehash[i]);
                if (message.rmrSource != null && Object.hasOwnProperty.call(message, "rmrSource"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.rmrSource);
                if (message.requestTimestamp != null && Object.hasOwnProperty.call(message, "requestTimestamp"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.requestTimestamp);
                return writer;
            };

            /**
             * Encodes the specified StickerSyncRMRMessage message, length delimited. Does not implicitly {@link WAE2E.Message.StickerSyncRMRMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.StickerSyncRMRMessage
             * @static
             * @param {WAE2E.Message.IStickerSyncRMRMessage} message StickerSyncRMRMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StickerSyncRMRMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StickerSyncRMRMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.StickerSyncRMRMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.StickerSyncRMRMessage} StickerSyncRMRMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StickerSyncRMRMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.StickerSyncRMRMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.filehash && message.filehash.length))
                                message.filehash = [];
                            message.filehash.push(reader.string());
                            break;
                        }
                    case 2: {
                            message.rmrSource = reader.string();
                            break;
                        }
                    case 3: {
                            message.requestTimestamp = reader.int64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StickerSyncRMRMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.StickerSyncRMRMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.StickerSyncRMRMessage} StickerSyncRMRMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StickerSyncRMRMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StickerSyncRMRMessage message.
             * @function verify
             * @memberof WAE2E.Message.StickerSyncRMRMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StickerSyncRMRMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.filehash != null && message.hasOwnProperty("filehash")) {
                    if (!Array.isArray(message.filehash))
                        return "filehash: array expected";
                    for (var i = 0; i < message.filehash.length; ++i)
                        if (!$util.isString(message.filehash[i]))
                            return "filehash: string[] expected";
                }
                if (message.rmrSource != null && message.hasOwnProperty("rmrSource"))
                    if (!$util.isString(message.rmrSource))
                        return "rmrSource: string expected";
                if (message.requestTimestamp != null && message.hasOwnProperty("requestTimestamp"))
                    if (!$util.isInteger(message.requestTimestamp) && !(message.requestTimestamp && $util.isInteger(message.requestTimestamp.low) && $util.isInteger(message.requestTimestamp.high)))
                        return "requestTimestamp: integer|Long expected";
                return null;
            };

            /**
             * Creates a StickerSyncRMRMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.StickerSyncRMRMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.StickerSyncRMRMessage} StickerSyncRMRMessage
             */
            StickerSyncRMRMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.StickerSyncRMRMessage)
                    return object;
                var message = new $root.WAE2E.Message.StickerSyncRMRMessage();
                if (object.filehash) {
                    if (!Array.isArray(object.filehash))
                        throw TypeError(".WAE2E.Message.StickerSyncRMRMessage.filehash: array expected");
                    message.filehash = [];
                    for (var i = 0; i < object.filehash.length; ++i)
                        message.filehash[i] = String(object.filehash[i]);
                }
                if (object.rmrSource != null)
                    message.rmrSource = String(object.rmrSource);
                if (object.requestTimestamp != null)
                    if ($util.Long)
                        (message.requestTimestamp = $util.Long.fromValue(object.requestTimestamp)).unsigned = false;
                    else if (typeof object.requestTimestamp === "string")
                        message.requestTimestamp = parseInt(object.requestTimestamp, 10);
                    else if (typeof object.requestTimestamp === "number")
                        message.requestTimestamp = object.requestTimestamp;
                    else if (typeof object.requestTimestamp === "object")
                        message.requestTimestamp = new $util.LongBits(object.requestTimestamp.low >>> 0, object.requestTimestamp.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a StickerSyncRMRMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.StickerSyncRMRMessage
             * @static
             * @param {WAE2E.Message.StickerSyncRMRMessage} message StickerSyncRMRMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StickerSyncRMRMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.filehash = [];
                if (options.defaults) {
                    object.rmrSource = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.requestTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.requestTimestamp = options.longs === String ? "0" : 0;
                }
                if (message.filehash && message.filehash.length) {
                    object.filehash = [];
                    for (var j = 0; j < message.filehash.length; ++j)
                        object.filehash[j] = message.filehash[j];
                }
                if (message.rmrSource != null && message.hasOwnProperty("rmrSource"))
                    object.rmrSource = message.rmrSource;
                if (message.requestTimestamp != null && message.hasOwnProperty("requestTimestamp"))
                    if (typeof message.requestTimestamp === "number")
                        object.requestTimestamp = options.longs === String ? String(message.requestTimestamp) : message.requestTimestamp;
                    else
                        object.requestTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.requestTimestamp) : options.longs === Number ? new $util.LongBits(message.requestTimestamp.low >>> 0, message.requestTimestamp.high >>> 0).toNumber() : message.requestTimestamp;
                return object;
            };

            /**
             * Converts this StickerSyncRMRMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.StickerSyncRMRMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StickerSyncRMRMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for StickerSyncRMRMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.StickerSyncRMRMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            StickerSyncRMRMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.StickerSyncRMRMessage";
            };

            return StickerSyncRMRMessage;
        })();

        Message.ReactionMessage = (function() {

            /**
             * Properties of a ReactionMessage.
             * @memberof WAE2E.Message
             * @interface IReactionMessage
             * @property {WAProtocol.IMessageKey|null} [key] ReactionMessage key
             * @property {string|null} [text] ReactionMessage text
             * @property {string|null} [groupingKey] ReactionMessage groupingKey
             * @property {number|Long|null} [senderTimestampMS] ReactionMessage senderTimestampMS
             */

            /**
             * Constructs a new ReactionMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a ReactionMessage.
             * @implements IReactionMessage
             * @constructor
             * @param {WAE2E.Message.IReactionMessage=} [properties] Properties to set
             */
            function ReactionMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ReactionMessage key.
             * @member {WAProtocol.IMessageKey|null|undefined} key
             * @memberof WAE2E.Message.ReactionMessage
             * @instance
             */
            ReactionMessage.prototype.key = null;

            /**
             * ReactionMessage text.
             * @member {string} text
             * @memberof WAE2E.Message.ReactionMessage
             * @instance
             */
            ReactionMessage.prototype.text = "";

            /**
             * ReactionMessage groupingKey.
             * @member {string} groupingKey
             * @memberof WAE2E.Message.ReactionMessage
             * @instance
             */
            ReactionMessage.prototype.groupingKey = "";

            /**
             * ReactionMessage senderTimestampMS.
             * @member {number|Long} senderTimestampMS
             * @memberof WAE2E.Message.ReactionMessage
             * @instance
             */
            ReactionMessage.prototype.senderTimestampMS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new ReactionMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.ReactionMessage
             * @static
             * @param {WAE2E.Message.IReactionMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.ReactionMessage} ReactionMessage instance
             */
            ReactionMessage.create = function create(properties) {
                return new ReactionMessage(properties);
            };

            /**
             * Encodes the specified ReactionMessage message. Does not implicitly {@link WAE2E.Message.ReactionMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.ReactionMessage
             * @static
             * @param {WAE2E.Message.IReactionMessage} message ReactionMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReactionMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    $root.WAProtocol.MessageKey.encode(message.key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
                if (message.groupingKey != null && Object.hasOwnProperty.call(message, "groupingKey"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.groupingKey);
                if (message.senderTimestampMS != null && Object.hasOwnProperty.call(message, "senderTimestampMS"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.senderTimestampMS);
                return writer;
            };

            /**
             * Encodes the specified ReactionMessage message, length delimited. Does not implicitly {@link WAE2E.Message.ReactionMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.ReactionMessage
             * @static
             * @param {WAE2E.Message.IReactionMessage} message ReactionMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReactionMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ReactionMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.ReactionMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.ReactionMessage} ReactionMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReactionMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ReactionMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.key = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.text = reader.string();
                            break;
                        }
                    case 3: {
                            message.groupingKey = reader.string();
                            break;
                        }
                    case 4: {
                            message.senderTimestampMS = reader.int64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ReactionMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.ReactionMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.ReactionMessage} ReactionMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReactionMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ReactionMessage message.
             * @function verify
             * @memberof WAE2E.Message.ReactionMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ReactionMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key")) {
                    var error = $root.WAProtocol.MessageKey.verify(message.key);
                    if (error)
                        return "key." + error;
                }
                if (message.text != null && message.hasOwnProperty("text"))
                    if (!$util.isString(message.text))
                        return "text: string expected";
                if (message.groupingKey != null && message.hasOwnProperty("groupingKey"))
                    if (!$util.isString(message.groupingKey))
                        return "groupingKey: string expected";
                if (message.senderTimestampMS != null && message.hasOwnProperty("senderTimestampMS"))
                    if (!$util.isInteger(message.senderTimestampMS) && !(message.senderTimestampMS && $util.isInteger(message.senderTimestampMS.low) && $util.isInteger(message.senderTimestampMS.high)))
                        return "senderTimestampMS: integer|Long expected";
                return null;
            };

            /**
             * Creates a ReactionMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.ReactionMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.ReactionMessage} ReactionMessage
             */
            ReactionMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.ReactionMessage)
                    return object;
                var message = new $root.WAE2E.Message.ReactionMessage();
                if (object.key != null) {
                    if (typeof object.key !== "object")
                        throw TypeError(".WAE2E.Message.ReactionMessage.key: object expected");
                    message.key = $root.WAProtocol.MessageKey.fromObject(object.key);
                }
                if (object.text != null)
                    message.text = String(object.text);
                if (object.groupingKey != null)
                    message.groupingKey = String(object.groupingKey);
                if (object.senderTimestampMS != null)
                    if ($util.Long)
                        (message.senderTimestampMS = $util.Long.fromValue(object.senderTimestampMS)).unsigned = false;
                    else if (typeof object.senderTimestampMS === "string")
                        message.senderTimestampMS = parseInt(object.senderTimestampMS, 10);
                    else if (typeof object.senderTimestampMS === "number")
                        message.senderTimestampMS = object.senderTimestampMS;
                    else if (typeof object.senderTimestampMS === "object")
                        message.senderTimestampMS = new $util.LongBits(object.senderTimestampMS.low >>> 0, object.senderTimestampMS.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a ReactionMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.ReactionMessage
             * @static
             * @param {WAE2E.Message.ReactionMessage} message ReactionMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ReactionMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.key = null;
                    object.text = "";
                    object.groupingKey = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.senderTimestampMS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.senderTimestampMS = options.longs === String ? "0" : 0;
                }
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = $root.WAProtocol.MessageKey.toObject(message.key, options);
                if (message.text != null && message.hasOwnProperty("text"))
                    object.text = message.text;
                if (message.groupingKey != null && message.hasOwnProperty("groupingKey"))
                    object.groupingKey = message.groupingKey;
                if (message.senderTimestampMS != null && message.hasOwnProperty("senderTimestampMS"))
                    if (typeof message.senderTimestampMS === "number")
                        object.senderTimestampMS = options.longs === String ? String(message.senderTimestampMS) : message.senderTimestampMS;
                    else
                        object.senderTimestampMS = options.longs === String ? $util.Long.prototype.toString.call(message.senderTimestampMS) : options.longs === Number ? new $util.LongBits(message.senderTimestampMS.low >>> 0, message.senderTimestampMS.high >>> 0).toNumber() : message.senderTimestampMS;
                return object;
            };

            /**
             * Converts this ReactionMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.ReactionMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ReactionMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ReactionMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.ReactionMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ReactionMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.ReactionMessage";
            };

            return ReactionMessage;
        })();

        Message.FutureProofMessage = (function() {

            /**
             * Properties of a FutureProofMessage.
             * @memberof WAE2E.Message
             * @interface IFutureProofMessage
             * @property {WAE2E.IMessage|null} [message] FutureProofMessage message
             */

            /**
             * Constructs a new FutureProofMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a FutureProofMessage.
             * @implements IFutureProofMessage
             * @constructor
             * @param {WAE2E.Message.IFutureProofMessage=} [properties] Properties to set
             */
            function FutureProofMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FutureProofMessage message.
             * @member {WAE2E.IMessage|null|undefined} message
             * @memberof WAE2E.Message.FutureProofMessage
             * @instance
             */
            FutureProofMessage.prototype.message = null;

            /**
             * Creates a new FutureProofMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.FutureProofMessage
             * @static
             * @param {WAE2E.Message.IFutureProofMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.FutureProofMessage} FutureProofMessage instance
             */
            FutureProofMessage.create = function create(properties) {
                return new FutureProofMessage(properties);
            };

            /**
             * Encodes the specified FutureProofMessage message. Does not implicitly {@link WAE2E.Message.FutureProofMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.FutureProofMessage
             * @static
             * @param {WAE2E.Message.IFutureProofMessage} message FutureProofMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FutureProofMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                    $root.WAE2E.Message.encode(message.message, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FutureProofMessage message, length delimited. Does not implicitly {@link WAE2E.Message.FutureProofMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.FutureProofMessage
             * @static
             * @param {WAE2E.Message.IFutureProofMessage} message FutureProofMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FutureProofMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FutureProofMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.FutureProofMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.FutureProofMessage} FutureProofMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FutureProofMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.FutureProofMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.message = $root.WAE2E.Message.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FutureProofMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.FutureProofMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.FutureProofMessage} FutureProofMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FutureProofMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FutureProofMessage message.
             * @function verify
             * @memberof WAE2E.Message.FutureProofMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FutureProofMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.message != null && message.hasOwnProperty("message")) {
                    var error = $root.WAE2E.Message.verify(message.message);
                    if (error)
                        return "message." + error;
                }
                return null;
            };

            /**
             * Creates a FutureProofMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.FutureProofMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.FutureProofMessage} FutureProofMessage
             */
            FutureProofMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.FutureProofMessage)
                    return object;
                var message = new $root.WAE2E.Message.FutureProofMessage();
                if (object.message != null) {
                    if (typeof object.message !== "object")
                        throw TypeError(".WAE2E.Message.FutureProofMessage.message: object expected");
                    message.message = $root.WAE2E.Message.fromObject(object.message);
                }
                return message;
            };

            /**
             * Creates a plain object from a FutureProofMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.FutureProofMessage
             * @static
             * @param {WAE2E.Message.FutureProofMessage} message FutureProofMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FutureProofMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.message = null;
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = $root.WAE2E.Message.toObject(message.message, options);
                return object;
            };

            /**
             * Converts this FutureProofMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.FutureProofMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FutureProofMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for FutureProofMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.FutureProofMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            FutureProofMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.FutureProofMessage";
            };

            return FutureProofMessage;
        })();

        Message.DeviceSentMessage = (function() {

            /**
             * Properties of a DeviceSentMessage.
             * @memberof WAE2E.Message
             * @interface IDeviceSentMessage
             * @property {string|null} [destinationJID] DeviceSentMessage destinationJID
             * @property {WAE2E.IMessage|null} [message] DeviceSentMessage message
             * @property {string|null} [phash] DeviceSentMessage phash
             */

            /**
             * Constructs a new DeviceSentMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a DeviceSentMessage.
             * @implements IDeviceSentMessage
             * @constructor
             * @param {WAE2E.Message.IDeviceSentMessage=} [properties] Properties to set
             */
            function DeviceSentMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DeviceSentMessage destinationJID.
             * @member {string} destinationJID
             * @memberof WAE2E.Message.DeviceSentMessage
             * @instance
             */
            DeviceSentMessage.prototype.destinationJID = "";

            /**
             * DeviceSentMessage message.
             * @member {WAE2E.IMessage|null|undefined} message
             * @memberof WAE2E.Message.DeviceSentMessage
             * @instance
             */
            DeviceSentMessage.prototype.message = null;

            /**
             * DeviceSentMessage phash.
             * @member {string} phash
             * @memberof WAE2E.Message.DeviceSentMessage
             * @instance
             */
            DeviceSentMessage.prototype.phash = "";

            /**
             * Creates a new DeviceSentMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.DeviceSentMessage
             * @static
             * @param {WAE2E.Message.IDeviceSentMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.DeviceSentMessage} DeviceSentMessage instance
             */
            DeviceSentMessage.create = function create(properties) {
                return new DeviceSentMessage(properties);
            };

            /**
             * Encodes the specified DeviceSentMessage message. Does not implicitly {@link WAE2E.Message.DeviceSentMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.DeviceSentMessage
             * @static
             * @param {WAE2E.Message.IDeviceSentMessage} message DeviceSentMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DeviceSentMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.destinationJID != null && Object.hasOwnProperty.call(message, "destinationJID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.destinationJID);
                if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                    $root.WAE2E.Message.encode(message.message, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.phash != null && Object.hasOwnProperty.call(message, "phash"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.phash);
                return writer;
            };

            /**
             * Encodes the specified DeviceSentMessage message, length delimited. Does not implicitly {@link WAE2E.Message.DeviceSentMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.DeviceSentMessage
             * @static
             * @param {WAE2E.Message.IDeviceSentMessage} message DeviceSentMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DeviceSentMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DeviceSentMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.DeviceSentMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.DeviceSentMessage} DeviceSentMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DeviceSentMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.DeviceSentMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.destinationJID = reader.string();
                            break;
                        }
                    case 2: {
                            message.message = $root.WAE2E.Message.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.phash = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DeviceSentMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.DeviceSentMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.DeviceSentMessage} DeviceSentMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DeviceSentMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DeviceSentMessage message.
             * @function verify
             * @memberof WAE2E.Message.DeviceSentMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DeviceSentMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.destinationJID != null && message.hasOwnProperty("destinationJID"))
                    if (!$util.isString(message.destinationJID))
                        return "destinationJID: string expected";
                if (message.message != null && message.hasOwnProperty("message")) {
                    var error = $root.WAE2E.Message.verify(message.message);
                    if (error)
                        return "message." + error;
                }
                if (message.phash != null && message.hasOwnProperty("phash"))
                    if (!$util.isString(message.phash))
                        return "phash: string expected";
                return null;
            };

            /**
             * Creates a DeviceSentMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.DeviceSentMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.DeviceSentMessage} DeviceSentMessage
             */
            DeviceSentMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.DeviceSentMessage)
                    return object;
                var message = new $root.WAE2E.Message.DeviceSentMessage();
                if (object.destinationJID != null)
                    message.destinationJID = String(object.destinationJID);
                if (object.message != null) {
                    if (typeof object.message !== "object")
                        throw TypeError(".WAE2E.Message.DeviceSentMessage.message: object expected");
                    message.message = $root.WAE2E.Message.fromObject(object.message);
                }
                if (object.phash != null)
                    message.phash = String(object.phash);
                return message;
            };

            /**
             * Creates a plain object from a DeviceSentMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.DeviceSentMessage
             * @static
             * @param {WAE2E.Message.DeviceSentMessage} message DeviceSentMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DeviceSentMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.destinationJID = "";
                    object.message = null;
                    object.phash = "";
                }
                if (message.destinationJID != null && message.hasOwnProperty("destinationJID"))
                    object.destinationJID = message.destinationJID;
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = $root.WAE2E.Message.toObject(message.message, options);
                if (message.phash != null && message.hasOwnProperty("phash"))
                    object.phash = message.phash;
                return object;
            };

            /**
             * Converts this DeviceSentMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.DeviceSentMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DeviceSentMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for DeviceSentMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.DeviceSentMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            DeviceSentMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.DeviceSentMessage";
            };

            return DeviceSentMessage;
        })();

        Message.RequestPhoneNumberMessage = (function() {

            /**
             * Properties of a RequestPhoneNumberMessage.
             * @memberof WAE2E.Message
             * @interface IRequestPhoneNumberMessage
             * @property {WAE2E.IContextInfo|null} [contextInfo] RequestPhoneNumberMessage contextInfo
             */

            /**
             * Constructs a new RequestPhoneNumberMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a RequestPhoneNumberMessage.
             * @implements IRequestPhoneNumberMessage
             * @constructor
             * @param {WAE2E.Message.IRequestPhoneNumberMessage=} [properties] Properties to set
             */
            function RequestPhoneNumberMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestPhoneNumberMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.RequestPhoneNumberMessage
             * @instance
             */
            RequestPhoneNumberMessage.prototype.contextInfo = null;

            /**
             * Creates a new RequestPhoneNumberMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.RequestPhoneNumberMessage
             * @static
             * @param {WAE2E.Message.IRequestPhoneNumberMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.RequestPhoneNumberMessage} RequestPhoneNumberMessage instance
             */
            RequestPhoneNumberMessage.create = function create(properties) {
                return new RequestPhoneNumberMessage(properties);
            };

            /**
             * Encodes the specified RequestPhoneNumberMessage message. Does not implicitly {@link WAE2E.Message.RequestPhoneNumberMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.RequestPhoneNumberMessage
             * @static
             * @param {WAE2E.Message.IRequestPhoneNumberMessage} message RequestPhoneNumberMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestPhoneNumberMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified RequestPhoneNumberMessage message, length delimited. Does not implicitly {@link WAE2E.Message.RequestPhoneNumberMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.RequestPhoneNumberMessage
             * @static
             * @param {WAE2E.Message.IRequestPhoneNumberMessage} message RequestPhoneNumberMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestPhoneNumberMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestPhoneNumberMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.RequestPhoneNumberMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.RequestPhoneNumberMessage} RequestPhoneNumberMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestPhoneNumberMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.RequestPhoneNumberMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestPhoneNumberMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.RequestPhoneNumberMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.RequestPhoneNumberMessage} RequestPhoneNumberMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestPhoneNumberMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestPhoneNumberMessage message.
             * @function verify
             * @memberof WAE2E.Message.RequestPhoneNumberMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestPhoneNumberMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                return null;
            };

            /**
             * Creates a RequestPhoneNumberMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.RequestPhoneNumberMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.RequestPhoneNumberMessage} RequestPhoneNumberMessage
             */
            RequestPhoneNumberMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.RequestPhoneNumberMessage)
                    return object;
                var message = new $root.WAE2E.Message.RequestPhoneNumberMessage();
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.RequestPhoneNumberMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                return message;
            };

            /**
             * Creates a plain object from a RequestPhoneNumberMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.RequestPhoneNumberMessage
             * @static
             * @param {WAE2E.Message.RequestPhoneNumberMessage} message RequestPhoneNumberMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestPhoneNumberMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.contextInfo = null;
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                return object;
            };

            /**
             * Converts this RequestPhoneNumberMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.RequestPhoneNumberMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestPhoneNumberMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for RequestPhoneNumberMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.RequestPhoneNumberMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RequestPhoneNumberMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.RequestPhoneNumberMessage";
            };

            return RequestPhoneNumberMessage;
        })();

        Message.NewsletterAdminInviteMessage = (function() {

            /**
             * Properties of a NewsletterAdminInviteMessage.
             * @memberof WAE2E.Message
             * @interface INewsletterAdminInviteMessage
             * @property {string|null} [newsletterJID] NewsletterAdminInviteMessage newsletterJID
             * @property {string|null} [newsletterName] NewsletterAdminInviteMessage newsletterName
             * @property {Uint8Array|null} [JPEGThumbnail] NewsletterAdminInviteMessage JPEGThumbnail
             * @property {string|null} [caption] NewsletterAdminInviteMessage caption
             * @property {number|Long|null} [inviteExpiration] NewsletterAdminInviteMessage inviteExpiration
             * @property {WAE2E.IContextInfo|null} [contextInfo] NewsletterAdminInviteMessage contextInfo
             */

            /**
             * Constructs a new NewsletterAdminInviteMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a NewsletterAdminInviteMessage.
             * @implements INewsletterAdminInviteMessage
             * @constructor
             * @param {WAE2E.Message.INewsletterAdminInviteMessage=} [properties] Properties to set
             */
            function NewsletterAdminInviteMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * NewsletterAdminInviteMessage newsletterJID.
             * @member {string} newsletterJID
             * @memberof WAE2E.Message.NewsletterAdminInviteMessage
             * @instance
             */
            NewsletterAdminInviteMessage.prototype.newsletterJID = "";

            /**
             * NewsletterAdminInviteMessage newsletterName.
             * @member {string} newsletterName
             * @memberof WAE2E.Message.NewsletterAdminInviteMessage
             * @instance
             */
            NewsletterAdminInviteMessage.prototype.newsletterName = "";

            /**
             * NewsletterAdminInviteMessage JPEGThumbnail.
             * @member {Uint8Array} JPEGThumbnail
             * @memberof WAE2E.Message.NewsletterAdminInviteMessage
             * @instance
             */
            NewsletterAdminInviteMessage.prototype.JPEGThumbnail = $util.newBuffer([]);

            /**
             * NewsletterAdminInviteMessage caption.
             * @member {string} caption
             * @memberof WAE2E.Message.NewsletterAdminInviteMessage
             * @instance
             */
            NewsletterAdminInviteMessage.prototype.caption = "";

            /**
             * NewsletterAdminInviteMessage inviteExpiration.
             * @member {number|Long} inviteExpiration
             * @memberof WAE2E.Message.NewsletterAdminInviteMessage
             * @instance
             */
            NewsletterAdminInviteMessage.prototype.inviteExpiration = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * NewsletterAdminInviteMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.NewsletterAdminInviteMessage
             * @instance
             */
            NewsletterAdminInviteMessage.prototype.contextInfo = null;

            /**
             * Creates a new NewsletterAdminInviteMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.NewsletterAdminInviteMessage
             * @static
             * @param {WAE2E.Message.INewsletterAdminInviteMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.NewsletterAdminInviteMessage} NewsletterAdminInviteMessage instance
             */
            NewsletterAdminInviteMessage.create = function create(properties) {
                return new NewsletterAdminInviteMessage(properties);
            };

            /**
             * Encodes the specified NewsletterAdminInviteMessage message. Does not implicitly {@link WAE2E.Message.NewsletterAdminInviteMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.NewsletterAdminInviteMessage
             * @static
             * @param {WAE2E.Message.INewsletterAdminInviteMessage} message NewsletterAdminInviteMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NewsletterAdminInviteMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.newsletterJID != null && Object.hasOwnProperty.call(message, "newsletterJID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.newsletterJID);
                if (message.newsletterName != null && Object.hasOwnProperty.call(message, "newsletterName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.newsletterName);
                if (message.JPEGThumbnail != null && Object.hasOwnProperty.call(message, "JPEGThumbnail"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.JPEGThumbnail);
                if (message.caption != null && Object.hasOwnProperty.call(message, "caption"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.caption);
                if (message.inviteExpiration != null && Object.hasOwnProperty.call(message, "inviteExpiration"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.inviteExpiration);
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified NewsletterAdminInviteMessage message, length delimited. Does not implicitly {@link WAE2E.Message.NewsletterAdminInviteMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.NewsletterAdminInviteMessage
             * @static
             * @param {WAE2E.Message.INewsletterAdminInviteMessage} message NewsletterAdminInviteMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NewsletterAdminInviteMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a NewsletterAdminInviteMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.NewsletterAdminInviteMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.NewsletterAdminInviteMessage} NewsletterAdminInviteMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NewsletterAdminInviteMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.NewsletterAdminInviteMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.newsletterJID = reader.string();
                            break;
                        }
                    case 2: {
                            message.newsletterName = reader.string();
                            break;
                        }
                    case 3: {
                            message.JPEGThumbnail = reader.bytes();
                            break;
                        }
                    case 4: {
                            message.caption = reader.string();
                            break;
                        }
                    case 5: {
                            message.inviteExpiration = reader.int64();
                            break;
                        }
                    case 6: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a NewsletterAdminInviteMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.NewsletterAdminInviteMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.NewsletterAdminInviteMessage} NewsletterAdminInviteMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NewsletterAdminInviteMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a NewsletterAdminInviteMessage message.
             * @function verify
             * @memberof WAE2E.Message.NewsletterAdminInviteMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            NewsletterAdminInviteMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.newsletterJID != null && message.hasOwnProperty("newsletterJID"))
                    if (!$util.isString(message.newsletterJID))
                        return "newsletterJID: string expected";
                if (message.newsletterName != null && message.hasOwnProperty("newsletterName"))
                    if (!$util.isString(message.newsletterName))
                        return "newsletterName: string expected";
                if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail"))
                    if (!(message.JPEGThumbnail && typeof message.JPEGThumbnail.length === "number" || $util.isString(message.JPEGThumbnail)))
                        return "JPEGThumbnail: buffer expected";
                if (message.caption != null && message.hasOwnProperty("caption"))
                    if (!$util.isString(message.caption))
                        return "caption: string expected";
                if (message.inviteExpiration != null && message.hasOwnProperty("inviteExpiration"))
                    if (!$util.isInteger(message.inviteExpiration) && !(message.inviteExpiration && $util.isInteger(message.inviteExpiration.low) && $util.isInteger(message.inviteExpiration.high)))
                        return "inviteExpiration: integer|Long expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                return null;
            };

            /**
             * Creates a NewsletterAdminInviteMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.NewsletterAdminInviteMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.NewsletterAdminInviteMessage} NewsletterAdminInviteMessage
             */
            NewsletterAdminInviteMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.NewsletterAdminInviteMessage)
                    return object;
                var message = new $root.WAE2E.Message.NewsletterAdminInviteMessage();
                if (object.newsletterJID != null)
                    message.newsletterJID = String(object.newsletterJID);
                if (object.newsletterName != null)
                    message.newsletterName = String(object.newsletterName);
                if (object.JPEGThumbnail != null)
                    if (typeof object.JPEGThumbnail === "string")
                        $util.base64.decode(object.JPEGThumbnail, message.JPEGThumbnail = $util.newBuffer($util.base64.length(object.JPEGThumbnail)), 0);
                    else if (object.JPEGThumbnail.length >= 0)
                        message.JPEGThumbnail = object.JPEGThumbnail;
                if (object.caption != null)
                    message.caption = String(object.caption);
                if (object.inviteExpiration != null)
                    if ($util.Long)
                        (message.inviteExpiration = $util.Long.fromValue(object.inviteExpiration)).unsigned = false;
                    else if (typeof object.inviteExpiration === "string")
                        message.inviteExpiration = parseInt(object.inviteExpiration, 10);
                    else if (typeof object.inviteExpiration === "number")
                        message.inviteExpiration = object.inviteExpiration;
                    else if (typeof object.inviteExpiration === "object")
                        message.inviteExpiration = new $util.LongBits(object.inviteExpiration.low >>> 0, object.inviteExpiration.high >>> 0).toNumber();
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.NewsletterAdminInviteMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                return message;
            };

            /**
             * Creates a plain object from a NewsletterAdminInviteMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.NewsletterAdminInviteMessage
             * @static
             * @param {WAE2E.Message.NewsletterAdminInviteMessage} message NewsletterAdminInviteMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            NewsletterAdminInviteMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.newsletterJID = "";
                    object.newsletterName = "";
                    if (options.bytes === String)
                        object.JPEGThumbnail = "";
                    else {
                        object.JPEGThumbnail = [];
                        if (options.bytes !== Array)
                            object.JPEGThumbnail = $util.newBuffer(object.JPEGThumbnail);
                    }
                    object.caption = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.inviteExpiration = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.inviteExpiration = options.longs === String ? "0" : 0;
                    object.contextInfo = null;
                }
                if (message.newsletterJID != null && message.hasOwnProperty("newsletterJID"))
                    object.newsletterJID = message.newsletterJID;
                if (message.newsletterName != null && message.hasOwnProperty("newsletterName"))
                    object.newsletterName = message.newsletterName;
                if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail"))
                    object.JPEGThumbnail = options.bytes === String ? $util.base64.encode(message.JPEGThumbnail, 0, message.JPEGThumbnail.length) : options.bytes === Array ? Array.prototype.slice.call(message.JPEGThumbnail) : message.JPEGThumbnail;
                if (message.caption != null && message.hasOwnProperty("caption"))
                    object.caption = message.caption;
                if (message.inviteExpiration != null && message.hasOwnProperty("inviteExpiration"))
                    if (typeof message.inviteExpiration === "number")
                        object.inviteExpiration = options.longs === String ? String(message.inviteExpiration) : message.inviteExpiration;
                    else
                        object.inviteExpiration = options.longs === String ? $util.Long.prototype.toString.call(message.inviteExpiration) : options.longs === Number ? new $util.LongBits(message.inviteExpiration.low >>> 0, message.inviteExpiration.high >>> 0).toNumber() : message.inviteExpiration;
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                return object;
            };

            /**
             * Converts this NewsletterAdminInviteMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.NewsletterAdminInviteMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            NewsletterAdminInviteMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for NewsletterAdminInviteMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.NewsletterAdminInviteMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            NewsletterAdminInviteMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.NewsletterAdminInviteMessage";
            };

            return NewsletterAdminInviteMessage;
        })();

        Message.ProductMessage = (function() {

            /**
             * Properties of a ProductMessage.
             * @memberof WAE2E.Message
             * @interface IProductMessage
             * @property {WAE2E.Message.ProductMessage.IProductSnapshot|null} [product] ProductMessage product
             * @property {string|null} [businessOwnerJID] ProductMessage businessOwnerJID
             * @property {WAE2E.Message.ProductMessage.ICatalogSnapshot|null} [catalog] ProductMessage catalog
             * @property {string|null} [body] ProductMessage body
             * @property {string|null} [footer] ProductMessage footer
             * @property {WAE2E.IContextInfo|null} [contextInfo] ProductMessage contextInfo
             */

            /**
             * Constructs a new ProductMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a ProductMessage.
             * @implements IProductMessage
             * @constructor
             * @param {WAE2E.Message.IProductMessage=} [properties] Properties to set
             */
            function ProductMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ProductMessage product.
             * @member {WAE2E.Message.ProductMessage.IProductSnapshot|null|undefined} product
             * @memberof WAE2E.Message.ProductMessage
             * @instance
             */
            ProductMessage.prototype.product = null;

            /**
             * ProductMessage businessOwnerJID.
             * @member {string} businessOwnerJID
             * @memberof WAE2E.Message.ProductMessage
             * @instance
             */
            ProductMessage.prototype.businessOwnerJID = "";

            /**
             * ProductMessage catalog.
             * @member {WAE2E.Message.ProductMessage.ICatalogSnapshot|null|undefined} catalog
             * @memberof WAE2E.Message.ProductMessage
             * @instance
             */
            ProductMessage.prototype.catalog = null;

            /**
             * ProductMessage body.
             * @member {string} body
             * @memberof WAE2E.Message.ProductMessage
             * @instance
             */
            ProductMessage.prototype.body = "";

            /**
             * ProductMessage footer.
             * @member {string} footer
             * @memberof WAE2E.Message.ProductMessage
             * @instance
             */
            ProductMessage.prototype.footer = "";

            /**
             * ProductMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.ProductMessage
             * @instance
             */
            ProductMessage.prototype.contextInfo = null;

            /**
             * Creates a new ProductMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.ProductMessage
             * @static
             * @param {WAE2E.Message.IProductMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.ProductMessage} ProductMessage instance
             */
            ProductMessage.create = function create(properties) {
                return new ProductMessage(properties);
            };

            /**
             * Encodes the specified ProductMessage message. Does not implicitly {@link WAE2E.Message.ProductMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.ProductMessage
             * @static
             * @param {WAE2E.Message.IProductMessage} message ProductMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProductMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.product != null && Object.hasOwnProperty.call(message, "product"))
                    $root.WAE2E.Message.ProductMessage.ProductSnapshot.encode(message.product, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.businessOwnerJID != null && Object.hasOwnProperty.call(message, "businessOwnerJID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.businessOwnerJID);
                if (message.catalog != null && Object.hasOwnProperty.call(message, "catalog"))
                    $root.WAE2E.Message.ProductMessage.CatalogSnapshot.encode(message.catalog, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.body);
                if (message.footer != null && Object.hasOwnProperty.call(message, "footer"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.footer);
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ProductMessage message, length delimited. Does not implicitly {@link WAE2E.Message.ProductMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.ProductMessage
             * @static
             * @param {WAE2E.Message.IProductMessage} message ProductMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProductMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ProductMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.ProductMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.ProductMessage} ProductMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProductMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ProductMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.product = $root.WAE2E.Message.ProductMessage.ProductSnapshot.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.businessOwnerJID = reader.string();
                            break;
                        }
                    case 4: {
                            message.catalog = $root.WAE2E.Message.ProductMessage.CatalogSnapshot.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.body = reader.string();
                            break;
                        }
                    case 6: {
                            message.footer = reader.string();
                            break;
                        }
                    case 17: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ProductMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.ProductMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.ProductMessage} ProductMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProductMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ProductMessage message.
             * @function verify
             * @memberof WAE2E.Message.ProductMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProductMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.product != null && message.hasOwnProperty("product")) {
                    var error = $root.WAE2E.Message.ProductMessage.ProductSnapshot.verify(message.product);
                    if (error)
                        return "product." + error;
                }
                if (message.businessOwnerJID != null && message.hasOwnProperty("businessOwnerJID"))
                    if (!$util.isString(message.businessOwnerJID))
                        return "businessOwnerJID: string expected";
                if (message.catalog != null && message.hasOwnProperty("catalog")) {
                    var error = $root.WAE2E.Message.ProductMessage.CatalogSnapshot.verify(message.catalog);
                    if (error)
                        return "catalog." + error;
                }
                if (message.body != null && message.hasOwnProperty("body"))
                    if (!$util.isString(message.body))
                        return "body: string expected";
                if (message.footer != null && message.hasOwnProperty("footer"))
                    if (!$util.isString(message.footer))
                        return "footer: string expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                return null;
            };

            /**
             * Creates a ProductMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.ProductMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.ProductMessage} ProductMessage
             */
            ProductMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.ProductMessage)
                    return object;
                var message = new $root.WAE2E.Message.ProductMessage();
                if (object.product != null) {
                    if (typeof object.product !== "object")
                        throw TypeError(".WAE2E.Message.ProductMessage.product: object expected");
                    message.product = $root.WAE2E.Message.ProductMessage.ProductSnapshot.fromObject(object.product);
                }
                if (object.businessOwnerJID != null)
                    message.businessOwnerJID = String(object.businessOwnerJID);
                if (object.catalog != null) {
                    if (typeof object.catalog !== "object")
                        throw TypeError(".WAE2E.Message.ProductMessage.catalog: object expected");
                    message.catalog = $root.WAE2E.Message.ProductMessage.CatalogSnapshot.fromObject(object.catalog);
                }
                if (object.body != null)
                    message.body = String(object.body);
                if (object.footer != null)
                    message.footer = String(object.footer);
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.ProductMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                return message;
            };

            /**
             * Creates a plain object from a ProductMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.ProductMessage
             * @static
             * @param {WAE2E.Message.ProductMessage} message ProductMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProductMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.product = null;
                    object.businessOwnerJID = "";
                    object.catalog = null;
                    object.body = "";
                    object.footer = "";
                    object.contextInfo = null;
                }
                if (message.product != null && message.hasOwnProperty("product"))
                    object.product = $root.WAE2E.Message.ProductMessage.ProductSnapshot.toObject(message.product, options);
                if (message.businessOwnerJID != null && message.hasOwnProperty("businessOwnerJID"))
                    object.businessOwnerJID = message.businessOwnerJID;
                if (message.catalog != null && message.hasOwnProperty("catalog"))
                    object.catalog = $root.WAE2E.Message.ProductMessage.CatalogSnapshot.toObject(message.catalog, options);
                if (message.body != null && message.hasOwnProperty("body"))
                    object.body = message.body;
                if (message.footer != null && message.hasOwnProperty("footer"))
                    object.footer = message.footer;
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                return object;
            };

            /**
             * Converts this ProductMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.ProductMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProductMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ProductMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.ProductMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ProductMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.ProductMessage";
            };

            ProductMessage.ProductSnapshot = (function() {

                /**
                 * Properties of a ProductSnapshot.
                 * @memberof WAE2E.Message.ProductMessage
                 * @interface IProductSnapshot
                 * @property {WAE2E.Message.IImageMessage|null} [productImage] ProductSnapshot productImage
                 * @property {string|null} [productID] ProductSnapshot productID
                 * @property {string|null} [title] ProductSnapshot title
                 * @property {string|null} [description] ProductSnapshot description
                 * @property {string|null} [currencyCode] ProductSnapshot currencyCode
                 * @property {number|Long|null} [priceAmount1000] ProductSnapshot priceAmount1000
                 * @property {string|null} [retailerID] ProductSnapshot retailerID
                 * @property {string|null} [URL] ProductSnapshot URL
                 * @property {number|null} [productImageCount] ProductSnapshot productImageCount
                 * @property {string|null} [firstImageID] ProductSnapshot firstImageID
                 * @property {number|Long|null} [salePriceAmount1000] ProductSnapshot salePriceAmount1000
                 */

                /**
                 * Constructs a new ProductSnapshot.
                 * @memberof WAE2E.Message.ProductMessage
                 * @classdesc Represents a ProductSnapshot.
                 * @implements IProductSnapshot
                 * @constructor
                 * @param {WAE2E.Message.ProductMessage.IProductSnapshot=} [properties] Properties to set
                 */
                function ProductSnapshot(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ProductSnapshot productImage.
                 * @member {WAE2E.Message.IImageMessage|null|undefined} productImage
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @instance
                 */
                ProductSnapshot.prototype.productImage = null;

                /**
                 * ProductSnapshot productID.
                 * @member {string} productID
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @instance
                 */
                ProductSnapshot.prototype.productID = "";

                /**
                 * ProductSnapshot title.
                 * @member {string} title
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @instance
                 */
                ProductSnapshot.prototype.title = "";

                /**
                 * ProductSnapshot description.
                 * @member {string} description
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @instance
                 */
                ProductSnapshot.prototype.description = "";

                /**
                 * ProductSnapshot currencyCode.
                 * @member {string} currencyCode
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @instance
                 */
                ProductSnapshot.prototype.currencyCode = "";

                /**
                 * ProductSnapshot priceAmount1000.
                 * @member {number|Long} priceAmount1000
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @instance
                 */
                ProductSnapshot.prototype.priceAmount1000 = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * ProductSnapshot retailerID.
                 * @member {string} retailerID
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @instance
                 */
                ProductSnapshot.prototype.retailerID = "";

                /**
                 * ProductSnapshot URL.
                 * @member {string} URL
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @instance
                 */
                ProductSnapshot.prototype.URL = "";

                /**
                 * ProductSnapshot productImageCount.
                 * @member {number} productImageCount
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @instance
                 */
                ProductSnapshot.prototype.productImageCount = 0;

                /**
                 * ProductSnapshot firstImageID.
                 * @member {string} firstImageID
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @instance
                 */
                ProductSnapshot.prototype.firstImageID = "";

                /**
                 * ProductSnapshot salePriceAmount1000.
                 * @member {number|Long} salePriceAmount1000
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @instance
                 */
                ProductSnapshot.prototype.salePriceAmount1000 = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * Creates a new ProductSnapshot instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @static
                 * @param {WAE2E.Message.ProductMessage.IProductSnapshot=} [properties] Properties to set
                 * @returns {WAE2E.Message.ProductMessage.ProductSnapshot} ProductSnapshot instance
                 */
                ProductSnapshot.create = function create(properties) {
                    return new ProductSnapshot(properties);
                };

                /**
                 * Encodes the specified ProductSnapshot message. Does not implicitly {@link WAE2E.Message.ProductMessage.ProductSnapshot.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @static
                 * @param {WAE2E.Message.ProductMessage.IProductSnapshot} message ProductSnapshot message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ProductSnapshot.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.productImage != null && Object.hasOwnProperty.call(message, "productImage"))
                        $root.WAE2E.Message.ImageMessage.encode(message.productImage, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.productID != null && Object.hasOwnProperty.call(message, "productID"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.productID);
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.title);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.description);
                    if (message.currencyCode != null && Object.hasOwnProperty.call(message, "currencyCode"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.currencyCode);
                    if (message.priceAmount1000 != null && Object.hasOwnProperty.call(message, "priceAmount1000"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int64(message.priceAmount1000);
                    if (message.retailerID != null && Object.hasOwnProperty.call(message, "retailerID"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.retailerID);
                    if (message.URL != null && Object.hasOwnProperty.call(message, "URL"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.URL);
                    if (message.productImageCount != null && Object.hasOwnProperty.call(message, "productImageCount"))
                        writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.productImageCount);
                    if (message.firstImageID != null && Object.hasOwnProperty.call(message, "firstImageID"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.firstImageID);
                    if (message.salePriceAmount1000 != null && Object.hasOwnProperty.call(message, "salePriceAmount1000"))
                        writer.uint32(/* id 12, wireType 0 =*/96).int64(message.salePriceAmount1000);
                    return writer;
                };

                /**
                 * Encodes the specified ProductSnapshot message, length delimited. Does not implicitly {@link WAE2E.Message.ProductMessage.ProductSnapshot.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @static
                 * @param {WAE2E.Message.ProductMessage.IProductSnapshot} message ProductSnapshot message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ProductSnapshot.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ProductSnapshot message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.ProductMessage.ProductSnapshot} ProductSnapshot
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ProductSnapshot.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ProductMessage.ProductSnapshot();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.productImage = $root.WAE2E.Message.ImageMessage.decode(reader, reader.uint32());
                                break;
                            }
                        case 2: {
                                message.productID = reader.string();
                                break;
                            }
                        case 3: {
                                message.title = reader.string();
                                break;
                            }
                        case 4: {
                                message.description = reader.string();
                                break;
                            }
                        case 5: {
                                message.currencyCode = reader.string();
                                break;
                            }
                        case 6: {
                                message.priceAmount1000 = reader.int64();
                                break;
                            }
                        case 7: {
                                message.retailerID = reader.string();
                                break;
                            }
                        case 8: {
                                message.URL = reader.string();
                                break;
                            }
                        case 9: {
                                message.productImageCount = reader.uint32();
                                break;
                            }
                        case 11: {
                                message.firstImageID = reader.string();
                                break;
                            }
                        case 12: {
                                message.salePriceAmount1000 = reader.int64();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ProductSnapshot message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.ProductMessage.ProductSnapshot} ProductSnapshot
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ProductSnapshot.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ProductSnapshot message.
                 * @function verify
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ProductSnapshot.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.productImage != null && message.hasOwnProperty("productImage")) {
                        var error = $root.WAE2E.Message.ImageMessage.verify(message.productImage);
                        if (error)
                            return "productImage." + error;
                    }
                    if (message.productID != null && message.hasOwnProperty("productID"))
                        if (!$util.isString(message.productID))
                            return "productID: string expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.currencyCode != null && message.hasOwnProperty("currencyCode"))
                        if (!$util.isString(message.currencyCode))
                            return "currencyCode: string expected";
                    if (message.priceAmount1000 != null && message.hasOwnProperty("priceAmount1000"))
                        if (!$util.isInteger(message.priceAmount1000) && !(message.priceAmount1000 && $util.isInteger(message.priceAmount1000.low) && $util.isInteger(message.priceAmount1000.high)))
                            return "priceAmount1000: integer|Long expected";
                    if (message.retailerID != null && message.hasOwnProperty("retailerID"))
                        if (!$util.isString(message.retailerID))
                            return "retailerID: string expected";
                    if (message.URL != null && message.hasOwnProperty("URL"))
                        if (!$util.isString(message.URL))
                            return "URL: string expected";
                    if (message.productImageCount != null && message.hasOwnProperty("productImageCount"))
                        if (!$util.isInteger(message.productImageCount))
                            return "productImageCount: integer expected";
                    if (message.firstImageID != null && message.hasOwnProperty("firstImageID"))
                        if (!$util.isString(message.firstImageID))
                            return "firstImageID: string expected";
                    if (message.salePriceAmount1000 != null && message.hasOwnProperty("salePriceAmount1000"))
                        if (!$util.isInteger(message.salePriceAmount1000) && !(message.salePriceAmount1000 && $util.isInteger(message.salePriceAmount1000.low) && $util.isInteger(message.salePriceAmount1000.high)))
                            return "salePriceAmount1000: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a ProductSnapshot message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.ProductMessage.ProductSnapshot} ProductSnapshot
                 */
                ProductSnapshot.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.ProductMessage.ProductSnapshot)
                        return object;
                    var message = new $root.WAE2E.Message.ProductMessage.ProductSnapshot();
                    if (object.productImage != null) {
                        if (typeof object.productImage !== "object")
                            throw TypeError(".WAE2E.Message.ProductMessage.ProductSnapshot.productImage: object expected");
                        message.productImage = $root.WAE2E.Message.ImageMessage.fromObject(object.productImage);
                    }
                    if (object.productID != null)
                        message.productID = String(object.productID);
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.currencyCode != null)
                        message.currencyCode = String(object.currencyCode);
                    if (object.priceAmount1000 != null)
                        if ($util.Long)
                            (message.priceAmount1000 = $util.Long.fromValue(object.priceAmount1000)).unsigned = false;
                        else if (typeof object.priceAmount1000 === "string")
                            message.priceAmount1000 = parseInt(object.priceAmount1000, 10);
                        else if (typeof object.priceAmount1000 === "number")
                            message.priceAmount1000 = object.priceAmount1000;
                        else if (typeof object.priceAmount1000 === "object")
                            message.priceAmount1000 = new $util.LongBits(object.priceAmount1000.low >>> 0, object.priceAmount1000.high >>> 0).toNumber();
                    if (object.retailerID != null)
                        message.retailerID = String(object.retailerID);
                    if (object.URL != null)
                        message.URL = String(object.URL);
                    if (object.productImageCount != null)
                        message.productImageCount = object.productImageCount >>> 0;
                    if (object.firstImageID != null)
                        message.firstImageID = String(object.firstImageID);
                    if (object.salePriceAmount1000 != null)
                        if ($util.Long)
                            (message.salePriceAmount1000 = $util.Long.fromValue(object.salePriceAmount1000)).unsigned = false;
                        else if (typeof object.salePriceAmount1000 === "string")
                            message.salePriceAmount1000 = parseInt(object.salePriceAmount1000, 10);
                        else if (typeof object.salePriceAmount1000 === "number")
                            message.salePriceAmount1000 = object.salePriceAmount1000;
                        else if (typeof object.salePriceAmount1000 === "object")
                            message.salePriceAmount1000 = new $util.LongBits(object.salePriceAmount1000.low >>> 0, object.salePriceAmount1000.high >>> 0).toNumber();
                    return message;
                };

                /**
                 * Creates a plain object from a ProductSnapshot message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @static
                 * @param {WAE2E.Message.ProductMessage.ProductSnapshot} message ProductSnapshot
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ProductSnapshot.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.productImage = null;
                        object.productID = "";
                        object.title = "";
                        object.description = "";
                        object.currencyCode = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.priceAmount1000 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.priceAmount1000 = options.longs === String ? "0" : 0;
                        object.retailerID = "";
                        object.URL = "";
                        object.productImageCount = 0;
                        object.firstImageID = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.salePriceAmount1000 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.salePriceAmount1000 = options.longs === String ? "0" : 0;
                    }
                    if (message.productImage != null && message.hasOwnProperty("productImage"))
                        object.productImage = $root.WAE2E.Message.ImageMessage.toObject(message.productImage, options);
                    if (message.productID != null && message.hasOwnProperty("productID"))
                        object.productID = message.productID;
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.currencyCode != null && message.hasOwnProperty("currencyCode"))
                        object.currencyCode = message.currencyCode;
                    if (message.priceAmount1000 != null && message.hasOwnProperty("priceAmount1000"))
                        if (typeof message.priceAmount1000 === "number")
                            object.priceAmount1000 = options.longs === String ? String(message.priceAmount1000) : message.priceAmount1000;
                        else
                            object.priceAmount1000 = options.longs === String ? $util.Long.prototype.toString.call(message.priceAmount1000) : options.longs === Number ? new $util.LongBits(message.priceAmount1000.low >>> 0, message.priceAmount1000.high >>> 0).toNumber() : message.priceAmount1000;
                    if (message.retailerID != null && message.hasOwnProperty("retailerID"))
                        object.retailerID = message.retailerID;
                    if (message.URL != null && message.hasOwnProperty("URL"))
                        object.URL = message.URL;
                    if (message.productImageCount != null && message.hasOwnProperty("productImageCount"))
                        object.productImageCount = message.productImageCount;
                    if (message.firstImageID != null && message.hasOwnProperty("firstImageID"))
                        object.firstImageID = message.firstImageID;
                    if (message.salePriceAmount1000 != null && message.hasOwnProperty("salePriceAmount1000"))
                        if (typeof message.salePriceAmount1000 === "number")
                            object.salePriceAmount1000 = options.longs === String ? String(message.salePriceAmount1000) : message.salePriceAmount1000;
                        else
                            object.salePriceAmount1000 = options.longs === String ? $util.Long.prototype.toString.call(message.salePriceAmount1000) : options.longs === Number ? new $util.LongBits(message.salePriceAmount1000.low >>> 0, message.salePriceAmount1000.high >>> 0).toNumber() : message.salePriceAmount1000;
                    return object;
                };

                /**
                 * Converts this ProductSnapshot to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ProductSnapshot.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for ProductSnapshot
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.ProductMessage.ProductSnapshot
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ProductSnapshot.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.ProductMessage.ProductSnapshot";
                };

                return ProductSnapshot;
            })();

            ProductMessage.CatalogSnapshot = (function() {

                /**
                 * Properties of a CatalogSnapshot.
                 * @memberof WAE2E.Message.ProductMessage
                 * @interface ICatalogSnapshot
                 * @property {WAE2E.Message.IImageMessage|null} [catalogImage] CatalogSnapshot catalogImage
                 * @property {string|null} [title] CatalogSnapshot title
                 * @property {string|null} [description] CatalogSnapshot description
                 */

                /**
                 * Constructs a new CatalogSnapshot.
                 * @memberof WAE2E.Message.ProductMessage
                 * @classdesc Represents a CatalogSnapshot.
                 * @implements ICatalogSnapshot
                 * @constructor
                 * @param {WAE2E.Message.ProductMessage.ICatalogSnapshot=} [properties] Properties to set
                 */
                function CatalogSnapshot(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CatalogSnapshot catalogImage.
                 * @member {WAE2E.Message.IImageMessage|null|undefined} catalogImage
                 * @memberof WAE2E.Message.ProductMessage.CatalogSnapshot
                 * @instance
                 */
                CatalogSnapshot.prototype.catalogImage = null;

                /**
                 * CatalogSnapshot title.
                 * @member {string} title
                 * @memberof WAE2E.Message.ProductMessage.CatalogSnapshot
                 * @instance
                 */
                CatalogSnapshot.prototype.title = "";

                /**
                 * CatalogSnapshot description.
                 * @member {string} description
                 * @memberof WAE2E.Message.ProductMessage.CatalogSnapshot
                 * @instance
                 */
                CatalogSnapshot.prototype.description = "";

                /**
                 * Creates a new CatalogSnapshot instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.ProductMessage.CatalogSnapshot
                 * @static
                 * @param {WAE2E.Message.ProductMessage.ICatalogSnapshot=} [properties] Properties to set
                 * @returns {WAE2E.Message.ProductMessage.CatalogSnapshot} CatalogSnapshot instance
                 */
                CatalogSnapshot.create = function create(properties) {
                    return new CatalogSnapshot(properties);
                };

                /**
                 * Encodes the specified CatalogSnapshot message. Does not implicitly {@link WAE2E.Message.ProductMessage.CatalogSnapshot.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.ProductMessage.CatalogSnapshot
                 * @static
                 * @param {WAE2E.Message.ProductMessage.ICatalogSnapshot} message CatalogSnapshot message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CatalogSnapshot.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.catalogImage != null && Object.hasOwnProperty.call(message, "catalogImage"))
                        $root.WAE2E.Message.ImageMessage.encode(message.catalogImage, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                    return writer;
                };

                /**
                 * Encodes the specified CatalogSnapshot message, length delimited. Does not implicitly {@link WAE2E.Message.ProductMessage.CatalogSnapshot.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.ProductMessage.CatalogSnapshot
                 * @static
                 * @param {WAE2E.Message.ProductMessage.ICatalogSnapshot} message CatalogSnapshot message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CatalogSnapshot.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CatalogSnapshot message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.ProductMessage.CatalogSnapshot
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.ProductMessage.CatalogSnapshot} CatalogSnapshot
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CatalogSnapshot.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ProductMessage.CatalogSnapshot();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.catalogImage = $root.WAE2E.Message.ImageMessage.decode(reader, reader.uint32());
                                break;
                            }
                        case 2: {
                                message.title = reader.string();
                                break;
                            }
                        case 3: {
                                message.description = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a CatalogSnapshot message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.ProductMessage.CatalogSnapshot
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.ProductMessage.CatalogSnapshot} CatalogSnapshot
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CatalogSnapshot.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CatalogSnapshot message.
                 * @function verify
                 * @memberof WAE2E.Message.ProductMessage.CatalogSnapshot
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CatalogSnapshot.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.catalogImage != null && message.hasOwnProperty("catalogImage")) {
                        var error = $root.WAE2E.Message.ImageMessage.verify(message.catalogImage);
                        if (error)
                            return "catalogImage." + error;
                    }
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    return null;
                };

                /**
                 * Creates a CatalogSnapshot message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.ProductMessage.CatalogSnapshot
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.ProductMessage.CatalogSnapshot} CatalogSnapshot
                 */
                CatalogSnapshot.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.ProductMessage.CatalogSnapshot)
                        return object;
                    var message = new $root.WAE2E.Message.ProductMessage.CatalogSnapshot();
                    if (object.catalogImage != null) {
                        if (typeof object.catalogImage !== "object")
                            throw TypeError(".WAE2E.Message.ProductMessage.CatalogSnapshot.catalogImage: object expected");
                        message.catalogImage = $root.WAE2E.Message.ImageMessage.fromObject(object.catalogImage);
                    }
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    return message;
                };

                /**
                 * Creates a plain object from a CatalogSnapshot message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.ProductMessage.CatalogSnapshot
                 * @static
                 * @param {WAE2E.Message.ProductMessage.CatalogSnapshot} message CatalogSnapshot
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CatalogSnapshot.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.catalogImage = null;
                        object.title = "";
                        object.description = "";
                    }
                    if (message.catalogImage != null && message.hasOwnProperty("catalogImage"))
                        object.catalogImage = $root.WAE2E.Message.ImageMessage.toObject(message.catalogImage, options);
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    return object;
                };

                /**
                 * Converts this CatalogSnapshot to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.ProductMessage.CatalogSnapshot
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CatalogSnapshot.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for CatalogSnapshot
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.ProductMessage.CatalogSnapshot
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CatalogSnapshot.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.ProductMessage.CatalogSnapshot";
                };

                return CatalogSnapshot;
            })();

            return ProductMessage;
        })();

        Message.TemplateButtonReplyMessage = (function() {

            /**
             * Properties of a TemplateButtonReplyMessage.
             * @memberof WAE2E.Message
             * @interface ITemplateButtonReplyMessage
             * @property {string|null} [selectedID] TemplateButtonReplyMessage selectedID
             * @property {string|null} [selectedDisplayText] TemplateButtonReplyMessage selectedDisplayText
             * @property {WAE2E.IContextInfo|null} [contextInfo] TemplateButtonReplyMessage contextInfo
             * @property {number|null} [selectedIndex] TemplateButtonReplyMessage selectedIndex
             * @property {number|null} [selectedCarouselCardIndex] TemplateButtonReplyMessage selectedCarouselCardIndex
             */

            /**
             * Constructs a new TemplateButtonReplyMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a TemplateButtonReplyMessage.
             * @implements ITemplateButtonReplyMessage
             * @constructor
             * @param {WAE2E.Message.ITemplateButtonReplyMessage=} [properties] Properties to set
             */
            function TemplateButtonReplyMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TemplateButtonReplyMessage selectedID.
             * @member {string} selectedID
             * @memberof WAE2E.Message.TemplateButtonReplyMessage
             * @instance
             */
            TemplateButtonReplyMessage.prototype.selectedID = "";

            /**
             * TemplateButtonReplyMessage selectedDisplayText.
             * @member {string} selectedDisplayText
             * @memberof WAE2E.Message.TemplateButtonReplyMessage
             * @instance
             */
            TemplateButtonReplyMessage.prototype.selectedDisplayText = "";

            /**
             * TemplateButtonReplyMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.TemplateButtonReplyMessage
             * @instance
             */
            TemplateButtonReplyMessage.prototype.contextInfo = null;

            /**
             * TemplateButtonReplyMessage selectedIndex.
             * @member {number} selectedIndex
             * @memberof WAE2E.Message.TemplateButtonReplyMessage
             * @instance
             */
            TemplateButtonReplyMessage.prototype.selectedIndex = 0;

            /**
             * TemplateButtonReplyMessage selectedCarouselCardIndex.
             * @member {number} selectedCarouselCardIndex
             * @memberof WAE2E.Message.TemplateButtonReplyMessage
             * @instance
             */
            TemplateButtonReplyMessage.prototype.selectedCarouselCardIndex = 0;

            /**
             * Creates a new TemplateButtonReplyMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.TemplateButtonReplyMessage
             * @static
             * @param {WAE2E.Message.ITemplateButtonReplyMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.TemplateButtonReplyMessage} TemplateButtonReplyMessage instance
             */
            TemplateButtonReplyMessage.create = function create(properties) {
                return new TemplateButtonReplyMessage(properties);
            };

            /**
             * Encodes the specified TemplateButtonReplyMessage message. Does not implicitly {@link WAE2E.Message.TemplateButtonReplyMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.TemplateButtonReplyMessage
             * @static
             * @param {WAE2E.Message.ITemplateButtonReplyMessage} message TemplateButtonReplyMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TemplateButtonReplyMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.selectedID != null && Object.hasOwnProperty.call(message, "selectedID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.selectedID);
                if (message.selectedDisplayText != null && Object.hasOwnProperty.call(message, "selectedDisplayText"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.selectedDisplayText);
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.selectedIndex != null && Object.hasOwnProperty.call(message, "selectedIndex"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.selectedIndex);
                if (message.selectedCarouselCardIndex != null && Object.hasOwnProperty.call(message, "selectedCarouselCardIndex"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.selectedCarouselCardIndex);
                return writer;
            };

            /**
             * Encodes the specified TemplateButtonReplyMessage message, length delimited. Does not implicitly {@link WAE2E.Message.TemplateButtonReplyMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.TemplateButtonReplyMessage
             * @static
             * @param {WAE2E.Message.ITemplateButtonReplyMessage} message TemplateButtonReplyMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TemplateButtonReplyMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TemplateButtonReplyMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.TemplateButtonReplyMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.TemplateButtonReplyMessage} TemplateButtonReplyMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TemplateButtonReplyMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.TemplateButtonReplyMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.selectedID = reader.string();
                            break;
                        }
                    case 2: {
                            message.selectedDisplayText = reader.string();
                            break;
                        }
                    case 3: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.selectedIndex = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.selectedCarouselCardIndex = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TemplateButtonReplyMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.TemplateButtonReplyMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.TemplateButtonReplyMessage} TemplateButtonReplyMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TemplateButtonReplyMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TemplateButtonReplyMessage message.
             * @function verify
             * @memberof WAE2E.Message.TemplateButtonReplyMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TemplateButtonReplyMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.selectedID != null && message.hasOwnProperty("selectedID"))
                    if (!$util.isString(message.selectedID))
                        return "selectedID: string expected";
                if (message.selectedDisplayText != null && message.hasOwnProperty("selectedDisplayText"))
                    if (!$util.isString(message.selectedDisplayText))
                        return "selectedDisplayText: string expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                if (message.selectedIndex != null && message.hasOwnProperty("selectedIndex"))
                    if (!$util.isInteger(message.selectedIndex))
                        return "selectedIndex: integer expected";
                if (message.selectedCarouselCardIndex != null && message.hasOwnProperty("selectedCarouselCardIndex"))
                    if (!$util.isInteger(message.selectedCarouselCardIndex))
                        return "selectedCarouselCardIndex: integer expected";
                return null;
            };

            /**
             * Creates a TemplateButtonReplyMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.TemplateButtonReplyMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.TemplateButtonReplyMessage} TemplateButtonReplyMessage
             */
            TemplateButtonReplyMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.TemplateButtonReplyMessage)
                    return object;
                var message = new $root.WAE2E.Message.TemplateButtonReplyMessage();
                if (object.selectedID != null)
                    message.selectedID = String(object.selectedID);
                if (object.selectedDisplayText != null)
                    message.selectedDisplayText = String(object.selectedDisplayText);
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.TemplateButtonReplyMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                if (object.selectedIndex != null)
                    message.selectedIndex = object.selectedIndex >>> 0;
                if (object.selectedCarouselCardIndex != null)
                    message.selectedCarouselCardIndex = object.selectedCarouselCardIndex >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a TemplateButtonReplyMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.TemplateButtonReplyMessage
             * @static
             * @param {WAE2E.Message.TemplateButtonReplyMessage} message TemplateButtonReplyMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TemplateButtonReplyMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.selectedID = "";
                    object.selectedDisplayText = "";
                    object.contextInfo = null;
                    object.selectedIndex = 0;
                    object.selectedCarouselCardIndex = 0;
                }
                if (message.selectedID != null && message.hasOwnProperty("selectedID"))
                    object.selectedID = message.selectedID;
                if (message.selectedDisplayText != null && message.hasOwnProperty("selectedDisplayText"))
                    object.selectedDisplayText = message.selectedDisplayText;
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                if (message.selectedIndex != null && message.hasOwnProperty("selectedIndex"))
                    object.selectedIndex = message.selectedIndex;
                if (message.selectedCarouselCardIndex != null && message.hasOwnProperty("selectedCarouselCardIndex"))
                    object.selectedCarouselCardIndex = message.selectedCarouselCardIndex;
                return object;
            };

            /**
             * Converts this TemplateButtonReplyMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.TemplateButtonReplyMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TemplateButtonReplyMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for TemplateButtonReplyMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.TemplateButtonReplyMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            TemplateButtonReplyMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.TemplateButtonReplyMessage";
            };

            return TemplateButtonReplyMessage;
        })();

        Message.TemplateMessage = (function() {

            /**
             * Properties of a TemplateMessage.
             * @memberof WAE2E.Message
             * @interface ITemplateMessage
             * @property {WAE2E.Message.TemplateMessage.IFourRowTemplate|null} [fourRowTemplate] TemplateMessage fourRowTemplate
             * @property {WAE2E.Message.TemplateMessage.IHydratedFourRowTemplate|null} [hydratedFourRowTemplate] TemplateMessage hydratedFourRowTemplate
             * @property {WAE2E.Message.IInteractiveMessage|null} [interactiveMessageTemplate] TemplateMessage interactiveMessageTemplate
             * @property {WAE2E.IContextInfo|null} [contextInfo] TemplateMessage contextInfo
             * @property {WAE2E.Message.TemplateMessage.IHydratedFourRowTemplate|null} [hydratedTemplate] TemplateMessage hydratedTemplate
             * @property {string|null} [templateID] TemplateMessage templateID
             */

            /**
             * Constructs a new TemplateMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a TemplateMessage.
             * @implements ITemplateMessage
             * @constructor
             * @param {WAE2E.Message.ITemplateMessage=} [properties] Properties to set
             */
            function TemplateMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TemplateMessage fourRowTemplate.
             * @member {WAE2E.Message.TemplateMessage.IFourRowTemplate|null|undefined} fourRowTemplate
             * @memberof WAE2E.Message.TemplateMessage
             * @instance
             */
            TemplateMessage.prototype.fourRowTemplate = null;

            /**
             * TemplateMessage hydratedFourRowTemplate.
             * @member {WAE2E.Message.TemplateMessage.IHydratedFourRowTemplate|null|undefined} hydratedFourRowTemplate
             * @memberof WAE2E.Message.TemplateMessage
             * @instance
             */
            TemplateMessage.prototype.hydratedFourRowTemplate = null;

            /**
             * TemplateMessage interactiveMessageTemplate.
             * @member {WAE2E.Message.IInteractiveMessage|null|undefined} interactiveMessageTemplate
             * @memberof WAE2E.Message.TemplateMessage
             * @instance
             */
            TemplateMessage.prototype.interactiveMessageTemplate = null;

            /**
             * TemplateMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.TemplateMessage
             * @instance
             */
            TemplateMessage.prototype.contextInfo = null;

            /**
             * TemplateMessage hydratedTemplate.
             * @member {WAE2E.Message.TemplateMessage.IHydratedFourRowTemplate|null|undefined} hydratedTemplate
             * @memberof WAE2E.Message.TemplateMessage
             * @instance
             */
            TemplateMessage.prototype.hydratedTemplate = null;

            /**
             * TemplateMessage templateID.
             * @member {string} templateID
             * @memberof WAE2E.Message.TemplateMessage
             * @instance
             */
            TemplateMessage.prototype.templateID = "";

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * TemplateMessage format.
             * @member {"fourRowTemplate"|"hydratedFourRowTemplate"|"interactiveMessageTemplate"|undefined} format
             * @memberof WAE2E.Message.TemplateMessage
             * @instance
             */
            Object.defineProperty(TemplateMessage.prototype, "format", {
                get: $util.oneOfGetter($oneOfFields = ["fourRowTemplate", "hydratedFourRowTemplate", "interactiveMessageTemplate"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new TemplateMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.TemplateMessage
             * @static
             * @param {WAE2E.Message.ITemplateMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.TemplateMessage} TemplateMessage instance
             */
            TemplateMessage.create = function create(properties) {
                return new TemplateMessage(properties);
            };

            /**
             * Encodes the specified TemplateMessage message. Does not implicitly {@link WAE2E.Message.TemplateMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.TemplateMessage
             * @static
             * @param {WAE2E.Message.ITemplateMessage} message TemplateMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TemplateMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.fourRowTemplate != null && Object.hasOwnProperty.call(message, "fourRowTemplate"))
                    $root.WAE2E.Message.TemplateMessage.FourRowTemplate.encode(message.fourRowTemplate, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.hydratedFourRowTemplate != null && Object.hasOwnProperty.call(message, "hydratedFourRowTemplate"))
                    $root.WAE2E.Message.TemplateMessage.HydratedFourRowTemplate.encode(message.hydratedFourRowTemplate, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.hydratedTemplate != null && Object.hasOwnProperty.call(message, "hydratedTemplate"))
                    $root.WAE2E.Message.TemplateMessage.HydratedFourRowTemplate.encode(message.hydratedTemplate, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.interactiveMessageTemplate != null && Object.hasOwnProperty.call(message, "interactiveMessageTemplate"))
                    $root.WAE2E.Message.InteractiveMessage.encode(message.interactiveMessageTemplate, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.templateID != null && Object.hasOwnProperty.call(message, "templateID"))
                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.templateID);
                return writer;
            };

            /**
             * Encodes the specified TemplateMessage message, length delimited. Does not implicitly {@link WAE2E.Message.TemplateMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.TemplateMessage
             * @static
             * @param {WAE2E.Message.ITemplateMessage} message TemplateMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TemplateMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TemplateMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.TemplateMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.TemplateMessage} TemplateMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TemplateMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.TemplateMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.fourRowTemplate = $root.WAE2E.Message.TemplateMessage.FourRowTemplate.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.hydratedFourRowTemplate = $root.WAE2E.Message.TemplateMessage.HydratedFourRowTemplate.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.interactiveMessageTemplate = $root.WAE2E.Message.InteractiveMessage.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.hydratedTemplate = $root.WAE2E.Message.TemplateMessage.HydratedFourRowTemplate.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            message.templateID = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TemplateMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.TemplateMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.TemplateMessage} TemplateMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TemplateMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TemplateMessage message.
             * @function verify
             * @memberof WAE2E.Message.TemplateMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TemplateMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.fourRowTemplate != null && message.hasOwnProperty("fourRowTemplate")) {
                    properties.format = 1;
                    {
                        var error = $root.WAE2E.Message.TemplateMessage.FourRowTemplate.verify(message.fourRowTemplate);
                        if (error)
                            return "fourRowTemplate." + error;
                    }
                }
                if (message.hydratedFourRowTemplate != null && message.hasOwnProperty("hydratedFourRowTemplate")) {
                    if (properties.format === 1)
                        return "format: multiple values";
                    properties.format = 1;
                    {
                        var error = $root.WAE2E.Message.TemplateMessage.HydratedFourRowTemplate.verify(message.hydratedFourRowTemplate);
                        if (error)
                            return "hydratedFourRowTemplate." + error;
                    }
                }
                if (message.interactiveMessageTemplate != null && message.hasOwnProperty("interactiveMessageTemplate")) {
                    if (properties.format === 1)
                        return "format: multiple values";
                    properties.format = 1;
                    {
                        var error = $root.WAE2E.Message.InteractiveMessage.verify(message.interactiveMessageTemplate);
                        if (error)
                            return "interactiveMessageTemplate." + error;
                    }
                }
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                if (message.hydratedTemplate != null && message.hasOwnProperty("hydratedTemplate")) {
                    var error = $root.WAE2E.Message.TemplateMessage.HydratedFourRowTemplate.verify(message.hydratedTemplate);
                    if (error)
                        return "hydratedTemplate." + error;
                }
                if (message.templateID != null && message.hasOwnProperty("templateID"))
                    if (!$util.isString(message.templateID))
                        return "templateID: string expected";
                return null;
            };

            /**
             * Creates a TemplateMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.TemplateMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.TemplateMessage} TemplateMessage
             */
            TemplateMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.TemplateMessage)
                    return object;
                var message = new $root.WAE2E.Message.TemplateMessage();
                if (object.fourRowTemplate != null) {
                    if (typeof object.fourRowTemplate !== "object")
                        throw TypeError(".WAE2E.Message.TemplateMessage.fourRowTemplate: object expected");
                    message.fourRowTemplate = $root.WAE2E.Message.TemplateMessage.FourRowTemplate.fromObject(object.fourRowTemplate);
                }
                if (object.hydratedFourRowTemplate != null) {
                    if (typeof object.hydratedFourRowTemplate !== "object")
                        throw TypeError(".WAE2E.Message.TemplateMessage.hydratedFourRowTemplate: object expected");
                    message.hydratedFourRowTemplate = $root.WAE2E.Message.TemplateMessage.HydratedFourRowTemplate.fromObject(object.hydratedFourRowTemplate);
                }
                if (object.interactiveMessageTemplate != null) {
                    if (typeof object.interactiveMessageTemplate !== "object")
                        throw TypeError(".WAE2E.Message.TemplateMessage.interactiveMessageTemplate: object expected");
                    message.interactiveMessageTemplate = $root.WAE2E.Message.InteractiveMessage.fromObject(object.interactiveMessageTemplate);
                }
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.TemplateMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                if (object.hydratedTemplate != null) {
                    if (typeof object.hydratedTemplate !== "object")
                        throw TypeError(".WAE2E.Message.TemplateMessage.hydratedTemplate: object expected");
                    message.hydratedTemplate = $root.WAE2E.Message.TemplateMessage.HydratedFourRowTemplate.fromObject(object.hydratedTemplate);
                }
                if (object.templateID != null)
                    message.templateID = String(object.templateID);
                return message;
            };

            /**
             * Creates a plain object from a TemplateMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.TemplateMessage
             * @static
             * @param {WAE2E.Message.TemplateMessage} message TemplateMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TemplateMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.contextInfo = null;
                    object.hydratedTemplate = null;
                    object.templateID = "";
                }
                if (message.fourRowTemplate != null && message.hasOwnProperty("fourRowTemplate")) {
                    object.fourRowTemplate = $root.WAE2E.Message.TemplateMessage.FourRowTemplate.toObject(message.fourRowTemplate, options);
                    if (options.oneofs)
                        object.format = "fourRowTemplate";
                }
                if (message.hydratedFourRowTemplate != null && message.hasOwnProperty("hydratedFourRowTemplate")) {
                    object.hydratedFourRowTemplate = $root.WAE2E.Message.TemplateMessage.HydratedFourRowTemplate.toObject(message.hydratedFourRowTemplate, options);
                    if (options.oneofs)
                        object.format = "hydratedFourRowTemplate";
                }
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                if (message.hydratedTemplate != null && message.hasOwnProperty("hydratedTemplate"))
                    object.hydratedTemplate = $root.WAE2E.Message.TemplateMessage.HydratedFourRowTemplate.toObject(message.hydratedTemplate, options);
                if (message.interactiveMessageTemplate != null && message.hasOwnProperty("interactiveMessageTemplate")) {
                    object.interactiveMessageTemplate = $root.WAE2E.Message.InteractiveMessage.toObject(message.interactiveMessageTemplate, options);
                    if (options.oneofs)
                        object.format = "interactiveMessageTemplate";
                }
                if (message.templateID != null && message.hasOwnProperty("templateID"))
                    object.templateID = message.templateID;
                return object;
            };

            /**
             * Converts this TemplateMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.TemplateMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TemplateMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for TemplateMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.TemplateMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            TemplateMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.TemplateMessage";
            };

            TemplateMessage.HydratedFourRowTemplate = (function() {

                /**
                 * Properties of a HydratedFourRowTemplate.
                 * @memberof WAE2E.Message.TemplateMessage
                 * @interface IHydratedFourRowTemplate
                 * @property {WAE2E.Message.IDocumentMessage|null} [documentMessage] HydratedFourRowTemplate documentMessage
                 * @property {string|null} [hydratedTitleText] HydratedFourRowTemplate hydratedTitleText
                 * @property {WAE2E.Message.IImageMessage|null} [imageMessage] HydratedFourRowTemplate imageMessage
                 * @property {WAE2E.Message.IVideoMessage|null} [videoMessage] HydratedFourRowTemplate videoMessage
                 * @property {WAE2E.Message.ILocationMessage|null} [locationMessage] HydratedFourRowTemplate locationMessage
                 * @property {string|null} [hydratedContentText] HydratedFourRowTemplate hydratedContentText
                 * @property {string|null} [hydratedFooterText] HydratedFourRowTemplate hydratedFooterText
                 * @property {Array.<WAE2E.IHydratedTemplateButton>|null} [hydratedButtons] HydratedFourRowTemplate hydratedButtons
                 * @property {string|null} [templateID] HydratedFourRowTemplate templateID
                 * @property {boolean|null} [maskLinkedDevices] HydratedFourRowTemplate maskLinkedDevices
                 */

                /**
                 * Constructs a new HydratedFourRowTemplate.
                 * @memberof WAE2E.Message.TemplateMessage
                 * @classdesc Represents a HydratedFourRowTemplate.
                 * @implements IHydratedFourRowTemplate
                 * @constructor
                 * @param {WAE2E.Message.TemplateMessage.IHydratedFourRowTemplate=} [properties] Properties to set
                 */
                function HydratedFourRowTemplate(properties) {
                    this.hydratedButtons = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * HydratedFourRowTemplate documentMessage.
                 * @member {WAE2E.Message.IDocumentMessage|null|undefined} documentMessage
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @instance
                 */
                HydratedFourRowTemplate.prototype.documentMessage = null;

                /**
                 * HydratedFourRowTemplate hydratedTitleText.
                 * @member {string|null|undefined} hydratedTitleText
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @instance
                 */
                HydratedFourRowTemplate.prototype.hydratedTitleText = null;

                /**
                 * HydratedFourRowTemplate imageMessage.
                 * @member {WAE2E.Message.IImageMessage|null|undefined} imageMessage
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @instance
                 */
                HydratedFourRowTemplate.prototype.imageMessage = null;

                /**
                 * HydratedFourRowTemplate videoMessage.
                 * @member {WAE2E.Message.IVideoMessage|null|undefined} videoMessage
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @instance
                 */
                HydratedFourRowTemplate.prototype.videoMessage = null;

                /**
                 * HydratedFourRowTemplate locationMessage.
                 * @member {WAE2E.Message.ILocationMessage|null|undefined} locationMessage
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @instance
                 */
                HydratedFourRowTemplate.prototype.locationMessage = null;

                /**
                 * HydratedFourRowTemplate hydratedContentText.
                 * @member {string} hydratedContentText
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @instance
                 */
                HydratedFourRowTemplate.prototype.hydratedContentText = "";

                /**
                 * HydratedFourRowTemplate hydratedFooterText.
                 * @member {string} hydratedFooterText
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @instance
                 */
                HydratedFourRowTemplate.prototype.hydratedFooterText = "";

                /**
                 * HydratedFourRowTemplate hydratedButtons.
                 * @member {Array.<WAE2E.IHydratedTemplateButton>} hydratedButtons
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @instance
                 */
                HydratedFourRowTemplate.prototype.hydratedButtons = $util.emptyArray;

                /**
                 * HydratedFourRowTemplate templateID.
                 * @member {string} templateID
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @instance
                 */
                HydratedFourRowTemplate.prototype.templateID = "";

                /**
                 * HydratedFourRowTemplate maskLinkedDevices.
                 * @member {boolean} maskLinkedDevices
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @instance
                 */
                HydratedFourRowTemplate.prototype.maskLinkedDevices = false;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * HydratedFourRowTemplate title.
                 * @member {"documentMessage"|"hydratedTitleText"|"imageMessage"|"videoMessage"|"locationMessage"|undefined} title
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @instance
                 */
                Object.defineProperty(HydratedFourRowTemplate.prototype, "title", {
                    get: $util.oneOfGetter($oneOfFields = ["documentMessage", "hydratedTitleText", "imageMessage", "videoMessage", "locationMessage"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new HydratedFourRowTemplate instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @static
                 * @param {WAE2E.Message.TemplateMessage.IHydratedFourRowTemplate=} [properties] Properties to set
                 * @returns {WAE2E.Message.TemplateMessage.HydratedFourRowTemplate} HydratedFourRowTemplate instance
                 */
                HydratedFourRowTemplate.create = function create(properties) {
                    return new HydratedFourRowTemplate(properties);
                };

                /**
                 * Encodes the specified HydratedFourRowTemplate message. Does not implicitly {@link WAE2E.Message.TemplateMessage.HydratedFourRowTemplate.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @static
                 * @param {WAE2E.Message.TemplateMessage.IHydratedFourRowTemplate} message HydratedFourRowTemplate message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HydratedFourRowTemplate.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.documentMessage != null && Object.hasOwnProperty.call(message, "documentMessage"))
                        $root.WAE2E.Message.DocumentMessage.encode(message.documentMessage, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.hydratedTitleText != null && Object.hasOwnProperty.call(message, "hydratedTitleText"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.hydratedTitleText);
                    if (message.imageMessage != null && Object.hasOwnProperty.call(message, "imageMessage"))
                        $root.WAE2E.Message.ImageMessage.encode(message.imageMessage, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.videoMessage != null && Object.hasOwnProperty.call(message, "videoMessage"))
                        $root.WAE2E.Message.VideoMessage.encode(message.videoMessage, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.locationMessage != null && Object.hasOwnProperty.call(message, "locationMessage"))
                        $root.WAE2E.Message.LocationMessage.encode(message.locationMessage, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.hydratedContentText != null && Object.hasOwnProperty.call(message, "hydratedContentText"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.hydratedContentText);
                    if (message.hydratedFooterText != null && Object.hasOwnProperty.call(message, "hydratedFooterText"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.hydratedFooterText);
                    if (message.hydratedButtons != null && message.hydratedButtons.length)
                        for (var i = 0; i < message.hydratedButtons.length; ++i)
                            $root.WAE2E.HydratedTemplateButton.encode(message.hydratedButtons[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.templateID != null && Object.hasOwnProperty.call(message, "templateID"))
                        writer.uint32(/* id 9, wireType 2 =*/74).string(message.templateID);
                    if (message.maskLinkedDevices != null && Object.hasOwnProperty.call(message, "maskLinkedDevices"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.maskLinkedDevices);
                    return writer;
                };

                /**
                 * Encodes the specified HydratedFourRowTemplate message, length delimited. Does not implicitly {@link WAE2E.Message.TemplateMessage.HydratedFourRowTemplate.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @static
                 * @param {WAE2E.Message.TemplateMessage.IHydratedFourRowTemplate} message HydratedFourRowTemplate message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HydratedFourRowTemplate.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a HydratedFourRowTemplate message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.TemplateMessage.HydratedFourRowTemplate} HydratedFourRowTemplate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HydratedFourRowTemplate.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.TemplateMessage.HydratedFourRowTemplate();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.documentMessage = $root.WAE2E.Message.DocumentMessage.decode(reader, reader.uint32());
                                break;
                            }
                        case 2: {
                                message.hydratedTitleText = reader.string();
                                break;
                            }
                        case 3: {
                                message.imageMessage = $root.WAE2E.Message.ImageMessage.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                message.videoMessage = $root.WAE2E.Message.VideoMessage.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.locationMessage = $root.WAE2E.Message.LocationMessage.decode(reader, reader.uint32());
                                break;
                            }
                        case 6: {
                                message.hydratedContentText = reader.string();
                                break;
                            }
                        case 7: {
                                message.hydratedFooterText = reader.string();
                                break;
                            }
                        case 8: {
                                if (!(message.hydratedButtons && message.hydratedButtons.length))
                                    message.hydratedButtons = [];
                                message.hydratedButtons.push($root.WAE2E.HydratedTemplateButton.decode(reader, reader.uint32()));
                                break;
                            }
                        case 9: {
                                message.templateID = reader.string();
                                break;
                            }
                        case 10: {
                                message.maskLinkedDevices = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a HydratedFourRowTemplate message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.TemplateMessage.HydratedFourRowTemplate} HydratedFourRowTemplate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HydratedFourRowTemplate.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a HydratedFourRowTemplate message.
                 * @function verify
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HydratedFourRowTemplate.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.documentMessage != null && message.hasOwnProperty("documentMessage")) {
                        properties.title = 1;
                        {
                            var error = $root.WAE2E.Message.DocumentMessage.verify(message.documentMessage);
                            if (error)
                                return "documentMessage." + error;
                        }
                    }
                    if (message.hydratedTitleText != null && message.hasOwnProperty("hydratedTitleText")) {
                        if (properties.title === 1)
                            return "title: multiple values";
                        properties.title = 1;
                        if (!$util.isString(message.hydratedTitleText))
                            return "hydratedTitleText: string expected";
                    }
                    if (message.imageMessage != null && message.hasOwnProperty("imageMessage")) {
                        if (properties.title === 1)
                            return "title: multiple values";
                        properties.title = 1;
                        {
                            var error = $root.WAE2E.Message.ImageMessage.verify(message.imageMessage);
                            if (error)
                                return "imageMessage." + error;
                        }
                    }
                    if (message.videoMessage != null && message.hasOwnProperty("videoMessage")) {
                        if (properties.title === 1)
                            return "title: multiple values";
                        properties.title = 1;
                        {
                            var error = $root.WAE2E.Message.VideoMessage.verify(message.videoMessage);
                            if (error)
                                return "videoMessage." + error;
                        }
                    }
                    if (message.locationMessage != null && message.hasOwnProperty("locationMessage")) {
                        if (properties.title === 1)
                            return "title: multiple values";
                        properties.title = 1;
                        {
                            var error = $root.WAE2E.Message.LocationMessage.verify(message.locationMessage);
                            if (error)
                                return "locationMessage." + error;
                        }
                    }
                    if (message.hydratedContentText != null && message.hasOwnProperty("hydratedContentText"))
                        if (!$util.isString(message.hydratedContentText))
                            return "hydratedContentText: string expected";
                    if (message.hydratedFooterText != null && message.hasOwnProperty("hydratedFooterText"))
                        if (!$util.isString(message.hydratedFooterText))
                            return "hydratedFooterText: string expected";
                    if (message.hydratedButtons != null && message.hasOwnProperty("hydratedButtons")) {
                        if (!Array.isArray(message.hydratedButtons))
                            return "hydratedButtons: array expected";
                        for (var i = 0; i < message.hydratedButtons.length; ++i) {
                            var error = $root.WAE2E.HydratedTemplateButton.verify(message.hydratedButtons[i]);
                            if (error)
                                return "hydratedButtons." + error;
                        }
                    }
                    if (message.templateID != null && message.hasOwnProperty("templateID"))
                        if (!$util.isString(message.templateID))
                            return "templateID: string expected";
                    if (message.maskLinkedDevices != null && message.hasOwnProperty("maskLinkedDevices"))
                        if (typeof message.maskLinkedDevices !== "boolean")
                            return "maskLinkedDevices: boolean expected";
                    return null;
                };

                /**
                 * Creates a HydratedFourRowTemplate message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.TemplateMessage.HydratedFourRowTemplate} HydratedFourRowTemplate
                 */
                HydratedFourRowTemplate.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.TemplateMessage.HydratedFourRowTemplate)
                        return object;
                    var message = new $root.WAE2E.Message.TemplateMessage.HydratedFourRowTemplate();
                    if (object.documentMessage != null) {
                        if (typeof object.documentMessage !== "object")
                            throw TypeError(".WAE2E.Message.TemplateMessage.HydratedFourRowTemplate.documentMessage: object expected");
                        message.documentMessage = $root.WAE2E.Message.DocumentMessage.fromObject(object.documentMessage);
                    }
                    if (object.hydratedTitleText != null)
                        message.hydratedTitleText = String(object.hydratedTitleText);
                    if (object.imageMessage != null) {
                        if (typeof object.imageMessage !== "object")
                            throw TypeError(".WAE2E.Message.TemplateMessage.HydratedFourRowTemplate.imageMessage: object expected");
                        message.imageMessage = $root.WAE2E.Message.ImageMessage.fromObject(object.imageMessage);
                    }
                    if (object.videoMessage != null) {
                        if (typeof object.videoMessage !== "object")
                            throw TypeError(".WAE2E.Message.TemplateMessage.HydratedFourRowTemplate.videoMessage: object expected");
                        message.videoMessage = $root.WAE2E.Message.VideoMessage.fromObject(object.videoMessage);
                    }
                    if (object.locationMessage != null) {
                        if (typeof object.locationMessage !== "object")
                            throw TypeError(".WAE2E.Message.TemplateMessage.HydratedFourRowTemplate.locationMessage: object expected");
                        message.locationMessage = $root.WAE2E.Message.LocationMessage.fromObject(object.locationMessage);
                    }
                    if (object.hydratedContentText != null)
                        message.hydratedContentText = String(object.hydratedContentText);
                    if (object.hydratedFooterText != null)
                        message.hydratedFooterText = String(object.hydratedFooterText);
                    if (object.hydratedButtons) {
                        if (!Array.isArray(object.hydratedButtons))
                            throw TypeError(".WAE2E.Message.TemplateMessage.HydratedFourRowTemplate.hydratedButtons: array expected");
                        message.hydratedButtons = [];
                        for (var i = 0; i < object.hydratedButtons.length; ++i) {
                            if (typeof object.hydratedButtons[i] !== "object")
                                throw TypeError(".WAE2E.Message.TemplateMessage.HydratedFourRowTemplate.hydratedButtons: object expected");
                            message.hydratedButtons[i] = $root.WAE2E.HydratedTemplateButton.fromObject(object.hydratedButtons[i]);
                        }
                    }
                    if (object.templateID != null)
                        message.templateID = String(object.templateID);
                    if (object.maskLinkedDevices != null)
                        message.maskLinkedDevices = Boolean(object.maskLinkedDevices);
                    return message;
                };

                /**
                 * Creates a plain object from a HydratedFourRowTemplate message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @static
                 * @param {WAE2E.Message.TemplateMessage.HydratedFourRowTemplate} message HydratedFourRowTemplate
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HydratedFourRowTemplate.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.hydratedButtons = [];
                    if (options.defaults) {
                        object.hydratedContentText = "";
                        object.hydratedFooterText = "";
                        object.templateID = "";
                        object.maskLinkedDevices = false;
                    }
                    if (message.documentMessage != null && message.hasOwnProperty("documentMessage")) {
                        object.documentMessage = $root.WAE2E.Message.DocumentMessage.toObject(message.documentMessage, options);
                        if (options.oneofs)
                            object.title = "documentMessage";
                    }
                    if (message.hydratedTitleText != null && message.hasOwnProperty("hydratedTitleText")) {
                        object.hydratedTitleText = message.hydratedTitleText;
                        if (options.oneofs)
                            object.title = "hydratedTitleText";
                    }
                    if (message.imageMessage != null && message.hasOwnProperty("imageMessage")) {
                        object.imageMessage = $root.WAE2E.Message.ImageMessage.toObject(message.imageMessage, options);
                        if (options.oneofs)
                            object.title = "imageMessage";
                    }
                    if (message.videoMessage != null && message.hasOwnProperty("videoMessage")) {
                        object.videoMessage = $root.WAE2E.Message.VideoMessage.toObject(message.videoMessage, options);
                        if (options.oneofs)
                            object.title = "videoMessage";
                    }
                    if (message.locationMessage != null && message.hasOwnProperty("locationMessage")) {
                        object.locationMessage = $root.WAE2E.Message.LocationMessage.toObject(message.locationMessage, options);
                        if (options.oneofs)
                            object.title = "locationMessage";
                    }
                    if (message.hydratedContentText != null && message.hasOwnProperty("hydratedContentText"))
                        object.hydratedContentText = message.hydratedContentText;
                    if (message.hydratedFooterText != null && message.hasOwnProperty("hydratedFooterText"))
                        object.hydratedFooterText = message.hydratedFooterText;
                    if (message.hydratedButtons && message.hydratedButtons.length) {
                        object.hydratedButtons = [];
                        for (var j = 0; j < message.hydratedButtons.length; ++j)
                            object.hydratedButtons[j] = $root.WAE2E.HydratedTemplateButton.toObject(message.hydratedButtons[j], options);
                    }
                    if (message.templateID != null && message.hasOwnProperty("templateID"))
                        object.templateID = message.templateID;
                    if (message.maskLinkedDevices != null && message.hasOwnProperty("maskLinkedDevices"))
                        object.maskLinkedDevices = message.maskLinkedDevices;
                    return object;
                };

                /**
                 * Converts this HydratedFourRowTemplate to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HydratedFourRowTemplate.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for HydratedFourRowTemplate
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.TemplateMessage.HydratedFourRowTemplate
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                HydratedFourRowTemplate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.TemplateMessage.HydratedFourRowTemplate";
                };

                return HydratedFourRowTemplate;
            })();

            TemplateMessage.FourRowTemplate = (function() {

                /**
                 * Properties of a FourRowTemplate.
                 * @memberof WAE2E.Message.TemplateMessage
                 * @interface IFourRowTemplate
                 * @property {WAE2E.Message.IDocumentMessage|null} [documentMessage] FourRowTemplate documentMessage
                 * @property {WAE2E.Message.IHighlyStructuredMessage|null} [highlyStructuredMessage] FourRowTemplate highlyStructuredMessage
                 * @property {WAE2E.Message.IImageMessage|null} [imageMessage] FourRowTemplate imageMessage
                 * @property {WAE2E.Message.IVideoMessage|null} [videoMessage] FourRowTemplate videoMessage
                 * @property {WAE2E.Message.ILocationMessage|null} [locationMessage] FourRowTemplate locationMessage
                 * @property {WAE2E.Message.IHighlyStructuredMessage|null} [content] FourRowTemplate content
                 * @property {WAE2E.Message.IHighlyStructuredMessage|null} [footer] FourRowTemplate footer
                 * @property {Array.<WAE2E.ITemplateButton>|null} [buttons] FourRowTemplate buttons
                 */

                /**
                 * Constructs a new FourRowTemplate.
                 * @memberof WAE2E.Message.TemplateMessage
                 * @classdesc Represents a FourRowTemplate.
                 * @implements IFourRowTemplate
                 * @constructor
                 * @param {WAE2E.Message.TemplateMessage.IFourRowTemplate=} [properties] Properties to set
                 */
                function FourRowTemplate(properties) {
                    this.buttons = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * FourRowTemplate documentMessage.
                 * @member {WAE2E.Message.IDocumentMessage|null|undefined} documentMessage
                 * @memberof WAE2E.Message.TemplateMessage.FourRowTemplate
                 * @instance
                 */
                FourRowTemplate.prototype.documentMessage = null;

                /**
                 * FourRowTemplate highlyStructuredMessage.
                 * @member {WAE2E.Message.IHighlyStructuredMessage|null|undefined} highlyStructuredMessage
                 * @memberof WAE2E.Message.TemplateMessage.FourRowTemplate
                 * @instance
                 */
                FourRowTemplate.prototype.highlyStructuredMessage = null;

                /**
                 * FourRowTemplate imageMessage.
                 * @member {WAE2E.Message.IImageMessage|null|undefined} imageMessage
                 * @memberof WAE2E.Message.TemplateMessage.FourRowTemplate
                 * @instance
                 */
                FourRowTemplate.prototype.imageMessage = null;

                /**
                 * FourRowTemplate videoMessage.
                 * @member {WAE2E.Message.IVideoMessage|null|undefined} videoMessage
                 * @memberof WAE2E.Message.TemplateMessage.FourRowTemplate
                 * @instance
                 */
                FourRowTemplate.prototype.videoMessage = null;

                /**
                 * FourRowTemplate locationMessage.
                 * @member {WAE2E.Message.ILocationMessage|null|undefined} locationMessage
                 * @memberof WAE2E.Message.TemplateMessage.FourRowTemplate
                 * @instance
                 */
                FourRowTemplate.prototype.locationMessage = null;

                /**
                 * FourRowTemplate content.
                 * @member {WAE2E.Message.IHighlyStructuredMessage|null|undefined} content
                 * @memberof WAE2E.Message.TemplateMessage.FourRowTemplate
                 * @instance
                 */
                FourRowTemplate.prototype.content = null;

                /**
                 * FourRowTemplate footer.
                 * @member {WAE2E.Message.IHighlyStructuredMessage|null|undefined} footer
                 * @memberof WAE2E.Message.TemplateMessage.FourRowTemplate
                 * @instance
                 */
                FourRowTemplate.prototype.footer = null;

                /**
                 * FourRowTemplate buttons.
                 * @member {Array.<WAE2E.ITemplateButton>} buttons
                 * @memberof WAE2E.Message.TemplateMessage.FourRowTemplate
                 * @instance
                 */
                FourRowTemplate.prototype.buttons = $util.emptyArray;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * FourRowTemplate title.
                 * @member {"documentMessage"|"highlyStructuredMessage"|"imageMessage"|"videoMessage"|"locationMessage"|undefined} title
                 * @memberof WAE2E.Message.TemplateMessage.FourRowTemplate
                 * @instance
                 */
                Object.defineProperty(FourRowTemplate.prototype, "title", {
                    get: $util.oneOfGetter($oneOfFields = ["documentMessage", "highlyStructuredMessage", "imageMessage", "videoMessage", "locationMessage"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new FourRowTemplate instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.TemplateMessage.FourRowTemplate
                 * @static
                 * @param {WAE2E.Message.TemplateMessage.IFourRowTemplate=} [properties] Properties to set
                 * @returns {WAE2E.Message.TemplateMessage.FourRowTemplate} FourRowTemplate instance
                 */
                FourRowTemplate.create = function create(properties) {
                    return new FourRowTemplate(properties);
                };

                /**
                 * Encodes the specified FourRowTemplate message. Does not implicitly {@link WAE2E.Message.TemplateMessage.FourRowTemplate.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.TemplateMessage.FourRowTemplate
                 * @static
                 * @param {WAE2E.Message.TemplateMessage.IFourRowTemplate} message FourRowTemplate message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FourRowTemplate.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.documentMessage != null && Object.hasOwnProperty.call(message, "documentMessage"))
                        $root.WAE2E.Message.DocumentMessage.encode(message.documentMessage, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.highlyStructuredMessage != null && Object.hasOwnProperty.call(message, "highlyStructuredMessage"))
                        $root.WAE2E.Message.HighlyStructuredMessage.encode(message.highlyStructuredMessage, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.imageMessage != null && Object.hasOwnProperty.call(message, "imageMessage"))
                        $root.WAE2E.Message.ImageMessage.encode(message.imageMessage, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.videoMessage != null && Object.hasOwnProperty.call(message, "videoMessage"))
                        $root.WAE2E.Message.VideoMessage.encode(message.videoMessage, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.locationMessage != null && Object.hasOwnProperty.call(message, "locationMessage"))
                        $root.WAE2E.Message.LocationMessage.encode(message.locationMessage, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                        $root.WAE2E.Message.HighlyStructuredMessage.encode(message.content, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.footer != null && Object.hasOwnProperty.call(message, "footer"))
                        $root.WAE2E.Message.HighlyStructuredMessage.encode(message.footer, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.buttons != null && message.buttons.length)
                        for (var i = 0; i < message.buttons.length; ++i)
                            $root.WAE2E.TemplateButton.encode(message.buttons[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified FourRowTemplate message, length delimited. Does not implicitly {@link WAE2E.Message.TemplateMessage.FourRowTemplate.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.TemplateMessage.FourRowTemplate
                 * @static
                 * @param {WAE2E.Message.TemplateMessage.IFourRowTemplate} message FourRowTemplate message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FourRowTemplate.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a FourRowTemplate message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.TemplateMessage.FourRowTemplate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.TemplateMessage.FourRowTemplate} FourRowTemplate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FourRowTemplate.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.TemplateMessage.FourRowTemplate();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.documentMessage = $root.WAE2E.Message.DocumentMessage.decode(reader, reader.uint32());
                                break;
                            }
                        case 2: {
                                message.highlyStructuredMessage = $root.WAE2E.Message.HighlyStructuredMessage.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.imageMessage = $root.WAE2E.Message.ImageMessage.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                message.videoMessage = $root.WAE2E.Message.VideoMessage.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.locationMessage = $root.WAE2E.Message.LocationMessage.decode(reader, reader.uint32());
                                break;
                            }
                        case 6: {
                                message.content = $root.WAE2E.Message.HighlyStructuredMessage.decode(reader, reader.uint32());
                                break;
                            }
                        case 7: {
                                message.footer = $root.WAE2E.Message.HighlyStructuredMessage.decode(reader, reader.uint32());
                                break;
                            }
                        case 8: {
                                if (!(message.buttons && message.buttons.length))
                                    message.buttons = [];
                                message.buttons.push($root.WAE2E.TemplateButton.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a FourRowTemplate message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.TemplateMessage.FourRowTemplate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.TemplateMessage.FourRowTemplate} FourRowTemplate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FourRowTemplate.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a FourRowTemplate message.
                 * @function verify
                 * @memberof WAE2E.Message.TemplateMessage.FourRowTemplate
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FourRowTemplate.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.documentMessage != null && message.hasOwnProperty("documentMessage")) {
                        properties.title = 1;
                        {
                            var error = $root.WAE2E.Message.DocumentMessage.verify(message.documentMessage);
                            if (error)
                                return "documentMessage." + error;
                        }
                    }
                    if (message.highlyStructuredMessage != null && message.hasOwnProperty("highlyStructuredMessage")) {
                        if (properties.title === 1)
                            return "title: multiple values";
                        properties.title = 1;
                        {
                            var error = $root.WAE2E.Message.HighlyStructuredMessage.verify(message.highlyStructuredMessage);
                            if (error)
                                return "highlyStructuredMessage." + error;
                        }
                    }
                    if (message.imageMessage != null && message.hasOwnProperty("imageMessage")) {
                        if (properties.title === 1)
                            return "title: multiple values";
                        properties.title = 1;
                        {
                            var error = $root.WAE2E.Message.ImageMessage.verify(message.imageMessage);
                            if (error)
                                return "imageMessage." + error;
                        }
                    }
                    if (message.videoMessage != null && message.hasOwnProperty("videoMessage")) {
                        if (properties.title === 1)
                            return "title: multiple values";
                        properties.title = 1;
                        {
                            var error = $root.WAE2E.Message.VideoMessage.verify(message.videoMessage);
                            if (error)
                                return "videoMessage." + error;
                        }
                    }
                    if (message.locationMessage != null && message.hasOwnProperty("locationMessage")) {
                        if (properties.title === 1)
                            return "title: multiple values";
                        properties.title = 1;
                        {
                            var error = $root.WAE2E.Message.LocationMessage.verify(message.locationMessage);
                            if (error)
                                return "locationMessage." + error;
                        }
                    }
                    if (message.content != null && message.hasOwnProperty("content")) {
                        var error = $root.WAE2E.Message.HighlyStructuredMessage.verify(message.content);
                        if (error)
                            return "content." + error;
                    }
                    if (message.footer != null && message.hasOwnProperty("footer")) {
                        var error = $root.WAE2E.Message.HighlyStructuredMessage.verify(message.footer);
                        if (error)
                            return "footer." + error;
                    }
                    if (message.buttons != null && message.hasOwnProperty("buttons")) {
                        if (!Array.isArray(message.buttons))
                            return "buttons: array expected";
                        for (var i = 0; i < message.buttons.length; ++i) {
                            var error = $root.WAE2E.TemplateButton.verify(message.buttons[i]);
                            if (error)
                                return "buttons." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a FourRowTemplate message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.TemplateMessage.FourRowTemplate
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.TemplateMessage.FourRowTemplate} FourRowTemplate
                 */
                FourRowTemplate.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.TemplateMessage.FourRowTemplate)
                        return object;
                    var message = new $root.WAE2E.Message.TemplateMessage.FourRowTemplate();
                    if (object.documentMessage != null) {
                        if (typeof object.documentMessage !== "object")
                            throw TypeError(".WAE2E.Message.TemplateMessage.FourRowTemplate.documentMessage: object expected");
                        message.documentMessage = $root.WAE2E.Message.DocumentMessage.fromObject(object.documentMessage);
                    }
                    if (object.highlyStructuredMessage != null) {
                        if (typeof object.highlyStructuredMessage !== "object")
                            throw TypeError(".WAE2E.Message.TemplateMessage.FourRowTemplate.highlyStructuredMessage: object expected");
                        message.highlyStructuredMessage = $root.WAE2E.Message.HighlyStructuredMessage.fromObject(object.highlyStructuredMessage);
                    }
                    if (object.imageMessage != null) {
                        if (typeof object.imageMessage !== "object")
                            throw TypeError(".WAE2E.Message.TemplateMessage.FourRowTemplate.imageMessage: object expected");
                        message.imageMessage = $root.WAE2E.Message.ImageMessage.fromObject(object.imageMessage);
                    }
                    if (object.videoMessage != null) {
                        if (typeof object.videoMessage !== "object")
                            throw TypeError(".WAE2E.Message.TemplateMessage.FourRowTemplate.videoMessage: object expected");
                        message.videoMessage = $root.WAE2E.Message.VideoMessage.fromObject(object.videoMessage);
                    }
                    if (object.locationMessage != null) {
                        if (typeof object.locationMessage !== "object")
                            throw TypeError(".WAE2E.Message.TemplateMessage.FourRowTemplate.locationMessage: object expected");
                        message.locationMessage = $root.WAE2E.Message.LocationMessage.fromObject(object.locationMessage);
                    }
                    if (object.content != null) {
                        if (typeof object.content !== "object")
                            throw TypeError(".WAE2E.Message.TemplateMessage.FourRowTemplate.content: object expected");
                        message.content = $root.WAE2E.Message.HighlyStructuredMessage.fromObject(object.content);
                    }
                    if (object.footer != null) {
                        if (typeof object.footer !== "object")
                            throw TypeError(".WAE2E.Message.TemplateMessage.FourRowTemplate.footer: object expected");
                        message.footer = $root.WAE2E.Message.HighlyStructuredMessage.fromObject(object.footer);
                    }
                    if (object.buttons) {
                        if (!Array.isArray(object.buttons))
                            throw TypeError(".WAE2E.Message.TemplateMessage.FourRowTemplate.buttons: array expected");
                        message.buttons = [];
                        for (var i = 0; i < object.buttons.length; ++i) {
                            if (typeof object.buttons[i] !== "object")
                                throw TypeError(".WAE2E.Message.TemplateMessage.FourRowTemplate.buttons: object expected");
                            message.buttons[i] = $root.WAE2E.TemplateButton.fromObject(object.buttons[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a FourRowTemplate message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.TemplateMessage.FourRowTemplate
                 * @static
                 * @param {WAE2E.Message.TemplateMessage.FourRowTemplate} message FourRowTemplate
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FourRowTemplate.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.buttons = [];
                    if (options.defaults) {
                        object.content = null;
                        object.footer = null;
                    }
                    if (message.documentMessage != null && message.hasOwnProperty("documentMessage")) {
                        object.documentMessage = $root.WAE2E.Message.DocumentMessage.toObject(message.documentMessage, options);
                        if (options.oneofs)
                            object.title = "documentMessage";
                    }
                    if (message.highlyStructuredMessage != null && message.hasOwnProperty("highlyStructuredMessage")) {
                        object.highlyStructuredMessage = $root.WAE2E.Message.HighlyStructuredMessage.toObject(message.highlyStructuredMessage, options);
                        if (options.oneofs)
                            object.title = "highlyStructuredMessage";
                    }
                    if (message.imageMessage != null && message.hasOwnProperty("imageMessage")) {
                        object.imageMessage = $root.WAE2E.Message.ImageMessage.toObject(message.imageMessage, options);
                        if (options.oneofs)
                            object.title = "imageMessage";
                    }
                    if (message.videoMessage != null && message.hasOwnProperty("videoMessage")) {
                        object.videoMessage = $root.WAE2E.Message.VideoMessage.toObject(message.videoMessage, options);
                        if (options.oneofs)
                            object.title = "videoMessage";
                    }
                    if (message.locationMessage != null && message.hasOwnProperty("locationMessage")) {
                        object.locationMessage = $root.WAE2E.Message.LocationMessage.toObject(message.locationMessage, options);
                        if (options.oneofs)
                            object.title = "locationMessage";
                    }
                    if (message.content != null && message.hasOwnProperty("content"))
                        object.content = $root.WAE2E.Message.HighlyStructuredMessage.toObject(message.content, options);
                    if (message.footer != null && message.hasOwnProperty("footer"))
                        object.footer = $root.WAE2E.Message.HighlyStructuredMessage.toObject(message.footer, options);
                    if (message.buttons && message.buttons.length) {
                        object.buttons = [];
                        for (var j = 0; j < message.buttons.length; ++j)
                            object.buttons[j] = $root.WAE2E.TemplateButton.toObject(message.buttons[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this FourRowTemplate to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.TemplateMessage.FourRowTemplate
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FourRowTemplate.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for FourRowTemplate
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.TemplateMessage.FourRowTemplate
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FourRowTemplate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.TemplateMessage.FourRowTemplate";
                };

                return FourRowTemplate;
            })();

            return TemplateMessage;
        })();

        Message.StickerMessage = (function() {

            /**
             * Properties of a StickerMessage.
             * @memberof WAE2E.Message
             * @interface IStickerMessage
             * @property {string|null} [URL] StickerMessage URL
             * @property {Uint8Array|null} [fileSHA256] StickerMessage fileSHA256
             * @property {Uint8Array|null} [fileEncSHA256] StickerMessage fileEncSHA256
             * @property {Uint8Array|null} [mediaKey] StickerMessage mediaKey
             * @property {string|null} [mimetype] StickerMessage mimetype
             * @property {number|null} [height] StickerMessage height
             * @property {number|null} [width] StickerMessage width
             * @property {string|null} [directPath] StickerMessage directPath
             * @property {number|Long|null} [fileLength] StickerMessage fileLength
             * @property {number|Long|null} [mediaKeyTimestamp] StickerMessage mediaKeyTimestamp
             * @property {number|null} [firstFrameLength] StickerMessage firstFrameLength
             * @property {Uint8Array|null} [firstFrameSidecar] StickerMessage firstFrameSidecar
             * @property {boolean|null} [isAnimated] StickerMessage isAnimated
             * @property {Uint8Array|null} [pngThumbnail] StickerMessage pngThumbnail
             * @property {WAE2E.IContextInfo|null} [contextInfo] StickerMessage contextInfo
             * @property {number|Long|null} [stickerSentTS] StickerMessage stickerSentTS
             * @property {boolean|null} [isAvatar] StickerMessage isAvatar
             * @property {boolean|null} [isAiSticker] StickerMessage isAiSticker
             * @property {boolean|null} [isLottie] StickerMessage isLottie
             * @property {string|null} [accessibilityLabel] StickerMessage accessibilityLabel
             */

            /**
             * Constructs a new StickerMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a StickerMessage.
             * @implements IStickerMessage
             * @constructor
             * @param {WAE2E.Message.IStickerMessage=} [properties] Properties to set
             */
            function StickerMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StickerMessage URL.
             * @member {string} URL
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             */
            StickerMessage.prototype.URL = "";

            /**
             * StickerMessage fileSHA256.
             * @member {Uint8Array} fileSHA256
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             */
            StickerMessage.prototype.fileSHA256 = $util.newBuffer([]);

            /**
             * StickerMessage fileEncSHA256.
             * @member {Uint8Array} fileEncSHA256
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             */
            StickerMessage.prototype.fileEncSHA256 = $util.newBuffer([]);

            /**
             * StickerMessage mediaKey.
             * @member {Uint8Array} mediaKey
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             */
            StickerMessage.prototype.mediaKey = $util.newBuffer([]);

            /**
             * StickerMessage mimetype.
             * @member {string} mimetype
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             */
            StickerMessage.prototype.mimetype = "";

            /**
             * StickerMessage height.
             * @member {number} height
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             */
            StickerMessage.prototype.height = 0;

            /**
             * StickerMessage width.
             * @member {number} width
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             */
            StickerMessage.prototype.width = 0;

            /**
             * StickerMessage directPath.
             * @member {string} directPath
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             */
            StickerMessage.prototype.directPath = "";

            /**
             * StickerMessage fileLength.
             * @member {number|Long} fileLength
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             */
            StickerMessage.prototype.fileLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * StickerMessage mediaKeyTimestamp.
             * @member {number|Long} mediaKeyTimestamp
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             */
            StickerMessage.prototype.mediaKeyTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * StickerMessage firstFrameLength.
             * @member {number} firstFrameLength
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             */
            StickerMessage.prototype.firstFrameLength = 0;

            /**
             * StickerMessage firstFrameSidecar.
             * @member {Uint8Array} firstFrameSidecar
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             */
            StickerMessage.prototype.firstFrameSidecar = $util.newBuffer([]);

            /**
             * StickerMessage isAnimated.
             * @member {boolean} isAnimated
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             */
            StickerMessage.prototype.isAnimated = false;

            /**
             * StickerMessage pngThumbnail.
             * @member {Uint8Array} pngThumbnail
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             */
            StickerMessage.prototype.pngThumbnail = $util.newBuffer([]);

            /**
             * StickerMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             */
            StickerMessage.prototype.contextInfo = null;

            /**
             * StickerMessage stickerSentTS.
             * @member {number|Long} stickerSentTS
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             */
            StickerMessage.prototype.stickerSentTS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * StickerMessage isAvatar.
             * @member {boolean} isAvatar
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             */
            StickerMessage.prototype.isAvatar = false;

            /**
             * StickerMessage isAiSticker.
             * @member {boolean} isAiSticker
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             */
            StickerMessage.prototype.isAiSticker = false;

            /**
             * StickerMessage isLottie.
             * @member {boolean} isLottie
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             */
            StickerMessage.prototype.isLottie = false;

            /**
             * StickerMessage accessibilityLabel.
             * @member {string} accessibilityLabel
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             */
            StickerMessage.prototype.accessibilityLabel = "";

            /**
             * Creates a new StickerMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.StickerMessage
             * @static
             * @param {WAE2E.Message.IStickerMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.StickerMessage} StickerMessage instance
             */
            StickerMessage.create = function create(properties) {
                return new StickerMessage(properties);
            };

            /**
             * Encodes the specified StickerMessage message. Does not implicitly {@link WAE2E.Message.StickerMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.StickerMessage
             * @static
             * @param {WAE2E.Message.IStickerMessage} message StickerMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StickerMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.URL != null && Object.hasOwnProperty.call(message, "URL"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.URL);
                if (message.fileSHA256 != null && Object.hasOwnProperty.call(message, "fileSHA256"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.fileSHA256);
                if (message.fileEncSHA256 != null && Object.hasOwnProperty.call(message, "fileEncSHA256"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.fileEncSHA256);
                if (message.mediaKey != null && Object.hasOwnProperty.call(message, "mediaKey"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.mediaKey);
                if (message.mimetype != null && Object.hasOwnProperty.call(message, "mimetype"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.mimetype);
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.height);
                if (message.width != null && Object.hasOwnProperty.call(message, "width"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.width);
                if (message.directPath != null && Object.hasOwnProperty.call(message, "directPath"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.directPath);
                if (message.fileLength != null && Object.hasOwnProperty.call(message, "fileLength"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.fileLength);
                if (message.mediaKeyTimestamp != null && Object.hasOwnProperty.call(message, "mediaKeyTimestamp"))
                    writer.uint32(/* id 10, wireType 0 =*/80).int64(message.mediaKeyTimestamp);
                if (message.firstFrameLength != null && Object.hasOwnProperty.call(message, "firstFrameLength"))
                    writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.firstFrameLength);
                if (message.firstFrameSidecar != null && Object.hasOwnProperty.call(message, "firstFrameSidecar"))
                    writer.uint32(/* id 12, wireType 2 =*/98).bytes(message.firstFrameSidecar);
                if (message.isAnimated != null && Object.hasOwnProperty.call(message, "isAnimated"))
                    writer.uint32(/* id 13, wireType 0 =*/104).bool(message.isAnimated);
                if (message.pngThumbnail != null && Object.hasOwnProperty.call(message, "pngThumbnail"))
                    writer.uint32(/* id 16, wireType 2 =*/130).bytes(message.pngThumbnail);
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                if (message.stickerSentTS != null && Object.hasOwnProperty.call(message, "stickerSentTS"))
                    writer.uint32(/* id 18, wireType 0 =*/144).int64(message.stickerSentTS);
                if (message.isAvatar != null && Object.hasOwnProperty.call(message, "isAvatar"))
                    writer.uint32(/* id 19, wireType 0 =*/152).bool(message.isAvatar);
                if (message.isAiSticker != null && Object.hasOwnProperty.call(message, "isAiSticker"))
                    writer.uint32(/* id 20, wireType 0 =*/160).bool(message.isAiSticker);
                if (message.isLottie != null && Object.hasOwnProperty.call(message, "isLottie"))
                    writer.uint32(/* id 21, wireType 0 =*/168).bool(message.isLottie);
                if (message.accessibilityLabel != null && Object.hasOwnProperty.call(message, "accessibilityLabel"))
                    writer.uint32(/* id 22, wireType 2 =*/178).string(message.accessibilityLabel);
                return writer;
            };

            /**
             * Encodes the specified StickerMessage message, length delimited. Does not implicitly {@link WAE2E.Message.StickerMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.StickerMessage
             * @static
             * @param {WAE2E.Message.IStickerMessage} message StickerMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StickerMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StickerMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.StickerMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.StickerMessage} StickerMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StickerMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.StickerMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.URL = reader.string();
                            break;
                        }
                    case 2: {
                            message.fileSHA256 = reader.bytes();
                            break;
                        }
                    case 3: {
                            message.fileEncSHA256 = reader.bytes();
                            break;
                        }
                    case 4: {
                            message.mediaKey = reader.bytes();
                            break;
                        }
                    case 5: {
                            message.mimetype = reader.string();
                            break;
                        }
                    case 6: {
                            message.height = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.width = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.directPath = reader.string();
                            break;
                        }
                    case 9: {
                            message.fileLength = reader.uint64();
                            break;
                        }
                    case 10: {
                            message.mediaKeyTimestamp = reader.int64();
                            break;
                        }
                    case 11: {
                            message.firstFrameLength = reader.uint32();
                            break;
                        }
                    case 12: {
                            message.firstFrameSidecar = reader.bytes();
                            break;
                        }
                    case 13: {
                            message.isAnimated = reader.bool();
                            break;
                        }
                    case 16: {
                            message.pngThumbnail = reader.bytes();
                            break;
                        }
                    case 17: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    case 18: {
                            message.stickerSentTS = reader.int64();
                            break;
                        }
                    case 19: {
                            message.isAvatar = reader.bool();
                            break;
                        }
                    case 20: {
                            message.isAiSticker = reader.bool();
                            break;
                        }
                    case 21: {
                            message.isLottie = reader.bool();
                            break;
                        }
                    case 22: {
                            message.accessibilityLabel = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StickerMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.StickerMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.StickerMessage} StickerMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StickerMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StickerMessage message.
             * @function verify
             * @memberof WAE2E.Message.StickerMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StickerMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.URL != null && message.hasOwnProperty("URL"))
                    if (!$util.isString(message.URL))
                        return "URL: string expected";
                if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                    if (!(message.fileSHA256 && typeof message.fileSHA256.length === "number" || $util.isString(message.fileSHA256)))
                        return "fileSHA256: buffer expected";
                if (message.fileEncSHA256 != null && message.hasOwnProperty("fileEncSHA256"))
                    if (!(message.fileEncSHA256 && typeof message.fileEncSHA256.length === "number" || $util.isString(message.fileEncSHA256)))
                        return "fileEncSHA256: buffer expected";
                if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                    if (!(message.mediaKey && typeof message.mediaKey.length === "number" || $util.isString(message.mediaKey)))
                        return "mediaKey: buffer expected";
                if (message.mimetype != null && message.hasOwnProperty("mimetype"))
                    if (!$util.isString(message.mimetype))
                        return "mimetype: string expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height))
                        return "height: integer expected";
                if (message.width != null && message.hasOwnProperty("width"))
                    if (!$util.isInteger(message.width))
                        return "width: integer expected";
                if (message.directPath != null && message.hasOwnProperty("directPath"))
                    if (!$util.isString(message.directPath))
                        return "directPath: string expected";
                if (message.fileLength != null && message.hasOwnProperty("fileLength"))
                    if (!$util.isInteger(message.fileLength) && !(message.fileLength && $util.isInteger(message.fileLength.low) && $util.isInteger(message.fileLength.high)))
                        return "fileLength: integer|Long expected";
                if (message.mediaKeyTimestamp != null && message.hasOwnProperty("mediaKeyTimestamp"))
                    if (!$util.isInteger(message.mediaKeyTimestamp) && !(message.mediaKeyTimestamp && $util.isInteger(message.mediaKeyTimestamp.low) && $util.isInteger(message.mediaKeyTimestamp.high)))
                        return "mediaKeyTimestamp: integer|Long expected";
                if (message.firstFrameLength != null && message.hasOwnProperty("firstFrameLength"))
                    if (!$util.isInteger(message.firstFrameLength))
                        return "firstFrameLength: integer expected";
                if (message.firstFrameSidecar != null && message.hasOwnProperty("firstFrameSidecar"))
                    if (!(message.firstFrameSidecar && typeof message.firstFrameSidecar.length === "number" || $util.isString(message.firstFrameSidecar)))
                        return "firstFrameSidecar: buffer expected";
                if (message.isAnimated != null && message.hasOwnProperty("isAnimated"))
                    if (typeof message.isAnimated !== "boolean")
                        return "isAnimated: boolean expected";
                if (message.pngThumbnail != null && message.hasOwnProperty("pngThumbnail"))
                    if (!(message.pngThumbnail && typeof message.pngThumbnail.length === "number" || $util.isString(message.pngThumbnail)))
                        return "pngThumbnail: buffer expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                if (message.stickerSentTS != null && message.hasOwnProperty("stickerSentTS"))
                    if (!$util.isInteger(message.stickerSentTS) && !(message.stickerSentTS && $util.isInteger(message.stickerSentTS.low) && $util.isInteger(message.stickerSentTS.high)))
                        return "stickerSentTS: integer|Long expected";
                if (message.isAvatar != null && message.hasOwnProperty("isAvatar"))
                    if (typeof message.isAvatar !== "boolean")
                        return "isAvatar: boolean expected";
                if (message.isAiSticker != null && message.hasOwnProperty("isAiSticker"))
                    if (typeof message.isAiSticker !== "boolean")
                        return "isAiSticker: boolean expected";
                if (message.isLottie != null && message.hasOwnProperty("isLottie"))
                    if (typeof message.isLottie !== "boolean")
                        return "isLottie: boolean expected";
                if (message.accessibilityLabel != null && message.hasOwnProperty("accessibilityLabel"))
                    if (!$util.isString(message.accessibilityLabel))
                        return "accessibilityLabel: string expected";
                return null;
            };

            /**
             * Creates a StickerMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.StickerMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.StickerMessage} StickerMessage
             */
            StickerMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.StickerMessage)
                    return object;
                var message = new $root.WAE2E.Message.StickerMessage();
                if (object.URL != null)
                    message.URL = String(object.URL);
                if (object.fileSHA256 != null)
                    if (typeof object.fileSHA256 === "string")
                        $util.base64.decode(object.fileSHA256, message.fileSHA256 = $util.newBuffer($util.base64.length(object.fileSHA256)), 0);
                    else if (object.fileSHA256.length >= 0)
                        message.fileSHA256 = object.fileSHA256;
                if (object.fileEncSHA256 != null)
                    if (typeof object.fileEncSHA256 === "string")
                        $util.base64.decode(object.fileEncSHA256, message.fileEncSHA256 = $util.newBuffer($util.base64.length(object.fileEncSHA256)), 0);
                    else if (object.fileEncSHA256.length >= 0)
                        message.fileEncSHA256 = object.fileEncSHA256;
                if (object.mediaKey != null)
                    if (typeof object.mediaKey === "string")
                        $util.base64.decode(object.mediaKey, message.mediaKey = $util.newBuffer($util.base64.length(object.mediaKey)), 0);
                    else if (object.mediaKey.length >= 0)
                        message.mediaKey = object.mediaKey;
                if (object.mimetype != null)
                    message.mimetype = String(object.mimetype);
                if (object.height != null)
                    message.height = object.height >>> 0;
                if (object.width != null)
                    message.width = object.width >>> 0;
                if (object.directPath != null)
                    message.directPath = String(object.directPath);
                if (object.fileLength != null)
                    if ($util.Long)
                        (message.fileLength = $util.Long.fromValue(object.fileLength)).unsigned = true;
                    else if (typeof object.fileLength === "string")
                        message.fileLength = parseInt(object.fileLength, 10);
                    else if (typeof object.fileLength === "number")
                        message.fileLength = object.fileLength;
                    else if (typeof object.fileLength === "object")
                        message.fileLength = new $util.LongBits(object.fileLength.low >>> 0, object.fileLength.high >>> 0).toNumber(true);
                if (object.mediaKeyTimestamp != null)
                    if ($util.Long)
                        (message.mediaKeyTimestamp = $util.Long.fromValue(object.mediaKeyTimestamp)).unsigned = false;
                    else if (typeof object.mediaKeyTimestamp === "string")
                        message.mediaKeyTimestamp = parseInt(object.mediaKeyTimestamp, 10);
                    else if (typeof object.mediaKeyTimestamp === "number")
                        message.mediaKeyTimestamp = object.mediaKeyTimestamp;
                    else if (typeof object.mediaKeyTimestamp === "object")
                        message.mediaKeyTimestamp = new $util.LongBits(object.mediaKeyTimestamp.low >>> 0, object.mediaKeyTimestamp.high >>> 0).toNumber();
                if (object.firstFrameLength != null)
                    message.firstFrameLength = object.firstFrameLength >>> 0;
                if (object.firstFrameSidecar != null)
                    if (typeof object.firstFrameSidecar === "string")
                        $util.base64.decode(object.firstFrameSidecar, message.firstFrameSidecar = $util.newBuffer($util.base64.length(object.firstFrameSidecar)), 0);
                    else if (object.firstFrameSidecar.length >= 0)
                        message.firstFrameSidecar = object.firstFrameSidecar;
                if (object.isAnimated != null)
                    message.isAnimated = Boolean(object.isAnimated);
                if (object.pngThumbnail != null)
                    if (typeof object.pngThumbnail === "string")
                        $util.base64.decode(object.pngThumbnail, message.pngThumbnail = $util.newBuffer($util.base64.length(object.pngThumbnail)), 0);
                    else if (object.pngThumbnail.length >= 0)
                        message.pngThumbnail = object.pngThumbnail;
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.StickerMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                if (object.stickerSentTS != null)
                    if ($util.Long)
                        (message.stickerSentTS = $util.Long.fromValue(object.stickerSentTS)).unsigned = false;
                    else if (typeof object.stickerSentTS === "string")
                        message.stickerSentTS = parseInt(object.stickerSentTS, 10);
                    else if (typeof object.stickerSentTS === "number")
                        message.stickerSentTS = object.stickerSentTS;
                    else if (typeof object.stickerSentTS === "object")
                        message.stickerSentTS = new $util.LongBits(object.stickerSentTS.low >>> 0, object.stickerSentTS.high >>> 0).toNumber();
                if (object.isAvatar != null)
                    message.isAvatar = Boolean(object.isAvatar);
                if (object.isAiSticker != null)
                    message.isAiSticker = Boolean(object.isAiSticker);
                if (object.isLottie != null)
                    message.isLottie = Boolean(object.isLottie);
                if (object.accessibilityLabel != null)
                    message.accessibilityLabel = String(object.accessibilityLabel);
                return message;
            };

            /**
             * Creates a plain object from a StickerMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.StickerMessage
             * @static
             * @param {WAE2E.Message.StickerMessage} message StickerMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StickerMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.URL = "";
                    if (options.bytes === String)
                        object.fileSHA256 = "";
                    else {
                        object.fileSHA256 = [];
                        if (options.bytes !== Array)
                            object.fileSHA256 = $util.newBuffer(object.fileSHA256);
                    }
                    if (options.bytes === String)
                        object.fileEncSHA256 = "";
                    else {
                        object.fileEncSHA256 = [];
                        if (options.bytes !== Array)
                            object.fileEncSHA256 = $util.newBuffer(object.fileEncSHA256);
                    }
                    if (options.bytes === String)
                        object.mediaKey = "";
                    else {
                        object.mediaKey = [];
                        if (options.bytes !== Array)
                            object.mediaKey = $util.newBuffer(object.mediaKey);
                    }
                    object.mimetype = "";
                    object.height = 0;
                    object.width = 0;
                    object.directPath = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.fileLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.fileLength = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.mediaKeyTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.mediaKeyTimestamp = options.longs === String ? "0" : 0;
                    object.firstFrameLength = 0;
                    if (options.bytes === String)
                        object.firstFrameSidecar = "";
                    else {
                        object.firstFrameSidecar = [];
                        if (options.bytes !== Array)
                            object.firstFrameSidecar = $util.newBuffer(object.firstFrameSidecar);
                    }
                    object.isAnimated = false;
                    if (options.bytes === String)
                        object.pngThumbnail = "";
                    else {
                        object.pngThumbnail = [];
                        if (options.bytes !== Array)
                            object.pngThumbnail = $util.newBuffer(object.pngThumbnail);
                    }
                    object.contextInfo = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.stickerSentTS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.stickerSentTS = options.longs === String ? "0" : 0;
                    object.isAvatar = false;
                    object.isAiSticker = false;
                    object.isLottie = false;
                    object.accessibilityLabel = "";
                }
                if (message.URL != null && message.hasOwnProperty("URL"))
                    object.URL = message.URL;
                if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                    object.fileSHA256 = options.bytes === String ? $util.base64.encode(message.fileSHA256, 0, message.fileSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.fileSHA256) : message.fileSHA256;
                if (message.fileEncSHA256 != null && message.hasOwnProperty("fileEncSHA256"))
                    object.fileEncSHA256 = options.bytes === String ? $util.base64.encode(message.fileEncSHA256, 0, message.fileEncSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.fileEncSHA256) : message.fileEncSHA256;
                if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                    object.mediaKey = options.bytes === String ? $util.base64.encode(message.mediaKey, 0, message.mediaKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.mediaKey) : message.mediaKey;
                if (message.mimetype != null && message.hasOwnProperty("mimetype"))
                    object.mimetype = message.mimetype;
                if (message.height != null && message.hasOwnProperty("height"))
                    object.height = message.height;
                if (message.width != null && message.hasOwnProperty("width"))
                    object.width = message.width;
                if (message.directPath != null && message.hasOwnProperty("directPath"))
                    object.directPath = message.directPath;
                if (message.fileLength != null && message.hasOwnProperty("fileLength"))
                    if (typeof message.fileLength === "number")
                        object.fileLength = options.longs === String ? String(message.fileLength) : message.fileLength;
                    else
                        object.fileLength = options.longs === String ? $util.Long.prototype.toString.call(message.fileLength) : options.longs === Number ? new $util.LongBits(message.fileLength.low >>> 0, message.fileLength.high >>> 0).toNumber(true) : message.fileLength;
                if (message.mediaKeyTimestamp != null && message.hasOwnProperty("mediaKeyTimestamp"))
                    if (typeof message.mediaKeyTimestamp === "number")
                        object.mediaKeyTimestamp = options.longs === String ? String(message.mediaKeyTimestamp) : message.mediaKeyTimestamp;
                    else
                        object.mediaKeyTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.mediaKeyTimestamp) : options.longs === Number ? new $util.LongBits(message.mediaKeyTimestamp.low >>> 0, message.mediaKeyTimestamp.high >>> 0).toNumber() : message.mediaKeyTimestamp;
                if (message.firstFrameLength != null && message.hasOwnProperty("firstFrameLength"))
                    object.firstFrameLength = message.firstFrameLength;
                if (message.firstFrameSidecar != null && message.hasOwnProperty("firstFrameSidecar"))
                    object.firstFrameSidecar = options.bytes === String ? $util.base64.encode(message.firstFrameSidecar, 0, message.firstFrameSidecar.length) : options.bytes === Array ? Array.prototype.slice.call(message.firstFrameSidecar) : message.firstFrameSidecar;
                if (message.isAnimated != null && message.hasOwnProperty("isAnimated"))
                    object.isAnimated = message.isAnimated;
                if (message.pngThumbnail != null && message.hasOwnProperty("pngThumbnail"))
                    object.pngThumbnail = options.bytes === String ? $util.base64.encode(message.pngThumbnail, 0, message.pngThumbnail.length) : options.bytes === Array ? Array.prototype.slice.call(message.pngThumbnail) : message.pngThumbnail;
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                if (message.stickerSentTS != null && message.hasOwnProperty("stickerSentTS"))
                    if (typeof message.stickerSentTS === "number")
                        object.stickerSentTS = options.longs === String ? String(message.stickerSentTS) : message.stickerSentTS;
                    else
                        object.stickerSentTS = options.longs === String ? $util.Long.prototype.toString.call(message.stickerSentTS) : options.longs === Number ? new $util.LongBits(message.stickerSentTS.low >>> 0, message.stickerSentTS.high >>> 0).toNumber() : message.stickerSentTS;
                if (message.isAvatar != null && message.hasOwnProperty("isAvatar"))
                    object.isAvatar = message.isAvatar;
                if (message.isAiSticker != null && message.hasOwnProperty("isAiSticker"))
                    object.isAiSticker = message.isAiSticker;
                if (message.isLottie != null && message.hasOwnProperty("isLottie"))
                    object.isLottie = message.isLottie;
                if (message.accessibilityLabel != null && message.hasOwnProperty("accessibilityLabel"))
                    object.accessibilityLabel = message.accessibilityLabel;
                return object;
            };

            /**
             * Converts this StickerMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.StickerMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StickerMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for StickerMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.StickerMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            StickerMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.StickerMessage";
            };

            return StickerMessage;
        })();

        Message.LiveLocationMessage = (function() {

            /**
             * Properties of a LiveLocationMessage.
             * @memberof WAE2E.Message
             * @interface ILiveLocationMessage
             * @property {number|null} [degreesLatitude] LiveLocationMessage degreesLatitude
             * @property {number|null} [degreesLongitude] LiveLocationMessage degreesLongitude
             * @property {number|null} [accuracyInMeters] LiveLocationMessage accuracyInMeters
             * @property {number|null} [speedInMps] LiveLocationMessage speedInMps
             * @property {number|null} [degreesClockwiseFromMagneticNorth] LiveLocationMessage degreesClockwiseFromMagneticNorth
             * @property {string|null} [caption] LiveLocationMessage caption
             * @property {number|Long|null} [sequenceNumber] LiveLocationMessage sequenceNumber
             * @property {number|null} [timeOffset] LiveLocationMessage timeOffset
             * @property {Uint8Array|null} [JPEGThumbnail] LiveLocationMessage JPEGThumbnail
             * @property {WAE2E.IContextInfo|null} [contextInfo] LiveLocationMessage contextInfo
             */

            /**
             * Constructs a new LiveLocationMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a LiveLocationMessage.
             * @implements ILiveLocationMessage
             * @constructor
             * @param {WAE2E.Message.ILiveLocationMessage=} [properties] Properties to set
             */
            function LiveLocationMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LiveLocationMessage degreesLatitude.
             * @member {number} degreesLatitude
             * @memberof WAE2E.Message.LiveLocationMessage
             * @instance
             */
            LiveLocationMessage.prototype.degreesLatitude = 0;

            /**
             * LiveLocationMessage degreesLongitude.
             * @member {number} degreesLongitude
             * @memberof WAE2E.Message.LiveLocationMessage
             * @instance
             */
            LiveLocationMessage.prototype.degreesLongitude = 0;

            /**
             * LiveLocationMessage accuracyInMeters.
             * @member {number} accuracyInMeters
             * @memberof WAE2E.Message.LiveLocationMessage
             * @instance
             */
            LiveLocationMessage.prototype.accuracyInMeters = 0;

            /**
             * LiveLocationMessage speedInMps.
             * @member {number} speedInMps
             * @memberof WAE2E.Message.LiveLocationMessage
             * @instance
             */
            LiveLocationMessage.prototype.speedInMps = 0;

            /**
             * LiveLocationMessage degreesClockwiseFromMagneticNorth.
             * @member {number} degreesClockwiseFromMagneticNorth
             * @memberof WAE2E.Message.LiveLocationMessage
             * @instance
             */
            LiveLocationMessage.prototype.degreesClockwiseFromMagneticNorth = 0;

            /**
             * LiveLocationMessage caption.
             * @member {string} caption
             * @memberof WAE2E.Message.LiveLocationMessage
             * @instance
             */
            LiveLocationMessage.prototype.caption = "";

            /**
             * LiveLocationMessage sequenceNumber.
             * @member {number|Long} sequenceNumber
             * @memberof WAE2E.Message.LiveLocationMessage
             * @instance
             */
            LiveLocationMessage.prototype.sequenceNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * LiveLocationMessage timeOffset.
             * @member {number} timeOffset
             * @memberof WAE2E.Message.LiveLocationMessage
             * @instance
             */
            LiveLocationMessage.prototype.timeOffset = 0;

            /**
             * LiveLocationMessage JPEGThumbnail.
             * @member {Uint8Array} JPEGThumbnail
             * @memberof WAE2E.Message.LiveLocationMessage
             * @instance
             */
            LiveLocationMessage.prototype.JPEGThumbnail = $util.newBuffer([]);

            /**
             * LiveLocationMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.LiveLocationMessage
             * @instance
             */
            LiveLocationMessage.prototype.contextInfo = null;

            /**
             * Creates a new LiveLocationMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.LiveLocationMessage
             * @static
             * @param {WAE2E.Message.ILiveLocationMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.LiveLocationMessage} LiveLocationMessage instance
             */
            LiveLocationMessage.create = function create(properties) {
                return new LiveLocationMessage(properties);
            };

            /**
             * Encodes the specified LiveLocationMessage message. Does not implicitly {@link WAE2E.Message.LiveLocationMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.LiveLocationMessage
             * @static
             * @param {WAE2E.Message.ILiveLocationMessage} message LiveLocationMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LiveLocationMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.degreesLatitude != null && Object.hasOwnProperty.call(message, "degreesLatitude"))
                    writer.uint32(/* id 1, wireType 1 =*/9).double(message.degreesLatitude);
                if (message.degreesLongitude != null && Object.hasOwnProperty.call(message, "degreesLongitude"))
                    writer.uint32(/* id 2, wireType 1 =*/17).double(message.degreesLongitude);
                if (message.accuracyInMeters != null && Object.hasOwnProperty.call(message, "accuracyInMeters"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.accuracyInMeters);
                if (message.speedInMps != null && Object.hasOwnProperty.call(message, "speedInMps"))
                    writer.uint32(/* id 4, wireType 5 =*/37).float(message.speedInMps);
                if (message.degreesClockwiseFromMagneticNorth != null && Object.hasOwnProperty.call(message, "degreesClockwiseFromMagneticNorth"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.degreesClockwiseFromMagneticNorth);
                if (message.caption != null && Object.hasOwnProperty.call(message, "caption"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.caption);
                if (message.sequenceNumber != null && Object.hasOwnProperty.call(message, "sequenceNumber"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int64(message.sequenceNumber);
                if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.timeOffset);
                if (message.JPEGThumbnail != null && Object.hasOwnProperty.call(message, "JPEGThumbnail"))
                    writer.uint32(/* id 16, wireType 2 =*/130).bytes(message.JPEGThumbnail);
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LiveLocationMessage message, length delimited. Does not implicitly {@link WAE2E.Message.LiveLocationMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.LiveLocationMessage
             * @static
             * @param {WAE2E.Message.ILiveLocationMessage} message LiveLocationMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LiveLocationMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LiveLocationMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.LiveLocationMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.LiveLocationMessage} LiveLocationMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LiveLocationMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.LiveLocationMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.degreesLatitude = reader.double();
                            break;
                        }
                    case 2: {
                            message.degreesLongitude = reader.double();
                            break;
                        }
                    case 3: {
                            message.accuracyInMeters = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.speedInMps = reader.float();
                            break;
                        }
                    case 5: {
                            message.degreesClockwiseFromMagneticNorth = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.caption = reader.string();
                            break;
                        }
                    case 7: {
                            message.sequenceNumber = reader.int64();
                            break;
                        }
                    case 8: {
                            message.timeOffset = reader.uint32();
                            break;
                        }
                    case 16: {
                            message.JPEGThumbnail = reader.bytes();
                            break;
                        }
                    case 17: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LiveLocationMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.LiveLocationMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.LiveLocationMessage} LiveLocationMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LiveLocationMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LiveLocationMessage message.
             * @function verify
             * @memberof WAE2E.Message.LiveLocationMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LiveLocationMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.degreesLatitude != null && message.hasOwnProperty("degreesLatitude"))
                    if (typeof message.degreesLatitude !== "number")
                        return "degreesLatitude: number expected";
                if (message.degreesLongitude != null && message.hasOwnProperty("degreesLongitude"))
                    if (typeof message.degreesLongitude !== "number")
                        return "degreesLongitude: number expected";
                if (message.accuracyInMeters != null && message.hasOwnProperty("accuracyInMeters"))
                    if (!$util.isInteger(message.accuracyInMeters))
                        return "accuracyInMeters: integer expected";
                if (message.speedInMps != null && message.hasOwnProperty("speedInMps"))
                    if (typeof message.speedInMps !== "number")
                        return "speedInMps: number expected";
                if (message.degreesClockwiseFromMagneticNorth != null && message.hasOwnProperty("degreesClockwiseFromMagneticNorth"))
                    if (!$util.isInteger(message.degreesClockwiseFromMagneticNorth))
                        return "degreesClockwiseFromMagneticNorth: integer expected";
                if (message.caption != null && message.hasOwnProperty("caption"))
                    if (!$util.isString(message.caption))
                        return "caption: string expected";
                if (message.sequenceNumber != null && message.hasOwnProperty("sequenceNumber"))
                    if (!$util.isInteger(message.sequenceNumber) && !(message.sequenceNumber && $util.isInteger(message.sequenceNumber.low) && $util.isInteger(message.sequenceNumber.high)))
                        return "sequenceNumber: integer|Long expected";
                if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                    if (!$util.isInteger(message.timeOffset))
                        return "timeOffset: integer expected";
                if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail"))
                    if (!(message.JPEGThumbnail && typeof message.JPEGThumbnail.length === "number" || $util.isString(message.JPEGThumbnail)))
                        return "JPEGThumbnail: buffer expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                return null;
            };

            /**
             * Creates a LiveLocationMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.LiveLocationMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.LiveLocationMessage} LiveLocationMessage
             */
            LiveLocationMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.LiveLocationMessage)
                    return object;
                var message = new $root.WAE2E.Message.LiveLocationMessage();
                if (object.degreesLatitude != null)
                    message.degreesLatitude = Number(object.degreesLatitude);
                if (object.degreesLongitude != null)
                    message.degreesLongitude = Number(object.degreesLongitude);
                if (object.accuracyInMeters != null)
                    message.accuracyInMeters = object.accuracyInMeters >>> 0;
                if (object.speedInMps != null)
                    message.speedInMps = Number(object.speedInMps);
                if (object.degreesClockwiseFromMagneticNorth != null)
                    message.degreesClockwiseFromMagneticNorth = object.degreesClockwiseFromMagneticNorth >>> 0;
                if (object.caption != null)
                    message.caption = String(object.caption);
                if (object.sequenceNumber != null)
                    if ($util.Long)
                        (message.sequenceNumber = $util.Long.fromValue(object.sequenceNumber)).unsigned = false;
                    else if (typeof object.sequenceNumber === "string")
                        message.sequenceNumber = parseInt(object.sequenceNumber, 10);
                    else if (typeof object.sequenceNumber === "number")
                        message.sequenceNumber = object.sequenceNumber;
                    else if (typeof object.sequenceNumber === "object")
                        message.sequenceNumber = new $util.LongBits(object.sequenceNumber.low >>> 0, object.sequenceNumber.high >>> 0).toNumber();
                if (object.timeOffset != null)
                    message.timeOffset = object.timeOffset >>> 0;
                if (object.JPEGThumbnail != null)
                    if (typeof object.JPEGThumbnail === "string")
                        $util.base64.decode(object.JPEGThumbnail, message.JPEGThumbnail = $util.newBuffer($util.base64.length(object.JPEGThumbnail)), 0);
                    else if (object.JPEGThumbnail.length >= 0)
                        message.JPEGThumbnail = object.JPEGThumbnail;
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.LiveLocationMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                return message;
            };

            /**
             * Creates a plain object from a LiveLocationMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.LiveLocationMessage
             * @static
             * @param {WAE2E.Message.LiveLocationMessage} message LiveLocationMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LiveLocationMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.degreesLatitude = 0;
                    object.degreesLongitude = 0;
                    object.accuracyInMeters = 0;
                    object.speedInMps = 0;
                    object.degreesClockwiseFromMagneticNorth = 0;
                    object.caption = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.sequenceNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.sequenceNumber = options.longs === String ? "0" : 0;
                    object.timeOffset = 0;
                    if (options.bytes === String)
                        object.JPEGThumbnail = "";
                    else {
                        object.JPEGThumbnail = [];
                        if (options.bytes !== Array)
                            object.JPEGThumbnail = $util.newBuffer(object.JPEGThumbnail);
                    }
                    object.contextInfo = null;
                }
                if (message.degreesLatitude != null && message.hasOwnProperty("degreesLatitude"))
                    object.degreesLatitude = options.json && !isFinite(message.degreesLatitude) ? String(message.degreesLatitude) : message.degreesLatitude;
                if (message.degreesLongitude != null && message.hasOwnProperty("degreesLongitude"))
                    object.degreesLongitude = options.json && !isFinite(message.degreesLongitude) ? String(message.degreesLongitude) : message.degreesLongitude;
                if (message.accuracyInMeters != null && message.hasOwnProperty("accuracyInMeters"))
                    object.accuracyInMeters = message.accuracyInMeters;
                if (message.speedInMps != null && message.hasOwnProperty("speedInMps"))
                    object.speedInMps = options.json && !isFinite(message.speedInMps) ? String(message.speedInMps) : message.speedInMps;
                if (message.degreesClockwiseFromMagneticNorth != null && message.hasOwnProperty("degreesClockwiseFromMagneticNorth"))
                    object.degreesClockwiseFromMagneticNorth = message.degreesClockwiseFromMagneticNorth;
                if (message.caption != null && message.hasOwnProperty("caption"))
                    object.caption = message.caption;
                if (message.sequenceNumber != null && message.hasOwnProperty("sequenceNumber"))
                    if (typeof message.sequenceNumber === "number")
                        object.sequenceNumber = options.longs === String ? String(message.sequenceNumber) : message.sequenceNumber;
                    else
                        object.sequenceNumber = options.longs === String ? $util.Long.prototype.toString.call(message.sequenceNumber) : options.longs === Number ? new $util.LongBits(message.sequenceNumber.low >>> 0, message.sequenceNumber.high >>> 0).toNumber() : message.sequenceNumber;
                if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                    object.timeOffset = message.timeOffset;
                if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail"))
                    object.JPEGThumbnail = options.bytes === String ? $util.base64.encode(message.JPEGThumbnail, 0, message.JPEGThumbnail.length) : options.bytes === Array ? Array.prototype.slice.call(message.JPEGThumbnail) : message.JPEGThumbnail;
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                return object;
            };

            /**
             * Converts this LiveLocationMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.LiveLocationMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LiveLocationMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LiveLocationMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.LiveLocationMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LiveLocationMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.LiveLocationMessage";
            };

            return LiveLocationMessage;
        })();

        Message.CancelPaymentRequestMessage = (function() {

            /**
             * Properties of a CancelPaymentRequestMessage.
             * @memberof WAE2E.Message
             * @interface ICancelPaymentRequestMessage
             * @property {WAProtocol.IMessageKey|null} [key] CancelPaymentRequestMessage key
             */

            /**
             * Constructs a new CancelPaymentRequestMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a CancelPaymentRequestMessage.
             * @implements ICancelPaymentRequestMessage
             * @constructor
             * @param {WAE2E.Message.ICancelPaymentRequestMessage=} [properties] Properties to set
             */
            function CancelPaymentRequestMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CancelPaymentRequestMessage key.
             * @member {WAProtocol.IMessageKey|null|undefined} key
             * @memberof WAE2E.Message.CancelPaymentRequestMessage
             * @instance
             */
            CancelPaymentRequestMessage.prototype.key = null;

            /**
             * Creates a new CancelPaymentRequestMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.CancelPaymentRequestMessage
             * @static
             * @param {WAE2E.Message.ICancelPaymentRequestMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.CancelPaymentRequestMessage} CancelPaymentRequestMessage instance
             */
            CancelPaymentRequestMessage.create = function create(properties) {
                return new CancelPaymentRequestMessage(properties);
            };

            /**
             * Encodes the specified CancelPaymentRequestMessage message. Does not implicitly {@link WAE2E.Message.CancelPaymentRequestMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.CancelPaymentRequestMessage
             * @static
             * @param {WAE2E.Message.ICancelPaymentRequestMessage} message CancelPaymentRequestMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CancelPaymentRequestMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    $root.WAProtocol.MessageKey.encode(message.key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CancelPaymentRequestMessage message, length delimited. Does not implicitly {@link WAE2E.Message.CancelPaymentRequestMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.CancelPaymentRequestMessage
             * @static
             * @param {WAE2E.Message.ICancelPaymentRequestMessage} message CancelPaymentRequestMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CancelPaymentRequestMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CancelPaymentRequestMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.CancelPaymentRequestMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.CancelPaymentRequestMessage} CancelPaymentRequestMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CancelPaymentRequestMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.CancelPaymentRequestMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.key = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CancelPaymentRequestMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.CancelPaymentRequestMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.CancelPaymentRequestMessage} CancelPaymentRequestMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CancelPaymentRequestMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CancelPaymentRequestMessage message.
             * @function verify
             * @memberof WAE2E.Message.CancelPaymentRequestMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CancelPaymentRequestMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key")) {
                    var error = $root.WAProtocol.MessageKey.verify(message.key);
                    if (error)
                        return "key." + error;
                }
                return null;
            };

            /**
             * Creates a CancelPaymentRequestMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.CancelPaymentRequestMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.CancelPaymentRequestMessage} CancelPaymentRequestMessage
             */
            CancelPaymentRequestMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.CancelPaymentRequestMessage)
                    return object;
                var message = new $root.WAE2E.Message.CancelPaymentRequestMessage();
                if (object.key != null) {
                    if (typeof object.key !== "object")
                        throw TypeError(".WAE2E.Message.CancelPaymentRequestMessage.key: object expected");
                    message.key = $root.WAProtocol.MessageKey.fromObject(object.key);
                }
                return message;
            };

            /**
             * Creates a plain object from a CancelPaymentRequestMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.CancelPaymentRequestMessage
             * @static
             * @param {WAE2E.Message.CancelPaymentRequestMessage} message CancelPaymentRequestMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CancelPaymentRequestMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.key = null;
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = $root.WAProtocol.MessageKey.toObject(message.key, options);
                return object;
            };

            /**
             * Converts this CancelPaymentRequestMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.CancelPaymentRequestMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CancelPaymentRequestMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CancelPaymentRequestMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.CancelPaymentRequestMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CancelPaymentRequestMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.CancelPaymentRequestMessage";
            };

            return CancelPaymentRequestMessage;
        })();

        Message.DeclinePaymentRequestMessage = (function() {

            /**
             * Properties of a DeclinePaymentRequestMessage.
             * @memberof WAE2E.Message
             * @interface IDeclinePaymentRequestMessage
             * @property {WAProtocol.IMessageKey|null} [key] DeclinePaymentRequestMessage key
             */

            /**
             * Constructs a new DeclinePaymentRequestMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a DeclinePaymentRequestMessage.
             * @implements IDeclinePaymentRequestMessage
             * @constructor
             * @param {WAE2E.Message.IDeclinePaymentRequestMessage=} [properties] Properties to set
             */
            function DeclinePaymentRequestMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DeclinePaymentRequestMessage key.
             * @member {WAProtocol.IMessageKey|null|undefined} key
             * @memberof WAE2E.Message.DeclinePaymentRequestMessage
             * @instance
             */
            DeclinePaymentRequestMessage.prototype.key = null;

            /**
             * Creates a new DeclinePaymentRequestMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.DeclinePaymentRequestMessage
             * @static
             * @param {WAE2E.Message.IDeclinePaymentRequestMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.DeclinePaymentRequestMessage} DeclinePaymentRequestMessage instance
             */
            DeclinePaymentRequestMessage.create = function create(properties) {
                return new DeclinePaymentRequestMessage(properties);
            };

            /**
             * Encodes the specified DeclinePaymentRequestMessage message. Does not implicitly {@link WAE2E.Message.DeclinePaymentRequestMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.DeclinePaymentRequestMessage
             * @static
             * @param {WAE2E.Message.IDeclinePaymentRequestMessage} message DeclinePaymentRequestMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DeclinePaymentRequestMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    $root.WAProtocol.MessageKey.encode(message.key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified DeclinePaymentRequestMessage message, length delimited. Does not implicitly {@link WAE2E.Message.DeclinePaymentRequestMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.DeclinePaymentRequestMessage
             * @static
             * @param {WAE2E.Message.IDeclinePaymentRequestMessage} message DeclinePaymentRequestMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DeclinePaymentRequestMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DeclinePaymentRequestMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.DeclinePaymentRequestMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.DeclinePaymentRequestMessage} DeclinePaymentRequestMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DeclinePaymentRequestMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.DeclinePaymentRequestMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.key = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DeclinePaymentRequestMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.DeclinePaymentRequestMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.DeclinePaymentRequestMessage} DeclinePaymentRequestMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DeclinePaymentRequestMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DeclinePaymentRequestMessage message.
             * @function verify
             * @memberof WAE2E.Message.DeclinePaymentRequestMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DeclinePaymentRequestMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key")) {
                    var error = $root.WAProtocol.MessageKey.verify(message.key);
                    if (error)
                        return "key." + error;
                }
                return null;
            };

            /**
             * Creates a DeclinePaymentRequestMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.DeclinePaymentRequestMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.DeclinePaymentRequestMessage} DeclinePaymentRequestMessage
             */
            DeclinePaymentRequestMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.DeclinePaymentRequestMessage)
                    return object;
                var message = new $root.WAE2E.Message.DeclinePaymentRequestMessage();
                if (object.key != null) {
                    if (typeof object.key !== "object")
                        throw TypeError(".WAE2E.Message.DeclinePaymentRequestMessage.key: object expected");
                    message.key = $root.WAProtocol.MessageKey.fromObject(object.key);
                }
                return message;
            };

            /**
             * Creates a plain object from a DeclinePaymentRequestMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.DeclinePaymentRequestMessage
             * @static
             * @param {WAE2E.Message.DeclinePaymentRequestMessage} message DeclinePaymentRequestMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DeclinePaymentRequestMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.key = null;
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = $root.WAProtocol.MessageKey.toObject(message.key, options);
                return object;
            };

            /**
             * Converts this DeclinePaymentRequestMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.DeclinePaymentRequestMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DeclinePaymentRequestMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for DeclinePaymentRequestMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.DeclinePaymentRequestMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            DeclinePaymentRequestMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.DeclinePaymentRequestMessage";
            };

            return DeclinePaymentRequestMessage;
        })();

        Message.RequestPaymentMessage = (function() {

            /**
             * Properties of a RequestPaymentMessage.
             * @memberof WAE2E.Message
             * @interface IRequestPaymentMessage
             * @property {WAE2E.IMessage|null} [noteMessage] RequestPaymentMessage noteMessage
             * @property {string|null} [currencyCodeIso4217] RequestPaymentMessage currencyCodeIso4217
             * @property {number|Long|null} [amount1000] RequestPaymentMessage amount1000
             * @property {string|null} [requestFrom] RequestPaymentMessage requestFrom
             * @property {number|Long|null} [expiryTimestamp] RequestPaymentMessage expiryTimestamp
             * @property {WAE2E.IMoney|null} [amount] RequestPaymentMessage amount
             * @property {WAE2E.IPaymentBackground|null} [background] RequestPaymentMessage background
             */

            /**
             * Constructs a new RequestPaymentMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a RequestPaymentMessage.
             * @implements IRequestPaymentMessage
             * @constructor
             * @param {WAE2E.Message.IRequestPaymentMessage=} [properties] Properties to set
             */
            function RequestPaymentMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RequestPaymentMessage noteMessage.
             * @member {WAE2E.IMessage|null|undefined} noteMessage
             * @memberof WAE2E.Message.RequestPaymentMessage
             * @instance
             */
            RequestPaymentMessage.prototype.noteMessage = null;

            /**
             * RequestPaymentMessage currencyCodeIso4217.
             * @member {string} currencyCodeIso4217
             * @memberof WAE2E.Message.RequestPaymentMessage
             * @instance
             */
            RequestPaymentMessage.prototype.currencyCodeIso4217 = "";

            /**
             * RequestPaymentMessage amount1000.
             * @member {number|Long} amount1000
             * @memberof WAE2E.Message.RequestPaymentMessage
             * @instance
             */
            RequestPaymentMessage.prototype.amount1000 = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * RequestPaymentMessage requestFrom.
             * @member {string} requestFrom
             * @memberof WAE2E.Message.RequestPaymentMessage
             * @instance
             */
            RequestPaymentMessage.prototype.requestFrom = "";

            /**
             * RequestPaymentMessage expiryTimestamp.
             * @member {number|Long} expiryTimestamp
             * @memberof WAE2E.Message.RequestPaymentMessage
             * @instance
             */
            RequestPaymentMessage.prototype.expiryTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * RequestPaymentMessage amount.
             * @member {WAE2E.IMoney|null|undefined} amount
             * @memberof WAE2E.Message.RequestPaymentMessage
             * @instance
             */
            RequestPaymentMessage.prototype.amount = null;

            /**
             * RequestPaymentMessage background.
             * @member {WAE2E.IPaymentBackground|null|undefined} background
             * @memberof WAE2E.Message.RequestPaymentMessage
             * @instance
             */
            RequestPaymentMessage.prototype.background = null;

            /**
             * Creates a new RequestPaymentMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.RequestPaymentMessage
             * @static
             * @param {WAE2E.Message.IRequestPaymentMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.RequestPaymentMessage} RequestPaymentMessage instance
             */
            RequestPaymentMessage.create = function create(properties) {
                return new RequestPaymentMessage(properties);
            };

            /**
             * Encodes the specified RequestPaymentMessage message. Does not implicitly {@link WAE2E.Message.RequestPaymentMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.RequestPaymentMessage
             * @static
             * @param {WAE2E.Message.IRequestPaymentMessage} message RequestPaymentMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestPaymentMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.currencyCodeIso4217 != null && Object.hasOwnProperty.call(message, "currencyCodeIso4217"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.currencyCodeIso4217);
                if (message.amount1000 != null && Object.hasOwnProperty.call(message, "amount1000"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.amount1000);
                if (message.requestFrom != null && Object.hasOwnProperty.call(message, "requestFrom"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.requestFrom);
                if (message.noteMessage != null && Object.hasOwnProperty.call(message, "noteMessage"))
                    $root.WAE2E.Message.encode(message.noteMessage, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.expiryTimestamp != null && Object.hasOwnProperty.call(message, "expiryTimestamp"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.expiryTimestamp);
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    $root.WAE2E.Money.encode(message.amount, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.background != null && Object.hasOwnProperty.call(message, "background"))
                    $root.WAE2E.PaymentBackground.encode(message.background, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified RequestPaymentMessage message, length delimited. Does not implicitly {@link WAE2E.Message.RequestPaymentMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.RequestPaymentMessage
             * @static
             * @param {WAE2E.Message.IRequestPaymentMessage} message RequestPaymentMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestPaymentMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RequestPaymentMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.RequestPaymentMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.RequestPaymentMessage} RequestPaymentMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestPaymentMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.RequestPaymentMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 4: {
                            message.noteMessage = $root.WAE2E.Message.decode(reader, reader.uint32());
                            break;
                        }
                    case 1: {
                            message.currencyCodeIso4217 = reader.string();
                            break;
                        }
                    case 2: {
                            message.amount1000 = reader.uint64();
                            break;
                        }
                    case 3: {
                            message.requestFrom = reader.string();
                            break;
                        }
                    case 5: {
                            message.expiryTimestamp = reader.int64();
                            break;
                        }
                    case 6: {
                            message.amount = $root.WAE2E.Money.decode(reader, reader.uint32());
                            break;
                        }
                    case 7: {
                            message.background = $root.WAE2E.PaymentBackground.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RequestPaymentMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.RequestPaymentMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.RequestPaymentMessage} RequestPaymentMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestPaymentMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RequestPaymentMessage message.
             * @function verify
             * @memberof WAE2E.Message.RequestPaymentMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestPaymentMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.noteMessage != null && message.hasOwnProperty("noteMessage")) {
                    var error = $root.WAE2E.Message.verify(message.noteMessage);
                    if (error)
                        return "noteMessage." + error;
                }
                if (message.currencyCodeIso4217 != null && message.hasOwnProperty("currencyCodeIso4217"))
                    if (!$util.isString(message.currencyCodeIso4217))
                        return "currencyCodeIso4217: string expected";
                if (message.amount1000 != null && message.hasOwnProperty("amount1000"))
                    if (!$util.isInteger(message.amount1000) && !(message.amount1000 && $util.isInteger(message.amount1000.low) && $util.isInteger(message.amount1000.high)))
                        return "amount1000: integer|Long expected";
                if (message.requestFrom != null && message.hasOwnProperty("requestFrom"))
                    if (!$util.isString(message.requestFrom))
                        return "requestFrom: string expected";
                if (message.expiryTimestamp != null && message.hasOwnProperty("expiryTimestamp"))
                    if (!$util.isInteger(message.expiryTimestamp) && !(message.expiryTimestamp && $util.isInteger(message.expiryTimestamp.low) && $util.isInteger(message.expiryTimestamp.high)))
                        return "expiryTimestamp: integer|Long expected";
                if (message.amount != null && message.hasOwnProperty("amount")) {
                    var error = $root.WAE2E.Money.verify(message.amount);
                    if (error)
                        return "amount." + error;
                }
                if (message.background != null && message.hasOwnProperty("background")) {
                    var error = $root.WAE2E.PaymentBackground.verify(message.background);
                    if (error)
                        return "background." + error;
                }
                return null;
            };

            /**
             * Creates a RequestPaymentMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.RequestPaymentMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.RequestPaymentMessage} RequestPaymentMessage
             */
            RequestPaymentMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.RequestPaymentMessage)
                    return object;
                var message = new $root.WAE2E.Message.RequestPaymentMessage();
                if (object.noteMessage != null) {
                    if (typeof object.noteMessage !== "object")
                        throw TypeError(".WAE2E.Message.RequestPaymentMessage.noteMessage: object expected");
                    message.noteMessage = $root.WAE2E.Message.fromObject(object.noteMessage);
                }
                if (object.currencyCodeIso4217 != null)
                    message.currencyCodeIso4217 = String(object.currencyCodeIso4217);
                if (object.amount1000 != null)
                    if ($util.Long)
                        (message.amount1000 = $util.Long.fromValue(object.amount1000)).unsigned = true;
                    else if (typeof object.amount1000 === "string")
                        message.amount1000 = parseInt(object.amount1000, 10);
                    else if (typeof object.amount1000 === "number")
                        message.amount1000 = object.amount1000;
                    else if (typeof object.amount1000 === "object")
                        message.amount1000 = new $util.LongBits(object.amount1000.low >>> 0, object.amount1000.high >>> 0).toNumber(true);
                if (object.requestFrom != null)
                    message.requestFrom = String(object.requestFrom);
                if (object.expiryTimestamp != null)
                    if ($util.Long)
                        (message.expiryTimestamp = $util.Long.fromValue(object.expiryTimestamp)).unsigned = false;
                    else if (typeof object.expiryTimestamp === "string")
                        message.expiryTimestamp = parseInt(object.expiryTimestamp, 10);
                    else if (typeof object.expiryTimestamp === "number")
                        message.expiryTimestamp = object.expiryTimestamp;
                    else if (typeof object.expiryTimestamp === "object")
                        message.expiryTimestamp = new $util.LongBits(object.expiryTimestamp.low >>> 0, object.expiryTimestamp.high >>> 0).toNumber();
                if (object.amount != null) {
                    if (typeof object.amount !== "object")
                        throw TypeError(".WAE2E.Message.RequestPaymentMessage.amount: object expected");
                    message.amount = $root.WAE2E.Money.fromObject(object.amount);
                }
                if (object.background != null) {
                    if (typeof object.background !== "object")
                        throw TypeError(".WAE2E.Message.RequestPaymentMessage.background: object expected");
                    message.background = $root.WAE2E.PaymentBackground.fromObject(object.background);
                }
                return message;
            };

            /**
             * Creates a plain object from a RequestPaymentMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.RequestPaymentMessage
             * @static
             * @param {WAE2E.Message.RequestPaymentMessage} message RequestPaymentMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestPaymentMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.currencyCodeIso4217 = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.amount1000 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.amount1000 = options.longs === String ? "0" : 0;
                    object.requestFrom = "";
                    object.noteMessage = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.expiryTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.expiryTimestamp = options.longs === String ? "0" : 0;
                    object.amount = null;
                    object.background = null;
                }
                if (message.currencyCodeIso4217 != null && message.hasOwnProperty("currencyCodeIso4217"))
                    object.currencyCodeIso4217 = message.currencyCodeIso4217;
                if (message.amount1000 != null && message.hasOwnProperty("amount1000"))
                    if (typeof message.amount1000 === "number")
                        object.amount1000 = options.longs === String ? String(message.amount1000) : message.amount1000;
                    else
                        object.amount1000 = options.longs === String ? $util.Long.prototype.toString.call(message.amount1000) : options.longs === Number ? new $util.LongBits(message.amount1000.low >>> 0, message.amount1000.high >>> 0).toNumber(true) : message.amount1000;
                if (message.requestFrom != null && message.hasOwnProperty("requestFrom"))
                    object.requestFrom = message.requestFrom;
                if (message.noteMessage != null && message.hasOwnProperty("noteMessage"))
                    object.noteMessage = $root.WAE2E.Message.toObject(message.noteMessage, options);
                if (message.expiryTimestamp != null && message.hasOwnProperty("expiryTimestamp"))
                    if (typeof message.expiryTimestamp === "number")
                        object.expiryTimestamp = options.longs === String ? String(message.expiryTimestamp) : message.expiryTimestamp;
                    else
                        object.expiryTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.expiryTimestamp) : options.longs === Number ? new $util.LongBits(message.expiryTimestamp.low >>> 0, message.expiryTimestamp.high >>> 0).toNumber() : message.expiryTimestamp;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = $root.WAE2E.Money.toObject(message.amount, options);
                if (message.background != null && message.hasOwnProperty("background"))
                    object.background = $root.WAE2E.PaymentBackground.toObject(message.background, options);
                return object;
            };

            /**
             * Converts this RequestPaymentMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.RequestPaymentMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestPaymentMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for RequestPaymentMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.RequestPaymentMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RequestPaymentMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.RequestPaymentMessage";
            };

            return RequestPaymentMessage;
        })();

        Message.SendPaymentMessage = (function() {

            /**
             * Properties of a SendPaymentMessage.
             * @memberof WAE2E.Message
             * @interface ISendPaymentMessage
             * @property {WAE2E.IMessage|null} [noteMessage] SendPaymentMessage noteMessage
             * @property {WAProtocol.IMessageKey|null} [requestMessageKey] SendPaymentMessage requestMessageKey
             * @property {WAE2E.IPaymentBackground|null} [background] SendPaymentMessage background
             */

            /**
             * Constructs a new SendPaymentMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a SendPaymentMessage.
             * @implements ISendPaymentMessage
             * @constructor
             * @param {WAE2E.Message.ISendPaymentMessage=} [properties] Properties to set
             */
            function SendPaymentMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SendPaymentMessage noteMessage.
             * @member {WAE2E.IMessage|null|undefined} noteMessage
             * @memberof WAE2E.Message.SendPaymentMessage
             * @instance
             */
            SendPaymentMessage.prototype.noteMessage = null;

            /**
             * SendPaymentMessage requestMessageKey.
             * @member {WAProtocol.IMessageKey|null|undefined} requestMessageKey
             * @memberof WAE2E.Message.SendPaymentMessage
             * @instance
             */
            SendPaymentMessage.prototype.requestMessageKey = null;

            /**
             * SendPaymentMessage background.
             * @member {WAE2E.IPaymentBackground|null|undefined} background
             * @memberof WAE2E.Message.SendPaymentMessage
             * @instance
             */
            SendPaymentMessage.prototype.background = null;

            /**
             * Creates a new SendPaymentMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.SendPaymentMessage
             * @static
             * @param {WAE2E.Message.ISendPaymentMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.SendPaymentMessage} SendPaymentMessage instance
             */
            SendPaymentMessage.create = function create(properties) {
                return new SendPaymentMessage(properties);
            };

            /**
             * Encodes the specified SendPaymentMessage message. Does not implicitly {@link WAE2E.Message.SendPaymentMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.SendPaymentMessage
             * @static
             * @param {WAE2E.Message.ISendPaymentMessage} message SendPaymentMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SendPaymentMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.noteMessage != null && Object.hasOwnProperty.call(message, "noteMessage"))
                    $root.WAE2E.Message.encode(message.noteMessage, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.requestMessageKey != null && Object.hasOwnProperty.call(message, "requestMessageKey"))
                    $root.WAProtocol.MessageKey.encode(message.requestMessageKey, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.background != null && Object.hasOwnProperty.call(message, "background"))
                    $root.WAE2E.PaymentBackground.encode(message.background, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SendPaymentMessage message, length delimited. Does not implicitly {@link WAE2E.Message.SendPaymentMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.SendPaymentMessage
             * @static
             * @param {WAE2E.Message.ISendPaymentMessage} message SendPaymentMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SendPaymentMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SendPaymentMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.SendPaymentMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.SendPaymentMessage} SendPaymentMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SendPaymentMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.SendPaymentMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2: {
                            message.noteMessage = $root.WAE2E.Message.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.requestMessageKey = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.background = $root.WAE2E.PaymentBackground.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SendPaymentMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.SendPaymentMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.SendPaymentMessage} SendPaymentMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SendPaymentMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SendPaymentMessage message.
             * @function verify
             * @memberof WAE2E.Message.SendPaymentMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SendPaymentMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.noteMessage != null && message.hasOwnProperty("noteMessage")) {
                    var error = $root.WAE2E.Message.verify(message.noteMessage);
                    if (error)
                        return "noteMessage." + error;
                }
                if (message.requestMessageKey != null && message.hasOwnProperty("requestMessageKey")) {
                    var error = $root.WAProtocol.MessageKey.verify(message.requestMessageKey);
                    if (error)
                        return "requestMessageKey." + error;
                }
                if (message.background != null && message.hasOwnProperty("background")) {
                    var error = $root.WAE2E.PaymentBackground.verify(message.background);
                    if (error)
                        return "background." + error;
                }
                return null;
            };

            /**
             * Creates a SendPaymentMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.SendPaymentMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.SendPaymentMessage} SendPaymentMessage
             */
            SendPaymentMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.SendPaymentMessage)
                    return object;
                var message = new $root.WAE2E.Message.SendPaymentMessage();
                if (object.noteMessage != null) {
                    if (typeof object.noteMessage !== "object")
                        throw TypeError(".WAE2E.Message.SendPaymentMessage.noteMessage: object expected");
                    message.noteMessage = $root.WAE2E.Message.fromObject(object.noteMessage);
                }
                if (object.requestMessageKey != null) {
                    if (typeof object.requestMessageKey !== "object")
                        throw TypeError(".WAE2E.Message.SendPaymentMessage.requestMessageKey: object expected");
                    message.requestMessageKey = $root.WAProtocol.MessageKey.fromObject(object.requestMessageKey);
                }
                if (object.background != null) {
                    if (typeof object.background !== "object")
                        throw TypeError(".WAE2E.Message.SendPaymentMessage.background: object expected");
                    message.background = $root.WAE2E.PaymentBackground.fromObject(object.background);
                }
                return message;
            };

            /**
             * Creates a plain object from a SendPaymentMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.SendPaymentMessage
             * @static
             * @param {WAE2E.Message.SendPaymentMessage} message SendPaymentMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SendPaymentMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.noteMessage = null;
                    object.requestMessageKey = null;
                    object.background = null;
                }
                if (message.noteMessage != null && message.hasOwnProperty("noteMessage"))
                    object.noteMessage = $root.WAE2E.Message.toObject(message.noteMessage, options);
                if (message.requestMessageKey != null && message.hasOwnProperty("requestMessageKey"))
                    object.requestMessageKey = $root.WAProtocol.MessageKey.toObject(message.requestMessageKey, options);
                if (message.background != null && message.hasOwnProperty("background"))
                    object.background = $root.WAE2E.PaymentBackground.toObject(message.background, options);
                return object;
            };

            /**
             * Converts this SendPaymentMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.SendPaymentMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SendPaymentMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SendPaymentMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.SendPaymentMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SendPaymentMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.SendPaymentMessage";
            };

            return SendPaymentMessage;
        })();

        Message.ContactsArrayMessage = (function() {

            /**
             * Properties of a ContactsArrayMessage.
             * @memberof WAE2E.Message
             * @interface IContactsArrayMessage
             * @property {string|null} [displayName] ContactsArrayMessage displayName
             * @property {Array.<WAE2E.Message.IContactMessage>|null} [contacts] ContactsArrayMessage contacts
             * @property {WAE2E.IContextInfo|null} [contextInfo] ContactsArrayMessage contextInfo
             */

            /**
             * Constructs a new ContactsArrayMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a ContactsArrayMessage.
             * @implements IContactsArrayMessage
             * @constructor
             * @param {WAE2E.Message.IContactsArrayMessage=} [properties] Properties to set
             */
            function ContactsArrayMessage(properties) {
                this.contacts = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ContactsArrayMessage displayName.
             * @member {string} displayName
             * @memberof WAE2E.Message.ContactsArrayMessage
             * @instance
             */
            ContactsArrayMessage.prototype.displayName = "";

            /**
             * ContactsArrayMessage contacts.
             * @member {Array.<WAE2E.Message.IContactMessage>} contacts
             * @memberof WAE2E.Message.ContactsArrayMessage
             * @instance
             */
            ContactsArrayMessage.prototype.contacts = $util.emptyArray;

            /**
             * ContactsArrayMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.ContactsArrayMessage
             * @instance
             */
            ContactsArrayMessage.prototype.contextInfo = null;

            /**
             * Creates a new ContactsArrayMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.ContactsArrayMessage
             * @static
             * @param {WAE2E.Message.IContactsArrayMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.ContactsArrayMessage} ContactsArrayMessage instance
             */
            ContactsArrayMessage.create = function create(properties) {
                return new ContactsArrayMessage(properties);
            };

            /**
             * Encodes the specified ContactsArrayMessage message. Does not implicitly {@link WAE2E.Message.ContactsArrayMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.ContactsArrayMessage
             * @static
             * @param {WAE2E.Message.IContactsArrayMessage} message ContactsArrayMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContactsArrayMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.displayName);
                if (message.contacts != null && message.contacts.length)
                    for (var i = 0; i < message.contacts.length; ++i)
                        $root.WAE2E.Message.ContactMessage.encode(message.contacts[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ContactsArrayMessage message, length delimited. Does not implicitly {@link WAE2E.Message.ContactsArrayMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.ContactsArrayMessage
             * @static
             * @param {WAE2E.Message.IContactsArrayMessage} message ContactsArrayMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContactsArrayMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ContactsArrayMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.ContactsArrayMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.ContactsArrayMessage} ContactsArrayMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContactsArrayMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ContactsArrayMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.displayName = reader.string();
                            break;
                        }
                    case 2: {
                            if (!(message.contacts && message.contacts.length))
                                message.contacts = [];
                            message.contacts.push($root.WAE2E.Message.ContactMessage.decode(reader, reader.uint32()));
                            break;
                        }
                    case 17: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ContactsArrayMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.ContactsArrayMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.ContactsArrayMessage} ContactsArrayMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContactsArrayMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ContactsArrayMessage message.
             * @function verify
             * @memberof WAE2E.Message.ContactsArrayMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ContactsArrayMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.displayName != null && message.hasOwnProperty("displayName"))
                    if (!$util.isString(message.displayName))
                        return "displayName: string expected";
                if (message.contacts != null && message.hasOwnProperty("contacts")) {
                    if (!Array.isArray(message.contacts))
                        return "contacts: array expected";
                    for (var i = 0; i < message.contacts.length; ++i) {
                        var error = $root.WAE2E.Message.ContactMessage.verify(message.contacts[i]);
                        if (error)
                            return "contacts." + error;
                    }
                }
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                return null;
            };

            /**
             * Creates a ContactsArrayMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.ContactsArrayMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.ContactsArrayMessage} ContactsArrayMessage
             */
            ContactsArrayMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.ContactsArrayMessage)
                    return object;
                var message = new $root.WAE2E.Message.ContactsArrayMessage();
                if (object.displayName != null)
                    message.displayName = String(object.displayName);
                if (object.contacts) {
                    if (!Array.isArray(object.contacts))
                        throw TypeError(".WAE2E.Message.ContactsArrayMessage.contacts: array expected");
                    message.contacts = [];
                    for (var i = 0; i < object.contacts.length; ++i) {
                        if (typeof object.contacts[i] !== "object")
                            throw TypeError(".WAE2E.Message.ContactsArrayMessage.contacts: object expected");
                        message.contacts[i] = $root.WAE2E.Message.ContactMessage.fromObject(object.contacts[i]);
                    }
                }
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.ContactsArrayMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                return message;
            };

            /**
             * Creates a plain object from a ContactsArrayMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.ContactsArrayMessage
             * @static
             * @param {WAE2E.Message.ContactsArrayMessage} message ContactsArrayMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ContactsArrayMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.contacts = [];
                if (options.defaults) {
                    object.displayName = "";
                    object.contextInfo = null;
                }
                if (message.displayName != null && message.hasOwnProperty("displayName"))
                    object.displayName = message.displayName;
                if (message.contacts && message.contacts.length) {
                    object.contacts = [];
                    for (var j = 0; j < message.contacts.length; ++j)
                        object.contacts[j] = $root.WAE2E.Message.ContactMessage.toObject(message.contacts[j], options);
                }
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                return object;
            };

            /**
             * Converts this ContactsArrayMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.ContactsArrayMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ContactsArrayMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ContactsArrayMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.ContactsArrayMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ContactsArrayMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.ContactsArrayMessage";
            };

            return ContactsArrayMessage;
        })();

        Message.InitialSecurityNotificationSettingSync = (function() {

            /**
             * Properties of an InitialSecurityNotificationSettingSync.
             * @memberof WAE2E.Message
             * @interface IInitialSecurityNotificationSettingSync
             * @property {boolean|null} [securityNotificationEnabled] InitialSecurityNotificationSettingSync securityNotificationEnabled
             */

            /**
             * Constructs a new InitialSecurityNotificationSettingSync.
             * @memberof WAE2E.Message
             * @classdesc Represents an InitialSecurityNotificationSettingSync.
             * @implements IInitialSecurityNotificationSettingSync
             * @constructor
             * @param {WAE2E.Message.IInitialSecurityNotificationSettingSync=} [properties] Properties to set
             */
            function InitialSecurityNotificationSettingSync(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * InitialSecurityNotificationSettingSync securityNotificationEnabled.
             * @member {boolean} securityNotificationEnabled
             * @memberof WAE2E.Message.InitialSecurityNotificationSettingSync
             * @instance
             */
            InitialSecurityNotificationSettingSync.prototype.securityNotificationEnabled = false;

            /**
             * Creates a new InitialSecurityNotificationSettingSync instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.InitialSecurityNotificationSettingSync
             * @static
             * @param {WAE2E.Message.IInitialSecurityNotificationSettingSync=} [properties] Properties to set
             * @returns {WAE2E.Message.InitialSecurityNotificationSettingSync} InitialSecurityNotificationSettingSync instance
             */
            InitialSecurityNotificationSettingSync.create = function create(properties) {
                return new InitialSecurityNotificationSettingSync(properties);
            };

            /**
             * Encodes the specified InitialSecurityNotificationSettingSync message. Does not implicitly {@link WAE2E.Message.InitialSecurityNotificationSettingSync.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.InitialSecurityNotificationSettingSync
             * @static
             * @param {WAE2E.Message.IInitialSecurityNotificationSettingSync} message InitialSecurityNotificationSettingSync message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InitialSecurityNotificationSettingSync.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.securityNotificationEnabled != null && Object.hasOwnProperty.call(message, "securityNotificationEnabled"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.securityNotificationEnabled);
                return writer;
            };

            /**
             * Encodes the specified InitialSecurityNotificationSettingSync message, length delimited. Does not implicitly {@link WAE2E.Message.InitialSecurityNotificationSettingSync.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.InitialSecurityNotificationSettingSync
             * @static
             * @param {WAE2E.Message.IInitialSecurityNotificationSettingSync} message InitialSecurityNotificationSettingSync message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InitialSecurityNotificationSettingSync.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an InitialSecurityNotificationSettingSync message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.InitialSecurityNotificationSettingSync
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.InitialSecurityNotificationSettingSync} InitialSecurityNotificationSettingSync
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InitialSecurityNotificationSettingSync.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.InitialSecurityNotificationSettingSync();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.securityNotificationEnabled = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an InitialSecurityNotificationSettingSync message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.InitialSecurityNotificationSettingSync
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.InitialSecurityNotificationSettingSync} InitialSecurityNotificationSettingSync
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InitialSecurityNotificationSettingSync.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an InitialSecurityNotificationSettingSync message.
             * @function verify
             * @memberof WAE2E.Message.InitialSecurityNotificationSettingSync
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            InitialSecurityNotificationSettingSync.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.securityNotificationEnabled != null && message.hasOwnProperty("securityNotificationEnabled"))
                    if (typeof message.securityNotificationEnabled !== "boolean")
                        return "securityNotificationEnabled: boolean expected";
                return null;
            };

            /**
             * Creates an InitialSecurityNotificationSettingSync message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.InitialSecurityNotificationSettingSync
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.InitialSecurityNotificationSettingSync} InitialSecurityNotificationSettingSync
             */
            InitialSecurityNotificationSettingSync.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.InitialSecurityNotificationSettingSync)
                    return object;
                var message = new $root.WAE2E.Message.InitialSecurityNotificationSettingSync();
                if (object.securityNotificationEnabled != null)
                    message.securityNotificationEnabled = Boolean(object.securityNotificationEnabled);
                return message;
            };

            /**
             * Creates a plain object from an InitialSecurityNotificationSettingSync message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.InitialSecurityNotificationSettingSync
             * @static
             * @param {WAE2E.Message.InitialSecurityNotificationSettingSync} message InitialSecurityNotificationSettingSync
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            InitialSecurityNotificationSettingSync.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.securityNotificationEnabled = false;
                if (message.securityNotificationEnabled != null && message.hasOwnProperty("securityNotificationEnabled"))
                    object.securityNotificationEnabled = message.securityNotificationEnabled;
                return object;
            };

            /**
             * Converts this InitialSecurityNotificationSettingSync to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.InitialSecurityNotificationSettingSync
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            InitialSecurityNotificationSettingSync.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for InitialSecurityNotificationSettingSync
             * @function getTypeUrl
             * @memberof WAE2E.Message.InitialSecurityNotificationSettingSync
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            InitialSecurityNotificationSettingSync.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.InitialSecurityNotificationSettingSync";
            };

            return InitialSecurityNotificationSettingSync;
        })();

        Message.PeerDataOperationRequestResponseMessage = (function() {

            /**
             * Properties of a PeerDataOperationRequestResponseMessage.
             * @memberof WAE2E.Message
             * @interface IPeerDataOperationRequestResponseMessage
             * @property {WAE2E.Message.PeerDataOperationRequestType|null} [peerDataOperationRequestType] PeerDataOperationRequestResponseMessage peerDataOperationRequestType
             * @property {string|null} [stanzaID] PeerDataOperationRequestResponseMessage stanzaID
             * @property {Array.<WAE2E.Message.PeerDataOperationRequestResponseMessage.IPeerDataOperationResult>|null} [peerDataOperationResult] PeerDataOperationRequestResponseMessage peerDataOperationResult
             */

            /**
             * Constructs a new PeerDataOperationRequestResponseMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a PeerDataOperationRequestResponseMessage.
             * @implements IPeerDataOperationRequestResponseMessage
             * @constructor
             * @param {WAE2E.Message.IPeerDataOperationRequestResponseMessage=} [properties] Properties to set
             */
            function PeerDataOperationRequestResponseMessage(properties) {
                this.peerDataOperationResult = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PeerDataOperationRequestResponseMessage peerDataOperationRequestType.
             * @member {WAE2E.Message.PeerDataOperationRequestType} peerDataOperationRequestType
             * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage
             * @instance
             */
            PeerDataOperationRequestResponseMessage.prototype.peerDataOperationRequestType = 0;

            /**
             * PeerDataOperationRequestResponseMessage stanzaID.
             * @member {string} stanzaID
             * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage
             * @instance
             */
            PeerDataOperationRequestResponseMessage.prototype.stanzaID = "";

            /**
             * PeerDataOperationRequestResponseMessage peerDataOperationResult.
             * @member {Array.<WAE2E.Message.PeerDataOperationRequestResponseMessage.IPeerDataOperationResult>} peerDataOperationResult
             * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage
             * @instance
             */
            PeerDataOperationRequestResponseMessage.prototype.peerDataOperationResult = $util.emptyArray;

            /**
             * Creates a new PeerDataOperationRequestResponseMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage
             * @static
             * @param {WAE2E.Message.IPeerDataOperationRequestResponseMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage} PeerDataOperationRequestResponseMessage instance
             */
            PeerDataOperationRequestResponseMessage.create = function create(properties) {
                return new PeerDataOperationRequestResponseMessage(properties);
            };

            /**
             * Encodes the specified PeerDataOperationRequestResponseMessage message. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestResponseMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage
             * @static
             * @param {WAE2E.Message.IPeerDataOperationRequestResponseMessage} message PeerDataOperationRequestResponseMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PeerDataOperationRequestResponseMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.peerDataOperationRequestType != null && Object.hasOwnProperty.call(message, "peerDataOperationRequestType"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.peerDataOperationRequestType);
                if (message.stanzaID != null && Object.hasOwnProperty.call(message, "stanzaID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.stanzaID);
                if (message.peerDataOperationResult != null && message.peerDataOperationResult.length)
                    for (var i = 0; i < message.peerDataOperationResult.length; ++i)
                        $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.encode(message.peerDataOperationResult[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PeerDataOperationRequestResponseMessage message, length delimited. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestResponseMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage
             * @static
             * @param {WAE2E.Message.IPeerDataOperationRequestResponseMessage} message PeerDataOperationRequestResponseMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PeerDataOperationRequestResponseMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PeerDataOperationRequestResponseMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage} PeerDataOperationRequestResponseMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PeerDataOperationRequestResponseMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PeerDataOperationRequestResponseMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.peerDataOperationRequestType = reader.int32();
                            break;
                        }
                    case 2: {
                            message.stanzaID = reader.string();
                            break;
                        }
                    case 3: {
                            if (!(message.peerDataOperationResult && message.peerDataOperationResult.length))
                                message.peerDataOperationResult = [];
                            message.peerDataOperationResult.push($root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PeerDataOperationRequestResponseMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage} PeerDataOperationRequestResponseMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PeerDataOperationRequestResponseMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PeerDataOperationRequestResponseMessage message.
             * @function verify
             * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PeerDataOperationRequestResponseMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.peerDataOperationRequestType != null && message.hasOwnProperty("peerDataOperationRequestType"))
                    switch (message.peerDataOperationRequestType) {
                    default:
                        return "peerDataOperationRequestType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                if (message.stanzaID != null && message.hasOwnProperty("stanzaID"))
                    if (!$util.isString(message.stanzaID))
                        return "stanzaID: string expected";
                if (message.peerDataOperationResult != null && message.hasOwnProperty("peerDataOperationResult")) {
                    if (!Array.isArray(message.peerDataOperationResult))
                        return "peerDataOperationResult: array expected";
                    for (var i = 0; i < message.peerDataOperationResult.length; ++i) {
                        var error = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.verify(message.peerDataOperationResult[i]);
                        if (error)
                            return "peerDataOperationResult." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a PeerDataOperationRequestResponseMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage} PeerDataOperationRequestResponseMessage
             */
            PeerDataOperationRequestResponseMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.PeerDataOperationRequestResponseMessage)
                    return object;
                var message = new $root.WAE2E.Message.PeerDataOperationRequestResponseMessage();
                switch (object.peerDataOperationRequestType) {
                default:
                    if (typeof object.peerDataOperationRequestType === "number") {
                        message.peerDataOperationRequestType = object.peerDataOperationRequestType;
                        break;
                    }
                    break;
                case "UPLOAD_STICKER":
                case 0:
                    message.peerDataOperationRequestType = 0;
                    break;
                case "SEND_RECENT_STICKER_BOOTSTRAP":
                case 1:
                    message.peerDataOperationRequestType = 1;
                    break;
                case "GENERATE_LINK_PREVIEW":
                case 2:
                    message.peerDataOperationRequestType = 2;
                    break;
                case "HISTORY_SYNC_ON_DEMAND":
                case 3:
                    message.peerDataOperationRequestType = 3;
                    break;
                case "PLACEHOLDER_MESSAGE_RESEND":
                case 4:
                    message.peerDataOperationRequestType = 4;
                    break;
                case "WAFFLE_LINKING_NONCE_FETCH":
                case 5:
                    message.peerDataOperationRequestType = 5;
                    break;
                }
                if (object.stanzaID != null)
                    message.stanzaID = String(object.stanzaID);
                if (object.peerDataOperationResult) {
                    if (!Array.isArray(object.peerDataOperationResult))
                        throw TypeError(".WAE2E.Message.PeerDataOperationRequestResponseMessage.peerDataOperationResult: array expected");
                    message.peerDataOperationResult = [];
                    for (var i = 0; i < object.peerDataOperationResult.length; ++i) {
                        if (typeof object.peerDataOperationResult[i] !== "object")
                            throw TypeError(".WAE2E.Message.PeerDataOperationRequestResponseMessage.peerDataOperationResult: object expected");
                        message.peerDataOperationResult[i] = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.fromObject(object.peerDataOperationResult[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a PeerDataOperationRequestResponseMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage
             * @static
             * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage} message PeerDataOperationRequestResponseMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PeerDataOperationRequestResponseMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.peerDataOperationResult = [];
                if (options.defaults) {
                    object.peerDataOperationRequestType = options.enums === String ? "UPLOAD_STICKER" : 0;
                    object.stanzaID = "";
                }
                if (message.peerDataOperationRequestType != null && message.hasOwnProperty("peerDataOperationRequestType"))
                    object.peerDataOperationRequestType = options.enums === String ? $root.WAE2E.Message.PeerDataOperationRequestType[message.peerDataOperationRequestType] === undefined ? message.peerDataOperationRequestType : $root.WAE2E.Message.PeerDataOperationRequestType[message.peerDataOperationRequestType] : message.peerDataOperationRequestType;
                if (message.stanzaID != null && message.hasOwnProperty("stanzaID"))
                    object.stanzaID = message.stanzaID;
                if (message.peerDataOperationResult && message.peerDataOperationResult.length) {
                    object.peerDataOperationResult = [];
                    for (var j = 0; j < message.peerDataOperationResult.length; ++j)
                        object.peerDataOperationResult[j] = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.toObject(message.peerDataOperationResult[j], options);
                }
                return object;
            };

            /**
             * Converts this PeerDataOperationRequestResponseMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PeerDataOperationRequestResponseMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PeerDataOperationRequestResponseMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PeerDataOperationRequestResponseMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.PeerDataOperationRequestResponseMessage";
            };

            PeerDataOperationRequestResponseMessage.PeerDataOperationResult = (function() {

                /**
                 * Properties of a PeerDataOperationResult.
                 * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage
                 * @interface IPeerDataOperationResult
                 * @property {WAMmsRetry.MediaRetryNotification.ResultType|null} [mediaUploadResult] PeerDataOperationResult mediaUploadResult
                 * @property {WAE2E.Message.IStickerMessage|null} [stickerMessage] PeerDataOperationResult stickerMessage
                 * @property {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.ILinkPreviewResponse|null} [linkPreviewResponse] PeerDataOperationResult linkPreviewResponse
                 * @property {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.IPlaceholderMessageResendResponse|null} [placeholderMessageResendResponse] PeerDataOperationResult placeholderMessageResendResponse
                 * @property {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.IWaffleNonceFetchResponse|null} [waffleNonceFetchRequestResponse] PeerDataOperationResult waffleNonceFetchRequestResponse
                 */

                /**
                 * Constructs a new PeerDataOperationResult.
                 * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage
                 * @classdesc Represents a PeerDataOperationResult.
                 * @implements IPeerDataOperationResult
                 * @constructor
                 * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.IPeerDataOperationResult=} [properties] Properties to set
                 */
                function PeerDataOperationResult(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * PeerDataOperationResult mediaUploadResult.
                 * @member {WAMmsRetry.MediaRetryNotification.ResultType} mediaUploadResult
                 * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                 * @instance
                 */
                PeerDataOperationResult.prototype.mediaUploadResult = 0;

                /**
                 * PeerDataOperationResult stickerMessage.
                 * @member {WAE2E.Message.IStickerMessage|null|undefined} stickerMessage
                 * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                 * @instance
                 */
                PeerDataOperationResult.prototype.stickerMessage = null;

                /**
                 * PeerDataOperationResult linkPreviewResponse.
                 * @member {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.ILinkPreviewResponse|null|undefined} linkPreviewResponse
                 * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                 * @instance
                 */
                PeerDataOperationResult.prototype.linkPreviewResponse = null;

                /**
                 * PeerDataOperationResult placeholderMessageResendResponse.
                 * @member {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.IPlaceholderMessageResendResponse|null|undefined} placeholderMessageResendResponse
                 * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                 * @instance
                 */
                PeerDataOperationResult.prototype.placeholderMessageResendResponse = null;

                /**
                 * PeerDataOperationResult waffleNonceFetchRequestResponse.
                 * @member {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.IWaffleNonceFetchResponse|null|undefined} waffleNonceFetchRequestResponse
                 * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                 * @instance
                 */
                PeerDataOperationResult.prototype.waffleNonceFetchRequestResponse = null;

                /**
                 * Creates a new PeerDataOperationResult instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                 * @static
                 * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.IPeerDataOperationResult=} [properties] Properties to set
                 * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult} PeerDataOperationResult instance
                 */
                PeerDataOperationResult.create = function create(properties) {
                    return new PeerDataOperationResult(properties);
                };

                /**
                 * Encodes the specified PeerDataOperationResult message. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                 * @static
                 * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.IPeerDataOperationResult} message PeerDataOperationResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PeerDataOperationResult.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.mediaUploadResult != null && Object.hasOwnProperty.call(message, "mediaUploadResult"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.mediaUploadResult);
                    if (message.stickerMessage != null && Object.hasOwnProperty.call(message, "stickerMessage"))
                        $root.WAE2E.Message.StickerMessage.encode(message.stickerMessage, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.linkPreviewResponse != null && Object.hasOwnProperty.call(message, "linkPreviewResponse"))
                        $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.encode(message.linkPreviewResponse, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.placeholderMessageResendResponse != null && Object.hasOwnProperty.call(message, "placeholderMessageResendResponse"))
                        $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse.encode(message.placeholderMessageResendResponse, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.waffleNonceFetchRequestResponse != null && Object.hasOwnProperty.call(message, "waffleNonceFetchRequestResponse"))
                        $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse.encode(message.waffleNonceFetchRequestResponse, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified PeerDataOperationResult message, length delimited. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                 * @static
                 * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.IPeerDataOperationResult} message PeerDataOperationResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PeerDataOperationResult.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a PeerDataOperationResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult} PeerDataOperationResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PeerDataOperationResult.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.mediaUploadResult = reader.int32();
                                break;
                            }
                        case 2: {
                                message.stickerMessage = $root.WAE2E.Message.StickerMessage.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.linkPreviewResponse = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                message.placeholderMessageResendResponse = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.waffleNonceFetchRequestResponse = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a PeerDataOperationResult message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult} PeerDataOperationResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PeerDataOperationResult.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a PeerDataOperationResult message.
                 * @function verify
                 * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PeerDataOperationResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.mediaUploadResult != null && message.hasOwnProperty("mediaUploadResult"))
                        switch (message.mediaUploadResult) {
                        default:
                            return "mediaUploadResult: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.stickerMessage != null && message.hasOwnProperty("stickerMessage")) {
                        var error = $root.WAE2E.Message.StickerMessage.verify(message.stickerMessage);
                        if (error)
                            return "stickerMessage." + error;
                    }
                    if (message.linkPreviewResponse != null && message.hasOwnProperty("linkPreviewResponse")) {
                        var error = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.verify(message.linkPreviewResponse);
                        if (error)
                            return "linkPreviewResponse." + error;
                    }
                    if (message.placeholderMessageResendResponse != null && message.hasOwnProperty("placeholderMessageResendResponse")) {
                        var error = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse.verify(message.placeholderMessageResendResponse);
                        if (error)
                            return "placeholderMessageResendResponse." + error;
                    }
                    if (message.waffleNonceFetchRequestResponse != null && message.hasOwnProperty("waffleNonceFetchRequestResponse")) {
                        var error = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse.verify(message.waffleNonceFetchRequestResponse);
                        if (error)
                            return "waffleNonceFetchRequestResponse." + error;
                    }
                    return null;
                };

                /**
                 * Creates a PeerDataOperationResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult} PeerDataOperationResult
                 */
                PeerDataOperationResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult)
                        return object;
                    var message = new $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult();
                    switch (object.mediaUploadResult) {
                    default:
                        if (typeof object.mediaUploadResult === "number") {
                            message.mediaUploadResult = object.mediaUploadResult;
                            break;
                        }
                        break;
                    case "GENERAL_ERROR":
                    case 0:
                        message.mediaUploadResult = 0;
                        break;
                    case "SUCCESS":
                    case 1:
                        message.mediaUploadResult = 1;
                        break;
                    case "NOT_FOUND":
                    case 2:
                        message.mediaUploadResult = 2;
                        break;
                    case "DECRYPTION_ERROR":
                    case 3:
                        message.mediaUploadResult = 3;
                        break;
                    }
                    if (object.stickerMessage != null) {
                        if (typeof object.stickerMessage !== "object")
                            throw TypeError(".WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.stickerMessage: object expected");
                        message.stickerMessage = $root.WAE2E.Message.StickerMessage.fromObject(object.stickerMessage);
                    }
                    if (object.linkPreviewResponse != null) {
                        if (typeof object.linkPreviewResponse !== "object")
                            throw TypeError(".WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.linkPreviewResponse: object expected");
                        message.linkPreviewResponse = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.fromObject(object.linkPreviewResponse);
                    }
                    if (object.placeholderMessageResendResponse != null) {
                        if (typeof object.placeholderMessageResendResponse !== "object")
                            throw TypeError(".WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.placeholderMessageResendResponse: object expected");
                        message.placeholderMessageResendResponse = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse.fromObject(object.placeholderMessageResendResponse);
                    }
                    if (object.waffleNonceFetchRequestResponse != null) {
                        if (typeof object.waffleNonceFetchRequestResponse !== "object")
                            throw TypeError(".WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.waffleNonceFetchRequestResponse: object expected");
                        message.waffleNonceFetchRequestResponse = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse.fromObject(object.waffleNonceFetchRequestResponse);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a PeerDataOperationResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                 * @static
                 * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult} message PeerDataOperationResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PeerDataOperationResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.mediaUploadResult = options.enums === String ? "GENERAL_ERROR" : 0;
                        object.stickerMessage = null;
                        object.linkPreviewResponse = null;
                        object.placeholderMessageResendResponse = null;
                        object.waffleNonceFetchRequestResponse = null;
                    }
                    if (message.mediaUploadResult != null && message.hasOwnProperty("mediaUploadResult"))
                        object.mediaUploadResult = options.enums === String ? $root.WAMmsRetry.MediaRetryNotification.ResultType[message.mediaUploadResult] === undefined ? message.mediaUploadResult : $root.WAMmsRetry.MediaRetryNotification.ResultType[message.mediaUploadResult] : message.mediaUploadResult;
                    if (message.stickerMessage != null && message.hasOwnProperty("stickerMessage"))
                        object.stickerMessage = $root.WAE2E.Message.StickerMessage.toObject(message.stickerMessage, options);
                    if (message.linkPreviewResponse != null && message.hasOwnProperty("linkPreviewResponse"))
                        object.linkPreviewResponse = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.toObject(message.linkPreviewResponse, options);
                    if (message.placeholderMessageResendResponse != null && message.hasOwnProperty("placeholderMessageResendResponse"))
                        object.placeholderMessageResendResponse = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse.toObject(message.placeholderMessageResendResponse, options);
                    if (message.waffleNonceFetchRequestResponse != null && message.hasOwnProperty("waffleNonceFetchRequestResponse"))
                        object.waffleNonceFetchRequestResponse = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse.toObject(message.waffleNonceFetchRequestResponse, options);
                    return object;
                };

                /**
                 * Converts this PeerDataOperationResult to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PeerDataOperationResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for PeerDataOperationResult
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                PeerDataOperationResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult";
                };

                PeerDataOperationResult.WaffleNonceFetchResponse = (function() {

                    /**
                     * Properties of a WaffleNonceFetchResponse.
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                     * @interface IWaffleNonceFetchResponse
                     * @property {string|null} [nonce] WaffleNonceFetchResponse nonce
                     * @property {string|null} [waEntFbid] WaffleNonceFetchResponse waEntFbid
                     */

                    /**
                     * Constructs a new WaffleNonceFetchResponse.
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                     * @classdesc Represents a WaffleNonceFetchResponse.
                     * @implements IWaffleNonceFetchResponse
                     * @constructor
                     * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.IWaffleNonceFetchResponse=} [properties] Properties to set
                     */
                    function WaffleNonceFetchResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * WaffleNonceFetchResponse nonce.
                     * @member {string} nonce
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse
                     * @instance
                     */
                    WaffleNonceFetchResponse.prototype.nonce = "";

                    /**
                     * WaffleNonceFetchResponse waEntFbid.
                     * @member {string} waEntFbid
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse
                     * @instance
                     */
                    WaffleNonceFetchResponse.prototype.waEntFbid = "";

                    /**
                     * Creates a new WaffleNonceFetchResponse instance using the specified properties.
                     * @function create
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse
                     * @static
                     * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.IWaffleNonceFetchResponse=} [properties] Properties to set
                     * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse} WaffleNonceFetchResponse instance
                     */
                    WaffleNonceFetchResponse.create = function create(properties) {
                        return new WaffleNonceFetchResponse(properties);
                    };

                    /**
                     * Encodes the specified WaffleNonceFetchResponse message. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse.verify|verify} messages.
                     * @function encode
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse
                     * @static
                     * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.IWaffleNonceFetchResponse} message WaffleNonceFetchResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WaffleNonceFetchResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.nonce);
                        if (message.waEntFbid != null && Object.hasOwnProperty.call(message, "waEntFbid"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.waEntFbid);
                        return writer;
                    };

                    /**
                     * Encodes the specified WaffleNonceFetchResponse message, length delimited. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse
                     * @static
                     * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.IWaffleNonceFetchResponse} message WaffleNonceFetchResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WaffleNonceFetchResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a WaffleNonceFetchResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse} WaffleNonceFetchResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WaffleNonceFetchResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.nonce = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.waEntFbid = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a WaffleNonceFetchResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse} WaffleNonceFetchResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WaffleNonceFetchResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a WaffleNonceFetchResponse message.
                     * @function verify
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    WaffleNonceFetchResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.nonce != null && message.hasOwnProperty("nonce"))
                            if (!$util.isString(message.nonce))
                                return "nonce: string expected";
                        if (message.waEntFbid != null && message.hasOwnProperty("waEntFbid"))
                            if (!$util.isString(message.waEntFbid))
                                return "waEntFbid: string expected";
                        return null;
                    };

                    /**
                     * Creates a WaffleNonceFetchResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse} WaffleNonceFetchResponse
                     */
                    WaffleNonceFetchResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse)
                            return object;
                        var message = new $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse();
                        if (object.nonce != null)
                            message.nonce = String(object.nonce);
                        if (object.waEntFbid != null)
                            message.waEntFbid = String(object.waEntFbid);
                        return message;
                    };

                    /**
                     * Creates a plain object from a WaffleNonceFetchResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse
                     * @static
                     * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse} message WaffleNonceFetchResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    WaffleNonceFetchResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.nonce = "";
                            object.waEntFbid = "";
                        }
                        if (message.nonce != null && message.hasOwnProperty("nonce"))
                            object.nonce = message.nonce;
                        if (message.waEntFbid != null && message.hasOwnProperty("waEntFbid"))
                            object.waEntFbid = message.waEntFbid;
                        return object;
                    };

                    /**
                     * Converts this WaffleNonceFetchResponse to JSON.
                     * @function toJSON
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    WaffleNonceFetchResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Gets the default type url for WaffleNonceFetchResponse
                     * @function getTypeUrl
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    WaffleNonceFetchResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.WaffleNonceFetchResponse";
                    };

                    return WaffleNonceFetchResponse;
                })();

                PeerDataOperationResult.PlaceholderMessageResendResponse = (function() {

                    /**
                     * Properties of a PlaceholderMessageResendResponse.
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                     * @interface IPlaceholderMessageResendResponse
                     * @property {Uint8Array|null} [webMessageInfoBytes] PlaceholderMessageResendResponse webMessageInfoBytes
                     */

                    /**
                     * Constructs a new PlaceholderMessageResendResponse.
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                     * @classdesc Represents a PlaceholderMessageResendResponse.
                     * @implements IPlaceholderMessageResendResponse
                     * @constructor
                     * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.IPlaceholderMessageResendResponse=} [properties] Properties to set
                     */
                    function PlaceholderMessageResendResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PlaceholderMessageResendResponse webMessageInfoBytes.
                     * @member {Uint8Array} webMessageInfoBytes
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse
                     * @instance
                     */
                    PlaceholderMessageResendResponse.prototype.webMessageInfoBytes = $util.newBuffer([]);

                    /**
                     * Creates a new PlaceholderMessageResendResponse instance using the specified properties.
                     * @function create
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse
                     * @static
                     * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.IPlaceholderMessageResendResponse=} [properties] Properties to set
                     * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse} PlaceholderMessageResendResponse instance
                     */
                    PlaceholderMessageResendResponse.create = function create(properties) {
                        return new PlaceholderMessageResendResponse(properties);
                    };

                    /**
                     * Encodes the specified PlaceholderMessageResendResponse message. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse.verify|verify} messages.
                     * @function encode
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse
                     * @static
                     * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.IPlaceholderMessageResendResponse} message PlaceholderMessageResendResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PlaceholderMessageResendResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.webMessageInfoBytes != null && Object.hasOwnProperty.call(message, "webMessageInfoBytes"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.webMessageInfoBytes);
                        return writer;
                    };

                    /**
                     * Encodes the specified PlaceholderMessageResendResponse message, length delimited. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse
                     * @static
                     * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.IPlaceholderMessageResendResponse} message PlaceholderMessageResendResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PlaceholderMessageResendResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PlaceholderMessageResendResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse} PlaceholderMessageResendResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PlaceholderMessageResendResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.webMessageInfoBytes = reader.bytes();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PlaceholderMessageResendResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse} PlaceholderMessageResendResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PlaceholderMessageResendResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PlaceholderMessageResendResponse message.
                     * @function verify
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PlaceholderMessageResendResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.webMessageInfoBytes != null && message.hasOwnProperty("webMessageInfoBytes"))
                            if (!(message.webMessageInfoBytes && typeof message.webMessageInfoBytes.length === "number" || $util.isString(message.webMessageInfoBytes)))
                                return "webMessageInfoBytes: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a PlaceholderMessageResendResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse} PlaceholderMessageResendResponse
                     */
                    PlaceholderMessageResendResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse)
                            return object;
                        var message = new $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse();
                        if (object.webMessageInfoBytes != null)
                            if (typeof object.webMessageInfoBytes === "string")
                                $util.base64.decode(object.webMessageInfoBytes, message.webMessageInfoBytes = $util.newBuffer($util.base64.length(object.webMessageInfoBytes)), 0);
                            else if (object.webMessageInfoBytes.length >= 0)
                                message.webMessageInfoBytes = object.webMessageInfoBytes;
                        return message;
                    };

                    /**
                     * Creates a plain object from a PlaceholderMessageResendResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse
                     * @static
                     * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse} message PlaceholderMessageResendResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PlaceholderMessageResendResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.webMessageInfoBytes = "";
                            else {
                                object.webMessageInfoBytes = [];
                                if (options.bytes !== Array)
                                    object.webMessageInfoBytes = $util.newBuffer(object.webMessageInfoBytes);
                            }
                        if (message.webMessageInfoBytes != null && message.hasOwnProperty("webMessageInfoBytes"))
                            object.webMessageInfoBytes = options.bytes === String ? $util.base64.encode(message.webMessageInfoBytes, 0, message.webMessageInfoBytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.webMessageInfoBytes) : message.webMessageInfoBytes;
                        return object;
                    };

                    /**
                     * Converts this PlaceholderMessageResendResponse to JSON.
                     * @function toJSON
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PlaceholderMessageResendResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Gets the default type url for PlaceholderMessageResendResponse
                     * @function getTypeUrl
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    PlaceholderMessageResendResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.PlaceholderMessageResendResponse";
                    };

                    return PlaceholderMessageResendResponse;
                })();

                PeerDataOperationResult.LinkPreviewResponse = (function() {

                    /**
                     * Properties of a LinkPreviewResponse.
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                     * @interface ILinkPreviewResponse
                     * @property {string|null} [URL] LinkPreviewResponse URL
                     * @property {string|null} [title] LinkPreviewResponse title
                     * @property {string|null} [description] LinkPreviewResponse description
                     * @property {Uint8Array|null} [thumbData] LinkPreviewResponse thumbData
                     * @property {string|null} [canonicalURL] LinkPreviewResponse canonicalURL
                     * @property {string|null} [matchText] LinkPreviewResponse matchText
                     * @property {string|null} [previewType] LinkPreviewResponse previewType
                     * @property {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.ILinkPreviewHighQualityThumbnail|null} [hqThumbnail] LinkPreviewResponse hqThumbnail
                     */

                    /**
                     * Constructs a new LinkPreviewResponse.
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult
                     * @classdesc Represents a LinkPreviewResponse.
                     * @implements ILinkPreviewResponse
                     * @constructor
                     * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.ILinkPreviewResponse=} [properties] Properties to set
                     */
                    function LinkPreviewResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * LinkPreviewResponse URL.
                     * @member {string} URL
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
                     * @instance
                     */
                    LinkPreviewResponse.prototype.URL = "";

                    /**
                     * LinkPreviewResponse title.
                     * @member {string} title
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
                     * @instance
                     */
                    LinkPreviewResponse.prototype.title = "";

                    /**
                     * LinkPreviewResponse description.
                     * @member {string} description
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
                     * @instance
                     */
                    LinkPreviewResponse.prototype.description = "";

                    /**
                     * LinkPreviewResponse thumbData.
                     * @member {Uint8Array} thumbData
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
                     * @instance
                     */
                    LinkPreviewResponse.prototype.thumbData = $util.newBuffer([]);

                    /**
                     * LinkPreviewResponse canonicalURL.
                     * @member {string} canonicalURL
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
                     * @instance
                     */
                    LinkPreviewResponse.prototype.canonicalURL = "";

                    /**
                     * LinkPreviewResponse matchText.
                     * @member {string} matchText
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
                     * @instance
                     */
                    LinkPreviewResponse.prototype.matchText = "";

                    /**
                     * LinkPreviewResponse previewType.
                     * @member {string} previewType
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
                     * @instance
                     */
                    LinkPreviewResponse.prototype.previewType = "";

                    /**
                     * LinkPreviewResponse hqThumbnail.
                     * @member {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.ILinkPreviewHighQualityThumbnail|null|undefined} hqThumbnail
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
                     * @instance
                     */
                    LinkPreviewResponse.prototype.hqThumbnail = null;

                    /**
                     * Creates a new LinkPreviewResponse instance using the specified properties.
                     * @function create
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
                     * @static
                     * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.ILinkPreviewResponse=} [properties] Properties to set
                     * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse} LinkPreviewResponse instance
                     */
                    LinkPreviewResponse.create = function create(properties) {
                        return new LinkPreviewResponse(properties);
                    };

                    /**
                     * Encodes the specified LinkPreviewResponse message. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.verify|verify} messages.
                     * @function encode
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
                     * @static
                     * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.ILinkPreviewResponse} message LinkPreviewResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LinkPreviewResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.URL != null && Object.hasOwnProperty.call(message, "URL"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.URL);
                        if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                        if (message.thumbData != null && Object.hasOwnProperty.call(message, "thumbData"))
                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.thumbData);
                        if (message.canonicalURL != null && Object.hasOwnProperty.call(message, "canonicalURL"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.canonicalURL);
                        if (message.matchText != null && Object.hasOwnProperty.call(message, "matchText"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.matchText);
                        if (message.previewType != null && Object.hasOwnProperty.call(message, "previewType"))
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.previewType);
                        if (message.hqThumbnail != null && Object.hasOwnProperty.call(message, "hqThumbnail"))
                            $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail.encode(message.hqThumbnail, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified LinkPreviewResponse message, length delimited. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
                     * @static
                     * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.ILinkPreviewResponse} message LinkPreviewResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LinkPreviewResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a LinkPreviewResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse} LinkPreviewResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LinkPreviewResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.URL = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.title = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.description = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.thumbData = reader.bytes();
                                    break;
                                }
                            case 5: {
                                    message.canonicalURL = reader.string();
                                    break;
                                }
                            case 6: {
                                    message.matchText = reader.string();
                                    break;
                                }
                            case 7: {
                                    message.previewType = reader.string();
                                    break;
                                }
                            case 8: {
                                    message.hqThumbnail = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a LinkPreviewResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse} LinkPreviewResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LinkPreviewResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a LinkPreviewResponse message.
                     * @function verify
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LinkPreviewResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.URL != null && message.hasOwnProperty("URL"))
                            if (!$util.isString(message.URL))
                                return "URL: string expected";
                        if (message.title != null && message.hasOwnProperty("title"))
                            if (!$util.isString(message.title))
                                return "title: string expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        if (message.thumbData != null && message.hasOwnProperty("thumbData"))
                            if (!(message.thumbData && typeof message.thumbData.length === "number" || $util.isString(message.thumbData)))
                                return "thumbData: buffer expected";
                        if (message.canonicalURL != null && message.hasOwnProperty("canonicalURL"))
                            if (!$util.isString(message.canonicalURL))
                                return "canonicalURL: string expected";
                        if (message.matchText != null && message.hasOwnProperty("matchText"))
                            if (!$util.isString(message.matchText))
                                return "matchText: string expected";
                        if (message.previewType != null && message.hasOwnProperty("previewType"))
                            if (!$util.isString(message.previewType))
                                return "previewType: string expected";
                        if (message.hqThumbnail != null && message.hasOwnProperty("hqThumbnail")) {
                            var error = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail.verify(message.hqThumbnail);
                            if (error)
                                return "hqThumbnail." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a LinkPreviewResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse} LinkPreviewResponse
                     */
                    LinkPreviewResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse)
                            return object;
                        var message = new $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse();
                        if (object.URL != null)
                            message.URL = String(object.URL);
                        if (object.title != null)
                            message.title = String(object.title);
                        if (object.description != null)
                            message.description = String(object.description);
                        if (object.thumbData != null)
                            if (typeof object.thumbData === "string")
                                $util.base64.decode(object.thumbData, message.thumbData = $util.newBuffer($util.base64.length(object.thumbData)), 0);
                            else if (object.thumbData.length >= 0)
                                message.thumbData = object.thumbData;
                        if (object.canonicalURL != null)
                            message.canonicalURL = String(object.canonicalURL);
                        if (object.matchText != null)
                            message.matchText = String(object.matchText);
                        if (object.previewType != null)
                            message.previewType = String(object.previewType);
                        if (object.hqThumbnail != null) {
                            if (typeof object.hqThumbnail !== "object")
                                throw TypeError(".WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.hqThumbnail: object expected");
                            message.hqThumbnail = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail.fromObject(object.hqThumbnail);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a LinkPreviewResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
                     * @static
                     * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse} message LinkPreviewResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LinkPreviewResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.URL = "";
                            object.title = "";
                            object.description = "";
                            if (options.bytes === String)
                                object.thumbData = "";
                            else {
                                object.thumbData = [];
                                if (options.bytes !== Array)
                                    object.thumbData = $util.newBuffer(object.thumbData);
                            }
                            object.canonicalURL = "";
                            object.matchText = "";
                            object.previewType = "";
                            object.hqThumbnail = null;
                        }
                        if (message.URL != null && message.hasOwnProperty("URL"))
                            object.URL = message.URL;
                        if (message.title != null && message.hasOwnProperty("title"))
                            object.title = message.title;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        if (message.thumbData != null && message.hasOwnProperty("thumbData"))
                            object.thumbData = options.bytes === String ? $util.base64.encode(message.thumbData, 0, message.thumbData.length) : options.bytes === Array ? Array.prototype.slice.call(message.thumbData) : message.thumbData;
                        if (message.canonicalURL != null && message.hasOwnProperty("canonicalURL"))
                            object.canonicalURL = message.canonicalURL;
                        if (message.matchText != null && message.hasOwnProperty("matchText"))
                            object.matchText = message.matchText;
                        if (message.previewType != null && message.hasOwnProperty("previewType"))
                            object.previewType = message.previewType;
                        if (message.hqThumbnail != null && message.hasOwnProperty("hqThumbnail"))
                            object.hqThumbnail = $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail.toObject(message.hqThumbnail, options);
                        return object;
                    };

                    /**
                     * Converts this LinkPreviewResponse to JSON.
                     * @function toJSON
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LinkPreviewResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Gets the default type url for LinkPreviewResponse
                     * @function getTypeUrl
                     * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    LinkPreviewResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse";
                    };

                    LinkPreviewResponse.LinkPreviewHighQualityThumbnail = (function() {

                        /**
                         * Properties of a LinkPreviewHighQualityThumbnail.
                         * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
                         * @interface ILinkPreviewHighQualityThumbnail
                         * @property {string|null} [directPath] LinkPreviewHighQualityThumbnail directPath
                         * @property {string|null} [thumbHash] LinkPreviewHighQualityThumbnail thumbHash
                         * @property {string|null} [encThumbHash] LinkPreviewHighQualityThumbnail encThumbHash
                         * @property {Uint8Array|null} [mediaKey] LinkPreviewHighQualityThumbnail mediaKey
                         * @property {number|Long|null} [mediaKeyTimestampMS] LinkPreviewHighQualityThumbnail mediaKeyTimestampMS
                         * @property {number|null} [thumbWidth] LinkPreviewHighQualityThumbnail thumbWidth
                         * @property {number|null} [thumbHeight] LinkPreviewHighQualityThumbnail thumbHeight
                         */

                        /**
                         * Constructs a new LinkPreviewHighQualityThumbnail.
                         * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse
                         * @classdesc Represents a LinkPreviewHighQualityThumbnail.
                         * @implements ILinkPreviewHighQualityThumbnail
                         * @constructor
                         * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.ILinkPreviewHighQualityThumbnail=} [properties] Properties to set
                         */
                        function LinkPreviewHighQualityThumbnail(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * LinkPreviewHighQualityThumbnail directPath.
                         * @member {string} directPath
                         * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail
                         * @instance
                         */
                        LinkPreviewHighQualityThumbnail.prototype.directPath = "";

                        /**
                         * LinkPreviewHighQualityThumbnail thumbHash.
                         * @member {string} thumbHash
                         * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail
                         * @instance
                         */
                        LinkPreviewHighQualityThumbnail.prototype.thumbHash = "";

                        /**
                         * LinkPreviewHighQualityThumbnail encThumbHash.
                         * @member {string} encThumbHash
                         * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail
                         * @instance
                         */
                        LinkPreviewHighQualityThumbnail.prototype.encThumbHash = "";

                        /**
                         * LinkPreviewHighQualityThumbnail mediaKey.
                         * @member {Uint8Array} mediaKey
                         * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail
                         * @instance
                         */
                        LinkPreviewHighQualityThumbnail.prototype.mediaKey = $util.newBuffer([]);

                        /**
                         * LinkPreviewHighQualityThumbnail mediaKeyTimestampMS.
                         * @member {number|Long} mediaKeyTimestampMS
                         * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail
                         * @instance
                         */
                        LinkPreviewHighQualityThumbnail.prototype.mediaKeyTimestampMS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * LinkPreviewHighQualityThumbnail thumbWidth.
                         * @member {number} thumbWidth
                         * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail
                         * @instance
                         */
                        LinkPreviewHighQualityThumbnail.prototype.thumbWidth = 0;

                        /**
                         * LinkPreviewHighQualityThumbnail thumbHeight.
                         * @member {number} thumbHeight
                         * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail
                         * @instance
                         */
                        LinkPreviewHighQualityThumbnail.prototype.thumbHeight = 0;

                        /**
                         * Creates a new LinkPreviewHighQualityThumbnail instance using the specified properties.
                         * @function create
                         * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail
                         * @static
                         * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.ILinkPreviewHighQualityThumbnail=} [properties] Properties to set
                         * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail} LinkPreviewHighQualityThumbnail instance
                         */
                        LinkPreviewHighQualityThumbnail.create = function create(properties) {
                            return new LinkPreviewHighQualityThumbnail(properties);
                        };

                        /**
                         * Encodes the specified LinkPreviewHighQualityThumbnail message. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail.verify|verify} messages.
                         * @function encode
                         * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail
                         * @static
                         * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.ILinkPreviewHighQualityThumbnail} message LinkPreviewHighQualityThumbnail message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LinkPreviewHighQualityThumbnail.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.directPath != null && Object.hasOwnProperty.call(message, "directPath"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.directPath);
                            if (message.thumbHash != null && Object.hasOwnProperty.call(message, "thumbHash"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.thumbHash);
                            if (message.encThumbHash != null && Object.hasOwnProperty.call(message, "encThumbHash"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.encThumbHash);
                            if (message.mediaKey != null && Object.hasOwnProperty.call(message, "mediaKey"))
                                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.mediaKey);
                            if (message.mediaKeyTimestampMS != null && Object.hasOwnProperty.call(message, "mediaKeyTimestampMS"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.mediaKeyTimestampMS);
                            if (message.thumbWidth != null && Object.hasOwnProperty.call(message, "thumbWidth"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.thumbWidth);
                            if (message.thumbHeight != null && Object.hasOwnProperty.call(message, "thumbHeight"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.thumbHeight);
                            return writer;
                        };

                        /**
                         * Encodes the specified LinkPreviewHighQualityThumbnail message, length delimited. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail
                         * @static
                         * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.ILinkPreviewHighQualityThumbnail} message LinkPreviewHighQualityThumbnail message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LinkPreviewHighQualityThumbnail.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a LinkPreviewHighQualityThumbnail message from the specified reader or buffer.
                         * @function decode
                         * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail} LinkPreviewHighQualityThumbnail
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LinkPreviewHighQualityThumbnail.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.directPath = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.thumbHash = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.encThumbHash = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.mediaKey = reader.bytes();
                                        break;
                                    }
                                case 5: {
                                        message.mediaKeyTimestampMS = reader.int64();
                                        break;
                                    }
                                case 6: {
                                        message.thumbWidth = reader.int32();
                                        break;
                                    }
                                case 7: {
                                        message.thumbHeight = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a LinkPreviewHighQualityThumbnail message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail} LinkPreviewHighQualityThumbnail
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LinkPreviewHighQualityThumbnail.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a LinkPreviewHighQualityThumbnail message.
                         * @function verify
                         * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LinkPreviewHighQualityThumbnail.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.directPath != null && message.hasOwnProperty("directPath"))
                                if (!$util.isString(message.directPath))
                                    return "directPath: string expected";
                            if (message.thumbHash != null && message.hasOwnProperty("thumbHash"))
                                if (!$util.isString(message.thumbHash))
                                    return "thumbHash: string expected";
                            if (message.encThumbHash != null && message.hasOwnProperty("encThumbHash"))
                                if (!$util.isString(message.encThumbHash))
                                    return "encThumbHash: string expected";
                            if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                                if (!(message.mediaKey && typeof message.mediaKey.length === "number" || $util.isString(message.mediaKey)))
                                    return "mediaKey: buffer expected";
                            if (message.mediaKeyTimestampMS != null && message.hasOwnProperty("mediaKeyTimestampMS"))
                                if (!$util.isInteger(message.mediaKeyTimestampMS) && !(message.mediaKeyTimestampMS && $util.isInteger(message.mediaKeyTimestampMS.low) && $util.isInteger(message.mediaKeyTimestampMS.high)))
                                    return "mediaKeyTimestampMS: integer|Long expected";
                            if (message.thumbWidth != null && message.hasOwnProperty("thumbWidth"))
                                if (!$util.isInteger(message.thumbWidth))
                                    return "thumbWidth: integer expected";
                            if (message.thumbHeight != null && message.hasOwnProperty("thumbHeight"))
                                if (!$util.isInteger(message.thumbHeight))
                                    return "thumbHeight: integer expected";
                            return null;
                        };

                        /**
                         * Creates a LinkPreviewHighQualityThumbnail message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail} LinkPreviewHighQualityThumbnail
                         */
                        LinkPreviewHighQualityThumbnail.fromObject = function fromObject(object) {
                            if (object instanceof $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail)
                                return object;
                            var message = new $root.WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail();
                            if (object.directPath != null)
                                message.directPath = String(object.directPath);
                            if (object.thumbHash != null)
                                message.thumbHash = String(object.thumbHash);
                            if (object.encThumbHash != null)
                                message.encThumbHash = String(object.encThumbHash);
                            if (object.mediaKey != null)
                                if (typeof object.mediaKey === "string")
                                    $util.base64.decode(object.mediaKey, message.mediaKey = $util.newBuffer($util.base64.length(object.mediaKey)), 0);
                                else if (object.mediaKey.length >= 0)
                                    message.mediaKey = object.mediaKey;
                            if (object.mediaKeyTimestampMS != null)
                                if ($util.Long)
                                    (message.mediaKeyTimestampMS = $util.Long.fromValue(object.mediaKeyTimestampMS)).unsigned = false;
                                else if (typeof object.mediaKeyTimestampMS === "string")
                                    message.mediaKeyTimestampMS = parseInt(object.mediaKeyTimestampMS, 10);
                                else if (typeof object.mediaKeyTimestampMS === "number")
                                    message.mediaKeyTimestampMS = object.mediaKeyTimestampMS;
                                else if (typeof object.mediaKeyTimestampMS === "object")
                                    message.mediaKeyTimestampMS = new $util.LongBits(object.mediaKeyTimestampMS.low >>> 0, object.mediaKeyTimestampMS.high >>> 0).toNumber();
                            if (object.thumbWidth != null)
                                message.thumbWidth = object.thumbWidth | 0;
                            if (object.thumbHeight != null)
                                message.thumbHeight = object.thumbHeight | 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a LinkPreviewHighQualityThumbnail message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail
                         * @static
                         * @param {WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail} message LinkPreviewHighQualityThumbnail
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LinkPreviewHighQualityThumbnail.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.directPath = "";
                                object.thumbHash = "";
                                object.encThumbHash = "";
                                if (options.bytes === String)
                                    object.mediaKey = "";
                                else {
                                    object.mediaKey = [];
                                    if (options.bytes !== Array)
                                        object.mediaKey = $util.newBuffer(object.mediaKey);
                                }
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.mediaKeyTimestampMS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.mediaKeyTimestampMS = options.longs === String ? "0" : 0;
                                object.thumbWidth = 0;
                                object.thumbHeight = 0;
                            }
                            if (message.directPath != null && message.hasOwnProperty("directPath"))
                                object.directPath = message.directPath;
                            if (message.thumbHash != null && message.hasOwnProperty("thumbHash"))
                                object.thumbHash = message.thumbHash;
                            if (message.encThumbHash != null && message.hasOwnProperty("encThumbHash"))
                                object.encThumbHash = message.encThumbHash;
                            if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                                object.mediaKey = options.bytes === String ? $util.base64.encode(message.mediaKey, 0, message.mediaKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.mediaKey) : message.mediaKey;
                            if (message.mediaKeyTimestampMS != null && message.hasOwnProperty("mediaKeyTimestampMS"))
                                if (typeof message.mediaKeyTimestampMS === "number")
                                    object.mediaKeyTimestampMS = options.longs === String ? String(message.mediaKeyTimestampMS) : message.mediaKeyTimestampMS;
                                else
                                    object.mediaKeyTimestampMS = options.longs === String ? $util.Long.prototype.toString.call(message.mediaKeyTimestampMS) : options.longs === Number ? new $util.LongBits(message.mediaKeyTimestampMS.low >>> 0, message.mediaKeyTimestampMS.high >>> 0).toNumber() : message.mediaKeyTimestampMS;
                            if (message.thumbWidth != null && message.hasOwnProperty("thumbWidth"))
                                object.thumbWidth = message.thumbWidth;
                            if (message.thumbHeight != null && message.hasOwnProperty("thumbHeight"))
                                object.thumbHeight = message.thumbHeight;
                            return object;
                        };

                        /**
                         * Converts this LinkPreviewHighQualityThumbnail to JSON.
                         * @function toJSON
                         * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LinkPreviewHighQualityThumbnail.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for LinkPreviewHighQualityThumbnail
                         * @function getTypeUrl
                         * @memberof WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LinkPreviewHighQualityThumbnail.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/WAE2E.Message.PeerDataOperationRequestResponseMessage.PeerDataOperationResult.LinkPreviewResponse.LinkPreviewHighQualityThumbnail";
                        };

                        return LinkPreviewHighQualityThumbnail;
                    })();

                    return LinkPreviewResponse;
                })();

                return PeerDataOperationResult;
            })();

            return PeerDataOperationRequestResponseMessage;
        })();

        Message.PeerDataOperationRequestMessage = (function() {

            /**
             * Properties of a PeerDataOperationRequestMessage.
             * @memberof WAE2E.Message
             * @interface IPeerDataOperationRequestMessage
             * @property {WAE2E.Message.PeerDataOperationRequestType|null} [peerDataOperationRequestType] PeerDataOperationRequestMessage peerDataOperationRequestType
             * @property {Array.<WAE2E.Message.PeerDataOperationRequestMessage.IRequestStickerReupload>|null} [requestStickerReupload] PeerDataOperationRequestMessage requestStickerReupload
             * @property {Array.<WAE2E.Message.PeerDataOperationRequestMessage.IRequestUrlPreview>|null} [requestURLPreview] PeerDataOperationRequestMessage requestURLPreview
             * @property {WAE2E.Message.PeerDataOperationRequestMessage.IHistorySyncOnDemandRequest|null} [historySyncOnDemandRequest] PeerDataOperationRequestMessage historySyncOnDemandRequest
             * @property {Array.<WAE2E.Message.PeerDataOperationRequestMessage.IPlaceholderMessageResendRequest>|null} [placeholderMessageResendRequest] PeerDataOperationRequestMessage placeholderMessageResendRequest
             */

            /**
             * Constructs a new PeerDataOperationRequestMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a PeerDataOperationRequestMessage.
             * @implements IPeerDataOperationRequestMessage
             * @constructor
             * @param {WAE2E.Message.IPeerDataOperationRequestMessage=} [properties] Properties to set
             */
            function PeerDataOperationRequestMessage(properties) {
                this.requestStickerReupload = [];
                this.requestURLPreview = [];
                this.placeholderMessageResendRequest = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PeerDataOperationRequestMessage peerDataOperationRequestType.
             * @member {WAE2E.Message.PeerDataOperationRequestType} peerDataOperationRequestType
             * @memberof WAE2E.Message.PeerDataOperationRequestMessage
             * @instance
             */
            PeerDataOperationRequestMessage.prototype.peerDataOperationRequestType = 0;

            /**
             * PeerDataOperationRequestMessage requestStickerReupload.
             * @member {Array.<WAE2E.Message.PeerDataOperationRequestMessage.IRequestStickerReupload>} requestStickerReupload
             * @memberof WAE2E.Message.PeerDataOperationRequestMessage
             * @instance
             */
            PeerDataOperationRequestMessage.prototype.requestStickerReupload = $util.emptyArray;

            /**
             * PeerDataOperationRequestMessage requestURLPreview.
             * @member {Array.<WAE2E.Message.PeerDataOperationRequestMessage.IRequestUrlPreview>} requestURLPreview
             * @memberof WAE2E.Message.PeerDataOperationRequestMessage
             * @instance
             */
            PeerDataOperationRequestMessage.prototype.requestURLPreview = $util.emptyArray;

            /**
             * PeerDataOperationRequestMessage historySyncOnDemandRequest.
             * @member {WAE2E.Message.PeerDataOperationRequestMessage.IHistorySyncOnDemandRequest|null|undefined} historySyncOnDemandRequest
             * @memberof WAE2E.Message.PeerDataOperationRequestMessage
             * @instance
             */
            PeerDataOperationRequestMessage.prototype.historySyncOnDemandRequest = null;

            /**
             * PeerDataOperationRequestMessage placeholderMessageResendRequest.
             * @member {Array.<WAE2E.Message.PeerDataOperationRequestMessage.IPlaceholderMessageResendRequest>} placeholderMessageResendRequest
             * @memberof WAE2E.Message.PeerDataOperationRequestMessage
             * @instance
             */
            PeerDataOperationRequestMessage.prototype.placeholderMessageResendRequest = $util.emptyArray;

            /**
             * Creates a new PeerDataOperationRequestMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.PeerDataOperationRequestMessage
             * @static
             * @param {WAE2E.Message.IPeerDataOperationRequestMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.PeerDataOperationRequestMessage} PeerDataOperationRequestMessage instance
             */
            PeerDataOperationRequestMessage.create = function create(properties) {
                return new PeerDataOperationRequestMessage(properties);
            };

            /**
             * Encodes the specified PeerDataOperationRequestMessage message. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.PeerDataOperationRequestMessage
             * @static
             * @param {WAE2E.Message.IPeerDataOperationRequestMessage} message PeerDataOperationRequestMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PeerDataOperationRequestMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.peerDataOperationRequestType != null && Object.hasOwnProperty.call(message, "peerDataOperationRequestType"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.peerDataOperationRequestType);
                if (message.requestStickerReupload != null && message.requestStickerReupload.length)
                    for (var i = 0; i < message.requestStickerReupload.length; ++i)
                        $root.WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload.encode(message.requestStickerReupload[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.requestURLPreview != null && message.requestURLPreview.length)
                    for (var i = 0; i < message.requestURLPreview.length; ++i)
                        $root.WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview.encode(message.requestURLPreview[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.historySyncOnDemandRequest != null && Object.hasOwnProperty.call(message, "historySyncOnDemandRequest"))
                    $root.WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest.encode(message.historySyncOnDemandRequest, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.placeholderMessageResendRequest != null && message.placeholderMessageResendRequest.length)
                    for (var i = 0; i < message.placeholderMessageResendRequest.length; ++i)
                        $root.WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest.encode(message.placeholderMessageResendRequest[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PeerDataOperationRequestMessage message, length delimited. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.PeerDataOperationRequestMessage
             * @static
             * @param {WAE2E.Message.IPeerDataOperationRequestMessage} message PeerDataOperationRequestMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PeerDataOperationRequestMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PeerDataOperationRequestMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.PeerDataOperationRequestMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.PeerDataOperationRequestMessage} PeerDataOperationRequestMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PeerDataOperationRequestMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PeerDataOperationRequestMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.peerDataOperationRequestType = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.requestStickerReupload && message.requestStickerReupload.length))
                                message.requestStickerReupload = [];
                            message.requestStickerReupload.push($root.WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            if (!(message.requestURLPreview && message.requestURLPreview.length))
                                message.requestURLPreview = [];
                            message.requestURLPreview.push($root.WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview.decode(reader, reader.uint32()));
                            break;
                        }
                    case 4: {
                            message.historySyncOnDemandRequest = $root.WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            if (!(message.placeholderMessageResendRequest && message.placeholderMessageResendRequest.length))
                                message.placeholderMessageResendRequest = [];
                            message.placeholderMessageResendRequest.push($root.WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PeerDataOperationRequestMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.PeerDataOperationRequestMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.PeerDataOperationRequestMessage} PeerDataOperationRequestMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PeerDataOperationRequestMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PeerDataOperationRequestMessage message.
             * @function verify
             * @memberof WAE2E.Message.PeerDataOperationRequestMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PeerDataOperationRequestMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.peerDataOperationRequestType != null && message.hasOwnProperty("peerDataOperationRequestType"))
                    switch (message.peerDataOperationRequestType) {
                    default:
                        return "peerDataOperationRequestType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                if (message.requestStickerReupload != null && message.hasOwnProperty("requestStickerReupload")) {
                    if (!Array.isArray(message.requestStickerReupload))
                        return "requestStickerReupload: array expected";
                    for (var i = 0; i < message.requestStickerReupload.length; ++i) {
                        var error = $root.WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload.verify(message.requestStickerReupload[i]);
                        if (error)
                            return "requestStickerReupload." + error;
                    }
                }
                if (message.requestURLPreview != null && message.hasOwnProperty("requestURLPreview")) {
                    if (!Array.isArray(message.requestURLPreview))
                        return "requestURLPreview: array expected";
                    for (var i = 0; i < message.requestURLPreview.length; ++i) {
                        var error = $root.WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview.verify(message.requestURLPreview[i]);
                        if (error)
                            return "requestURLPreview." + error;
                    }
                }
                if (message.historySyncOnDemandRequest != null && message.hasOwnProperty("historySyncOnDemandRequest")) {
                    var error = $root.WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest.verify(message.historySyncOnDemandRequest);
                    if (error)
                        return "historySyncOnDemandRequest." + error;
                }
                if (message.placeholderMessageResendRequest != null && message.hasOwnProperty("placeholderMessageResendRequest")) {
                    if (!Array.isArray(message.placeholderMessageResendRequest))
                        return "placeholderMessageResendRequest: array expected";
                    for (var i = 0; i < message.placeholderMessageResendRequest.length; ++i) {
                        var error = $root.WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest.verify(message.placeholderMessageResendRequest[i]);
                        if (error)
                            return "placeholderMessageResendRequest." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a PeerDataOperationRequestMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.PeerDataOperationRequestMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.PeerDataOperationRequestMessage} PeerDataOperationRequestMessage
             */
            PeerDataOperationRequestMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.PeerDataOperationRequestMessage)
                    return object;
                var message = new $root.WAE2E.Message.PeerDataOperationRequestMessage();
                switch (object.peerDataOperationRequestType) {
                default:
                    if (typeof object.peerDataOperationRequestType === "number") {
                        message.peerDataOperationRequestType = object.peerDataOperationRequestType;
                        break;
                    }
                    break;
                case "UPLOAD_STICKER":
                case 0:
                    message.peerDataOperationRequestType = 0;
                    break;
                case "SEND_RECENT_STICKER_BOOTSTRAP":
                case 1:
                    message.peerDataOperationRequestType = 1;
                    break;
                case "GENERATE_LINK_PREVIEW":
                case 2:
                    message.peerDataOperationRequestType = 2;
                    break;
                case "HISTORY_SYNC_ON_DEMAND":
                case 3:
                    message.peerDataOperationRequestType = 3;
                    break;
                case "PLACEHOLDER_MESSAGE_RESEND":
                case 4:
                    message.peerDataOperationRequestType = 4;
                    break;
                case "WAFFLE_LINKING_NONCE_FETCH":
                case 5:
                    message.peerDataOperationRequestType = 5;
                    break;
                }
                if (object.requestStickerReupload) {
                    if (!Array.isArray(object.requestStickerReupload))
                        throw TypeError(".WAE2E.Message.PeerDataOperationRequestMessage.requestStickerReupload: array expected");
                    message.requestStickerReupload = [];
                    for (var i = 0; i < object.requestStickerReupload.length; ++i) {
                        if (typeof object.requestStickerReupload[i] !== "object")
                            throw TypeError(".WAE2E.Message.PeerDataOperationRequestMessage.requestStickerReupload: object expected");
                        message.requestStickerReupload[i] = $root.WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload.fromObject(object.requestStickerReupload[i]);
                    }
                }
                if (object.requestURLPreview) {
                    if (!Array.isArray(object.requestURLPreview))
                        throw TypeError(".WAE2E.Message.PeerDataOperationRequestMessage.requestURLPreview: array expected");
                    message.requestURLPreview = [];
                    for (var i = 0; i < object.requestURLPreview.length; ++i) {
                        if (typeof object.requestURLPreview[i] !== "object")
                            throw TypeError(".WAE2E.Message.PeerDataOperationRequestMessage.requestURLPreview: object expected");
                        message.requestURLPreview[i] = $root.WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview.fromObject(object.requestURLPreview[i]);
                    }
                }
                if (object.historySyncOnDemandRequest != null) {
                    if (typeof object.historySyncOnDemandRequest !== "object")
                        throw TypeError(".WAE2E.Message.PeerDataOperationRequestMessage.historySyncOnDemandRequest: object expected");
                    message.historySyncOnDemandRequest = $root.WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest.fromObject(object.historySyncOnDemandRequest);
                }
                if (object.placeholderMessageResendRequest) {
                    if (!Array.isArray(object.placeholderMessageResendRequest))
                        throw TypeError(".WAE2E.Message.PeerDataOperationRequestMessage.placeholderMessageResendRequest: array expected");
                    message.placeholderMessageResendRequest = [];
                    for (var i = 0; i < object.placeholderMessageResendRequest.length; ++i) {
                        if (typeof object.placeholderMessageResendRequest[i] !== "object")
                            throw TypeError(".WAE2E.Message.PeerDataOperationRequestMessage.placeholderMessageResendRequest: object expected");
                        message.placeholderMessageResendRequest[i] = $root.WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest.fromObject(object.placeholderMessageResendRequest[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a PeerDataOperationRequestMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.PeerDataOperationRequestMessage
             * @static
             * @param {WAE2E.Message.PeerDataOperationRequestMessage} message PeerDataOperationRequestMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PeerDataOperationRequestMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.requestStickerReupload = [];
                    object.requestURLPreview = [];
                    object.placeholderMessageResendRequest = [];
                }
                if (options.defaults) {
                    object.peerDataOperationRequestType = options.enums === String ? "UPLOAD_STICKER" : 0;
                    object.historySyncOnDemandRequest = null;
                }
                if (message.peerDataOperationRequestType != null && message.hasOwnProperty("peerDataOperationRequestType"))
                    object.peerDataOperationRequestType = options.enums === String ? $root.WAE2E.Message.PeerDataOperationRequestType[message.peerDataOperationRequestType] === undefined ? message.peerDataOperationRequestType : $root.WAE2E.Message.PeerDataOperationRequestType[message.peerDataOperationRequestType] : message.peerDataOperationRequestType;
                if (message.requestStickerReupload && message.requestStickerReupload.length) {
                    object.requestStickerReupload = [];
                    for (var j = 0; j < message.requestStickerReupload.length; ++j)
                        object.requestStickerReupload[j] = $root.WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload.toObject(message.requestStickerReupload[j], options);
                }
                if (message.requestURLPreview && message.requestURLPreview.length) {
                    object.requestURLPreview = [];
                    for (var j = 0; j < message.requestURLPreview.length; ++j)
                        object.requestURLPreview[j] = $root.WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview.toObject(message.requestURLPreview[j], options);
                }
                if (message.historySyncOnDemandRequest != null && message.hasOwnProperty("historySyncOnDemandRequest"))
                    object.historySyncOnDemandRequest = $root.WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest.toObject(message.historySyncOnDemandRequest, options);
                if (message.placeholderMessageResendRequest && message.placeholderMessageResendRequest.length) {
                    object.placeholderMessageResendRequest = [];
                    for (var j = 0; j < message.placeholderMessageResendRequest.length; ++j)
                        object.placeholderMessageResendRequest[j] = $root.WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest.toObject(message.placeholderMessageResendRequest[j], options);
                }
                return object;
            };

            /**
             * Converts this PeerDataOperationRequestMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.PeerDataOperationRequestMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PeerDataOperationRequestMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PeerDataOperationRequestMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.PeerDataOperationRequestMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PeerDataOperationRequestMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.PeerDataOperationRequestMessage";
            };

            PeerDataOperationRequestMessage.PlaceholderMessageResendRequest = (function() {

                /**
                 * Properties of a PlaceholderMessageResendRequest.
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage
                 * @interface IPlaceholderMessageResendRequest
                 * @property {WAProtocol.IMessageKey|null} [messageKey] PlaceholderMessageResendRequest messageKey
                 */

                /**
                 * Constructs a new PlaceholderMessageResendRequest.
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage
                 * @classdesc Represents a PlaceholderMessageResendRequest.
                 * @implements IPlaceholderMessageResendRequest
                 * @constructor
                 * @param {WAE2E.Message.PeerDataOperationRequestMessage.IPlaceholderMessageResendRequest=} [properties] Properties to set
                 */
                function PlaceholderMessageResendRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * PlaceholderMessageResendRequest messageKey.
                 * @member {WAProtocol.IMessageKey|null|undefined} messageKey
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest
                 * @instance
                 */
                PlaceholderMessageResendRequest.prototype.messageKey = null;

                /**
                 * Creates a new PlaceholderMessageResendRequest instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest
                 * @static
                 * @param {WAE2E.Message.PeerDataOperationRequestMessage.IPlaceholderMessageResendRequest=} [properties] Properties to set
                 * @returns {WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest} PlaceholderMessageResendRequest instance
                 */
                PlaceholderMessageResendRequest.create = function create(properties) {
                    return new PlaceholderMessageResendRequest(properties);
                };

                /**
                 * Encodes the specified PlaceholderMessageResendRequest message. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest
                 * @static
                 * @param {WAE2E.Message.PeerDataOperationRequestMessage.IPlaceholderMessageResendRequest} message PlaceholderMessageResendRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PlaceholderMessageResendRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageKey != null && Object.hasOwnProperty.call(message, "messageKey"))
                        $root.WAProtocol.MessageKey.encode(message.messageKey, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified PlaceholderMessageResendRequest message, length delimited. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest
                 * @static
                 * @param {WAE2E.Message.PeerDataOperationRequestMessage.IPlaceholderMessageResendRequest} message PlaceholderMessageResendRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PlaceholderMessageResendRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a PlaceholderMessageResendRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest} PlaceholderMessageResendRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PlaceholderMessageResendRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.messageKey = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a PlaceholderMessageResendRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest} PlaceholderMessageResendRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PlaceholderMessageResendRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a PlaceholderMessageResendRequest message.
                 * @function verify
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PlaceholderMessageResendRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.messageKey != null && message.hasOwnProperty("messageKey")) {
                        var error = $root.WAProtocol.MessageKey.verify(message.messageKey);
                        if (error)
                            return "messageKey." + error;
                    }
                    return null;
                };

                /**
                 * Creates a PlaceholderMessageResendRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest} PlaceholderMessageResendRequest
                 */
                PlaceholderMessageResendRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest)
                        return object;
                    var message = new $root.WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest();
                    if (object.messageKey != null) {
                        if (typeof object.messageKey !== "object")
                            throw TypeError(".WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest.messageKey: object expected");
                        message.messageKey = $root.WAProtocol.MessageKey.fromObject(object.messageKey);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a PlaceholderMessageResendRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest
                 * @static
                 * @param {WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest} message PlaceholderMessageResendRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PlaceholderMessageResendRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.messageKey = null;
                    if (message.messageKey != null && message.hasOwnProperty("messageKey"))
                        object.messageKey = $root.WAProtocol.MessageKey.toObject(message.messageKey, options);
                    return object;
                };

                /**
                 * Converts this PlaceholderMessageResendRequest to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PlaceholderMessageResendRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for PlaceholderMessageResendRequest
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                PlaceholderMessageResendRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.PeerDataOperationRequestMessage.PlaceholderMessageResendRequest";
                };

                return PlaceholderMessageResendRequest;
            })();

            PeerDataOperationRequestMessage.HistorySyncOnDemandRequest = (function() {

                /**
                 * Properties of a HistorySyncOnDemandRequest.
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage
                 * @interface IHistorySyncOnDemandRequest
                 * @property {string|null} [chatJID] HistorySyncOnDemandRequest chatJID
                 * @property {string|null} [oldestMsgID] HistorySyncOnDemandRequest oldestMsgID
                 * @property {boolean|null} [oldestMsgFromMe] HistorySyncOnDemandRequest oldestMsgFromMe
                 * @property {number|null} [onDemandMsgCount] HistorySyncOnDemandRequest onDemandMsgCount
                 * @property {number|Long|null} [oldestMsgTimestampMS] HistorySyncOnDemandRequest oldestMsgTimestampMS
                 */

                /**
                 * Constructs a new HistorySyncOnDemandRequest.
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage
                 * @classdesc Represents a HistorySyncOnDemandRequest.
                 * @implements IHistorySyncOnDemandRequest
                 * @constructor
                 * @param {WAE2E.Message.PeerDataOperationRequestMessage.IHistorySyncOnDemandRequest=} [properties] Properties to set
                 */
                function HistorySyncOnDemandRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * HistorySyncOnDemandRequest chatJID.
                 * @member {string} chatJID
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest
                 * @instance
                 */
                HistorySyncOnDemandRequest.prototype.chatJID = "";

                /**
                 * HistorySyncOnDemandRequest oldestMsgID.
                 * @member {string} oldestMsgID
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest
                 * @instance
                 */
                HistorySyncOnDemandRequest.prototype.oldestMsgID = "";

                /**
                 * HistorySyncOnDemandRequest oldestMsgFromMe.
                 * @member {boolean} oldestMsgFromMe
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest
                 * @instance
                 */
                HistorySyncOnDemandRequest.prototype.oldestMsgFromMe = false;

                /**
                 * HistorySyncOnDemandRequest onDemandMsgCount.
                 * @member {number} onDemandMsgCount
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest
                 * @instance
                 */
                HistorySyncOnDemandRequest.prototype.onDemandMsgCount = 0;

                /**
                 * HistorySyncOnDemandRequest oldestMsgTimestampMS.
                 * @member {number|Long} oldestMsgTimestampMS
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest
                 * @instance
                 */
                HistorySyncOnDemandRequest.prototype.oldestMsgTimestampMS = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * Creates a new HistorySyncOnDemandRequest instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest
                 * @static
                 * @param {WAE2E.Message.PeerDataOperationRequestMessage.IHistorySyncOnDemandRequest=} [properties] Properties to set
                 * @returns {WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest} HistorySyncOnDemandRequest instance
                 */
                HistorySyncOnDemandRequest.create = function create(properties) {
                    return new HistorySyncOnDemandRequest(properties);
                };

                /**
                 * Encodes the specified HistorySyncOnDemandRequest message. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest
                 * @static
                 * @param {WAE2E.Message.PeerDataOperationRequestMessage.IHistorySyncOnDemandRequest} message HistorySyncOnDemandRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HistorySyncOnDemandRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.chatJID != null && Object.hasOwnProperty.call(message, "chatJID"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.chatJID);
                    if (message.oldestMsgID != null && Object.hasOwnProperty.call(message, "oldestMsgID"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.oldestMsgID);
                    if (message.oldestMsgFromMe != null && Object.hasOwnProperty.call(message, "oldestMsgFromMe"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.oldestMsgFromMe);
                    if (message.onDemandMsgCount != null && Object.hasOwnProperty.call(message, "onDemandMsgCount"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.onDemandMsgCount);
                    if (message.oldestMsgTimestampMS != null && Object.hasOwnProperty.call(message, "oldestMsgTimestampMS"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.oldestMsgTimestampMS);
                    return writer;
                };

                /**
                 * Encodes the specified HistorySyncOnDemandRequest message, length delimited. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest
                 * @static
                 * @param {WAE2E.Message.PeerDataOperationRequestMessage.IHistorySyncOnDemandRequest} message HistorySyncOnDemandRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HistorySyncOnDemandRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a HistorySyncOnDemandRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest} HistorySyncOnDemandRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HistorySyncOnDemandRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.chatJID = reader.string();
                                break;
                            }
                        case 2: {
                                message.oldestMsgID = reader.string();
                                break;
                            }
                        case 3: {
                                message.oldestMsgFromMe = reader.bool();
                                break;
                            }
                        case 4: {
                                message.onDemandMsgCount = reader.int32();
                                break;
                            }
                        case 5: {
                                message.oldestMsgTimestampMS = reader.int64();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a HistorySyncOnDemandRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest} HistorySyncOnDemandRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HistorySyncOnDemandRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a HistorySyncOnDemandRequest message.
                 * @function verify
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HistorySyncOnDemandRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.chatJID != null && message.hasOwnProperty("chatJID"))
                        if (!$util.isString(message.chatJID))
                            return "chatJID: string expected";
                    if (message.oldestMsgID != null && message.hasOwnProperty("oldestMsgID"))
                        if (!$util.isString(message.oldestMsgID))
                            return "oldestMsgID: string expected";
                    if (message.oldestMsgFromMe != null && message.hasOwnProperty("oldestMsgFromMe"))
                        if (typeof message.oldestMsgFromMe !== "boolean")
                            return "oldestMsgFromMe: boolean expected";
                    if (message.onDemandMsgCount != null && message.hasOwnProperty("onDemandMsgCount"))
                        if (!$util.isInteger(message.onDemandMsgCount))
                            return "onDemandMsgCount: integer expected";
                    if (message.oldestMsgTimestampMS != null && message.hasOwnProperty("oldestMsgTimestampMS"))
                        if (!$util.isInteger(message.oldestMsgTimestampMS) && !(message.oldestMsgTimestampMS && $util.isInteger(message.oldestMsgTimestampMS.low) && $util.isInteger(message.oldestMsgTimestampMS.high)))
                            return "oldestMsgTimestampMS: integer|Long expected";
                    return null;
                };

                /**
                 * Creates a HistorySyncOnDemandRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest} HistorySyncOnDemandRequest
                 */
                HistorySyncOnDemandRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest)
                        return object;
                    var message = new $root.WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest();
                    if (object.chatJID != null)
                        message.chatJID = String(object.chatJID);
                    if (object.oldestMsgID != null)
                        message.oldestMsgID = String(object.oldestMsgID);
                    if (object.oldestMsgFromMe != null)
                        message.oldestMsgFromMe = Boolean(object.oldestMsgFromMe);
                    if (object.onDemandMsgCount != null)
                        message.onDemandMsgCount = object.onDemandMsgCount | 0;
                    if (object.oldestMsgTimestampMS != null)
                        if ($util.Long)
                            (message.oldestMsgTimestampMS = $util.Long.fromValue(object.oldestMsgTimestampMS)).unsigned = false;
                        else if (typeof object.oldestMsgTimestampMS === "string")
                            message.oldestMsgTimestampMS = parseInt(object.oldestMsgTimestampMS, 10);
                        else if (typeof object.oldestMsgTimestampMS === "number")
                            message.oldestMsgTimestampMS = object.oldestMsgTimestampMS;
                        else if (typeof object.oldestMsgTimestampMS === "object")
                            message.oldestMsgTimestampMS = new $util.LongBits(object.oldestMsgTimestampMS.low >>> 0, object.oldestMsgTimestampMS.high >>> 0).toNumber();
                    return message;
                };

                /**
                 * Creates a plain object from a HistorySyncOnDemandRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest
                 * @static
                 * @param {WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest} message HistorySyncOnDemandRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HistorySyncOnDemandRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.chatJID = "";
                        object.oldestMsgID = "";
                        object.oldestMsgFromMe = false;
                        object.onDemandMsgCount = 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.oldestMsgTimestampMS = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.oldestMsgTimestampMS = options.longs === String ? "0" : 0;
                    }
                    if (message.chatJID != null && message.hasOwnProperty("chatJID"))
                        object.chatJID = message.chatJID;
                    if (message.oldestMsgID != null && message.hasOwnProperty("oldestMsgID"))
                        object.oldestMsgID = message.oldestMsgID;
                    if (message.oldestMsgFromMe != null && message.hasOwnProperty("oldestMsgFromMe"))
                        object.oldestMsgFromMe = message.oldestMsgFromMe;
                    if (message.onDemandMsgCount != null && message.hasOwnProperty("onDemandMsgCount"))
                        object.onDemandMsgCount = message.onDemandMsgCount;
                    if (message.oldestMsgTimestampMS != null && message.hasOwnProperty("oldestMsgTimestampMS"))
                        if (typeof message.oldestMsgTimestampMS === "number")
                            object.oldestMsgTimestampMS = options.longs === String ? String(message.oldestMsgTimestampMS) : message.oldestMsgTimestampMS;
                        else
                            object.oldestMsgTimestampMS = options.longs === String ? $util.Long.prototype.toString.call(message.oldestMsgTimestampMS) : options.longs === Number ? new $util.LongBits(message.oldestMsgTimestampMS.low >>> 0, message.oldestMsgTimestampMS.high >>> 0).toNumber() : message.oldestMsgTimestampMS;
                    return object;
                };

                /**
                 * Converts this HistorySyncOnDemandRequest to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HistorySyncOnDemandRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for HistorySyncOnDemandRequest
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                HistorySyncOnDemandRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.PeerDataOperationRequestMessage.HistorySyncOnDemandRequest";
                };

                return HistorySyncOnDemandRequest;
            })();

            PeerDataOperationRequestMessage.RequestUrlPreview = (function() {

                /**
                 * Properties of a RequestUrlPreview.
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage
                 * @interface IRequestUrlPreview
                 * @property {string|null} [URL] RequestUrlPreview URL
                 * @property {boolean|null} [includeHqThumbnail] RequestUrlPreview includeHqThumbnail
                 */

                /**
                 * Constructs a new RequestUrlPreview.
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage
                 * @classdesc Represents a RequestUrlPreview.
                 * @implements IRequestUrlPreview
                 * @constructor
                 * @param {WAE2E.Message.PeerDataOperationRequestMessage.IRequestUrlPreview=} [properties] Properties to set
                 */
                function RequestUrlPreview(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RequestUrlPreview URL.
                 * @member {string} URL
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview
                 * @instance
                 */
                RequestUrlPreview.prototype.URL = "";

                /**
                 * RequestUrlPreview includeHqThumbnail.
                 * @member {boolean} includeHqThumbnail
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview
                 * @instance
                 */
                RequestUrlPreview.prototype.includeHqThumbnail = false;

                /**
                 * Creates a new RequestUrlPreview instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview
                 * @static
                 * @param {WAE2E.Message.PeerDataOperationRequestMessage.IRequestUrlPreview=} [properties] Properties to set
                 * @returns {WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview} RequestUrlPreview instance
                 */
                RequestUrlPreview.create = function create(properties) {
                    return new RequestUrlPreview(properties);
                };

                /**
                 * Encodes the specified RequestUrlPreview message. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview
                 * @static
                 * @param {WAE2E.Message.PeerDataOperationRequestMessage.IRequestUrlPreview} message RequestUrlPreview message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestUrlPreview.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.URL != null && Object.hasOwnProperty.call(message, "URL"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.URL);
                    if (message.includeHqThumbnail != null && Object.hasOwnProperty.call(message, "includeHqThumbnail"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.includeHqThumbnail);
                    return writer;
                };

                /**
                 * Encodes the specified RequestUrlPreview message, length delimited. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview
                 * @static
                 * @param {WAE2E.Message.PeerDataOperationRequestMessage.IRequestUrlPreview} message RequestUrlPreview message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestUrlPreview.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RequestUrlPreview message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview} RequestUrlPreview
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestUrlPreview.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.URL = reader.string();
                                break;
                            }
                        case 2: {
                                message.includeHqThumbnail = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RequestUrlPreview message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview} RequestUrlPreview
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestUrlPreview.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RequestUrlPreview message.
                 * @function verify
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestUrlPreview.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.URL != null && message.hasOwnProperty("URL"))
                        if (!$util.isString(message.URL))
                            return "URL: string expected";
                    if (message.includeHqThumbnail != null && message.hasOwnProperty("includeHqThumbnail"))
                        if (typeof message.includeHqThumbnail !== "boolean")
                            return "includeHqThumbnail: boolean expected";
                    return null;
                };

                /**
                 * Creates a RequestUrlPreview message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview} RequestUrlPreview
                 */
                RequestUrlPreview.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview)
                        return object;
                    var message = new $root.WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview();
                    if (object.URL != null)
                        message.URL = String(object.URL);
                    if (object.includeHqThumbnail != null)
                        message.includeHqThumbnail = Boolean(object.includeHqThumbnail);
                    return message;
                };

                /**
                 * Creates a plain object from a RequestUrlPreview message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview
                 * @static
                 * @param {WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview} message RequestUrlPreview
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestUrlPreview.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.URL = "";
                        object.includeHqThumbnail = false;
                    }
                    if (message.URL != null && message.hasOwnProperty("URL"))
                        object.URL = message.URL;
                    if (message.includeHqThumbnail != null && message.hasOwnProperty("includeHqThumbnail"))
                        object.includeHqThumbnail = message.includeHqThumbnail;
                    return object;
                };

                /**
                 * Converts this RequestUrlPreview to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestUrlPreview.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for RequestUrlPreview
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                RequestUrlPreview.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.PeerDataOperationRequestMessage.RequestUrlPreview";
                };

                return RequestUrlPreview;
            })();

            PeerDataOperationRequestMessage.RequestStickerReupload = (function() {

                /**
                 * Properties of a RequestStickerReupload.
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage
                 * @interface IRequestStickerReupload
                 * @property {string|null} [fileSHA256] RequestStickerReupload fileSHA256
                 */

                /**
                 * Constructs a new RequestStickerReupload.
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage
                 * @classdesc Represents a RequestStickerReupload.
                 * @implements IRequestStickerReupload
                 * @constructor
                 * @param {WAE2E.Message.PeerDataOperationRequestMessage.IRequestStickerReupload=} [properties] Properties to set
                 */
                function RequestStickerReupload(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RequestStickerReupload fileSHA256.
                 * @member {string} fileSHA256
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload
                 * @instance
                 */
                RequestStickerReupload.prototype.fileSHA256 = "";

                /**
                 * Creates a new RequestStickerReupload instance using the specified properties.
                 * @function create
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload
                 * @static
                 * @param {WAE2E.Message.PeerDataOperationRequestMessage.IRequestStickerReupload=} [properties] Properties to set
                 * @returns {WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload} RequestStickerReupload instance
                 */
                RequestStickerReupload.create = function create(properties) {
                    return new RequestStickerReupload(properties);
                };

                /**
                 * Encodes the specified RequestStickerReupload message. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload.verify|verify} messages.
                 * @function encode
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload
                 * @static
                 * @param {WAE2E.Message.PeerDataOperationRequestMessage.IRequestStickerReupload} message RequestStickerReupload message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestStickerReupload.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.fileSHA256 != null && Object.hasOwnProperty.call(message, "fileSHA256"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.fileSHA256);
                    return writer;
                };

                /**
                 * Encodes the specified RequestStickerReupload message, length delimited. Does not implicitly {@link WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload
                 * @static
                 * @param {WAE2E.Message.PeerDataOperationRequestMessage.IRequestStickerReupload} message RequestStickerReupload message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestStickerReupload.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RequestStickerReupload message from the specified reader or buffer.
                 * @function decode
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload} RequestStickerReupload
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestStickerReupload.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.fileSHA256 = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RequestStickerReupload message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload} RequestStickerReupload
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestStickerReupload.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RequestStickerReupload message.
                 * @function verify
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestStickerReupload.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                        if (!$util.isString(message.fileSHA256))
                            return "fileSHA256: string expected";
                    return null;
                };

                /**
                 * Creates a RequestStickerReupload message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload} RequestStickerReupload
                 */
                RequestStickerReupload.fromObject = function fromObject(object) {
                    if (object instanceof $root.WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload)
                        return object;
                    var message = new $root.WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload();
                    if (object.fileSHA256 != null)
                        message.fileSHA256 = String(object.fileSHA256);
                    return message;
                };

                /**
                 * Creates a plain object from a RequestStickerReupload message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload
                 * @static
                 * @param {WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload} message RequestStickerReupload
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestStickerReupload.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.fileSHA256 = "";
                    if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                        object.fileSHA256 = message.fileSHA256;
                    return object;
                };

                /**
                 * Converts this RequestStickerReupload to JSON.
                 * @function toJSON
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestStickerReupload.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for RequestStickerReupload
                 * @function getTypeUrl
                 * @memberof WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                RequestStickerReupload.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/WAE2E.Message.PeerDataOperationRequestMessage.RequestStickerReupload";
                };

                return RequestStickerReupload;
            })();

            return PeerDataOperationRequestMessage;
        })();

        Message.AppStateFatalExceptionNotification = (function() {

            /**
             * Properties of an AppStateFatalExceptionNotification.
             * @memberof WAE2E.Message
             * @interface IAppStateFatalExceptionNotification
             * @property {Array.<string>|null} [collectionNames] AppStateFatalExceptionNotification collectionNames
             * @property {number|Long|null} [timestamp] AppStateFatalExceptionNotification timestamp
             */

            /**
             * Constructs a new AppStateFatalExceptionNotification.
             * @memberof WAE2E.Message
             * @classdesc Represents an AppStateFatalExceptionNotification.
             * @implements IAppStateFatalExceptionNotification
             * @constructor
             * @param {WAE2E.Message.IAppStateFatalExceptionNotification=} [properties] Properties to set
             */
            function AppStateFatalExceptionNotification(properties) {
                this.collectionNames = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AppStateFatalExceptionNotification collectionNames.
             * @member {Array.<string>} collectionNames
             * @memberof WAE2E.Message.AppStateFatalExceptionNotification
             * @instance
             */
            AppStateFatalExceptionNotification.prototype.collectionNames = $util.emptyArray;

            /**
             * AppStateFatalExceptionNotification timestamp.
             * @member {number|Long} timestamp
             * @memberof WAE2E.Message.AppStateFatalExceptionNotification
             * @instance
             */
            AppStateFatalExceptionNotification.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new AppStateFatalExceptionNotification instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.AppStateFatalExceptionNotification
             * @static
             * @param {WAE2E.Message.IAppStateFatalExceptionNotification=} [properties] Properties to set
             * @returns {WAE2E.Message.AppStateFatalExceptionNotification} AppStateFatalExceptionNotification instance
             */
            AppStateFatalExceptionNotification.create = function create(properties) {
                return new AppStateFatalExceptionNotification(properties);
            };

            /**
             * Encodes the specified AppStateFatalExceptionNotification message. Does not implicitly {@link WAE2E.Message.AppStateFatalExceptionNotification.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.AppStateFatalExceptionNotification
             * @static
             * @param {WAE2E.Message.IAppStateFatalExceptionNotification} message AppStateFatalExceptionNotification message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AppStateFatalExceptionNotification.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.collectionNames != null && message.collectionNames.length)
                    for (var i = 0; i < message.collectionNames.length; ++i)
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.collectionNames[i]);
                if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.timestamp);
                return writer;
            };

            /**
             * Encodes the specified AppStateFatalExceptionNotification message, length delimited. Does not implicitly {@link WAE2E.Message.AppStateFatalExceptionNotification.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.AppStateFatalExceptionNotification
             * @static
             * @param {WAE2E.Message.IAppStateFatalExceptionNotification} message AppStateFatalExceptionNotification message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AppStateFatalExceptionNotification.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AppStateFatalExceptionNotification message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.AppStateFatalExceptionNotification
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.AppStateFatalExceptionNotification} AppStateFatalExceptionNotification
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AppStateFatalExceptionNotification.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.AppStateFatalExceptionNotification();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.collectionNames && message.collectionNames.length))
                                message.collectionNames = [];
                            message.collectionNames.push(reader.string());
                            break;
                        }
                    case 2: {
                            message.timestamp = reader.int64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AppStateFatalExceptionNotification message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.AppStateFatalExceptionNotification
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.AppStateFatalExceptionNotification} AppStateFatalExceptionNotification
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AppStateFatalExceptionNotification.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AppStateFatalExceptionNotification message.
             * @function verify
             * @memberof WAE2E.Message.AppStateFatalExceptionNotification
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AppStateFatalExceptionNotification.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.collectionNames != null && message.hasOwnProperty("collectionNames")) {
                    if (!Array.isArray(message.collectionNames))
                        return "collectionNames: array expected";
                    for (var i = 0; i < message.collectionNames.length; ++i)
                        if (!$util.isString(message.collectionNames[i]))
                            return "collectionNames: string[] expected";
                }
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                        return "timestamp: integer|Long expected";
                return null;
            };

            /**
             * Creates an AppStateFatalExceptionNotification message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.AppStateFatalExceptionNotification
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.AppStateFatalExceptionNotification} AppStateFatalExceptionNotification
             */
            AppStateFatalExceptionNotification.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.AppStateFatalExceptionNotification)
                    return object;
                var message = new $root.WAE2E.Message.AppStateFatalExceptionNotification();
                if (object.collectionNames) {
                    if (!Array.isArray(object.collectionNames))
                        throw TypeError(".WAE2E.Message.AppStateFatalExceptionNotification.collectionNames: array expected");
                    message.collectionNames = [];
                    for (var i = 0; i < object.collectionNames.length; ++i)
                        message.collectionNames[i] = String(object.collectionNames[i]);
                }
                if (object.timestamp != null)
                    if ($util.Long)
                        (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
                    else if (typeof object.timestamp === "string")
                        message.timestamp = parseInt(object.timestamp, 10);
                    else if (typeof object.timestamp === "number")
                        message.timestamp = object.timestamp;
                    else if (typeof object.timestamp === "object")
                        message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from an AppStateFatalExceptionNotification message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.AppStateFatalExceptionNotification
             * @static
             * @param {WAE2E.Message.AppStateFatalExceptionNotification} message AppStateFatalExceptionNotification
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AppStateFatalExceptionNotification.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.collectionNames = [];
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.timestamp = options.longs === String ? "0" : 0;
                if (message.collectionNames && message.collectionNames.length) {
                    object.collectionNames = [];
                    for (var j = 0; j < message.collectionNames.length; ++j)
                        object.collectionNames[j] = message.collectionNames[j];
                }
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    if (typeof message.timestamp === "number")
                        object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                    else
                        object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
                return object;
            };

            /**
             * Converts this AppStateFatalExceptionNotification to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.AppStateFatalExceptionNotification
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AppStateFatalExceptionNotification.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for AppStateFatalExceptionNotification
             * @function getTypeUrl
             * @memberof WAE2E.Message.AppStateFatalExceptionNotification
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            AppStateFatalExceptionNotification.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.AppStateFatalExceptionNotification";
            };

            return AppStateFatalExceptionNotification;
        })();

        Message.AppStateSyncKeyRequest = (function() {

            /**
             * Properties of an AppStateSyncKeyRequest.
             * @memberof WAE2E.Message
             * @interface IAppStateSyncKeyRequest
             * @property {Array.<WAE2E.Message.IAppStateSyncKeyId>|null} [keyIDs] AppStateSyncKeyRequest keyIDs
             */

            /**
             * Constructs a new AppStateSyncKeyRequest.
             * @memberof WAE2E.Message
             * @classdesc Represents an AppStateSyncKeyRequest.
             * @implements IAppStateSyncKeyRequest
             * @constructor
             * @param {WAE2E.Message.IAppStateSyncKeyRequest=} [properties] Properties to set
             */
            function AppStateSyncKeyRequest(properties) {
                this.keyIDs = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AppStateSyncKeyRequest keyIDs.
             * @member {Array.<WAE2E.Message.IAppStateSyncKeyId>} keyIDs
             * @memberof WAE2E.Message.AppStateSyncKeyRequest
             * @instance
             */
            AppStateSyncKeyRequest.prototype.keyIDs = $util.emptyArray;

            /**
             * Creates a new AppStateSyncKeyRequest instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.AppStateSyncKeyRequest
             * @static
             * @param {WAE2E.Message.IAppStateSyncKeyRequest=} [properties] Properties to set
             * @returns {WAE2E.Message.AppStateSyncKeyRequest} AppStateSyncKeyRequest instance
             */
            AppStateSyncKeyRequest.create = function create(properties) {
                return new AppStateSyncKeyRequest(properties);
            };

            /**
             * Encodes the specified AppStateSyncKeyRequest message. Does not implicitly {@link WAE2E.Message.AppStateSyncKeyRequest.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.AppStateSyncKeyRequest
             * @static
             * @param {WAE2E.Message.IAppStateSyncKeyRequest} message AppStateSyncKeyRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AppStateSyncKeyRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.keyIDs != null && message.keyIDs.length)
                    for (var i = 0; i < message.keyIDs.length; ++i)
                        $root.WAE2E.Message.AppStateSyncKeyId.encode(message.keyIDs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified AppStateSyncKeyRequest message, length delimited. Does not implicitly {@link WAE2E.Message.AppStateSyncKeyRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.AppStateSyncKeyRequest
             * @static
             * @param {WAE2E.Message.IAppStateSyncKeyRequest} message AppStateSyncKeyRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AppStateSyncKeyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AppStateSyncKeyRequest message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.AppStateSyncKeyRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.AppStateSyncKeyRequest} AppStateSyncKeyRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AppStateSyncKeyRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.AppStateSyncKeyRequest();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.keyIDs && message.keyIDs.length))
                                message.keyIDs = [];
                            message.keyIDs.push($root.WAE2E.Message.AppStateSyncKeyId.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AppStateSyncKeyRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.AppStateSyncKeyRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.AppStateSyncKeyRequest} AppStateSyncKeyRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AppStateSyncKeyRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AppStateSyncKeyRequest message.
             * @function verify
             * @memberof WAE2E.Message.AppStateSyncKeyRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AppStateSyncKeyRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.keyIDs != null && message.hasOwnProperty("keyIDs")) {
                    if (!Array.isArray(message.keyIDs))
                        return "keyIDs: array expected";
                    for (var i = 0; i < message.keyIDs.length; ++i) {
                        var error = $root.WAE2E.Message.AppStateSyncKeyId.verify(message.keyIDs[i]);
                        if (error)
                            return "keyIDs." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an AppStateSyncKeyRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.AppStateSyncKeyRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.AppStateSyncKeyRequest} AppStateSyncKeyRequest
             */
            AppStateSyncKeyRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.AppStateSyncKeyRequest)
                    return object;
                var message = new $root.WAE2E.Message.AppStateSyncKeyRequest();
                if (object.keyIDs) {
                    if (!Array.isArray(object.keyIDs))
                        throw TypeError(".WAE2E.Message.AppStateSyncKeyRequest.keyIDs: array expected");
                    message.keyIDs = [];
                    for (var i = 0; i < object.keyIDs.length; ++i) {
                        if (typeof object.keyIDs[i] !== "object")
                            throw TypeError(".WAE2E.Message.AppStateSyncKeyRequest.keyIDs: object expected");
                        message.keyIDs[i] = $root.WAE2E.Message.AppStateSyncKeyId.fromObject(object.keyIDs[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an AppStateSyncKeyRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.AppStateSyncKeyRequest
             * @static
             * @param {WAE2E.Message.AppStateSyncKeyRequest} message AppStateSyncKeyRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AppStateSyncKeyRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.keyIDs = [];
                if (message.keyIDs && message.keyIDs.length) {
                    object.keyIDs = [];
                    for (var j = 0; j < message.keyIDs.length; ++j)
                        object.keyIDs[j] = $root.WAE2E.Message.AppStateSyncKeyId.toObject(message.keyIDs[j], options);
                }
                return object;
            };

            /**
             * Converts this AppStateSyncKeyRequest to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.AppStateSyncKeyRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AppStateSyncKeyRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for AppStateSyncKeyRequest
             * @function getTypeUrl
             * @memberof WAE2E.Message.AppStateSyncKeyRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            AppStateSyncKeyRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.AppStateSyncKeyRequest";
            };

            return AppStateSyncKeyRequest;
        })();

        Message.AppStateSyncKeyShare = (function() {

            /**
             * Properties of an AppStateSyncKeyShare.
             * @memberof WAE2E.Message
             * @interface IAppStateSyncKeyShare
             * @property {Array.<WAE2E.Message.IAppStateSyncKey>|null} [keys] AppStateSyncKeyShare keys
             */

            /**
             * Constructs a new AppStateSyncKeyShare.
             * @memberof WAE2E.Message
             * @classdesc Represents an AppStateSyncKeyShare.
             * @implements IAppStateSyncKeyShare
             * @constructor
             * @param {WAE2E.Message.IAppStateSyncKeyShare=} [properties] Properties to set
             */
            function AppStateSyncKeyShare(properties) {
                this.keys = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AppStateSyncKeyShare keys.
             * @member {Array.<WAE2E.Message.IAppStateSyncKey>} keys
             * @memberof WAE2E.Message.AppStateSyncKeyShare
             * @instance
             */
            AppStateSyncKeyShare.prototype.keys = $util.emptyArray;

            /**
             * Creates a new AppStateSyncKeyShare instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.AppStateSyncKeyShare
             * @static
             * @param {WAE2E.Message.IAppStateSyncKeyShare=} [properties] Properties to set
             * @returns {WAE2E.Message.AppStateSyncKeyShare} AppStateSyncKeyShare instance
             */
            AppStateSyncKeyShare.create = function create(properties) {
                return new AppStateSyncKeyShare(properties);
            };

            /**
             * Encodes the specified AppStateSyncKeyShare message. Does not implicitly {@link WAE2E.Message.AppStateSyncKeyShare.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.AppStateSyncKeyShare
             * @static
             * @param {WAE2E.Message.IAppStateSyncKeyShare} message AppStateSyncKeyShare message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AppStateSyncKeyShare.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.keys != null && message.keys.length)
                    for (var i = 0; i < message.keys.length; ++i)
                        $root.WAE2E.Message.AppStateSyncKey.encode(message.keys[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified AppStateSyncKeyShare message, length delimited. Does not implicitly {@link WAE2E.Message.AppStateSyncKeyShare.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.AppStateSyncKeyShare
             * @static
             * @param {WAE2E.Message.IAppStateSyncKeyShare} message AppStateSyncKeyShare message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AppStateSyncKeyShare.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AppStateSyncKeyShare message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.AppStateSyncKeyShare
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.AppStateSyncKeyShare} AppStateSyncKeyShare
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AppStateSyncKeyShare.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.AppStateSyncKeyShare();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.keys && message.keys.length))
                                message.keys = [];
                            message.keys.push($root.WAE2E.Message.AppStateSyncKey.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AppStateSyncKeyShare message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.AppStateSyncKeyShare
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.AppStateSyncKeyShare} AppStateSyncKeyShare
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AppStateSyncKeyShare.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AppStateSyncKeyShare message.
             * @function verify
             * @memberof WAE2E.Message.AppStateSyncKeyShare
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AppStateSyncKeyShare.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.keys != null && message.hasOwnProperty("keys")) {
                    if (!Array.isArray(message.keys))
                        return "keys: array expected";
                    for (var i = 0; i < message.keys.length; ++i) {
                        var error = $root.WAE2E.Message.AppStateSyncKey.verify(message.keys[i]);
                        if (error)
                            return "keys." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an AppStateSyncKeyShare message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.AppStateSyncKeyShare
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.AppStateSyncKeyShare} AppStateSyncKeyShare
             */
            AppStateSyncKeyShare.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.AppStateSyncKeyShare)
                    return object;
                var message = new $root.WAE2E.Message.AppStateSyncKeyShare();
                if (object.keys) {
                    if (!Array.isArray(object.keys))
                        throw TypeError(".WAE2E.Message.AppStateSyncKeyShare.keys: array expected");
                    message.keys = [];
                    for (var i = 0; i < object.keys.length; ++i) {
                        if (typeof object.keys[i] !== "object")
                            throw TypeError(".WAE2E.Message.AppStateSyncKeyShare.keys: object expected");
                        message.keys[i] = $root.WAE2E.Message.AppStateSyncKey.fromObject(object.keys[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an AppStateSyncKeyShare message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.AppStateSyncKeyShare
             * @static
             * @param {WAE2E.Message.AppStateSyncKeyShare} message AppStateSyncKeyShare
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AppStateSyncKeyShare.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.keys = [];
                if (message.keys && message.keys.length) {
                    object.keys = [];
                    for (var j = 0; j < message.keys.length; ++j)
                        object.keys[j] = $root.WAE2E.Message.AppStateSyncKey.toObject(message.keys[j], options);
                }
                return object;
            };

            /**
             * Converts this AppStateSyncKeyShare to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.AppStateSyncKeyShare
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AppStateSyncKeyShare.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for AppStateSyncKeyShare
             * @function getTypeUrl
             * @memberof WAE2E.Message.AppStateSyncKeyShare
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            AppStateSyncKeyShare.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.AppStateSyncKeyShare";
            };

            return AppStateSyncKeyShare;
        })();

        Message.AppStateSyncKeyData = (function() {

            /**
             * Properties of an AppStateSyncKeyData.
             * @memberof WAE2E.Message
             * @interface IAppStateSyncKeyData
             * @property {Uint8Array|null} [keyData] AppStateSyncKeyData keyData
             * @property {WAE2E.Message.IAppStateSyncKeyFingerprint|null} [fingerprint] AppStateSyncKeyData fingerprint
             * @property {number|Long|null} [timestamp] AppStateSyncKeyData timestamp
             */

            /**
             * Constructs a new AppStateSyncKeyData.
             * @memberof WAE2E.Message
             * @classdesc Represents an AppStateSyncKeyData.
             * @implements IAppStateSyncKeyData
             * @constructor
             * @param {WAE2E.Message.IAppStateSyncKeyData=} [properties] Properties to set
             */
            function AppStateSyncKeyData(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AppStateSyncKeyData keyData.
             * @member {Uint8Array} keyData
             * @memberof WAE2E.Message.AppStateSyncKeyData
             * @instance
             */
            AppStateSyncKeyData.prototype.keyData = $util.newBuffer([]);

            /**
             * AppStateSyncKeyData fingerprint.
             * @member {WAE2E.Message.IAppStateSyncKeyFingerprint|null|undefined} fingerprint
             * @memberof WAE2E.Message.AppStateSyncKeyData
             * @instance
             */
            AppStateSyncKeyData.prototype.fingerprint = null;

            /**
             * AppStateSyncKeyData timestamp.
             * @member {number|Long} timestamp
             * @memberof WAE2E.Message.AppStateSyncKeyData
             * @instance
             */
            AppStateSyncKeyData.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new AppStateSyncKeyData instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.AppStateSyncKeyData
             * @static
             * @param {WAE2E.Message.IAppStateSyncKeyData=} [properties] Properties to set
             * @returns {WAE2E.Message.AppStateSyncKeyData} AppStateSyncKeyData instance
             */
            AppStateSyncKeyData.create = function create(properties) {
                return new AppStateSyncKeyData(properties);
            };

            /**
             * Encodes the specified AppStateSyncKeyData message. Does not implicitly {@link WAE2E.Message.AppStateSyncKeyData.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.AppStateSyncKeyData
             * @static
             * @param {WAE2E.Message.IAppStateSyncKeyData} message AppStateSyncKeyData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AppStateSyncKeyData.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.keyData != null && Object.hasOwnProperty.call(message, "keyData"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.keyData);
                if (message.fingerprint != null && Object.hasOwnProperty.call(message, "fingerprint"))
                    $root.WAE2E.Message.AppStateSyncKeyFingerprint.encode(message.fingerprint, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.timestamp);
                return writer;
            };

            /**
             * Encodes the specified AppStateSyncKeyData message, length delimited. Does not implicitly {@link WAE2E.Message.AppStateSyncKeyData.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.AppStateSyncKeyData
             * @static
             * @param {WAE2E.Message.IAppStateSyncKeyData} message AppStateSyncKeyData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AppStateSyncKeyData.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AppStateSyncKeyData message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.AppStateSyncKeyData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.AppStateSyncKeyData} AppStateSyncKeyData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AppStateSyncKeyData.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.AppStateSyncKeyData();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.keyData = reader.bytes();
                            break;
                        }
                    case 2: {
                            message.fingerprint = $root.WAE2E.Message.AppStateSyncKeyFingerprint.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.timestamp = reader.int64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AppStateSyncKeyData message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.AppStateSyncKeyData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.AppStateSyncKeyData} AppStateSyncKeyData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AppStateSyncKeyData.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AppStateSyncKeyData message.
             * @function verify
             * @memberof WAE2E.Message.AppStateSyncKeyData
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AppStateSyncKeyData.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.keyData != null && message.hasOwnProperty("keyData"))
                    if (!(message.keyData && typeof message.keyData.length === "number" || $util.isString(message.keyData)))
                        return "keyData: buffer expected";
                if (message.fingerprint != null && message.hasOwnProperty("fingerprint")) {
                    var error = $root.WAE2E.Message.AppStateSyncKeyFingerprint.verify(message.fingerprint);
                    if (error)
                        return "fingerprint." + error;
                }
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                        return "timestamp: integer|Long expected";
                return null;
            };

            /**
             * Creates an AppStateSyncKeyData message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.AppStateSyncKeyData
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.AppStateSyncKeyData} AppStateSyncKeyData
             */
            AppStateSyncKeyData.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.AppStateSyncKeyData)
                    return object;
                var message = new $root.WAE2E.Message.AppStateSyncKeyData();
                if (object.keyData != null)
                    if (typeof object.keyData === "string")
                        $util.base64.decode(object.keyData, message.keyData = $util.newBuffer($util.base64.length(object.keyData)), 0);
                    else if (object.keyData.length >= 0)
                        message.keyData = object.keyData;
                if (object.fingerprint != null) {
                    if (typeof object.fingerprint !== "object")
                        throw TypeError(".WAE2E.Message.AppStateSyncKeyData.fingerprint: object expected");
                    message.fingerprint = $root.WAE2E.Message.AppStateSyncKeyFingerprint.fromObject(object.fingerprint);
                }
                if (object.timestamp != null)
                    if ($util.Long)
                        (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
                    else if (typeof object.timestamp === "string")
                        message.timestamp = parseInt(object.timestamp, 10);
                    else if (typeof object.timestamp === "number")
                        message.timestamp = object.timestamp;
                    else if (typeof object.timestamp === "object")
                        message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from an AppStateSyncKeyData message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.AppStateSyncKeyData
             * @static
             * @param {WAE2E.Message.AppStateSyncKeyData} message AppStateSyncKeyData
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AppStateSyncKeyData.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.keyData = "";
                    else {
                        object.keyData = [];
                        if (options.bytes !== Array)
                            object.keyData = $util.newBuffer(object.keyData);
                    }
                    object.fingerprint = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.timestamp = options.longs === String ? "0" : 0;
                }
                if (message.keyData != null && message.hasOwnProperty("keyData"))
                    object.keyData = options.bytes === String ? $util.base64.encode(message.keyData, 0, message.keyData.length) : options.bytes === Array ? Array.prototype.slice.call(message.keyData) : message.keyData;
                if (message.fingerprint != null && message.hasOwnProperty("fingerprint"))
                    object.fingerprint = $root.WAE2E.Message.AppStateSyncKeyFingerprint.toObject(message.fingerprint, options);
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    if (typeof message.timestamp === "number")
                        object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                    else
                        object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
                return object;
            };

            /**
             * Converts this AppStateSyncKeyData to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.AppStateSyncKeyData
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AppStateSyncKeyData.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for AppStateSyncKeyData
             * @function getTypeUrl
             * @memberof WAE2E.Message.AppStateSyncKeyData
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            AppStateSyncKeyData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.AppStateSyncKeyData";
            };

            return AppStateSyncKeyData;
        })();

        Message.AppStateSyncKeyFingerprint = (function() {

            /**
             * Properties of an AppStateSyncKeyFingerprint.
             * @memberof WAE2E.Message
             * @interface IAppStateSyncKeyFingerprint
             * @property {number|null} [rawID] AppStateSyncKeyFingerprint rawID
             * @property {number|null} [currentIndex] AppStateSyncKeyFingerprint currentIndex
             * @property {Array.<number>|null} [deviceIndexes] AppStateSyncKeyFingerprint deviceIndexes
             */

            /**
             * Constructs a new AppStateSyncKeyFingerprint.
             * @memberof WAE2E.Message
             * @classdesc Represents an AppStateSyncKeyFingerprint.
             * @implements IAppStateSyncKeyFingerprint
             * @constructor
             * @param {WAE2E.Message.IAppStateSyncKeyFingerprint=} [properties] Properties to set
             */
            function AppStateSyncKeyFingerprint(properties) {
                this.deviceIndexes = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AppStateSyncKeyFingerprint rawID.
             * @member {number} rawID
             * @memberof WAE2E.Message.AppStateSyncKeyFingerprint
             * @instance
             */
            AppStateSyncKeyFingerprint.prototype.rawID = 0;

            /**
             * AppStateSyncKeyFingerprint currentIndex.
             * @member {number} currentIndex
             * @memberof WAE2E.Message.AppStateSyncKeyFingerprint
             * @instance
             */
            AppStateSyncKeyFingerprint.prototype.currentIndex = 0;

            /**
             * AppStateSyncKeyFingerprint deviceIndexes.
             * @member {Array.<number>} deviceIndexes
             * @memberof WAE2E.Message.AppStateSyncKeyFingerprint
             * @instance
             */
            AppStateSyncKeyFingerprint.prototype.deviceIndexes = $util.emptyArray;

            /**
             * Creates a new AppStateSyncKeyFingerprint instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.AppStateSyncKeyFingerprint
             * @static
             * @param {WAE2E.Message.IAppStateSyncKeyFingerprint=} [properties] Properties to set
             * @returns {WAE2E.Message.AppStateSyncKeyFingerprint} AppStateSyncKeyFingerprint instance
             */
            AppStateSyncKeyFingerprint.create = function create(properties) {
                return new AppStateSyncKeyFingerprint(properties);
            };

            /**
             * Encodes the specified AppStateSyncKeyFingerprint message. Does not implicitly {@link WAE2E.Message.AppStateSyncKeyFingerprint.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.AppStateSyncKeyFingerprint
             * @static
             * @param {WAE2E.Message.IAppStateSyncKeyFingerprint} message AppStateSyncKeyFingerprint message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AppStateSyncKeyFingerprint.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rawID != null && Object.hasOwnProperty.call(message, "rawID"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rawID);
                if (message.currentIndex != null && Object.hasOwnProperty.call(message, "currentIndex"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.currentIndex);
                if (message.deviceIndexes != null && message.deviceIndexes.length) {
                    writer.uint32(/* id 3, wireType 2 =*/26).fork();
                    for (var i = 0; i < message.deviceIndexes.length; ++i)
                        writer.uint32(message.deviceIndexes[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified AppStateSyncKeyFingerprint message, length delimited. Does not implicitly {@link WAE2E.Message.AppStateSyncKeyFingerprint.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.AppStateSyncKeyFingerprint
             * @static
             * @param {WAE2E.Message.IAppStateSyncKeyFingerprint} message AppStateSyncKeyFingerprint message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AppStateSyncKeyFingerprint.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AppStateSyncKeyFingerprint message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.AppStateSyncKeyFingerprint
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.AppStateSyncKeyFingerprint} AppStateSyncKeyFingerprint
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AppStateSyncKeyFingerprint.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.AppStateSyncKeyFingerprint();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.rawID = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.currentIndex = reader.uint32();
                            break;
                        }
                    case 3: {
                            if (!(message.deviceIndexes && message.deviceIndexes.length))
                                message.deviceIndexes = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.deviceIndexes.push(reader.uint32());
                            } else
                                message.deviceIndexes.push(reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AppStateSyncKeyFingerprint message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.AppStateSyncKeyFingerprint
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.AppStateSyncKeyFingerprint} AppStateSyncKeyFingerprint
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AppStateSyncKeyFingerprint.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AppStateSyncKeyFingerprint message.
             * @function verify
             * @memberof WAE2E.Message.AppStateSyncKeyFingerprint
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AppStateSyncKeyFingerprint.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rawID != null && message.hasOwnProperty("rawID"))
                    if (!$util.isInteger(message.rawID))
                        return "rawID: integer expected";
                if (message.currentIndex != null && message.hasOwnProperty("currentIndex"))
                    if (!$util.isInteger(message.currentIndex))
                        return "currentIndex: integer expected";
                if (message.deviceIndexes != null && message.hasOwnProperty("deviceIndexes")) {
                    if (!Array.isArray(message.deviceIndexes))
                        return "deviceIndexes: array expected";
                    for (var i = 0; i < message.deviceIndexes.length; ++i)
                        if (!$util.isInteger(message.deviceIndexes[i]))
                            return "deviceIndexes: integer[] expected";
                }
                return null;
            };

            /**
             * Creates an AppStateSyncKeyFingerprint message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.AppStateSyncKeyFingerprint
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.AppStateSyncKeyFingerprint} AppStateSyncKeyFingerprint
             */
            AppStateSyncKeyFingerprint.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.AppStateSyncKeyFingerprint)
                    return object;
                var message = new $root.WAE2E.Message.AppStateSyncKeyFingerprint();
                if (object.rawID != null)
                    message.rawID = object.rawID >>> 0;
                if (object.currentIndex != null)
                    message.currentIndex = object.currentIndex >>> 0;
                if (object.deviceIndexes) {
                    if (!Array.isArray(object.deviceIndexes))
                        throw TypeError(".WAE2E.Message.AppStateSyncKeyFingerprint.deviceIndexes: array expected");
                    message.deviceIndexes = [];
                    for (var i = 0; i < object.deviceIndexes.length; ++i)
                        message.deviceIndexes[i] = object.deviceIndexes[i] >>> 0;
                }
                return message;
            };

            /**
             * Creates a plain object from an AppStateSyncKeyFingerprint message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.AppStateSyncKeyFingerprint
             * @static
             * @param {WAE2E.Message.AppStateSyncKeyFingerprint} message AppStateSyncKeyFingerprint
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AppStateSyncKeyFingerprint.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.deviceIndexes = [];
                if (options.defaults) {
                    object.rawID = 0;
                    object.currentIndex = 0;
                }
                if (message.rawID != null && message.hasOwnProperty("rawID"))
                    object.rawID = message.rawID;
                if (message.currentIndex != null && message.hasOwnProperty("currentIndex"))
                    object.currentIndex = message.currentIndex;
                if (message.deviceIndexes && message.deviceIndexes.length) {
                    object.deviceIndexes = [];
                    for (var j = 0; j < message.deviceIndexes.length; ++j)
                        object.deviceIndexes[j] = message.deviceIndexes[j];
                }
                return object;
            };

            /**
             * Converts this AppStateSyncKeyFingerprint to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.AppStateSyncKeyFingerprint
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AppStateSyncKeyFingerprint.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for AppStateSyncKeyFingerprint
             * @function getTypeUrl
             * @memberof WAE2E.Message.AppStateSyncKeyFingerprint
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            AppStateSyncKeyFingerprint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.AppStateSyncKeyFingerprint";
            };

            return AppStateSyncKeyFingerprint;
        })();

        Message.AppStateSyncKeyId = (function() {

            /**
             * Properties of an AppStateSyncKeyId.
             * @memberof WAE2E.Message
             * @interface IAppStateSyncKeyId
             * @property {Uint8Array|null} [keyID] AppStateSyncKeyId keyID
             */

            /**
             * Constructs a new AppStateSyncKeyId.
             * @memberof WAE2E.Message
             * @classdesc Represents an AppStateSyncKeyId.
             * @implements IAppStateSyncKeyId
             * @constructor
             * @param {WAE2E.Message.IAppStateSyncKeyId=} [properties] Properties to set
             */
            function AppStateSyncKeyId(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AppStateSyncKeyId keyID.
             * @member {Uint8Array} keyID
             * @memberof WAE2E.Message.AppStateSyncKeyId
             * @instance
             */
            AppStateSyncKeyId.prototype.keyID = $util.newBuffer([]);

            /**
             * Creates a new AppStateSyncKeyId instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.AppStateSyncKeyId
             * @static
             * @param {WAE2E.Message.IAppStateSyncKeyId=} [properties] Properties to set
             * @returns {WAE2E.Message.AppStateSyncKeyId} AppStateSyncKeyId instance
             */
            AppStateSyncKeyId.create = function create(properties) {
                return new AppStateSyncKeyId(properties);
            };

            /**
             * Encodes the specified AppStateSyncKeyId message. Does not implicitly {@link WAE2E.Message.AppStateSyncKeyId.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.AppStateSyncKeyId
             * @static
             * @param {WAE2E.Message.IAppStateSyncKeyId} message AppStateSyncKeyId message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AppStateSyncKeyId.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.keyID != null && Object.hasOwnProperty.call(message, "keyID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.keyID);
                return writer;
            };

            /**
             * Encodes the specified AppStateSyncKeyId message, length delimited. Does not implicitly {@link WAE2E.Message.AppStateSyncKeyId.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.AppStateSyncKeyId
             * @static
             * @param {WAE2E.Message.IAppStateSyncKeyId} message AppStateSyncKeyId message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AppStateSyncKeyId.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AppStateSyncKeyId message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.AppStateSyncKeyId
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.AppStateSyncKeyId} AppStateSyncKeyId
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AppStateSyncKeyId.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.AppStateSyncKeyId();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.keyID = reader.bytes();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AppStateSyncKeyId message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.AppStateSyncKeyId
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.AppStateSyncKeyId} AppStateSyncKeyId
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AppStateSyncKeyId.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AppStateSyncKeyId message.
             * @function verify
             * @memberof WAE2E.Message.AppStateSyncKeyId
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AppStateSyncKeyId.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.keyID != null && message.hasOwnProperty("keyID"))
                    if (!(message.keyID && typeof message.keyID.length === "number" || $util.isString(message.keyID)))
                        return "keyID: buffer expected";
                return null;
            };

            /**
             * Creates an AppStateSyncKeyId message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.AppStateSyncKeyId
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.AppStateSyncKeyId} AppStateSyncKeyId
             */
            AppStateSyncKeyId.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.AppStateSyncKeyId)
                    return object;
                var message = new $root.WAE2E.Message.AppStateSyncKeyId();
                if (object.keyID != null)
                    if (typeof object.keyID === "string")
                        $util.base64.decode(object.keyID, message.keyID = $util.newBuffer($util.base64.length(object.keyID)), 0);
                    else if (object.keyID.length >= 0)
                        message.keyID = object.keyID;
                return message;
            };

            /**
             * Creates a plain object from an AppStateSyncKeyId message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.AppStateSyncKeyId
             * @static
             * @param {WAE2E.Message.AppStateSyncKeyId} message AppStateSyncKeyId
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AppStateSyncKeyId.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if (options.bytes === String)
                        object.keyID = "";
                    else {
                        object.keyID = [];
                        if (options.bytes !== Array)
                            object.keyID = $util.newBuffer(object.keyID);
                    }
                if (message.keyID != null && message.hasOwnProperty("keyID"))
                    object.keyID = options.bytes === String ? $util.base64.encode(message.keyID, 0, message.keyID.length) : options.bytes === Array ? Array.prototype.slice.call(message.keyID) : message.keyID;
                return object;
            };

            /**
             * Converts this AppStateSyncKeyId to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.AppStateSyncKeyId
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AppStateSyncKeyId.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for AppStateSyncKeyId
             * @function getTypeUrl
             * @memberof WAE2E.Message.AppStateSyncKeyId
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            AppStateSyncKeyId.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.AppStateSyncKeyId";
            };

            return AppStateSyncKeyId;
        })();

        Message.AppStateSyncKey = (function() {

            /**
             * Properties of an AppStateSyncKey.
             * @memberof WAE2E.Message
             * @interface IAppStateSyncKey
             * @property {WAE2E.Message.IAppStateSyncKeyId|null} [keyID] AppStateSyncKey keyID
             * @property {WAE2E.Message.IAppStateSyncKeyData|null} [keyData] AppStateSyncKey keyData
             */

            /**
             * Constructs a new AppStateSyncKey.
             * @memberof WAE2E.Message
             * @classdesc Represents an AppStateSyncKey.
             * @implements IAppStateSyncKey
             * @constructor
             * @param {WAE2E.Message.IAppStateSyncKey=} [properties] Properties to set
             */
            function AppStateSyncKey(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AppStateSyncKey keyID.
             * @member {WAE2E.Message.IAppStateSyncKeyId|null|undefined} keyID
             * @memberof WAE2E.Message.AppStateSyncKey
             * @instance
             */
            AppStateSyncKey.prototype.keyID = null;

            /**
             * AppStateSyncKey keyData.
             * @member {WAE2E.Message.IAppStateSyncKeyData|null|undefined} keyData
             * @memberof WAE2E.Message.AppStateSyncKey
             * @instance
             */
            AppStateSyncKey.prototype.keyData = null;

            /**
             * Creates a new AppStateSyncKey instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.AppStateSyncKey
             * @static
             * @param {WAE2E.Message.IAppStateSyncKey=} [properties] Properties to set
             * @returns {WAE2E.Message.AppStateSyncKey} AppStateSyncKey instance
             */
            AppStateSyncKey.create = function create(properties) {
                return new AppStateSyncKey(properties);
            };

            /**
             * Encodes the specified AppStateSyncKey message. Does not implicitly {@link WAE2E.Message.AppStateSyncKey.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.AppStateSyncKey
             * @static
             * @param {WAE2E.Message.IAppStateSyncKey} message AppStateSyncKey message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AppStateSyncKey.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.keyID != null && Object.hasOwnProperty.call(message, "keyID"))
                    $root.WAE2E.Message.AppStateSyncKeyId.encode(message.keyID, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.keyData != null && Object.hasOwnProperty.call(message, "keyData"))
                    $root.WAE2E.Message.AppStateSyncKeyData.encode(message.keyData, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified AppStateSyncKey message, length delimited. Does not implicitly {@link WAE2E.Message.AppStateSyncKey.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.AppStateSyncKey
             * @static
             * @param {WAE2E.Message.IAppStateSyncKey} message AppStateSyncKey message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AppStateSyncKey.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AppStateSyncKey message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.AppStateSyncKey
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.AppStateSyncKey} AppStateSyncKey
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AppStateSyncKey.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.AppStateSyncKey();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.keyID = $root.WAE2E.Message.AppStateSyncKeyId.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.keyData = $root.WAE2E.Message.AppStateSyncKeyData.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AppStateSyncKey message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.AppStateSyncKey
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.AppStateSyncKey} AppStateSyncKey
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AppStateSyncKey.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AppStateSyncKey message.
             * @function verify
             * @memberof WAE2E.Message.AppStateSyncKey
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AppStateSyncKey.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.keyID != null && message.hasOwnProperty("keyID")) {
                    var error = $root.WAE2E.Message.AppStateSyncKeyId.verify(message.keyID);
                    if (error)
                        return "keyID." + error;
                }
                if (message.keyData != null && message.hasOwnProperty("keyData")) {
                    var error = $root.WAE2E.Message.AppStateSyncKeyData.verify(message.keyData);
                    if (error)
                        return "keyData." + error;
                }
                return null;
            };

            /**
             * Creates an AppStateSyncKey message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.AppStateSyncKey
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.AppStateSyncKey} AppStateSyncKey
             */
            AppStateSyncKey.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.AppStateSyncKey)
                    return object;
                var message = new $root.WAE2E.Message.AppStateSyncKey();
                if (object.keyID != null) {
                    if (typeof object.keyID !== "object")
                        throw TypeError(".WAE2E.Message.AppStateSyncKey.keyID: object expected");
                    message.keyID = $root.WAE2E.Message.AppStateSyncKeyId.fromObject(object.keyID);
                }
                if (object.keyData != null) {
                    if (typeof object.keyData !== "object")
                        throw TypeError(".WAE2E.Message.AppStateSyncKey.keyData: object expected");
                    message.keyData = $root.WAE2E.Message.AppStateSyncKeyData.fromObject(object.keyData);
                }
                return message;
            };

            /**
             * Creates a plain object from an AppStateSyncKey message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.AppStateSyncKey
             * @static
             * @param {WAE2E.Message.AppStateSyncKey} message AppStateSyncKey
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AppStateSyncKey.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.keyID = null;
                    object.keyData = null;
                }
                if (message.keyID != null && message.hasOwnProperty("keyID"))
                    object.keyID = $root.WAE2E.Message.AppStateSyncKeyId.toObject(message.keyID, options);
                if (message.keyData != null && message.hasOwnProperty("keyData"))
                    object.keyData = $root.WAE2E.Message.AppStateSyncKeyData.toObject(message.keyData, options);
                return object;
            };

            /**
             * Converts this AppStateSyncKey to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.AppStateSyncKey
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AppStateSyncKey.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for AppStateSyncKey
             * @function getTypeUrl
             * @memberof WAE2E.Message.AppStateSyncKey
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            AppStateSyncKey.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.AppStateSyncKey";
            };

            return AppStateSyncKey;
        })();

        Message.Chat = (function() {

            /**
             * Properties of a Chat.
             * @memberof WAE2E.Message
             * @interface IChat
             * @property {string|null} [displayName] Chat displayName
             * @property {string|null} [ID] Chat ID
             */

            /**
             * Constructs a new Chat.
             * @memberof WAE2E.Message
             * @classdesc Represents a Chat.
             * @implements IChat
             * @constructor
             * @param {WAE2E.Message.IChat=} [properties] Properties to set
             */
            function Chat(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Chat displayName.
             * @member {string} displayName
             * @memberof WAE2E.Message.Chat
             * @instance
             */
            Chat.prototype.displayName = "";

            /**
             * Chat ID.
             * @member {string} ID
             * @memberof WAE2E.Message.Chat
             * @instance
             */
            Chat.prototype.ID = "";

            /**
             * Creates a new Chat instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.Chat
             * @static
             * @param {WAE2E.Message.IChat=} [properties] Properties to set
             * @returns {WAE2E.Message.Chat} Chat instance
             */
            Chat.create = function create(properties) {
                return new Chat(properties);
            };

            /**
             * Encodes the specified Chat message. Does not implicitly {@link WAE2E.Message.Chat.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.Chat
             * @static
             * @param {WAE2E.Message.IChat} message Chat message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Chat.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.displayName);
                if (message.ID != null && Object.hasOwnProperty.call(message, "ID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.ID);
                return writer;
            };

            /**
             * Encodes the specified Chat message, length delimited. Does not implicitly {@link WAE2E.Message.Chat.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.Chat
             * @static
             * @param {WAE2E.Message.IChat} message Chat message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Chat.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Chat message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.Chat
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.Chat} Chat
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Chat.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.Chat();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.displayName = reader.string();
                            break;
                        }
                    case 2: {
                            message.ID = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Chat message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.Chat
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.Chat} Chat
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Chat.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Chat message.
             * @function verify
             * @memberof WAE2E.Message.Chat
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Chat.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.displayName != null && message.hasOwnProperty("displayName"))
                    if (!$util.isString(message.displayName))
                        return "displayName: string expected";
                if (message.ID != null && message.hasOwnProperty("ID"))
                    if (!$util.isString(message.ID))
                        return "ID: string expected";
                return null;
            };

            /**
             * Creates a Chat message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.Chat
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.Chat} Chat
             */
            Chat.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.Chat)
                    return object;
                var message = new $root.WAE2E.Message.Chat();
                if (object.displayName != null)
                    message.displayName = String(object.displayName);
                if (object.ID != null)
                    message.ID = String(object.ID);
                return message;
            };

            /**
             * Creates a plain object from a Chat message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.Chat
             * @static
             * @param {WAE2E.Message.Chat} message Chat
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Chat.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.displayName = "";
                    object.ID = "";
                }
                if (message.displayName != null && message.hasOwnProperty("displayName"))
                    object.displayName = message.displayName;
                if (message.ID != null && message.hasOwnProperty("ID"))
                    object.ID = message.ID;
                return object;
            };

            /**
             * Converts this Chat to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.Chat
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Chat.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Chat
             * @function getTypeUrl
             * @memberof WAE2E.Message.Chat
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Chat.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.Chat";
            };

            return Chat;
        })();

        Message.Call = (function() {

            /**
             * Properties of a Call.
             * @memberof WAE2E.Message
             * @interface ICall
             * @property {Uint8Array|null} [callKey] Call callKey
             * @property {string|null} [conversionSource] Call conversionSource
             * @property {Uint8Array|null} [conversionData] Call conversionData
             * @property {number|null} [conversionDelaySeconds] Call conversionDelaySeconds
             */

            /**
             * Constructs a new Call.
             * @memberof WAE2E.Message
             * @classdesc Represents a Call.
             * @implements ICall
             * @constructor
             * @param {WAE2E.Message.ICall=} [properties] Properties to set
             */
            function Call(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Call callKey.
             * @member {Uint8Array} callKey
             * @memberof WAE2E.Message.Call
             * @instance
             */
            Call.prototype.callKey = $util.newBuffer([]);

            /**
             * Call conversionSource.
             * @member {string} conversionSource
             * @memberof WAE2E.Message.Call
             * @instance
             */
            Call.prototype.conversionSource = "";

            /**
             * Call conversionData.
             * @member {Uint8Array} conversionData
             * @memberof WAE2E.Message.Call
             * @instance
             */
            Call.prototype.conversionData = $util.newBuffer([]);

            /**
             * Call conversionDelaySeconds.
             * @member {number} conversionDelaySeconds
             * @memberof WAE2E.Message.Call
             * @instance
             */
            Call.prototype.conversionDelaySeconds = 0;

            /**
             * Creates a new Call instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.Call
             * @static
             * @param {WAE2E.Message.ICall=} [properties] Properties to set
             * @returns {WAE2E.Message.Call} Call instance
             */
            Call.create = function create(properties) {
                return new Call(properties);
            };

            /**
             * Encodes the specified Call message. Does not implicitly {@link WAE2E.Message.Call.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.Call
             * @static
             * @param {WAE2E.Message.ICall} message Call message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Call.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.callKey != null && Object.hasOwnProperty.call(message, "callKey"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.callKey);
                if (message.conversionSource != null && Object.hasOwnProperty.call(message, "conversionSource"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.conversionSource);
                if (message.conversionData != null && Object.hasOwnProperty.call(message, "conversionData"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.conversionData);
                if (message.conversionDelaySeconds != null && Object.hasOwnProperty.call(message, "conversionDelaySeconds"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.conversionDelaySeconds);
                return writer;
            };

            /**
             * Encodes the specified Call message, length delimited. Does not implicitly {@link WAE2E.Message.Call.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.Call
             * @static
             * @param {WAE2E.Message.ICall} message Call message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Call.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Call message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.Call
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.Call} Call
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Call.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.Call();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.callKey = reader.bytes();
                            break;
                        }
                    case 2: {
                            message.conversionSource = reader.string();
                            break;
                        }
                    case 3: {
                            message.conversionData = reader.bytes();
                            break;
                        }
                    case 4: {
                            message.conversionDelaySeconds = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Call message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.Call
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.Call} Call
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Call.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Call message.
             * @function verify
             * @memberof WAE2E.Message.Call
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Call.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.callKey != null && message.hasOwnProperty("callKey"))
                    if (!(message.callKey && typeof message.callKey.length === "number" || $util.isString(message.callKey)))
                        return "callKey: buffer expected";
                if (message.conversionSource != null && message.hasOwnProperty("conversionSource"))
                    if (!$util.isString(message.conversionSource))
                        return "conversionSource: string expected";
                if (message.conversionData != null && message.hasOwnProperty("conversionData"))
                    if (!(message.conversionData && typeof message.conversionData.length === "number" || $util.isString(message.conversionData)))
                        return "conversionData: buffer expected";
                if (message.conversionDelaySeconds != null && message.hasOwnProperty("conversionDelaySeconds"))
                    if (!$util.isInteger(message.conversionDelaySeconds))
                        return "conversionDelaySeconds: integer expected";
                return null;
            };

            /**
             * Creates a Call message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.Call
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.Call} Call
             */
            Call.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.Call)
                    return object;
                var message = new $root.WAE2E.Message.Call();
                if (object.callKey != null)
                    if (typeof object.callKey === "string")
                        $util.base64.decode(object.callKey, message.callKey = $util.newBuffer($util.base64.length(object.callKey)), 0);
                    else if (object.callKey.length >= 0)
                        message.callKey = object.callKey;
                if (object.conversionSource != null)
                    message.conversionSource = String(object.conversionSource);
                if (object.conversionData != null)
                    if (typeof object.conversionData === "string")
                        $util.base64.decode(object.conversionData, message.conversionData = $util.newBuffer($util.base64.length(object.conversionData)), 0);
                    else if (object.conversionData.length >= 0)
                        message.conversionData = object.conversionData;
                if (object.conversionDelaySeconds != null)
                    message.conversionDelaySeconds = object.conversionDelaySeconds >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a Call message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.Call
             * @static
             * @param {WAE2E.Message.Call} message Call
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Call.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.callKey = "";
                    else {
                        object.callKey = [];
                        if (options.bytes !== Array)
                            object.callKey = $util.newBuffer(object.callKey);
                    }
                    object.conversionSource = "";
                    if (options.bytes === String)
                        object.conversionData = "";
                    else {
                        object.conversionData = [];
                        if (options.bytes !== Array)
                            object.conversionData = $util.newBuffer(object.conversionData);
                    }
                    object.conversionDelaySeconds = 0;
                }
                if (message.callKey != null && message.hasOwnProperty("callKey"))
                    object.callKey = options.bytes === String ? $util.base64.encode(message.callKey, 0, message.callKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.callKey) : message.callKey;
                if (message.conversionSource != null && message.hasOwnProperty("conversionSource"))
                    object.conversionSource = message.conversionSource;
                if (message.conversionData != null && message.hasOwnProperty("conversionData"))
                    object.conversionData = options.bytes === String ? $util.base64.encode(message.conversionData, 0, message.conversionData.length) : options.bytes === Array ? Array.prototype.slice.call(message.conversionData) : message.conversionData;
                if (message.conversionDelaySeconds != null && message.hasOwnProperty("conversionDelaySeconds"))
                    object.conversionDelaySeconds = message.conversionDelaySeconds;
                return object;
            };

            /**
             * Converts this Call to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.Call
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Call.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Call
             * @function getTypeUrl
             * @memberof WAE2E.Message.Call
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Call.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.Call";
            };

            return Call;
        })();

        Message.AudioMessage = (function() {

            /**
             * Properties of an AudioMessage.
             * @memberof WAE2E.Message
             * @interface IAudioMessage
             * @property {string|null} [URL] AudioMessage URL
             * @property {string|null} [mimetype] AudioMessage mimetype
             * @property {Uint8Array|null} [fileSHA256] AudioMessage fileSHA256
             * @property {number|Long|null} [fileLength] AudioMessage fileLength
             * @property {number|null} [seconds] AudioMessage seconds
             * @property {boolean|null} [PTT] AudioMessage PTT
             * @property {Uint8Array|null} [mediaKey] AudioMessage mediaKey
             * @property {Uint8Array|null} [fileEncSHA256] AudioMessage fileEncSHA256
             * @property {string|null} [directPath] AudioMessage directPath
             * @property {number|Long|null} [mediaKeyTimestamp] AudioMessage mediaKeyTimestamp
             * @property {WAE2E.IContextInfo|null} [contextInfo] AudioMessage contextInfo
             * @property {Uint8Array|null} [streamingSidecar] AudioMessage streamingSidecar
             * @property {Uint8Array|null} [waveform] AudioMessage waveform
             * @property {number|null} [backgroundArgb] AudioMessage backgroundArgb
             * @property {boolean|null} [viewOnce] AudioMessage viewOnce
             * @property {string|null} [accessibilityLabel] AudioMessage accessibilityLabel
             */

            /**
             * Constructs a new AudioMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents an AudioMessage.
             * @implements IAudioMessage
             * @constructor
             * @param {WAE2E.Message.IAudioMessage=} [properties] Properties to set
             */
            function AudioMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AudioMessage URL.
             * @member {string} URL
             * @memberof WAE2E.Message.AudioMessage
             * @instance
             */
            AudioMessage.prototype.URL = "";

            /**
             * AudioMessage mimetype.
             * @member {string} mimetype
             * @memberof WAE2E.Message.AudioMessage
             * @instance
             */
            AudioMessage.prototype.mimetype = "";

            /**
             * AudioMessage fileSHA256.
             * @member {Uint8Array} fileSHA256
             * @memberof WAE2E.Message.AudioMessage
             * @instance
             */
            AudioMessage.prototype.fileSHA256 = $util.newBuffer([]);

            /**
             * AudioMessage fileLength.
             * @member {number|Long} fileLength
             * @memberof WAE2E.Message.AudioMessage
             * @instance
             */
            AudioMessage.prototype.fileLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * AudioMessage seconds.
             * @member {number} seconds
             * @memberof WAE2E.Message.AudioMessage
             * @instance
             */
            AudioMessage.prototype.seconds = 0;

            /**
             * AudioMessage PTT.
             * @member {boolean} PTT
             * @memberof WAE2E.Message.AudioMessage
             * @instance
             */
            AudioMessage.prototype.PTT = false;

            /**
             * AudioMessage mediaKey.
             * @member {Uint8Array} mediaKey
             * @memberof WAE2E.Message.AudioMessage
             * @instance
             */
            AudioMessage.prototype.mediaKey = $util.newBuffer([]);

            /**
             * AudioMessage fileEncSHA256.
             * @member {Uint8Array} fileEncSHA256
             * @memberof WAE2E.Message.AudioMessage
             * @instance
             */
            AudioMessage.prototype.fileEncSHA256 = $util.newBuffer([]);

            /**
             * AudioMessage directPath.
             * @member {string} directPath
             * @memberof WAE2E.Message.AudioMessage
             * @instance
             */
            AudioMessage.prototype.directPath = "";

            /**
             * AudioMessage mediaKeyTimestamp.
             * @member {number|Long} mediaKeyTimestamp
             * @memberof WAE2E.Message.AudioMessage
             * @instance
             */
            AudioMessage.prototype.mediaKeyTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * AudioMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.AudioMessage
             * @instance
             */
            AudioMessage.prototype.contextInfo = null;

            /**
             * AudioMessage streamingSidecar.
             * @member {Uint8Array} streamingSidecar
             * @memberof WAE2E.Message.AudioMessage
             * @instance
             */
            AudioMessage.prototype.streamingSidecar = $util.newBuffer([]);

            /**
             * AudioMessage waveform.
             * @member {Uint8Array} waveform
             * @memberof WAE2E.Message.AudioMessage
             * @instance
             */
            AudioMessage.prototype.waveform = $util.newBuffer([]);

            /**
             * AudioMessage backgroundArgb.
             * @member {number} backgroundArgb
             * @memberof WAE2E.Message.AudioMessage
             * @instance
             */
            AudioMessage.prototype.backgroundArgb = 0;

            /**
             * AudioMessage viewOnce.
             * @member {boolean} viewOnce
             * @memberof WAE2E.Message.AudioMessage
             * @instance
             */
            AudioMessage.prototype.viewOnce = false;

            /**
             * AudioMessage accessibilityLabel.
             * @member {string} accessibilityLabel
             * @memberof WAE2E.Message.AudioMessage
             * @instance
             */
            AudioMessage.prototype.accessibilityLabel = "";

            /**
             * Creates a new AudioMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.AudioMessage
             * @static
             * @param {WAE2E.Message.IAudioMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.AudioMessage} AudioMessage instance
             */
            AudioMessage.create = function create(properties) {
                return new AudioMessage(properties);
            };

            /**
             * Encodes the specified AudioMessage message. Does not implicitly {@link WAE2E.Message.AudioMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.AudioMessage
             * @static
             * @param {WAE2E.Message.IAudioMessage} message AudioMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AudioMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.URL != null && Object.hasOwnProperty.call(message, "URL"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.URL);
                if (message.mimetype != null && Object.hasOwnProperty.call(message, "mimetype"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.mimetype);
                if (message.fileSHA256 != null && Object.hasOwnProperty.call(message, "fileSHA256"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.fileSHA256);
                if (message.fileLength != null && Object.hasOwnProperty.call(message, "fileLength"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.fileLength);
                if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.seconds);
                if (message.PTT != null && Object.hasOwnProperty.call(message, "PTT"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.PTT);
                if (message.mediaKey != null && Object.hasOwnProperty.call(message, "mediaKey"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.mediaKey);
                if (message.fileEncSHA256 != null && Object.hasOwnProperty.call(message, "fileEncSHA256"))
                    writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.fileEncSHA256);
                if (message.directPath != null && Object.hasOwnProperty.call(message, "directPath"))
                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.directPath);
                if (message.mediaKeyTimestamp != null && Object.hasOwnProperty.call(message, "mediaKeyTimestamp"))
                    writer.uint32(/* id 10, wireType 0 =*/80).int64(message.mediaKeyTimestamp);
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                if (message.streamingSidecar != null && Object.hasOwnProperty.call(message, "streamingSidecar"))
                    writer.uint32(/* id 18, wireType 2 =*/146).bytes(message.streamingSidecar);
                if (message.waveform != null && Object.hasOwnProperty.call(message, "waveform"))
                    writer.uint32(/* id 19, wireType 2 =*/154).bytes(message.waveform);
                if (message.backgroundArgb != null && Object.hasOwnProperty.call(message, "backgroundArgb"))
                    writer.uint32(/* id 20, wireType 5 =*/165).fixed32(message.backgroundArgb);
                if (message.viewOnce != null && Object.hasOwnProperty.call(message, "viewOnce"))
                    writer.uint32(/* id 21, wireType 0 =*/168).bool(message.viewOnce);
                if (message.accessibilityLabel != null && Object.hasOwnProperty.call(message, "accessibilityLabel"))
                    writer.uint32(/* id 22, wireType 2 =*/178).string(message.accessibilityLabel);
                return writer;
            };

            /**
             * Encodes the specified AudioMessage message, length delimited. Does not implicitly {@link WAE2E.Message.AudioMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.AudioMessage
             * @static
             * @param {WAE2E.Message.IAudioMessage} message AudioMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AudioMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AudioMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.AudioMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.AudioMessage} AudioMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AudioMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.AudioMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.URL = reader.string();
                            break;
                        }
                    case 2: {
                            message.mimetype = reader.string();
                            break;
                        }
                    case 3: {
                            message.fileSHA256 = reader.bytes();
                            break;
                        }
                    case 4: {
                            message.fileLength = reader.uint64();
                            break;
                        }
                    case 5: {
                            message.seconds = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.PTT = reader.bool();
                            break;
                        }
                    case 7: {
                            message.mediaKey = reader.bytes();
                            break;
                        }
                    case 8: {
                            message.fileEncSHA256 = reader.bytes();
                            break;
                        }
                    case 9: {
                            message.directPath = reader.string();
                            break;
                        }
                    case 10: {
                            message.mediaKeyTimestamp = reader.int64();
                            break;
                        }
                    case 17: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    case 18: {
                            message.streamingSidecar = reader.bytes();
                            break;
                        }
                    case 19: {
                            message.waveform = reader.bytes();
                            break;
                        }
                    case 20: {
                            message.backgroundArgb = reader.fixed32();
                            break;
                        }
                    case 21: {
                            message.viewOnce = reader.bool();
                            break;
                        }
                    case 22: {
                            message.accessibilityLabel = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AudioMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.AudioMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.AudioMessage} AudioMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AudioMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AudioMessage message.
             * @function verify
             * @memberof WAE2E.Message.AudioMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AudioMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.URL != null && message.hasOwnProperty("URL"))
                    if (!$util.isString(message.URL))
                        return "URL: string expected";
                if (message.mimetype != null && message.hasOwnProperty("mimetype"))
                    if (!$util.isString(message.mimetype))
                        return "mimetype: string expected";
                if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                    if (!(message.fileSHA256 && typeof message.fileSHA256.length === "number" || $util.isString(message.fileSHA256)))
                        return "fileSHA256: buffer expected";
                if (message.fileLength != null && message.hasOwnProperty("fileLength"))
                    if (!$util.isInteger(message.fileLength) && !(message.fileLength && $util.isInteger(message.fileLength.low) && $util.isInteger(message.fileLength.high)))
                        return "fileLength: integer|Long expected";
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (!$util.isInteger(message.seconds))
                        return "seconds: integer expected";
                if (message.PTT != null && message.hasOwnProperty("PTT"))
                    if (typeof message.PTT !== "boolean")
                        return "PTT: boolean expected";
                if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                    if (!(message.mediaKey && typeof message.mediaKey.length === "number" || $util.isString(message.mediaKey)))
                        return "mediaKey: buffer expected";
                if (message.fileEncSHA256 != null && message.hasOwnProperty("fileEncSHA256"))
                    if (!(message.fileEncSHA256 && typeof message.fileEncSHA256.length === "number" || $util.isString(message.fileEncSHA256)))
                        return "fileEncSHA256: buffer expected";
                if (message.directPath != null && message.hasOwnProperty("directPath"))
                    if (!$util.isString(message.directPath))
                        return "directPath: string expected";
                if (message.mediaKeyTimestamp != null && message.hasOwnProperty("mediaKeyTimestamp"))
                    if (!$util.isInteger(message.mediaKeyTimestamp) && !(message.mediaKeyTimestamp && $util.isInteger(message.mediaKeyTimestamp.low) && $util.isInteger(message.mediaKeyTimestamp.high)))
                        return "mediaKeyTimestamp: integer|Long expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                if (message.streamingSidecar != null && message.hasOwnProperty("streamingSidecar"))
                    if (!(message.streamingSidecar && typeof message.streamingSidecar.length === "number" || $util.isString(message.streamingSidecar)))
                        return "streamingSidecar: buffer expected";
                if (message.waveform != null && message.hasOwnProperty("waveform"))
                    if (!(message.waveform && typeof message.waveform.length === "number" || $util.isString(message.waveform)))
                        return "waveform: buffer expected";
                if (message.backgroundArgb != null && message.hasOwnProperty("backgroundArgb"))
                    if (!$util.isInteger(message.backgroundArgb))
                        return "backgroundArgb: integer expected";
                if (message.viewOnce != null && message.hasOwnProperty("viewOnce"))
                    if (typeof message.viewOnce !== "boolean")
                        return "viewOnce: boolean expected";
                if (message.accessibilityLabel != null && message.hasOwnProperty("accessibilityLabel"))
                    if (!$util.isString(message.accessibilityLabel))
                        return "accessibilityLabel: string expected";
                return null;
            };

            /**
             * Creates an AudioMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.AudioMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.AudioMessage} AudioMessage
             */
            AudioMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.AudioMessage)
                    return object;
                var message = new $root.WAE2E.Message.AudioMessage();
                if (object.URL != null)
                    message.URL = String(object.URL);
                if (object.mimetype != null)
                    message.mimetype = String(object.mimetype);
                if (object.fileSHA256 != null)
                    if (typeof object.fileSHA256 === "string")
                        $util.base64.decode(object.fileSHA256, message.fileSHA256 = $util.newBuffer($util.base64.length(object.fileSHA256)), 0);
                    else if (object.fileSHA256.length >= 0)
                        message.fileSHA256 = object.fileSHA256;
                if (object.fileLength != null)
                    if ($util.Long)
                        (message.fileLength = $util.Long.fromValue(object.fileLength)).unsigned = true;
                    else if (typeof object.fileLength === "string")
                        message.fileLength = parseInt(object.fileLength, 10);
                    else if (typeof object.fileLength === "number")
                        message.fileLength = object.fileLength;
                    else if (typeof object.fileLength === "object")
                        message.fileLength = new $util.LongBits(object.fileLength.low >>> 0, object.fileLength.high >>> 0).toNumber(true);
                if (object.seconds != null)
                    message.seconds = object.seconds >>> 0;
                if (object.PTT != null)
                    message.PTT = Boolean(object.PTT);
                if (object.mediaKey != null)
                    if (typeof object.mediaKey === "string")
                        $util.base64.decode(object.mediaKey, message.mediaKey = $util.newBuffer($util.base64.length(object.mediaKey)), 0);
                    else if (object.mediaKey.length >= 0)
                        message.mediaKey = object.mediaKey;
                if (object.fileEncSHA256 != null)
                    if (typeof object.fileEncSHA256 === "string")
                        $util.base64.decode(object.fileEncSHA256, message.fileEncSHA256 = $util.newBuffer($util.base64.length(object.fileEncSHA256)), 0);
                    else if (object.fileEncSHA256.length >= 0)
                        message.fileEncSHA256 = object.fileEncSHA256;
                if (object.directPath != null)
                    message.directPath = String(object.directPath);
                if (object.mediaKeyTimestamp != null)
                    if ($util.Long)
                        (message.mediaKeyTimestamp = $util.Long.fromValue(object.mediaKeyTimestamp)).unsigned = false;
                    else if (typeof object.mediaKeyTimestamp === "string")
                        message.mediaKeyTimestamp = parseInt(object.mediaKeyTimestamp, 10);
                    else if (typeof object.mediaKeyTimestamp === "number")
                        message.mediaKeyTimestamp = object.mediaKeyTimestamp;
                    else if (typeof object.mediaKeyTimestamp === "object")
                        message.mediaKeyTimestamp = new $util.LongBits(object.mediaKeyTimestamp.low >>> 0, object.mediaKeyTimestamp.high >>> 0).toNumber();
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.AudioMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                if (object.streamingSidecar != null)
                    if (typeof object.streamingSidecar === "string")
                        $util.base64.decode(object.streamingSidecar, message.streamingSidecar = $util.newBuffer($util.base64.length(object.streamingSidecar)), 0);
                    else if (object.streamingSidecar.length >= 0)
                        message.streamingSidecar = object.streamingSidecar;
                if (object.waveform != null)
                    if (typeof object.waveform === "string")
                        $util.base64.decode(object.waveform, message.waveform = $util.newBuffer($util.base64.length(object.waveform)), 0);
                    else if (object.waveform.length >= 0)
                        message.waveform = object.waveform;
                if (object.backgroundArgb != null)
                    message.backgroundArgb = object.backgroundArgb >>> 0;
                if (object.viewOnce != null)
                    message.viewOnce = Boolean(object.viewOnce);
                if (object.accessibilityLabel != null)
                    message.accessibilityLabel = String(object.accessibilityLabel);
                return message;
            };

            /**
             * Creates a plain object from an AudioMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.AudioMessage
             * @static
             * @param {WAE2E.Message.AudioMessage} message AudioMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AudioMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.URL = "";
                    object.mimetype = "";
                    if (options.bytes === String)
                        object.fileSHA256 = "";
                    else {
                        object.fileSHA256 = [];
                        if (options.bytes !== Array)
                            object.fileSHA256 = $util.newBuffer(object.fileSHA256);
                    }
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.fileLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.fileLength = options.longs === String ? "0" : 0;
                    object.seconds = 0;
                    object.PTT = false;
                    if (options.bytes === String)
                        object.mediaKey = "";
                    else {
                        object.mediaKey = [];
                        if (options.bytes !== Array)
                            object.mediaKey = $util.newBuffer(object.mediaKey);
                    }
                    if (options.bytes === String)
                        object.fileEncSHA256 = "";
                    else {
                        object.fileEncSHA256 = [];
                        if (options.bytes !== Array)
                            object.fileEncSHA256 = $util.newBuffer(object.fileEncSHA256);
                    }
                    object.directPath = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.mediaKeyTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.mediaKeyTimestamp = options.longs === String ? "0" : 0;
                    object.contextInfo = null;
                    if (options.bytes === String)
                        object.streamingSidecar = "";
                    else {
                        object.streamingSidecar = [];
                        if (options.bytes !== Array)
                            object.streamingSidecar = $util.newBuffer(object.streamingSidecar);
                    }
                    if (options.bytes === String)
                        object.waveform = "";
                    else {
                        object.waveform = [];
                        if (options.bytes !== Array)
                            object.waveform = $util.newBuffer(object.waveform);
                    }
                    object.backgroundArgb = 0;
                    object.viewOnce = false;
                    object.accessibilityLabel = "";
                }
                if (message.URL != null && message.hasOwnProperty("URL"))
                    object.URL = message.URL;
                if (message.mimetype != null && message.hasOwnProperty("mimetype"))
                    object.mimetype = message.mimetype;
                if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                    object.fileSHA256 = options.bytes === String ? $util.base64.encode(message.fileSHA256, 0, message.fileSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.fileSHA256) : message.fileSHA256;
                if (message.fileLength != null && message.hasOwnProperty("fileLength"))
                    if (typeof message.fileLength === "number")
                        object.fileLength = options.longs === String ? String(message.fileLength) : message.fileLength;
                    else
                        object.fileLength = options.longs === String ? $util.Long.prototype.toString.call(message.fileLength) : options.longs === Number ? new $util.LongBits(message.fileLength.low >>> 0, message.fileLength.high >>> 0).toNumber(true) : message.fileLength;
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    object.seconds = message.seconds;
                if (message.PTT != null && message.hasOwnProperty("PTT"))
                    object.PTT = message.PTT;
                if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                    object.mediaKey = options.bytes === String ? $util.base64.encode(message.mediaKey, 0, message.mediaKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.mediaKey) : message.mediaKey;
                if (message.fileEncSHA256 != null && message.hasOwnProperty("fileEncSHA256"))
                    object.fileEncSHA256 = options.bytes === String ? $util.base64.encode(message.fileEncSHA256, 0, message.fileEncSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.fileEncSHA256) : message.fileEncSHA256;
                if (message.directPath != null && message.hasOwnProperty("directPath"))
                    object.directPath = message.directPath;
                if (message.mediaKeyTimestamp != null && message.hasOwnProperty("mediaKeyTimestamp"))
                    if (typeof message.mediaKeyTimestamp === "number")
                        object.mediaKeyTimestamp = options.longs === String ? String(message.mediaKeyTimestamp) : message.mediaKeyTimestamp;
                    else
                        object.mediaKeyTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.mediaKeyTimestamp) : options.longs === Number ? new $util.LongBits(message.mediaKeyTimestamp.low >>> 0, message.mediaKeyTimestamp.high >>> 0).toNumber() : message.mediaKeyTimestamp;
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                if (message.streamingSidecar != null && message.hasOwnProperty("streamingSidecar"))
                    object.streamingSidecar = options.bytes === String ? $util.base64.encode(message.streamingSidecar, 0, message.streamingSidecar.length) : options.bytes === Array ? Array.prototype.slice.call(message.streamingSidecar) : message.streamingSidecar;
                if (message.waveform != null && message.hasOwnProperty("waveform"))
                    object.waveform = options.bytes === String ? $util.base64.encode(message.waveform, 0, message.waveform.length) : options.bytes === Array ? Array.prototype.slice.call(message.waveform) : message.waveform;
                if (message.backgroundArgb != null && message.hasOwnProperty("backgroundArgb"))
                    object.backgroundArgb = message.backgroundArgb;
                if (message.viewOnce != null && message.hasOwnProperty("viewOnce"))
                    object.viewOnce = message.viewOnce;
                if (message.accessibilityLabel != null && message.hasOwnProperty("accessibilityLabel"))
                    object.accessibilityLabel = message.accessibilityLabel;
                return object;
            };

            /**
             * Converts this AudioMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.AudioMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AudioMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for AudioMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.AudioMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            AudioMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.AudioMessage";
            };

            return AudioMessage;
        })();

        Message.DocumentMessage = (function() {

            /**
             * Properties of a DocumentMessage.
             * @memberof WAE2E.Message
             * @interface IDocumentMessage
             * @property {string|null} [URL] DocumentMessage URL
             * @property {string|null} [mimetype] DocumentMessage mimetype
             * @property {string|null} [title] DocumentMessage title
             * @property {Uint8Array|null} [fileSHA256] DocumentMessage fileSHA256
             * @property {number|Long|null} [fileLength] DocumentMessage fileLength
             * @property {number|null} [pageCount] DocumentMessage pageCount
             * @property {Uint8Array|null} [mediaKey] DocumentMessage mediaKey
             * @property {string|null} [fileName] DocumentMessage fileName
             * @property {Uint8Array|null} [fileEncSHA256] DocumentMessage fileEncSHA256
             * @property {string|null} [directPath] DocumentMessage directPath
             * @property {number|Long|null} [mediaKeyTimestamp] DocumentMessage mediaKeyTimestamp
             * @property {boolean|null} [contactVcard] DocumentMessage contactVcard
             * @property {string|null} [thumbnailDirectPath] DocumentMessage thumbnailDirectPath
             * @property {Uint8Array|null} [thumbnailSHA256] DocumentMessage thumbnailSHA256
             * @property {Uint8Array|null} [thumbnailEncSHA256] DocumentMessage thumbnailEncSHA256
             * @property {Uint8Array|null} [JPEGThumbnail] DocumentMessage JPEGThumbnail
             * @property {WAE2E.IContextInfo|null} [contextInfo] DocumentMessage contextInfo
             * @property {number|null} [thumbnailHeight] DocumentMessage thumbnailHeight
             * @property {number|null} [thumbnailWidth] DocumentMessage thumbnailWidth
             * @property {string|null} [caption] DocumentMessage caption
             * @property {string|null} [accessibilityLabel] DocumentMessage accessibilityLabel
             */

            /**
             * Constructs a new DocumentMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a DocumentMessage.
             * @implements IDocumentMessage
             * @constructor
             * @param {WAE2E.Message.IDocumentMessage=} [properties] Properties to set
             */
            function DocumentMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DocumentMessage URL.
             * @member {string} URL
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.URL = "";

            /**
             * DocumentMessage mimetype.
             * @member {string} mimetype
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.mimetype = "";

            /**
             * DocumentMessage title.
             * @member {string} title
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.title = "";

            /**
             * DocumentMessage fileSHA256.
             * @member {Uint8Array} fileSHA256
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.fileSHA256 = $util.newBuffer([]);

            /**
             * DocumentMessage fileLength.
             * @member {number|Long} fileLength
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.fileLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * DocumentMessage pageCount.
             * @member {number} pageCount
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.pageCount = 0;

            /**
             * DocumentMessage mediaKey.
             * @member {Uint8Array} mediaKey
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.mediaKey = $util.newBuffer([]);

            /**
             * DocumentMessage fileName.
             * @member {string} fileName
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.fileName = "";

            /**
             * DocumentMessage fileEncSHA256.
             * @member {Uint8Array} fileEncSHA256
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.fileEncSHA256 = $util.newBuffer([]);

            /**
             * DocumentMessage directPath.
             * @member {string} directPath
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.directPath = "";

            /**
             * DocumentMessage mediaKeyTimestamp.
             * @member {number|Long} mediaKeyTimestamp
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.mediaKeyTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DocumentMessage contactVcard.
             * @member {boolean} contactVcard
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.contactVcard = false;

            /**
             * DocumentMessage thumbnailDirectPath.
             * @member {string} thumbnailDirectPath
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.thumbnailDirectPath = "";

            /**
             * DocumentMessage thumbnailSHA256.
             * @member {Uint8Array} thumbnailSHA256
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.thumbnailSHA256 = $util.newBuffer([]);

            /**
             * DocumentMessage thumbnailEncSHA256.
             * @member {Uint8Array} thumbnailEncSHA256
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.thumbnailEncSHA256 = $util.newBuffer([]);

            /**
             * DocumentMessage JPEGThumbnail.
             * @member {Uint8Array} JPEGThumbnail
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.JPEGThumbnail = $util.newBuffer([]);

            /**
             * DocumentMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.contextInfo = null;

            /**
             * DocumentMessage thumbnailHeight.
             * @member {number} thumbnailHeight
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.thumbnailHeight = 0;

            /**
             * DocumentMessage thumbnailWidth.
             * @member {number} thumbnailWidth
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.thumbnailWidth = 0;

            /**
             * DocumentMessage caption.
             * @member {string} caption
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.caption = "";

            /**
             * DocumentMessage accessibilityLabel.
             * @member {string} accessibilityLabel
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             */
            DocumentMessage.prototype.accessibilityLabel = "";

            /**
             * Creates a new DocumentMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.DocumentMessage
             * @static
             * @param {WAE2E.Message.IDocumentMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.DocumentMessage} DocumentMessage instance
             */
            DocumentMessage.create = function create(properties) {
                return new DocumentMessage(properties);
            };

            /**
             * Encodes the specified DocumentMessage message. Does not implicitly {@link WAE2E.Message.DocumentMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.DocumentMessage
             * @static
             * @param {WAE2E.Message.IDocumentMessage} message DocumentMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DocumentMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.URL != null && Object.hasOwnProperty.call(message, "URL"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.URL);
                if (message.mimetype != null && Object.hasOwnProperty.call(message, "mimetype"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.mimetype);
                if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.title);
                if (message.fileSHA256 != null && Object.hasOwnProperty.call(message, "fileSHA256"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.fileSHA256);
                if (message.fileLength != null && Object.hasOwnProperty.call(message, "fileLength"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.fileLength);
                if (message.pageCount != null && Object.hasOwnProperty.call(message, "pageCount"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.pageCount);
                if (message.mediaKey != null && Object.hasOwnProperty.call(message, "mediaKey"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.mediaKey);
                if (message.fileName != null && Object.hasOwnProperty.call(message, "fileName"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.fileName);
                if (message.fileEncSHA256 != null && Object.hasOwnProperty.call(message, "fileEncSHA256"))
                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.fileEncSHA256);
                if (message.directPath != null && Object.hasOwnProperty.call(message, "directPath"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.directPath);
                if (message.mediaKeyTimestamp != null && Object.hasOwnProperty.call(message, "mediaKeyTimestamp"))
                    writer.uint32(/* id 11, wireType 0 =*/88).int64(message.mediaKeyTimestamp);
                if (message.contactVcard != null && Object.hasOwnProperty.call(message, "contactVcard"))
                    writer.uint32(/* id 12, wireType 0 =*/96).bool(message.contactVcard);
                if (message.thumbnailDirectPath != null && Object.hasOwnProperty.call(message, "thumbnailDirectPath"))
                    writer.uint32(/* id 13, wireType 2 =*/106).string(message.thumbnailDirectPath);
                if (message.thumbnailSHA256 != null && Object.hasOwnProperty.call(message, "thumbnailSHA256"))
                    writer.uint32(/* id 14, wireType 2 =*/114).bytes(message.thumbnailSHA256);
                if (message.thumbnailEncSHA256 != null && Object.hasOwnProperty.call(message, "thumbnailEncSHA256"))
                    writer.uint32(/* id 15, wireType 2 =*/122).bytes(message.thumbnailEncSHA256);
                if (message.JPEGThumbnail != null && Object.hasOwnProperty.call(message, "JPEGThumbnail"))
                    writer.uint32(/* id 16, wireType 2 =*/130).bytes(message.JPEGThumbnail);
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                if (message.thumbnailHeight != null && Object.hasOwnProperty.call(message, "thumbnailHeight"))
                    writer.uint32(/* id 18, wireType 0 =*/144).uint32(message.thumbnailHeight);
                if (message.thumbnailWidth != null && Object.hasOwnProperty.call(message, "thumbnailWidth"))
                    writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.thumbnailWidth);
                if (message.caption != null && Object.hasOwnProperty.call(message, "caption"))
                    writer.uint32(/* id 20, wireType 2 =*/162).string(message.caption);
                if (message.accessibilityLabel != null && Object.hasOwnProperty.call(message, "accessibilityLabel"))
                    writer.uint32(/* id 21, wireType 2 =*/170).string(message.accessibilityLabel);
                return writer;
            };

            /**
             * Encodes the specified DocumentMessage message, length delimited. Does not implicitly {@link WAE2E.Message.DocumentMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.DocumentMessage
             * @static
             * @param {WAE2E.Message.IDocumentMessage} message DocumentMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DocumentMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DocumentMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.DocumentMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.DocumentMessage} DocumentMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DocumentMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.DocumentMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.URL = reader.string();
                            break;
                        }
                    case 2: {
                            message.mimetype = reader.string();
                            break;
                        }
                    case 3: {
                            message.title = reader.string();
                            break;
                        }
                    case 4: {
                            message.fileSHA256 = reader.bytes();
                            break;
                        }
                    case 5: {
                            message.fileLength = reader.uint64();
                            break;
                        }
                    case 6: {
                            message.pageCount = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.mediaKey = reader.bytes();
                            break;
                        }
                    case 8: {
                            message.fileName = reader.string();
                            break;
                        }
                    case 9: {
                            message.fileEncSHA256 = reader.bytes();
                            break;
                        }
                    case 10: {
                            message.directPath = reader.string();
                            break;
                        }
                    case 11: {
                            message.mediaKeyTimestamp = reader.int64();
                            break;
                        }
                    case 12: {
                            message.contactVcard = reader.bool();
                            break;
                        }
                    case 13: {
                            message.thumbnailDirectPath = reader.string();
                            break;
                        }
                    case 14: {
                            message.thumbnailSHA256 = reader.bytes();
                            break;
                        }
                    case 15: {
                            message.thumbnailEncSHA256 = reader.bytes();
                            break;
                        }
                    case 16: {
                            message.JPEGThumbnail = reader.bytes();
                            break;
                        }
                    case 17: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    case 18: {
                            message.thumbnailHeight = reader.uint32();
                            break;
                        }
                    case 19: {
                            message.thumbnailWidth = reader.uint32();
                            break;
                        }
                    case 20: {
                            message.caption = reader.string();
                            break;
                        }
                    case 21: {
                            message.accessibilityLabel = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DocumentMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.DocumentMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.DocumentMessage} DocumentMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DocumentMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DocumentMessage message.
             * @function verify
             * @memberof WAE2E.Message.DocumentMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DocumentMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.URL != null && message.hasOwnProperty("URL"))
                    if (!$util.isString(message.URL))
                        return "URL: string expected";
                if (message.mimetype != null && message.hasOwnProperty("mimetype"))
                    if (!$util.isString(message.mimetype))
                        return "mimetype: string expected";
                if (message.title != null && message.hasOwnProperty("title"))
                    if (!$util.isString(message.title))
                        return "title: string expected";
                if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                    if (!(message.fileSHA256 && typeof message.fileSHA256.length === "number" || $util.isString(message.fileSHA256)))
                        return "fileSHA256: buffer expected";
                if (message.fileLength != null && message.hasOwnProperty("fileLength"))
                    if (!$util.isInteger(message.fileLength) && !(message.fileLength && $util.isInteger(message.fileLength.low) && $util.isInteger(message.fileLength.high)))
                        return "fileLength: integer|Long expected";
                if (message.pageCount != null && message.hasOwnProperty("pageCount"))
                    if (!$util.isInteger(message.pageCount))
                        return "pageCount: integer expected";
                if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                    if (!(message.mediaKey && typeof message.mediaKey.length === "number" || $util.isString(message.mediaKey)))
                        return "mediaKey: buffer expected";
                if (message.fileName != null && message.hasOwnProperty("fileName"))
                    if (!$util.isString(message.fileName))
                        return "fileName: string expected";
                if (message.fileEncSHA256 != null && message.hasOwnProperty("fileEncSHA256"))
                    if (!(message.fileEncSHA256 && typeof message.fileEncSHA256.length === "number" || $util.isString(message.fileEncSHA256)))
                        return "fileEncSHA256: buffer expected";
                if (message.directPath != null && message.hasOwnProperty("directPath"))
                    if (!$util.isString(message.directPath))
                        return "directPath: string expected";
                if (message.mediaKeyTimestamp != null && message.hasOwnProperty("mediaKeyTimestamp"))
                    if (!$util.isInteger(message.mediaKeyTimestamp) && !(message.mediaKeyTimestamp && $util.isInteger(message.mediaKeyTimestamp.low) && $util.isInteger(message.mediaKeyTimestamp.high)))
                        return "mediaKeyTimestamp: integer|Long expected";
                if (message.contactVcard != null && message.hasOwnProperty("contactVcard"))
                    if (typeof message.contactVcard !== "boolean")
                        return "contactVcard: boolean expected";
                if (message.thumbnailDirectPath != null && message.hasOwnProperty("thumbnailDirectPath"))
                    if (!$util.isString(message.thumbnailDirectPath))
                        return "thumbnailDirectPath: string expected";
                if (message.thumbnailSHA256 != null && message.hasOwnProperty("thumbnailSHA256"))
                    if (!(message.thumbnailSHA256 && typeof message.thumbnailSHA256.length === "number" || $util.isString(message.thumbnailSHA256)))
                        return "thumbnailSHA256: buffer expected";
                if (message.thumbnailEncSHA256 != null && message.hasOwnProperty("thumbnailEncSHA256"))
                    if (!(message.thumbnailEncSHA256 && typeof message.thumbnailEncSHA256.length === "number" || $util.isString(message.thumbnailEncSHA256)))
                        return "thumbnailEncSHA256: buffer expected";
                if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail"))
                    if (!(message.JPEGThumbnail && typeof message.JPEGThumbnail.length === "number" || $util.isString(message.JPEGThumbnail)))
                        return "JPEGThumbnail: buffer expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                if (message.thumbnailHeight != null && message.hasOwnProperty("thumbnailHeight"))
                    if (!$util.isInteger(message.thumbnailHeight))
                        return "thumbnailHeight: integer expected";
                if (message.thumbnailWidth != null && message.hasOwnProperty("thumbnailWidth"))
                    if (!$util.isInteger(message.thumbnailWidth))
                        return "thumbnailWidth: integer expected";
                if (message.caption != null && message.hasOwnProperty("caption"))
                    if (!$util.isString(message.caption))
                        return "caption: string expected";
                if (message.accessibilityLabel != null && message.hasOwnProperty("accessibilityLabel"))
                    if (!$util.isString(message.accessibilityLabel))
                        return "accessibilityLabel: string expected";
                return null;
            };

            /**
             * Creates a DocumentMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.DocumentMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.DocumentMessage} DocumentMessage
             */
            DocumentMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.DocumentMessage)
                    return object;
                var message = new $root.WAE2E.Message.DocumentMessage();
                if (object.URL != null)
                    message.URL = String(object.URL);
                if (object.mimetype != null)
                    message.mimetype = String(object.mimetype);
                if (object.title != null)
                    message.title = String(object.title);
                if (object.fileSHA256 != null)
                    if (typeof object.fileSHA256 === "string")
                        $util.base64.decode(object.fileSHA256, message.fileSHA256 = $util.newBuffer($util.base64.length(object.fileSHA256)), 0);
                    else if (object.fileSHA256.length >= 0)
                        message.fileSHA256 = object.fileSHA256;
                if (object.fileLength != null)
                    if ($util.Long)
                        (message.fileLength = $util.Long.fromValue(object.fileLength)).unsigned = true;
                    else if (typeof object.fileLength === "string")
                        message.fileLength = parseInt(object.fileLength, 10);
                    else if (typeof object.fileLength === "number")
                        message.fileLength = object.fileLength;
                    else if (typeof object.fileLength === "object")
                        message.fileLength = new $util.LongBits(object.fileLength.low >>> 0, object.fileLength.high >>> 0).toNumber(true);
                if (object.pageCount != null)
                    message.pageCount = object.pageCount >>> 0;
                if (object.mediaKey != null)
                    if (typeof object.mediaKey === "string")
                        $util.base64.decode(object.mediaKey, message.mediaKey = $util.newBuffer($util.base64.length(object.mediaKey)), 0);
                    else if (object.mediaKey.length >= 0)
                        message.mediaKey = object.mediaKey;
                if (object.fileName != null)
                    message.fileName = String(object.fileName);
                if (object.fileEncSHA256 != null)
                    if (typeof object.fileEncSHA256 === "string")
                        $util.base64.decode(object.fileEncSHA256, message.fileEncSHA256 = $util.newBuffer($util.base64.length(object.fileEncSHA256)), 0);
                    else if (object.fileEncSHA256.length >= 0)
                        message.fileEncSHA256 = object.fileEncSHA256;
                if (object.directPath != null)
                    message.directPath = String(object.directPath);
                if (object.mediaKeyTimestamp != null)
                    if ($util.Long)
                        (message.mediaKeyTimestamp = $util.Long.fromValue(object.mediaKeyTimestamp)).unsigned = false;
                    else if (typeof object.mediaKeyTimestamp === "string")
                        message.mediaKeyTimestamp = parseInt(object.mediaKeyTimestamp, 10);
                    else if (typeof object.mediaKeyTimestamp === "number")
                        message.mediaKeyTimestamp = object.mediaKeyTimestamp;
                    else if (typeof object.mediaKeyTimestamp === "object")
                        message.mediaKeyTimestamp = new $util.LongBits(object.mediaKeyTimestamp.low >>> 0, object.mediaKeyTimestamp.high >>> 0).toNumber();
                if (object.contactVcard != null)
                    message.contactVcard = Boolean(object.contactVcard);
                if (object.thumbnailDirectPath != null)
                    message.thumbnailDirectPath = String(object.thumbnailDirectPath);
                if (object.thumbnailSHA256 != null)
                    if (typeof object.thumbnailSHA256 === "string")
                        $util.base64.decode(object.thumbnailSHA256, message.thumbnailSHA256 = $util.newBuffer($util.base64.length(object.thumbnailSHA256)), 0);
                    else if (object.thumbnailSHA256.length >= 0)
                        message.thumbnailSHA256 = object.thumbnailSHA256;
                if (object.thumbnailEncSHA256 != null)
                    if (typeof object.thumbnailEncSHA256 === "string")
                        $util.base64.decode(object.thumbnailEncSHA256, message.thumbnailEncSHA256 = $util.newBuffer($util.base64.length(object.thumbnailEncSHA256)), 0);
                    else if (object.thumbnailEncSHA256.length >= 0)
                        message.thumbnailEncSHA256 = object.thumbnailEncSHA256;
                if (object.JPEGThumbnail != null)
                    if (typeof object.JPEGThumbnail === "string")
                        $util.base64.decode(object.JPEGThumbnail, message.JPEGThumbnail = $util.newBuffer($util.base64.length(object.JPEGThumbnail)), 0);
                    else if (object.JPEGThumbnail.length >= 0)
                        message.JPEGThumbnail = object.JPEGThumbnail;
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.DocumentMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                if (object.thumbnailHeight != null)
                    message.thumbnailHeight = object.thumbnailHeight >>> 0;
                if (object.thumbnailWidth != null)
                    message.thumbnailWidth = object.thumbnailWidth >>> 0;
                if (object.caption != null)
                    message.caption = String(object.caption);
                if (object.accessibilityLabel != null)
                    message.accessibilityLabel = String(object.accessibilityLabel);
                return message;
            };

            /**
             * Creates a plain object from a DocumentMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.DocumentMessage
             * @static
             * @param {WAE2E.Message.DocumentMessage} message DocumentMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DocumentMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.URL = "";
                    object.mimetype = "";
                    object.title = "";
                    if (options.bytes === String)
                        object.fileSHA256 = "";
                    else {
                        object.fileSHA256 = [];
                        if (options.bytes !== Array)
                            object.fileSHA256 = $util.newBuffer(object.fileSHA256);
                    }
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.fileLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.fileLength = options.longs === String ? "0" : 0;
                    object.pageCount = 0;
                    if (options.bytes === String)
                        object.mediaKey = "";
                    else {
                        object.mediaKey = [];
                        if (options.bytes !== Array)
                            object.mediaKey = $util.newBuffer(object.mediaKey);
                    }
                    object.fileName = "";
                    if (options.bytes === String)
                        object.fileEncSHA256 = "";
                    else {
                        object.fileEncSHA256 = [];
                        if (options.bytes !== Array)
                            object.fileEncSHA256 = $util.newBuffer(object.fileEncSHA256);
                    }
                    object.directPath = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.mediaKeyTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.mediaKeyTimestamp = options.longs === String ? "0" : 0;
                    object.contactVcard = false;
                    object.thumbnailDirectPath = "";
                    if (options.bytes === String)
                        object.thumbnailSHA256 = "";
                    else {
                        object.thumbnailSHA256 = [];
                        if (options.bytes !== Array)
                            object.thumbnailSHA256 = $util.newBuffer(object.thumbnailSHA256);
                    }
                    if (options.bytes === String)
                        object.thumbnailEncSHA256 = "";
                    else {
                        object.thumbnailEncSHA256 = [];
                        if (options.bytes !== Array)
                            object.thumbnailEncSHA256 = $util.newBuffer(object.thumbnailEncSHA256);
                    }
                    if (options.bytes === String)
                        object.JPEGThumbnail = "";
                    else {
                        object.JPEGThumbnail = [];
                        if (options.bytes !== Array)
                            object.JPEGThumbnail = $util.newBuffer(object.JPEGThumbnail);
                    }
                    object.contextInfo = null;
                    object.thumbnailHeight = 0;
                    object.thumbnailWidth = 0;
                    object.caption = "";
                    object.accessibilityLabel = "";
                }
                if (message.URL != null && message.hasOwnProperty("URL"))
                    object.URL = message.URL;
                if (message.mimetype != null && message.hasOwnProperty("mimetype"))
                    object.mimetype = message.mimetype;
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                    object.fileSHA256 = options.bytes === String ? $util.base64.encode(message.fileSHA256, 0, message.fileSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.fileSHA256) : message.fileSHA256;
                if (message.fileLength != null && message.hasOwnProperty("fileLength"))
                    if (typeof message.fileLength === "number")
                        object.fileLength = options.longs === String ? String(message.fileLength) : message.fileLength;
                    else
                        object.fileLength = options.longs === String ? $util.Long.prototype.toString.call(message.fileLength) : options.longs === Number ? new $util.LongBits(message.fileLength.low >>> 0, message.fileLength.high >>> 0).toNumber(true) : message.fileLength;
                if (message.pageCount != null && message.hasOwnProperty("pageCount"))
                    object.pageCount = message.pageCount;
                if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                    object.mediaKey = options.bytes === String ? $util.base64.encode(message.mediaKey, 0, message.mediaKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.mediaKey) : message.mediaKey;
                if (message.fileName != null && message.hasOwnProperty("fileName"))
                    object.fileName = message.fileName;
                if (message.fileEncSHA256 != null && message.hasOwnProperty("fileEncSHA256"))
                    object.fileEncSHA256 = options.bytes === String ? $util.base64.encode(message.fileEncSHA256, 0, message.fileEncSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.fileEncSHA256) : message.fileEncSHA256;
                if (message.directPath != null && message.hasOwnProperty("directPath"))
                    object.directPath = message.directPath;
                if (message.mediaKeyTimestamp != null && message.hasOwnProperty("mediaKeyTimestamp"))
                    if (typeof message.mediaKeyTimestamp === "number")
                        object.mediaKeyTimestamp = options.longs === String ? String(message.mediaKeyTimestamp) : message.mediaKeyTimestamp;
                    else
                        object.mediaKeyTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.mediaKeyTimestamp) : options.longs === Number ? new $util.LongBits(message.mediaKeyTimestamp.low >>> 0, message.mediaKeyTimestamp.high >>> 0).toNumber() : message.mediaKeyTimestamp;
                if (message.contactVcard != null && message.hasOwnProperty("contactVcard"))
                    object.contactVcard = message.contactVcard;
                if (message.thumbnailDirectPath != null && message.hasOwnProperty("thumbnailDirectPath"))
                    object.thumbnailDirectPath = message.thumbnailDirectPath;
                if (message.thumbnailSHA256 != null && message.hasOwnProperty("thumbnailSHA256"))
                    object.thumbnailSHA256 = options.bytes === String ? $util.base64.encode(message.thumbnailSHA256, 0, message.thumbnailSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.thumbnailSHA256) : message.thumbnailSHA256;
                if (message.thumbnailEncSHA256 != null && message.hasOwnProperty("thumbnailEncSHA256"))
                    object.thumbnailEncSHA256 = options.bytes === String ? $util.base64.encode(message.thumbnailEncSHA256, 0, message.thumbnailEncSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.thumbnailEncSHA256) : message.thumbnailEncSHA256;
                if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail"))
                    object.JPEGThumbnail = options.bytes === String ? $util.base64.encode(message.JPEGThumbnail, 0, message.JPEGThumbnail.length) : options.bytes === Array ? Array.prototype.slice.call(message.JPEGThumbnail) : message.JPEGThumbnail;
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                if (message.thumbnailHeight != null && message.hasOwnProperty("thumbnailHeight"))
                    object.thumbnailHeight = message.thumbnailHeight;
                if (message.thumbnailWidth != null && message.hasOwnProperty("thumbnailWidth"))
                    object.thumbnailWidth = message.thumbnailWidth;
                if (message.caption != null && message.hasOwnProperty("caption"))
                    object.caption = message.caption;
                if (message.accessibilityLabel != null && message.hasOwnProperty("accessibilityLabel"))
                    object.accessibilityLabel = message.accessibilityLabel;
                return object;
            };

            /**
             * Converts this DocumentMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.DocumentMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DocumentMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for DocumentMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.DocumentMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            DocumentMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.DocumentMessage";
            };

            return DocumentMessage;
        })();

        Message.LocationMessage = (function() {

            /**
             * Properties of a LocationMessage.
             * @memberof WAE2E.Message
             * @interface ILocationMessage
             * @property {number|null} [degreesLatitude] LocationMessage degreesLatitude
             * @property {number|null} [degreesLongitude] LocationMessage degreesLongitude
             * @property {string|null} [name] LocationMessage name
             * @property {string|null} [address] LocationMessage address
             * @property {string|null} [URL] LocationMessage URL
             * @property {boolean|null} [isLive] LocationMessage isLive
             * @property {number|null} [accuracyInMeters] LocationMessage accuracyInMeters
             * @property {number|null} [speedInMps] LocationMessage speedInMps
             * @property {number|null} [degreesClockwiseFromMagneticNorth] LocationMessage degreesClockwiseFromMagneticNorth
             * @property {string|null} [comment] LocationMessage comment
             * @property {Uint8Array|null} [JPEGThumbnail] LocationMessage JPEGThumbnail
             * @property {WAE2E.IContextInfo|null} [contextInfo] LocationMessage contextInfo
             */

            /**
             * Constructs a new LocationMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a LocationMessage.
             * @implements ILocationMessage
             * @constructor
             * @param {WAE2E.Message.ILocationMessage=} [properties] Properties to set
             */
            function LocationMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LocationMessage degreesLatitude.
             * @member {number} degreesLatitude
             * @memberof WAE2E.Message.LocationMessage
             * @instance
             */
            LocationMessage.prototype.degreesLatitude = 0;

            /**
             * LocationMessage degreesLongitude.
             * @member {number} degreesLongitude
             * @memberof WAE2E.Message.LocationMessage
             * @instance
             */
            LocationMessage.prototype.degreesLongitude = 0;

            /**
             * LocationMessage name.
             * @member {string} name
             * @memberof WAE2E.Message.LocationMessage
             * @instance
             */
            LocationMessage.prototype.name = "";

            /**
             * LocationMessage address.
             * @member {string} address
             * @memberof WAE2E.Message.LocationMessage
             * @instance
             */
            LocationMessage.prototype.address = "";

            /**
             * LocationMessage URL.
             * @member {string} URL
             * @memberof WAE2E.Message.LocationMessage
             * @instance
             */
            LocationMessage.prototype.URL = "";

            /**
             * LocationMessage isLive.
             * @member {boolean} isLive
             * @memberof WAE2E.Message.LocationMessage
             * @instance
             */
            LocationMessage.prototype.isLive = false;

            /**
             * LocationMessage accuracyInMeters.
             * @member {number} accuracyInMeters
             * @memberof WAE2E.Message.LocationMessage
             * @instance
             */
            LocationMessage.prototype.accuracyInMeters = 0;

            /**
             * LocationMessage speedInMps.
             * @member {number} speedInMps
             * @memberof WAE2E.Message.LocationMessage
             * @instance
             */
            LocationMessage.prototype.speedInMps = 0;

            /**
             * LocationMessage degreesClockwiseFromMagneticNorth.
             * @member {number} degreesClockwiseFromMagneticNorth
             * @memberof WAE2E.Message.LocationMessage
             * @instance
             */
            LocationMessage.prototype.degreesClockwiseFromMagneticNorth = 0;

            /**
             * LocationMessage comment.
             * @member {string} comment
             * @memberof WAE2E.Message.LocationMessage
             * @instance
             */
            LocationMessage.prototype.comment = "";

            /**
             * LocationMessage JPEGThumbnail.
             * @member {Uint8Array} JPEGThumbnail
             * @memberof WAE2E.Message.LocationMessage
             * @instance
             */
            LocationMessage.prototype.JPEGThumbnail = $util.newBuffer([]);

            /**
             * LocationMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.LocationMessage
             * @instance
             */
            LocationMessage.prototype.contextInfo = null;

            /**
             * Creates a new LocationMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.LocationMessage
             * @static
             * @param {WAE2E.Message.ILocationMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.LocationMessage} LocationMessage instance
             */
            LocationMessage.create = function create(properties) {
                return new LocationMessage(properties);
            };

            /**
             * Encodes the specified LocationMessage message. Does not implicitly {@link WAE2E.Message.LocationMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.LocationMessage
             * @static
             * @param {WAE2E.Message.ILocationMessage} message LocationMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LocationMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.degreesLatitude != null && Object.hasOwnProperty.call(message, "degreesLatitude"))
                    writer.uint32(/* id 1, wireType 1 =*/9).double(message.degreesLatitude);
                if (message.degreesLongitude != null && Object.hasOwnProperty.call(message, "degreesLongitude"))
                    writer.uint32(/* id 2, wireType 1 =*/17).double(message.degreesLongitude);
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
                if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.address);
                if (message.URL != null && Object.hasOwnProperty.call(message, "URL"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.URL);
                if (message.isLive != null && Object.hasOwnProperty.call(message, "isLive"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.isLive);
                if (message.accuracyInMeters != null && Object.hasOwnProperty.call(message, "accuracyInMeters"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.accuracyInMeters);
                if (message.speedInMps != null && Object.hasOwnProperty.call(message, "speedInMps"))
                    writer.uint32(/* id 8, wireType 5 =*/69).float(message.speedInMps);
                if (message.degreesClockwiseFromMagneticNorth != null && Object.hasOwnProperty.call(message, "degreesClockwiseFromMagneticNorth"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.degreesClockwiseFromMagneticNorth);
                if (message.comment != null && Object.hasOwnProperty.call(message, "comment"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.comment);
                if (message.JPEGThumbnail != null && Object.hasOwnProperty.call(message, "JPEGThumbnail"))
                    writer.uint32(/* id 16, wireType 2 =*/130).bytes(message.JPEGThumbnail);
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LocationMessage message, length delimited. Does not implicitly {@link WAE2E.Message.LocationMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.LocationMessage
             * @static
             * @param {WAE2E.Message.ILocationMessage} message LocationMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LocationMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LocationMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.LocationMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.LocationMessage} LocationMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LocationMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.LocationMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.degreesLatitude = reader.double();
                            break;
                        }
                    case 2: {
                            message.degreesLongitude = reader.double();
                            break;
                        }
                    case 3: {
                            message.name = reader.string();
                            break;
                        }
                    case 4: {
                            message.address = reader.string();
                            break;
                        }
                    case 5: {
                            message.URL = reader.string();
                            break;
                        }
                    case 6: {
                            message.isLive = reader.bool();
                            break;
                        }
                    case 7: {
                            message.accuracyInMeters = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.speedInMps = reader.float();
                            break;
                        }
                    case 9: {
                            message.degreesClockwiseFromMagneticNorth = reader.uint32();
                            break;
                        }
                    case 11: {
                            message.comment = reader.string();
                            break;
                        }
                    case 16: {
                            message.JPEGThumbnail = reader.bytes();
                            break;
                        }
                    case 17: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LocationMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.LocationMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.LocationMessage} LocationMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LocationMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LocationMessage message.
             * @function verify
             * @memberof WAE2E.Message.LocationMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LocationMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.degreesLatitude != null && message.hasOwnProperty("degreesLatitude"))
                    if (typeof message.degreesLatitude !== "number")
                        return "degreesLatitude: number expected";
                if (message.degreesLongitude != null && message.hasOwnProperty("degreesLongitude"))
                    if (typeof message.degreesLongitude !== "number")
                        return "degreesLongitude: number expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.address != null && message.hasOwnProperty("address"))
                    if (!$util.isString(message.address))
                        return "address: string expected";
                if (message.URL != null && message.hasOwnProperty("URL"))
                    if (!$util.isString(message.URL))
                        return "URL: string expected";
                if (message.isLive != null && message.hasOwnProperty("isLive"))
                    if (typeof message.isLive !== "boolean")
                        return "isLive: boolean expected";
                if (message.accuracyInMeters != null && message.hasOwnProperty("accuracyInMeters"))
                    if (!$util.isInteger(message.accuracyInMeters))
                        return "accuracyInMeters: integer expected";
                if (message.speedInMps != null && message.hasOwnProperty("speedInMps"))
                    if (typeof message.speedInMps !== "number")
                        return "speedInMps: number expected";
                if (message.degreesClockwiseFromMagneticNorth != null && message.hasOwnProperty("degreesClockwiseFromMagneticNorth"))
                    if (!$util.isInteger(message.degreesClockwiseFromMagneticNorth))
                        return "degreesClockwiseFromMagneticNorth: integer expected";
                if (message.comment != null && message.hasOwnProperty("comment"))
                    if (!$util.isString(message.comment))
                        return "comment: string expected";
                if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail"))
                    if (!(message.JPEGThumbnail && typeof message.JPEGThumbnail.length === "number" || $util.isString(message.JPEGThumbnail)))
                        return "JPEGThumbnail: buffer expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                return null;
            };

            /**
             * Creates a LocationMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.LocationMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.LocationMessage} LocationMessage
             */
            LocationMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.LocationMessage)
                    return object;
                var message = new $root.WAE2E.Message.LocationMessage();
                if (object.degreesLatitude != null)
                    message.degreesLatitude = Number(object.degreesLatitude);
                if (object.degreesLongitude != null)
                    message.degreesLongitude = Number(object.degreesLongitude);
                if (object.name != null)
                    message.name = String(object.name);
                if (object.address != null)
                    message.address = String(object.address);
                if (object.URL != null)
                    message.URL = String(object.URL);
                if (object.isLive != null)
                    message.isLive = Boolean(object.isLive);
                if (object.accuracyInMeters != null)
                    message.accuracyInMeters = object.accuracyInMeters >>> 0;
                if (object.speedInMps != null)
                    message.speedInMps = Number(object.speedInMps);
                if (object.degreesClockwiseFromMagneticNorth != null)
                    message.degreesClockwiseFromMagneticNorth = object.degreesClockwiseFromMagneticNorth >>> 0;
                if (object.comment != null)
                    message.comment = String(object.comment);
                if (object.JPEGThumbnail != null)
                    if (typeof object.JPEGThumbnail === "string")
                        $util.base64.decode(object.JPEGThumbnail, message.JPEGThumbnail = $util.newBuffer($util.base64.length(object.JPEGThumbnail)), 0);
                    else if (object.JPEGThumbnail.length >= 0)
                        message.JPEGThumbnail = object.JPEGThumbnail;
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.LocationMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                return message;
            };

            /**
             * Creates a plain object from a LocationMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.LocationMessage
             * @static
             * @param {WAE2E.Message.LocationMessage} message LocationMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LocationMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.degreesLatitude = 0;
                    object.degreesLongitude = 0;
                    object.name = "";
                    object.address = "";
                    object.URL = "";
                    object.isLive = false;
                    object.accuracyInMeters = 0;
                    object.speedInMps = 0;
                    object.degreesClockwiseFromMagneticNorth = 0;
                    object.comment = "";
                    if (options.bytes === String)
                        object.JPEGThumbnail = "";
                    else {
                        object.JPEGThumbnail = [];
                        if (options.bytes !== Array)
                            object.JPEGThumbnail = $util.newBuffer(object.JPEGThumbnail);
                    }
                    object.contextInfo = null;
                }
                if (message.degreesLatitude != null && message.hasOwnProperty("degreesLatitude"))
                    object.degreesLatitude = options.json && !isFinite(message.degreesLatitude) ? String(message.degreesLatitude) : message.degreesLatitude;
                if (message.degreesLongitude != null && message.hasOwnProperty("degreesLongitude"))
                    object.degreesLongitude = options.json && !isFinite(message.degreesLongitude) ? String(message.degreesLongitude) : message.degreesLongitude;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.address != null && message.hasOwnProperty("address"))
                    object.address = message.address;
                if (message.URL != null && message.hasOwnProperty("URL"))
                    object.URL = message.URL;
                if (message.isLive != null && message.hasOwnProperty("isLive"))
                    object.isLive = message.isLive;
                if (message.accuracyInMeters != null && message.hasOwnProperty("accuracyInMeters"))
                    object.accuracyInMeters = message.accuracyInMeters;
                if (message.speedInMps != null && message.hasOwnProperty("speedInMps"))
                    object.speedInMps = options.json && !isFinite(message.speedInMps) ? String(message.speedInMps) : message.speedInMps;
                if (message.degreesClockwiseFromMagneticNorth != null && message.hasOwnProperty("degreesClockwiseFromMagneticNorth"))
                    object.degreesClockwiseFromMagneticNorth = message.degreesClockwiseFromMagneticNorth;
                if (message.comment != null && message.hasOwnProperty("comment"))
                    object.comment = message.comment;
                if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail"))
                    object.JPEGThumbnail = options.bytes === String ? $util.base64.encode(message.JPEGThumbnail, 0, message.JPEGThumbnail.length) : options.bytes === Array ? Array.prototype.slice.call(message.JPEGThumbnail) : message.JPEGThumbnail;
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                return object;
            };

            /**
             * Converts this LocationMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.LocationMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LocationMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LocationMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.LocationMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LocationMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.LocationMessage";
            };

            return LocationMessage;
        })();

        Message.ContactMessage = (function() {

            /**
             * Properties of a ContactMessage.
             * @memberof WAE2E.Message
             * @interface IContactMessage
             * @property {string|null} [displayName] ContactMessage displayName
             * @property {string|null} [vcard] ContactMessage vcard
             * @property {WAE2E.IContextInfo|null} [contextInfo] ContactMessage contextInfo
             */

            /**
             * Constructs a new ContactMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a ContactMessage.
             * @implements IContactMessage
             * @constructor
             * @param {WAE2E.Message.IContactMessage=} [properties] Properties to set
             */
            function ContactMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ContactMessage displayName.
             * @member {string} displayName
             * @memberof WAE2E.Message.ContactMessage
             * @instance
             */
            ContactMessage.prototype.displayName = "";

            /**
             * ContactMessage vcard.
             * @member {string} vcard
             * @memberof WAE2E.Message.ContactMessage
             * @instance
             */
            ContactMessage.prototype.vcard = "";

            /**
             * ContactMessage contextInfo.
             * @member {WAE2E.IContextInfo|null|undefined} contextInfo
             * @memberof WAE2E.Message.ContactMessage
             * @instance
             */
            ContactMessage.prototype.contextInfo = null;

            /**
             * Creates a new ContactMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.ContactMessage
             * @static
             * @param {WAE2E.Message.IContactMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.ContactMessage} ContactMessage instance
             */
            ContactMessage.create = function create(properties) {
                return new ContactMessage(properties);
            };

            /**
             * Encodes the specified ContactMessage message. Does not implicitly {@link WAE2E.Message.ContactMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.ContactMessage
             * @static
             * @param {WAE2E.Message.IContactMessage} message ContactMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContactMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.displayName);
                if (message.vcard != null && Object.hasOwnProperty.call(message, "vcard"))
                    writer.uint32(/* id 16, wireType 2 =*/130).string(message.vcard);
                if (message.contextInfo != null && Object.hasOwnProperty.call(message, "contextInfo"))
                    $root.WAE2E.ContextInfo.encode(message.contextInfo, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ContactMessage message, length delimited. Does not implicitly {@link WAE2E.Message.ContactMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.ContactMessage
             * @static
             * @param {WAE2E.Message.IContactMessage} message ContactMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContactMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ContactMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.ContactMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.ContactMessage} ContactMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContactMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.ContactMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.displayName = reader.string();
                            break;
                        }
                    case 16: {
                            message.vcard = reader.string();
                            break;
                        }
                    case 17: {
                            message.contextInfo = $root.WAE2E.ContextInfo.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ContactMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.ContactMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.ContactMessage} ContactMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContactMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ContactMessage message.
             * @function verify
             * @memberof WAE2E.Message.ContactMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ContactMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.displayName != null && message.hasOwnProperty("displayName"))
                    if (!$util.isString(message.displayName))
                        return "displayName: string expected";
                if (message.vcard != null && message.hasOwnProperty("vcard"))
                    if (!$util.isString(message.vcard))
                        return "vcard: string expected";
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo")) {
                    var error = $root.WAE2E.ContextInfo.verify(message.contextInfo);
                    if (error)
                        return "contextInfo." + error;
                }
                return null;
            };

            /**
             * Creates a ContactMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.ContactMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.ContactMessage} ContactMessage
             */
            ContactMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.ContactMessage)
                    return object;
                var message = new $root.WAE2E.Message.ContactMessage();
                if (object.displayName != null)
                    message.displayName = String(object.displayName);
                if (object.vcard != null)
                    message.vcard = String(object.vcard);
                if (object.contextInfo != null) {
                    if (typeof object.contextInfo !== "object")
                        throw TypeError(".WAE2E.Message.ContactMessage.contextInfo: object expected");
                    message.contextInfo = $root.WAE2E.ContextInfo.fromObject(object.contextInfo);
                }
                return message;
            };

            /**
             * Creates a plain object from a ContactMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.ContactMessage
             * @static
             * @param {WAE2E.Message.ContactMessage} message ContactMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ContactMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.displayName = "";
                    object.vcard = "";
                    object.contextInfo = null;
                }
                if (message.displayName != null && message.hasOwnProperty("displayName"))
                    object.displayName = message.displayName;
                if (message.vcard != null && message.hasOwnProperty("vcard"))
                    object.vcard = message.vcard;
                if (message.contextInfo != null && message.hasOwnProperty("contextInfo"))
                    object.contextInfo = $root.WAE2E.ContextInfo.toObject(message.contextInfo, options);
                return object;
            };

            /**
             * Converts this ContactMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.ContactMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ContactMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ContactMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.ContactMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ContactMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.ContactMessage";
            };

            return ContactMessage;
        })();

        Message.SenderKeyDistributionMessage = (function() {

            /**
             * Properties of a SenderKeyDistributionMessage.
             * @memberof WAE2E.Message
             * @interface ISenderKeyDistributionMessage
             * @property {string|null} [groupID] SenderKeyDistributionMessage groupID
             * @property {Uint8Array|null} [axolotlSenderKeyDistributionMessage] SenderKeyDistributionMessage axolotlSenderKeyDistributionMessage
             */

            /**
             * Constructs a new SenderKeyDistributionMessage.
             * @memberof WAE2E.Message
             * @classdesc Represents a SenderKeyDistributionMessage.
             * @implements ISenderKeyDistributionMessage
             * @constructor
             * @param {WAE2E.Message.ISenderKeyDistributionMessage=} [properties] Properties to set
             */
            function SenderKeyDistributionMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SenderKeyDistributionMessage groupID.
             * @member {string} groupID
             * @memberof WAE2E.Message.SenderKeyDistributionMessage
             * @instance
             */
            SenderKeyDistributionMessage.prototype.groupID = "";

            /**
             * SenderKeyDistributionMessage axolotlSenderKeyDistributionMessage.
             * @member {Uint8Array} axolotlSenderKeyDistributionMessage
             * @memberof WAE2E.Message.SenderKeyDistributionMessage
             * @instance
             */
            SenderKeyDistributionMessage.prototype.axolotlSenderKeyDistributionMessage = $util.newBuffer([]);

            /**
             * Creates a new SenderKeyDistributionMessage instance using the specified properties.
             * @function create
             * @memberof WAE2E.Message.SenderKeyDistributionMessage
             * @static
             * @param {WAE2E.Message.ISenderKeyDistributionMessage=} [properties] Properties to set
             * @returns {WAE2E.Message.SenderKeyDistributionMessage} SenderKeyDistributionMessage instance
             */
            SenderKeyDistributionMessage.create = function create(properties) {
                return new SenderKeyDistributionMessage(properties);
            };

            /**
             * Encodes the specified SenderKeyDistributionMessage message. Does not implicitly {@link WAE2E.Message.SenderKeyDistributionMessage.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.Message.SenderKeyDistributionMessage
             * @static
             * @param {WAE2E.Message.ISenderKeyDistributionMessage} message SenderKeyDistributionMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SenderKeyDistributionMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.groupID != null && Object.hasOwnProperty.call(message, "groupID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupID);
                if (message.axolotlSenderKeyDistributionMessage != null && Object.hasOwnProperty.call(message, "axolotlSenderKeyDistributionMessage"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.axolotlSenderKeyDistributionMessage);
                return writer;
            };

            /**
             * Encodes the specified SenderKeyDistributionMessage message, length delimited. Does not implicitly {@link WAE2E.Message.SenderKeyDistributionMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.Message.SenderKeyDistributionMessage
             * @static
             * @param {WAE2E.Message.ISenderKeyDistributionMessage} message SenderKeyDistributionMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SenderKeyDistributionMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SenderKeyDistributionMessage message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.Message.SenderKeyDistributionMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.Message.SenderKeyDistributionMessage} SenderKeyDistributionMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SenderKeyDistributionMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Message.SenderKeyDistributionMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.groupID = reader.string();
                            break;
                        }
                    case 2: {
                            message.axolotlSenderKeyDistributionMessage = reader.bytes();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SenderKeyDistributionMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.Message.SenderKeyDistributionMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.Message.SenderKeyDistributionMessage} SenderKeyDistributionMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SenderKeyDistributionMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SenderKeyDistributionMessage message.
             * @function verify
             * @memberof WAE2E.Message.SenderKeyDistributionMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SenderKeyDistributionMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.groupID != null && message.hasOwnProperty("groupID"))
                    if (!$util.isString(message.groupID))
                        return "groupID: string expected";
                if (message.axolotlSenderKeyDistributionMessage != null && message.hasOwnProperty("axolotlSenderKeyDistributionMessage"))
                    if (!(message.axolotlSenderKeyDistributionMessage && typeof message.axolotlSenderKeyDistributionMessage.length === "number" || $util.isString(message.axolotlSenderKeyDistributionMessage)))
                        return "axolotlSenderKeyDistributionMessage: buffer expected";
                return null;
            };

            /**
             * Creates a SenderKeyDistributionMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.Message.SenderKeyDistributionMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.Message.SenderKeyDistributionMessage} SenderKeyDistributionMessage
             */
            SenderKeyDistributionMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.Message.SenderKeyDistributionMessage)
                    return object;
                var message = new $root.WAE2E.Message.SenderKeyDistributionMessage();
                if (object.groupID != null)
                    message.groupID = String(object.groupID);
                if (object.axolotlSenderKeyDistributionMessage != null)
                    if (typeof object.axolotlSenderKeyDistributionMessage === "string")
                        $util.base64.decode(object.axolotlSenderKeyDistributionMessage, message.axolotlSenderKeyDistributionMessage = $util.newBuffer($util.base64.length(object.axolotlSenderKeyDistributionMessage)), 0);
                    else if (object.axolotlSenderKeyDistributionMessage.length >= 0)
                        message.axolotlSenderKeyDistributionMessage = object.axolotlSenderKeyDistributionMessage;
                return message;
            };

            /**
             * Creates a plain object from a SenderKeyDistributionMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.Message.SenderKeyDistributionMessage
             * @static
             * @param {WAE2E.Message.SenderKeyDistributionMessage} message SenderKeyDistributionMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SenderKeyDistributionMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.groupID = "";
                    if (options.bytes === String)
                        object.axolotlSenderKeyDistributionMessage = "";
                    else {
                        object.axolotlSenderKeyDistributionMessage = [];
                        if (options.bytes !== Array)
                            object.axolotlSenderKeyDistributionMessage = $util.newBuffer(object.axolotlSenderKeyDistributionMessage);
                    }
                }
                if (message.groupID != null && message.hasOwnProperty("groupID"))
                    object.groupID = message.groupID;
                if (message.axolotlSenderKeyDistributionMessage != null && message.hasOwnProperty("axolotlSenderKeyDistributionMessage"))
                    object.axolotlSenderKeyDistributionMessage = options.bytes === String ? $util.base64.encode(message.axolotlSenderKeyDistributionMessage, 0, message.axolotlSenderKeyDistributionMessage.length) : options.bytes === Array ? Array.prototype.slice.call(message.axolotlSenderKeyDistributionMessage) : message.axolotlSenderKeyDistributionMessage;
                return object;
            };

            /**
             * Converts this SenderKeyDistributionMessage to JSON.
             * @function toJSON
             * @memberof WAE2E.Message.SenderKeyDistributionMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SenderKeyDistributionMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SenderKeyDistributionMessage
             * @function getTypeUrl
             * @memberof WAE2E.Message.SenderKeyDistributionMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SenderKeyDistributionMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.Message.SenderKeyDistributionMessage";
            };

            return SenderKeyDistributionMessage;
        })();

        return Message;
    })();

    WAE2E.ContextInfo = (function() {

        /**
         * Properties of a ContextInfo.
         * @memberof WAE2E
         * @interface IContextInfo
         * @property {string|null} [stanzaID] ContextInfo stanzaID
         * @property {string|null} [participant] ContextInfo participant
         * @property {WAE2E.IMessage|null} [quotedMessage] ContextInfo quotedMessage
         * @property {string|null} [remoteJID] ContextInfo remoteJID
         * @property {Array.<string>|null} [mentionedJID] ContextInfo mentionedJID
         * @property {string|null} [conversionSource] ContextInfo conversionSource
         * @property {Uint8Array|null} [conversionData] ContextInfo conversionData
         * @property {number|null} [conversionDelaySeconds] ContextInfo conversionDelaySeconds
         * @property {number|null} [forwardingScore] ContextInfo forwardingScore
         * @property {boolean|null} [isForwarded] ContextInfo isForwarded
         * @property {WAE2E.ContextInfo.IAdReplyInfo|null} [quotedAd] ContextInfo quotedAd
         * @property {WAProtocol.IMessageKey|null} [placeholderKey] ContextInfo placeholderKey
         * @property {number|null} [expiration] ContextInfo expiration
         * @property {number|Long|null} [ephemeralSettingTimestamp] ContextInfo ephemeralSettingTimestamp
         * @property {Uint8Array|null} [ephemeralSharedSecret] ContextInfo ephemeralSharedSecret
         * @property {WAE2E.ContextInfo.IExternalAdReplyInfo|null} [externalAdReply] ContextInfo externalAdReply
         * @property {string|null} [entryPointConversionSource] ContextInfo entryPointConversionSource
         * @property {string|null} [entryPointConversionApp] ContextInfo entryPointConversionApp
         * @property {number|null} [entryPointConversionDelaySeconds] ContextInfo entryPointConversionDelaySeconds
         * @property {WAE2E.IDisappearingMode|null} [disappearingMode] ContextInfo disappearingMode
         * @property {WAE2E.IActionLink|null} [actionLink] ContextInfo actionLink
         * @property {string|null} [groupSubject] ContextInfo groupSubject
         * @property {string|null} [parentGroupJID] ContextInfo parentGroupJID
         * @property {string|null} [trustBannerType] ContextInfo trustBannerType
         * @property {number|null} [trustBannerAction] ContextInfo trustBannerAction
         * @property {boolean|null} [isSampled] ContextInfo isSampled
         * @property {Array.<WAE2E.IGroupMention>|null} [groupMentions] ContextInfo groupMentions
         * @property {WAE2E.ContextInfo.IUTMInfo|null} [utm] ContextInfo utm
         * @property {WAE2E.ContextInfo.IForwardedNewsletterMessageInfo|null} [forwardedNewsletterMessageInfo] ContextInfo forwardedNewsletterMessageInfo
         * @property {WAE2E.ContextInfo.IBusinessMessageForwardInfo|null} [businessMessageForwardInfo] ContextInfo businessMessageForwardInfo
         * @property {string|null} [smbClientCampaignID] ContextInfo smbClientCampaignID
         * @property {string|null} [smbServerCampaignID] ContextInfo smbServerCampaignID
         * @property {WAE2E.ContextInfo.IDataSharingContext|null} [dataSharingContext] ContextInfo dataSharingContext
         * @property {boolean|null} [alwaysShowAdAttribution] ContextInfo alwaysShowAdAttribution
         * @property {WAE2E.ContextInfo.IFeatureEligibilities|null} [featureEligibilities] ContextInfo featureEligibilities
         * @property {string|null} [entryPointConversionExternalSource] ContextInfo entryPointConversionExternalSource
         * @property {string|null} [entryPointConversionExternalMedium] ContextInfo entryPointConversionExternalMedium
         * @property {WAE2E.IGroupInfoMetadata|null} [groupInfoMetadata] ContextInfo groupInfoMetadata
         */

        /**
         * Constructs a new ContextInfo.
         * @memberof WAE2E
         * @classdesc Represents a ContextInfo.
         * @implements IContextInfo
         * @constructor
         * @param {WAE2E.IContextInfo=} [properties] Properties to set
         */
        function ContextInfo(properties) {
            this.mentionedJID = [];
            this.groupMentions = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ContextInfo stanzaID.
         * @member {string} stanzaID
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.stanzaID = "";

        /**
         * ContextInfo participant.
         * @member {string} participant
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.participant = "";

        /**
         * ContextInfo quotedMessage.
         * @member {WAE2E.IMessage|null|undefined} quotedMessage
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.quotedMessage = null;

        /**
         * ContextInfo remoteJID.
         * @member {string} remoteJID
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.remoteJID = "";

        /**
         * ContextInfo mentionedJID.
         * @member {Array.<string>} mentionedJID
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.mentionedJID = $util.emptyArray;

        /**
         * ContextInfo conversionSource.
         * @member {string} conversionSource
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.conversionSource = "";

        /**
         * ContextInfo conversionData.
         * @member {Uint8Array} conversionData
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.conversionData = $util.newBuffer([]);

        /**
         * ContextInfo conversionDelaySeconds.
         * @member {number} conversionDelaySeconds
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.conversionDelaySeconds = 0;

        /**
         * ContextInfo forwardingScore.
         * @member {number} forwardingScore
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.forwardingScore = 0;

        /**
         * ContextInfo isForwarded.
         * @member {boolean} isForwarded
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.isForwarded = false;

        /**
         * ContextInfo quotedAd.
         * @member {WAE2E.ContextInfo.IAdReplyInfo|null|undefined} quotedAd
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.quotedAd = null;

        /**
         * ContextInfo placeholderKey.
         * @member {WAProtocol.IMessageKey|null|undefined} placeholderKey
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.placeholderKey = null;

        /**
         * ContextInfo expiration.
         * @member {number} expiration
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.expiration = 0;

        /**
         * ContextInfo ephemeralSettingTimestamp.
         * @member {number|Long} ephemeralSettingTimestamp
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.ephemeralSettingTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * ContextInfo ephemeralSharedSecret.
         * @member {Uint8Array} ephemeralSharedSecret
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.ephemeralSharedSecret = $util.newBuffer([]);

        /**
         * ContextInfo externalAdReply.
         * @member {WAE2E.ContextInfo.IExternalAdReplyInfo|null|undefined} externalAdReply
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.externalAdReply = null;

        /**
         * ContextInfo entryPointConversionSource.
         * @member {string} entryPointConversionSource
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.entryPointConversionSource = "";

        /**
         * ContextInfo entryPointConversionApp.
         * @member {string} entryPointConversionApp
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.entryPointConversionApp = "";

        /**
         * ContextInfo entryPointConversionDelaySeconds.
         * @member {number} entryPointConversionDelaySeconds
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.entryPointConversionDelaySeconds = 0;

        /**
         * ContextInfo disappearingMode.
         * @member {WAE2E.IDisappearingMode|null|undefined} disappearingMode
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.disappearingMode = null;

        /**
         * ContextInfo actionLink.
         * @member {WAE2E.IActionLink|null|undefined} actionLink
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.actionLink = null;

        /**
         * ContextInfo groupSubject.
         * @member {string} groupSubject
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.groupSubject = "";

        /**
         * ContextInfo parentGroupJID.
         * @member {string} parentGroupJID
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.parentGroupJID = "";

        /**
         * ContextInfo trustBannerType.
         * @member {string} trustBannerType
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.trustBannerType = "";

        /**
         * ContextInfo trustBannerAction.
         * @member {number} trustBannerAction
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.trustBannerAction = 0;

        /**
         * ContextInfo isSampled.
         * @member {boolean} isSampled
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.isSampled = false;

        /**
         * ContextInfo groupMentions.
         * @member {Array.<WAE2E.IGroupMention>} groupMentions
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.groupMentions = $util.emptyArray;

        /**
         * ContextInfo utm.
         * @member {WAE2E.ContextInfo.IUTMInfo|null|undefined} utm
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.utm = null;

        /**
         * ContextInfo forwardedNewsletterMessageInfo.
         * @member {WAE2E.ContextInfo.IForwardedNewsletterMessageInfo|null|undefined} forwardedNewsletterMessageInfo
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.forwardedNewsletterMessageInfo = null;

        /**
         * ContextInfo businessMessageForwardInfo.
         * @member {WAE2E.ContextInfo.IBusinessMessageForwardInfo|null|undefined} businessMessageForwardInfo
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.businessMessageForwardInfo = null;

        /**
         * ContextInfo smbClientCampaignID.
         * @member {string} smbClientCampaignID
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.smbClientCampaignID = "";

        /**
         * ContextInfo smbServerCampaignID.
         * @member {string} smbServerCampaignID
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.smbServerCampaignID = "";

        /**
         * ContextInfo dataSharingContext.
         * @member {WAE2E.ContextInfo.IDataSharingContext|null|undefined} dataSharingContext
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.dataSharingContext = null;

        /**
         * ContextInfo alwaysShowAdAttribution.
         * @member {boolean} alwaysShowAdAttribution
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.alwaysShowAdAttribution = false;

        /**
         * ContextInfo featureEligibilities.
         * @member {WAE2E.ContextInfo.IFeatureEligibilities|null|undefined} featureEligibilities
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.featureEligibilities = null;

        /**
         * ContextInfo entryPointConversionExternalSource.
         * @member {string} entryPointConversionExternalSource
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.entryPointConversionExternalSource = "";

        /**
         * ContextInfo entryPointConversionExternalMedium.
         * @member {string} entryPointConversionExternalMedium
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.entryPointConversionExternalMedium = "";

        /**
         * ContextInfo groupInfoMetadata.
         * @member {WAE2E.IGroupInfoMetadata|null|undefined} groupInfoMetadata
         * @memberof WAE2E.ContextInfo
         * @instance
         */
        ContextInfo.prototype.groupInfoMetadata = null;

        /**
         * Creates a new ContextInfo instance using the specified properties.
         * @function create
         * @memberof WAE2E.ContextInfo
         * @static
         * @param {WAE2E.IContextInfo=} [properties] Properties to set
         * @returns {WAE2E.ContextInfo} ContextInfo instance
         */
        ContextInfo.create = function create(properties) {
            return new ContextInfo(properties);
        };

        /**
         * Encodes the specified ContextInfo message. Does not implicitly {@link WAE2E.ContextInfo.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.ContextInfo
         * @static
         * @param {WAE2E.IContextInfo} message ContextInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ContextInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.stanzaID != null && Object.hasOwnProperty.call(message, "stanzaID"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.stanzaID);
            if (message.participant != null && Object.hasOwnProperty.call(message, "participant"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.participant);
            if (message.quotedMessage != null && Object.hasOwnProperty.call(message, "quotedMessage"))
                $root.WAE2E.Message.encode(message.quotedMessage, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.remoteJID != null && Object.hasOwnProperty.call(message, "remoteJID"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.remoteJID);
            if (message.mentionedJID != null && message.mentionedJID.length)
                for (var i = 0; i < message.mentionedJID.length; ++i)
                    writer.uint32(/* id 15, wireType 2 =*/122).string(message.mentionedJID[i]);
            if (message.conversionSource != null && Object.hasOwnProperty.call(message, "conversionSource"))
                writer.uint32(/* id 18, wireType 2 =*/146).string(message.conversionSource);
            if (message.conversionData != null && Object.hasOwnProperty.call(message, "conversionData"))
                writer.uint32(/* id 19, wireType 2 =*/154).bytes(message.conversionData);
            if (message.conversionDelaySeconds != null && Object.hasOwnProperty.call(message, "conversionDelaySeconds"))
                writer.uint32(/* id 20, wireType 0 =*/160).uint32(message.conversionDelaySeconds);
            if (message.forwardingScore != null && Object.hasOwnProperty.call(message, "forwardingScore"))
                writer.uint32(/* id 21, wireType 0 =*/168).uint32(message.forwardingScore);
            if (message.isForwarded != null && Object.hasOwnProperty.call(message, "isForwarded"))
                writer.uint32(/* id 22, wireType 0 =*/176).bool(message.isForwarded);
            if (message.quotedAd != null && Object.hasOwnProperty.call(message, "quotedAd"))
                $root.WAE2E.ContextInfo.AdReplyInfo.encode(message.quotedAd, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
            if (message.placeholderKey != null && Object.hasOwnProperty.call(message, "placeholderKey"))
                $root.WAProtocol.MessageKey.encode(message.placeholderKey, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
            if (message.expiration != null && Object.hasOwnProperty.call(message, "expiration"))
                writer.uint32(/* id 25, wireType 0 =*/200).uint32(message.expiration);
            if (message.ephemeralSettingTimestamp != null && Object.hasOwnProperty.call(message, "ephemeralSettingTimestamp"))
                writer.uint32(/* id 26, wireType 0 =*/208).int64(message.ephemeralSettingTimestamp);
            if (message.ephemeralSharedSecret != null && Object.hasOwnProperty.call(message, "ephemeralSharedSecret"))
                writer.uint32(/* id 27, wireType 2 =*/218).bytes(message.ephemeralSharedSecret);
            if (message.externalAdReply != null && Object.hasOwnProperty.call(message, "externalAdReply"))
                $root.WAE2E.ContextInfo.ExternalAdReplyInfo.encode(message.externalAdReply, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();
            if (message.entryPointConversionSource != null && Object.hasOwnProperty.call(message, "entryPointConversionSource"))
                writer.uint32(/* id 29, wireType 2 =*/234).string(message.entryPointConversionSource);
            if (message.entryPointConversionApp != null && Object.hasOwnProperty.call(message, "entryPointConversionApp"))
                writer.uint32(/* id 30, wireType 2 =*/242).string(message.entryPointConversionApp);
            if (message.entryPointConversionDelaySeconds != null && Object.hasOwnProperty.call(message, "entryPointConversionDelaySeconds"))
                writer.uint32(/* id 31, wireType 0 =*/248).uint32(message.entryPointConversionDelaySeconds);
            if (message.disappearingMode != null && Object.hasOwnProperty.call(message, "disappearingMode"))
                $root.WAE2E.DisappearingMode.encode(message.disappearingMode, writer.uint32(/* id 32, wireType 2 =*/258).fork()).ldelim();
            if (message.actionLink != null && Object.hasOwnProperty.call(message, "actionLink"))
                $root.WAE2E.ActionLink.encode(message.actionLink, writer.uint32(/* id 33, wireType 2 =*/266).fork()).ldelim();
            if (message.groupSubject != null && Object.hasOwnProperty.call(message, "groupSubject"))
                writer.uint32(/* id 34, wireType 2 =*/274).string(message.groupSubject);
            if (message.parentGroupJID != null && Object.hasOwnProperty.call(message, "parentGroupJID"))
                writer.uint32(/* id 35, wireType 2 =*/282).string(message.parentGroupJID);
            if (message.trustBannerType != null && Object.hasOwnProperty.call(message, "trustBannerType"))
                writer.uint32(/* id 37, wireType 2 =*/298).string(message.trustBannerType);
            if (message.trustBannerAction != null && Object.hasOwnProperty.call(message, "trustBannerAction"))
                writer.uint32(/* id 38, wireType 0 =*/304).uint32(message.trustBannerAction);
            if (message.isSampled != null && Object.hasOwnProperty.call(message, "isSampled"))
                writer.uint32(/* id 39, wireType 0 =*/312).bool(message.isSampled);
            if (message.groupMentions != null && message.groupMentions.length)
                for (var i = 0; i < message.groupMentions.length; ++i)
                    $root.WAE2E.GroupMention.encode(message.groupMentions[i], writer.uint32(/* id 40, wireType 2 =*/322).fork()).ldelim();
            if (message.utm != null && Object.hasOwnProperty.call(message, "utm"))
                $root.WAE2E.ContextInfo.UTMInfo.encode(message.utm, writer.uint32(/* id 41, wireType 2 =*/330).fork()).ldelim();
            if (message.forwardedNewsletterMessageInfo != null && Object.hasOwnProperty.call(message, "forwardedNewsletterMessageInfo"))
                $root.WAE2E.ContextInfo.ForwardedNewsletterMessageInfo.encode(message.forwardedNewsletterMessageInfo, writer.uint32(/* id 43, wireType 2 =*/346).fork()).ldelim();
            if (message.businessMessageForwardInfo != null && Object.hasOwnProperty.call(message, "businessMessageForwardInfo"))
                $root.WAE2E.ContextInfo.BusinessMessageForwardInfo.encode(message.businessMessageForwardInfo, writer.uint32(/* id 44, wireType 2 =*/354).fork()).ldelim();
            if (message.smbClientCampaignID != null && Object.hasOwnProperty.call(message, "smbClientCampaignID"))
                writer.uint32(/* id 45, wireType 2 =*/362).string(message.smbClientCampaignID);
            if (message.smbServerCampaignID != null && Object.hasOwnProperty.call(message, "smbServerCampaignID"))
                writer.uint32(/* id 46, wireType 2 =*/370).string(message.smbServerCampaignID);
            if (message.dataSharingContext != null && Object.hasOwnProperty.call(message, "dataSharingContext"))
                $root.WAE2E.ContextInfo.DataSharingContext.encode(message.dataSharingContext, writer.uint32(/* id 47, wireType 2 =*/378).fork()).ldelim();
            if (message.alwaysShowAdAttribution != null && Object.hasOwnProperty.call(message, "alwaysShowAdAttribution"))
                writer.uint32(/* id 48, wireType 0 =*/384).bool(message.alwaysShowAdAttribution);
            if (message.featureEligibilities != null && Object.hasOwnProperty.call(message, "featureEligibilities"))
                $root.WAE2E.ContextInfo.FeatureEligibilities.encode(message.featureEligibilities, writer.uint32(/* id 49, wireType 2 =*/394).fork()).ldelim();
            if (message.entryPointConversionExternalSource != null && Object.hasOwnProperty.call(message, "entryPointConversionExternalSource"))
                writer.uint32(/* id 50, wireType 2 =*/402).string(message.entryPointConversionExternalSource);
            if (message.entryPointConversionExternalMedium != null && Object.hasOwnProperty.call(message, "entryPointConversionExternalMedium"))
                writer.uint32(/* id 51, wireType 2 =*/410).string(message.entryPointConversionExternalMedium);
            if (message.groupInfoMetadata != null && Object.hasOwnProperty.call(message, "groupInfoMetadata"))
                $root.WAE2E.GroupInfoMetadata.encode(message.groupInfoMetadata, writer.uint32(/* id 52, wireType 2 =*/418).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ContextInfo message, length delimited. Does not implicitly {@link WAE2E.ContextInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.ContextInfo
         * @static
         * @param {WAE2E.IContextInfo} message ContextInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ContextInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ContextInfo message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.ContextInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.ContextInfo} ContextInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ContextInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.ContextInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.stanzaID = reader.string();
                        break;
                    }
                case 2: {
                        message.participant = reader.string();
                        break;
                    }
                case 3: {
                        message.quotedMessage = $root.WAE2E.Message.decode(reader, reader.uint32());
                        break;
                    }
                case 4: {
                        message.remoteJID = reader.string();
                        break;
                    }
                case 15: {
                        if (!(message.mentionedJID && message.mentionedJID.length))
                            message.mentionedJID = [];
                        message.mentionedJID.push(reader.string());
                        break;
                    }
                case 18: {
                        message.conversionSource = reader.string();
                        break;
                    }
                case 19: {
                        message.conversionData = reader.bytes();
                        break;
                    }
                case 20: {
                        message.conversionDelaySeconds = reader.uint32();
                        break;
                    }
                case 21: {
                        message.forwardingScore = reader.uint32();
                        break;
                    }
                case 22: {
                        message.isForwarded = reader.bool();
                        break;
                    }
                case 23: {
                        message.quotedAd = $root.WAE2E.ContextInfo.AdReplyInfo.decode(reader, reader.uint32());
                        break;
                    }
                case 24: {
                        message.placeholderKey = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                        break;
                    }
                case 25: {
                        message.expiration = reader.uint32();
                        break;
                    }
                case 26: {
                        message.ephemeralSettingTimestamp = reader.int64();
                        break;
                    }
                case 27: {
                        message.ephemeralSharedSecret = reader.bytes();
                        break;
                    }
                case 28: {
                        message.externalAdReply = $root.WAE2E.ContextInfo.ExternalAdReplyInfo.decode(reader, reader.uint32());
                        break;
                    }
                case 29: {
                        message.entryPointConversionSource = reader.string();
                        break;
                    }
                case 30: {
                        message.entryPointConversionApp = reader.string();
                        break;
                    }
                case 31: {
                        message.entryPointConversionDelaySeconds = reader.uint32();
                        break;
                    }
                case 32: {
                        message.disappearingMode = $root.WAE2E.DisappearingMode.decode(reader, reader.uint32());
                        break;
                    }
                case 33: {
                        message.actionLink = $root.WAE2E.ActionLink.decode(reader, reader.uint32());
                        break;
                    }
                case 34: {
                        message.groupSubject = reader.string();
                        break;
                    }
                case 35: {
                        message.parentGroupJID = reader.string();
                        break;
                    }
                case 37: {
                        message.trustBannerType = reader.string();
                        break;
                    }
                case 38: {
                        message.trustBannerAction = reader.uint32();
                        break;
                    }
                case 39: {
                        message.isSampled = reader.bool();
                        break;
                    }
                case 40: {
                        if (!(message.groupMentions && message.groupMentions.length))
                            message.groupMentions = [];
                        message.groupMentions.push($root.WAE2E.GroupMention.decode(reader, reader.uint32()));
                        break;
                    }
                case 41: {
                        message.utm = $root.WAE2E.ContextInfo.UTMInfo.decode(reader, reader.uint32());
                        break;
                    }
                case 43: {
                        message.forwardedNewsletterMessageInfo = $root.WAE2E.ContextInfo.ForwardedNewsletterMessageInfo.decode(reader, reader.uint32());
                        break;
                    }
                case 44: {
                        message.businessMessageForwardInfo = $root.WAE2E.ContextInfo.BusinessMessageForwardInfo.decode(reader, reader.uint32());
                        break;
                    }
                case 45: {
                        message.smbClientCampaignID = reader.string();
                        break;
                    }
                case 46: {
                        message.smbServerCampaignID = reader.string();
                        break;
                    }
                case 47: {
                        message.dataSharingContext = $root.WAE2E.ContextInfo.DataSharingContext.decode(reader, reader.uint32());
                        break;
                    }
                case 48: {
                        message.alwaysShowAdAttribution = reader.bool();
                        break;
                    }
                case 49: {
                        message.featureEligibilities = $root.WAE2E.ContextInfo.FeatureEligibilities.decode(reader, reader.uint32());
                        break;
                    }
                case 50: {
                        message.entryPointConversionExternalSource = reader.string();
                        break;
                    }
                case 51: {
                        message.entryPointConversionExternalMedium = reader.string();
                        break;
                    }
                case 52: {
                        message.groupInfoMetadata = $root.WAE2E.GroupInfoMetadata.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ContextInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.ContextInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.ContextInfo} ContextInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ContextInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ContextInfo message.
         * @function verify
         * @memberof WAE2E.ContextInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ContextInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.stanzaID != null && message.hasOwnProperty("stanzaID"))
                if (!$util.isString(message.stanzaID))
                    return "stanzaID: string expected";
            if (message.participant != null && message.hasOwnProperty("participant"))
                if (!$util.isString(message.participant))
                    return "participant: string expected";
            if (message.quotedMessage != null && message.hasOwnProperty("quotedMessage")) {
                var error = $root.WAE2E.Message.verify(message.quotedMessage);
                if (error)
                    return "quotedMessage." + error;
            }
            if (message.remoteJID != null && message.hasOwnProperty("remoteJID"))
                if (!$util.isString(message.remoteJID))
                    return "remoteJID: string expected";
            if (message.mentionedJID != null && message.hasOwnProperty("mentionedJID")) {
                if (!Array.isArray(message.mentionedJID))
                    return "mentionedJID: array expected";
                for (var i = 0; i < message.mentionedJID.length; ++i)
                    if (!$util.isString(message.mentionedJID[i]))
                        return "mentionedJID: string[] expected";
            }
            if (message.conversionSource != null && message.hasOwnProperty("conversionSource"))
                if (!$util.isString(message.conversionSource))
                    return "conversionSource: string expected";
            if (message.conversionData != null && message.hasOwnProperty("conversionData"))
                if (!(message.conversionData && typeof message.conversionData.length === "number" || $util.isString(message.conversionData)))
                    return "conversionData: buffer expected";
            if (message.conversionDelaySeconds != null && message.hasOwnProperty("conversionDelaySeconds"))
                if (!$util.isInteger(message.conversionDelaySeconds))
                    return "conversionDelaySeconds: integer expected";
            if (message.forwardingScore != null && message.hasOwnProperty("forwardingScore"))
                if (!$util.isInteger(message.forwardingScore))
                    return "forwardingScore: integer expected";
            if (message.isForwarded != null && message.hasOwnProperty("isForwarded"))
                if (typeof message.isForwarded !== "boolean")
                    return "isForwarded: boolean expected";
            if (message.quotedAd != null && message.hasOwnProperty("quotedAd")) {
                var error = $root.WAE2E.ContextInfo.AdReplyInfo.verify(message.quotedAd);
                if (error)
                    return "quotedAd." + error;
            }
            if (message.placeholderKey != null && message.hasOwnProperty("placeholderKey")) {
                var error = $root.WAProtocol.MessageKey.verify(message.placeholderKey);
                if (error)
                    return "placeholderKey." + error;
            }
            if (message.expiration != null && message.hasOwnProperty("expiration"))
                if (!$util.isInteger(message.expiration))
                    return "expiration: integer expected";
            if (message.ephemeralSettingTimestamp != null && message.hasOwnProperty("ephemeralSettingTimestamp"))
                if (!$util.isInteger(message.ephemeralSettingTimestamp) && !(message.ephemeralSettingTimestamp && $util.isInteger(message.ephemeralSettingTimestamp.low) && $util.isInteger(message.ephemeralSettingTimestamp.high)))
                    return "ephemeralSettingTimestamp: integer|Long expected";
            if (message.ephemeralSharedSecret != null && message.hasOwnProperty("ephemeralSharedSecret"))
                if (!(message.ephemeralSharedSecret && typeof message.ephemeralSharedSecret.length === "number" || $util.isString(message.ephemeralSharedSecret)))
                    return "ephemeralSharedSecret: buffer expected";
            if (message.externalAdReply != null && message.hasOwnProperty("externalAdReply")) {
                var error = $root.WAE2E.ContextInfo.ExternalAdReplyInfo.verify(message.externalAdReply);
                if (error)
                    return "externalAdReply." + error;
            }
            if (message.entryPointConversionSource != null && message.hasOwnProperty("entryPointConversionSource"))
                if (!$util.isString(message.entryPointConversionSource))
                    return "entryPointConversionSource: string expected";
            if (message.entryPointConversionApp != null && message.hasOwnProperty("entryPointConversionApp"))
                if (!$util.isString(message.entryPointConversionApp))
                    return "entryPointConversionApp: string expected";
            if (message.entryPointConversionDelaySeconds != null && message.hasOwnProperty("entryPointConversionDelaySeconds"))
                if (!$util.isInteger(message.entryPointConversionDelaySeconds))
                    return "entryPointConversionDelaySeconds: integer expected";
            if (message.disappearingMode != null && message.hasOwnProperty("disappearingMode")) {
                var error = $root.WAE2E.DisappearingMode.verify(message.disappearingMode);
                if (error)
                    return "disappearingMode." + error;
            }
            if (message.actionLink != null && message.hasOwnProperty("actionLink")) {
                var error = $root.WAE2E.ActionLink.verify(message.actionLink);
                if (error)
                    return "actionLink." + error;
            }
            if (message.groupSubject != null && message.hasOwnProperty("groupSubject"))
                if (!$util.isString(message.groupSubject))
                    return "groupSubject: string expected";
            if (message.parentGroupJID != null && message.hasOwnProperty("parentGroupJID"))
                if (!$util.isString(message.parentGroupJID))
                    return "parentGroupJID: string expected";
            if (message.trustBannerType != null && message.hasOwnProperty("trustBannerType"))
                if (!$util.isString(message.trustBannerType))
                    return "trustBannerType: string expected";
            if (message.trustBannerAction != null && message.hasOwnProperty("trustBannerAction"))
                if (!$util.isInteger(message.trustBannerAction))
                    return "trustBannerAction: integer expected";
            if (message.isSampled != null && message.hasOwnProperty("isSampled"))
                if (typeof message.isSampled !== "boolean")
                    return "isSampled: boolean expected";
            if (message.groupMentions != null && message.hasOwnProperty("groupMentions")) {
                if (!Array.isArray(message.groupMentions))
                    return "groupMentions: array expected";
                for (var i = 0; i < message.groupMentions.length; ++i) {
                    var error = $root.WAE2E.GroupMention.verify(message.groupMentions[i]);
                    if (error)
                        return "groupMentions." + error;
                }
            }
            if (message.utm != null && message.hasOwnProperty("utm")) {
                var error = $root.WAE2E.ContextInfo.UTMInfo.verify(message.utm);
                if (error)
                    return "utm." + error;
            }
            if (message.forwardedNewsletterMessageInfo != null && message.hasOwnProperty("forwardedNewsletterMessageInfo")) {
                var error = $root.WAE2E.ContextInfo.ForwardedNewsletterMessageInfo.verify(message.forwardedNewsletterMessageInfo);
                if (error)
                    return "forwardedNewsletterMessageInfo." + error;
            }
            if (message.businessMessageForwardInfo != null && message.hasOwnProperty("businessMessageForwardInfo")) {
                var error = $root.WAE2E.ContextInfo.BusinessMessageForwardInfo.verify(message.businessMessageForwardInfo);
                if (error)
                    return "businessMessageForwardInfo." + error;
            }
            if (message.smbClientCampaignID != null && message.hasOwnProperty("smbClientCampaignID"))
                if (!$util.isString(message.smbClientCampaignID))
                    return "smbClientCampaignID: string expected";
            if (message.smbServerCampaignID != null && message.hasOwnProperty("smbServerCampaignID"))
                if (!$util.isString(message.smbServerCampaignID))
                    return "smbServerCampaignID: string expected";
            if (message.dataSharingContext != null && message.hasOwnProperty("dataSharingContext")) {
                var error = $root.WAE2E.ContextInfo.DataSharingContext.verify(message.dataSharingContext);
                if (error)
                    return "dataSharingContext." + error;
            }
            if (message.alwaysShowAdAttribution != null && message.hasOwnProperty("alwaysShowAdAttribution"))
                if (typeof message.alwaysShowAdAttribution !== "boolean")
                    return "alwaysShowAdAttribution: boolean expected";
            if (message.featureEligibilities != null && message.hasOwnProperty("featureEligibilities")) {
                var error = $root.WAE2E.ContextInfo.FeatureEligibilities.verify(message.featureEligibilities);
                if (error)
                    return "featureEligibilities." + error;
            }
            if (message.entryPointConversionExternalSource != null && message.hasOwnProperty("entryPointConversionExternalSource"))
                if (!$util.isString(message.entryPointConversionExternalSource))
                    return "entryPointConversionExternalSource: string expected";
            if (message.entryPointConversionExternalMedium != null && message.hasOwnProperty("entryPointConversionExternalMedium"))
                if (!$util.isString(message.entryPointConversionExternalMedium))
                    return "entryPointConversionExternalMedium: string expected";
            if (message.groupInfoMetadata != null && message.hasOwnProperty("groupInfoMetadata")) {
                var error = $root.WAE2E.GroupInfoMetadata.verify(message.groupInfoMetadata);
                if (error)
                    return "groupInfoMetadata." + error;
            }
            return null;
        };

        /**
         * Creates a ContextInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.ContextInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.ContextInfo} ContextInfo
         */
        ContextInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.ContextInfo)
                return object;
            var message = new $root.WAE2E.ContextInfo();
            if (object.stanzaID != null)
                message.stanzaID = String(object.stanzaID);
            if (object.participant != null)
                message.participant = String(object.participant);
            if (object.quotedMessage != null) {
                if (typeof object.quotedMessage !== "object")
                    throw TypeError(".WAE2E.ContextInfo.quotedMessage: object expected");
                message.quotedMessage = $root.WAE2E.Message.fromObject(object.quotedMessage);
            }
            if (object.remoteJID != null)
                message.remoteJID = String(object.remoteJID);
            if (object.mentionedJID) {
                if (!Array.isArray(object.mentionedJID))
                    throw TypeError(".WAE2E.ContextInfo.mentionedJID: array expected");
                message.mentionedJID = [];
                for (var i = 0; i < object.mentionedJID.length; ++i)
                    message.mentionedJID[i] = String(object.mentionedJID[i]);
            }
            if (object.conversionSource != null)
                message.conversionSource = String(object.conversionSource);
            if (object.conversionData != null)
                if (typeof object.conversionData === "string")
                    $util.base64.decode(object.conversionData, message.conversionData = $util.newBuffer($util.base64.length(object.conversionData)), 0);
                else if (object.conversionData.length >= 0)
                    message.conversionData = object.conversionData;
            if (object.conversionDelaySeconds != null)
                message.conversionDelaySeconds = object.conversionDelaySeconds >>> 0;
            if (object.forwardingScore != null)
                message.forwardingScore = object.forwardingScore >>> 0;
            if (object.isForwarded != null)
                message.isForwarded = Boolean(object.isForwarded);
            if (object.quotedAd != null) {
                if (typeof object.quotedAd !== "object")
                    throw TypeError(".WAE2E.ContextInfo.quotedAd: object expected");
                message.quotedAd = $root.WAE2E.ContextInfo.AdReplyInfo.fromObject(object.quotedAd);
            }
            if (object.placeholderKey != null) {
                if (typeof object.placeholderKey !== "object")
                    throw TypeError(".WAE2E.ContextInfo.placeholderKey: object expected");
                message.placeholderKey = $root.WAProtocol.MessageKey.fromObject(object.placeholderKey);
            }
            if (object.expiration != null)
                message.expiration = object.expiration >>> 0;
            if (object.ephemeralSettingTimestamp != null)
                if ($util.Long)
                    (message.ephemeralSettingTimestamp = $util.Long.fromValue(object.ephemeralSettingTimestamp)).unsigned = false;
                else if (typeof object.ephemeralSettingTimestamp === "string")
                    message.ephemeralSettingTimestamp = parseInt(object.ephemeralSettingTimestamp, 10);
                else if (typeof object.ephemeralSettingTimestamp === "number")
                    message.ephemeralSettingTimestamp = object.ephemeralSettingTimestamp;
                else if (typeof object.ephemeralSettingTimestamp === "object")
                    message.ephemeralSettingTimestamp = new $util.LongBits(object.ephemeralSettingTimestamp.low >>> 0, object.ephemeralSettingTimestamp.high >>> 0).toNumber();
            if (object.ephemeralSharedSecret != null)
                if (typeof object.ephemeralSharedSecret === "string")
                    $util.base64.decode(object.ephemeralSharedSecret, message.ephemeralSharedSecret = $util.newBuffer($util.base64.length(object.ephemeralSharedSecret)), 0);
                else if (object.ephemeralSharedSecret.length >= 0)
                    message.ephemeralSharedSecret = object.ephemeralSharedSecret;
            if (object.externalAdReply != null) {
                if (typeof object.externalAdReply !== "object")
                    throw TypeError(".WAE2E.ContextInfo.externalAdReply: object expected");
                message.externalAdReply = $root.WAE2E.ContextInfo.ExternalAdReplyInfo.fromObject(object.externalAdReply);
            }
            if (object.entryPointConversionSource != null)
                message.entryPointConversionSource = String(object.entryPointConversionSource);
            if (object.entryPointConversionApp != null)
                message.entryPointConversionApp = String(object.entryPointConversionApp);
            if (object.entryPointConversionDelaySeconds != null)
                message.entryPointConversionDelaySeconds = object.entryPointConversionDelaySeconds >>> 0;
            if (object.disappearingMode != null) {
                if (typeof object.disappearingMode !== "object")
                    throw TypeError(".WAE2E.ContextInfo.disappearingMode: object expected");
                message.disappearingMode = $root.WAE2E.DisappearingMode.fromObject(object.disappearingMode);
            }
            if (object.actionLink != null) {
                if (typeof object.actionLink !== "object")
                    throw TypeError(".WAE2E.ContextInfo.actionLink: object expected");
                message.actionLink = $root.WAE2E.ActionLink.fromObject(object.actionLink);
            }
            if (object.groupSubject != null)
                message.groupSubject = String(object.groupSubject);
            if (object.parentGroupJID != null)
                message.parentGroupJID = String(object.parentGroupJID);
            if (object.trustBannerType != null)
                message.trustBannerType = String(object.trustBannerType);
            if (object.trustBannerAction != null)
                message.trustBannerAction = object.trustBannerAction >>> 0;
            if (object.isSampled != null)
                message.isSampled = Boolean(object.isSampled);
            if (object.groupMentions) {
                if (!Array.isArray(object.groupMentions))
                    throw TypeError(".WAE2E.ContextInfo.groupMentions: array expected");
                message.groupMentions = [];
                for (var i = 0; i < object.groupMentions.length; ++i) {
                    if (typeof object.groupMentions[i] !== "object")
                        throw TypeError(".WAE2E.ContextInfo.groupMentions: object expected");
                    message.groupMentions[i] = $root.WAE2E.GroupMention.fromObject(object.groupMentions[i]);
                }
            }
            if (object.utm != null) {
                if (typeof object.utm !== "object")
                    throw TypeError(".WAE2E.ContextInfo.utm: object expected");
                message.utm = $root.WAE2E.ContextInfo.UTMInfo.fromObject(object.utm);
            }
            if (object.forwardedNewsletterMessageInfo != null) {
                if (typeof object.forwardedNewsletterMessageInfo !== "object")
                    throw TypeError(".WAE2E.ContextInfo.forwardedNewsletterMessageInfo: object expected");
                message.forwardedNewsletterMessageInfo = $root.WAE2E.ContextInfo.ForwardedNewsletterMessageInfo.fromObject(object.forwardedNewsletterMessageInfo);
            }
            if (object.businessMessageForwardInfo != null) {
                if (typeof object.businessMessageForwardInfo !== "object")
                    throw TypeError(".WAE2E.ContextInfo.businessMessageForwardInfo: object expected");
                message.businessMessageForwardInfo = $root.WAE2E.ContextInfo.BusinessMessageForwardInfo.fromObject(object.businessMessageForwardInfo);
            }
            if (object.smbClientCampaignID != null)
                message.smbClientCampaignID = String(object.smbClientCampaignID);
            if (object.smbServerCampaignID != null)
                message.smbServerCampaignID = String(object.smbServerCampaignID);
            if (object.dataSharingContext != null) {
                if (typeof object.dataSharingContext !== "object")
                    throw TypeError(".WAE2E.ContextInfo.dataSharingContext: object expected");
                message.dataSharingContext = $root.WAE2E.ContextInfo.DataSharingContext.fromObject(object.dataSharingContext);
            }
            if (object.alwaysShowAdAttribution != null)
                message.alwaysShowAdAttribution = Boolean(object.alwaysShowAdAttribution);
            if (object.featureEligibilities != null) {
                if (typeof object.featureEligibilities !== "object")
                    throw TypeError(".WAE2E.ContextInfo.featureEligibilities: object expected");
                message.featureEligibilities = $root.WAE2E.ContextInfo.FeatureEligibilities.fromObject(object.featureEligibilities);
            }
            if (object.entryPointConversionExternalSource != null)
                message.entryPointConversionExternalSource = String(object.entryPointConversionExternalSource);
            if (object.entryPointConversionExternalMedium != null)
                message.entryPointConversionExternalMedium = String(object.entryPointConversionExternalMedium);
            if (object.groupInfoMetadata != null) {
                if (typeof object.groupInfoMetadata !== "object")
                    throw TypeError(".WAE2E.ContextInfo.groupInfoMetadata: object expected");
                message.groupInfoMetadata = $root.WAE2E.GroupInfoMetadata.fromObject(object.groupInfoMetadata);
            }
            return message;
        };

        /**
         * Creates a plain object from a ContextInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.ContextInfo
         * @static
         * @param {WAE2E.ContextInfo} message ContextInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ContextInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.mentionedJID = [];
                object.groupMentions = [];
            }
            if (options.defaults) {
                object.stanzaID = "";
                object.participant = "";
                object.quotedMessage = null;
                object.remoteJID = "";
                object.conversionSource = "";
                if (options.bytes === String)
                    object.conversionData = "";
                else {
                    object.conversionData = [];
                    if (options.bytes !== Array)
                        object.conversionData = $util.newBuffer(object.conversionData);
                }
                object.conversionDelaySeconds = 0;
                object.forwardingScore = 0;
                object.isForwarded = false;
                object.quotedAd = null;
                object.placeholderKey = null;
                object.expiration = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.ephemeralSettingTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ephemeralSettingTimestamp = options.longs === String ? "0" : 0;
                if (options.bytes === String)
                    object.ephemeralSharedSecret = "";
                else {
                    object.ephemeralSharedSecret = [];
                    if (options.bytes !== Array)
                        object.ephemeralSharedSecret = $util.newBuffer(object.ephemeralSharedSecret);
                }
                object.externalAdReply = null;
                object.entryPointConversionSource = "";
                object.entryPointConversionApp = "";
                object.entryPointConversionDelaySeconds = 0;
                object.disappearingMode = null;
                object.actionLink = null;
                object.groupSubject = "";
                object.parentGroupJID = "";
                object.trustBannerType = "";
                object.trustBannerAction = 0;
                object.isSampled = false;
                object.utm = null;
                object.forwardedNewsletterMessageInfo = null;
                object.businessMessageForwardInfo = null;
                object.smbClientCampaignID = "";
                object.smbServerCampaignID = "";
                object.dataSharingContext = null;
                object.alwaysShowAdAttribution = false;
                object.featureEligibilities = null;
                object.entryPointConversionExternalSource = "";
                object.entryPointConversionExternalMedium = "";
                object.groupInfoMetadata = null;
            }
            if (message.stanzaID != null && message.hasOwnProperty("stanzaID"))
                object.stanzaID = message.stanzaID;
            if (message.participant != null && message.hasOwnProperty("participant"))
                object.participant = message.participant;
            if (message.quotedMessage != null && message.hasOwnProperty("quotedMessage"))
                object.quotedMessage = $root.WAE2E.Message.toObject(message.quotedMessage, options);
            if (message.remoteJID != null && message.hasOwnProperty("remoteJID"))
                object.remoteJID = message.remoteJID;
            if (message.mentionedJID && message.mentionedJID.length) {
                object.mentionedJID = [];
                for (var j = 0; j < message.mentionedJID.length; ++j)
                    object.mentionedJID[j] = message.mentionedJID[j];
            }
            if (message.conversionSource != null && message.hasOwnProperty("conversionSource"))
                object.conversionSource = message.conversionSource;
            if (message.conversionData != null && message.hasOwnProperty("conversionData"))
                object.conversionData = options.bytes === String ? $util.base64.encode(message.conversionData, 0, message.conversionData.length) : options.bytes === Array ? Array.prototype.slice.call(message.conversionData) : message.conversionData;
            if (message.conversionDelaySeconds != null && message.hasOwnProperty("conversionDelaySeconds"))
                object.conversionDelaySeconds = message.conversionDelaySeconds;
            if (message.forwardingScore != null && message.hasOwnProperty("forwardingScore"))
                object.forwardingScore = message.forwardingScore;
            if (message.isForwarded != null && message.hasOwnProperty("isForwarded"))
                object.isForwarded = message.isForwarded;
            if (message.quotedAd != null && message.hasOwnProperty("quotedAd"))
                object.quotedAd = $root.WAE2E.ContextInfo.AdReplyInfo.toObject(message.quotedAd, options);
            if (message.placeholderKey != null && message.hasOwnProperty("placeholderKey"))
                object.placeholderKey = $root.WAProtocol.MessageKey.toObject(message.placeholderKey, options);
            if (message.expiration != null && message.hasOwnProperty("expiration"))
                object.expiration = message.expiration;
            if (message.ephemeralSettingTimestamp != null && message.hasOwnProperty("ephemeralSettingTimestamp"))
                if (typeof message.ephemeralSettingTimestamp === "number")
                    object.ephemeralSettingTimestamp = options.longs === String ? String(message.ephemeralSettingTimestamp) : message.ephemeralSettingTimestamp;
                else
                    object.ephemeralSettingTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.ephemeralSettingTimestamp) : options.longs === Number ? new $util.LongBits(message.ephemeralSettingTimestamp.low >>> 0, message.ephemeralSettingTimestamp.high >>> 0).toNumber() : message.ephemeralSettingTimestamp;
            if (message.ephemeralSharedSecret != null && message.hasOwnProperty("ephemeralSharedSecret"))
                object.ephemeralSharedSecret = options.bytes === String ? $util.base64.encode(message.ephemeralSharedSecret, 0, message.ephemeralSharedSecret.length) : options.bytes === Array ? Array.prototype.slice.call(message.ephemeralSharedSecret) : message.ephemeralSharedSecret;
            if (message.externalAdReply != null && message.hasOwnProperty("externalAdReply"))
                object.externalAdReply = $root.WAE2E.ContextInfo.ExternalAdReplyInfo.toObject(message.externalAdReply, options);
            if (message.entryPointConversionSource != null && message.hasOwnProperty("entryPointConversionSource"))
                object.entryPointConversionSource = message.entryPointConversionSource;
            if (message.entryPointConversionApp != null && message.hasOwnProperty("entryPointConversionApp"))
                object.entryPointConversionApp = message.entryPointConversionApp;
            if (message.entryPointConversionDelaySeconds != null && message.hasOwnProperty("entryPointConversionDelaySeconds"))
                object.entryPointConversionDelaySeconds = message.entryPointConversionDelaySeconds;
            if (message.disappearingMode != null && message.hasOwnProperty("disappearingMode"))
                object.disappearingMode = $root.WAE2E.DisappearingMode.toObject(message.disappearingMode, options);
            if (message.actionLink != null && message.hasOwnProperty("actionLink"))
                object.actionLink = $root.WAE2E.ActionLink.toObject(message.actionLink, options);
            if (message.groupSubject != null && message.hasOwnProperty("groupSubject"))
                object.groupSubject = message.groupSubject;
            if (message.parentGroupJID != null && message.hasOwnProperty("parentGroupJID"))
                object.parentGroupJID = message.parentGroupJID;
            if (message.trustBannerType != null && message.hasOwnProperty("trustBannerType"))
                object.trustBannerType = message.trustBannerType;
            if (message.trustBannerAction != null && message.hasOwnProperty("trustBannerAction"))
                object.trustBannerAction = message.trustBannerAction;
            if (message.isSampled != null && message.hasOwnProperty("isSampled"))
                object.isSampled = message.isSampled;
            if (message.groupMentions && message.groupMentions.length) {
                object.groupMentions = [];
                for (var j = 0; j < message.groupMentions.length; ++j)
                    object.groupMentions[j] = $root.WAE2E.GroupMention.toObject(message.groupMentions[j], options);
            }
            if (message.utm != null && message.hasOwnProperty("utm"))
                object.utm = $root.WAE2E.ContextInfo.UTMInfo.toObject(message.utm, options);
            if (message.forwardedNewsletterMessageInfo != null && message.hasOwnProperty("forwardedNewsletterMessageInfo"))
                object.forwardedNewsletterMessageInfo = $root.WAE2E.ContextInfo.ForwardedNewsletterMessageInfo.toObject(message.forwardedNewsletterMessageInfo, options);
            if (message.businessMessageForwardInfo != null && message.hasOwnProperty("businessMessageForwardInfo"))
                object.businessMessageForwardInfo = $root.WAE2E.ContextInfo.BusinessMessageForwardInfo.toObject(message.businessMessageForwardInfo, options);
            if (message.smbClientCampaignID != null && message.hasOwnProperty("smbClientCampaignID"))
                object.smbClientCampaignID = message.smbClientCampaignID;
            if (message.smbServerCampaignID != null && message.hasOwnProperty("smbServerCampaignID"))
                object.smbServerCampaignID = message.smbServerCampaignID;
            if (message.dataSharingContext != null && message.hasOwnProperty("dataSharingContext"))
                object.dataSharingContext = $root.WAE2E.ContextInfo.DataSharingContext.toObject(message.dataSharingContext, options);
            if (message.alwaysShowAdAttribution != null && message.hasOwnProperty("alwaysShowAdAttribution"))
                object.alwaysShowAdAttribution = message.alwaysShowAdAttribution;
            if (message.featureEligibilities != null && message.hasOwnProperty("featureEligibilities"))
                object.featureEligibilities = $root.WAE2E.ContextInfo.FeatureEligibilities.toObject(message.featureEligibilities, options);
            if (message.entryPointConversionExternalSource != null && message.hasOwnProperty("entryPointConversionExternalSource"))
                object.entryPointConversionExternalSource = message.entryPointConversionExternalSource;
            if (message.entryPointConversionExternalMedium != null && message.hasOwnProperty("entryPointConversionExternalMedium"))
                object.entryPointConversionExternalMedium = message.entryPointConversionExternalMedium;
            if (message.groupInfoMetadata != null && message.hasOwnProperty("groupInfoMetadata"))
                object.groupInfoMetadata = $root.WAE2E.GroupInfoMetadata.toObject(message.groupInfoMetadata, options);
            return object;
        };

        /**
         * Converts this ContextInfo to JSON.
         * @function toJSON
         * @memberof WAE2E.ContextInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ContextInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for ContextInfo
         * @function getTypeUrl
         * @memberof WAE2E.ContextInfo
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        ContextInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.ContextInfo";
        };

        ContextInfo.ForwardedNewsletterMessageInfo = (function() {

            /**
             * Properties of a ForwardedNewsletterMessageInfo.
             * @memberof WAE2E.ContextInfo
             * @interface IForwardedNewsletterMessageInfo
             * @property {string|null} [newsletterJID] ForwardedNewsletterMessageInfo newsletterJID
             * @property {number|null} [serverMessageID] ForwardedNewsletterMessageInfo serverMessageID
             * @property {string|null} [newsletterName] ForwardedNewsletterMessageInfo newsletterName
             * @property {WAE2E.ContextInfo.ForwardedNewsletterMessageInfo.ContentType|null} [contentType] ForwardedNewsletterMessageInfo contentType
             * @property {string|null} [accessibilityText] ForwardedNewsletterMessageInfo accessibilityText
             */

            /**
             * Constructs a new ForwardedNewsletterMessageInfo.
             * @memberof WAE2E.ContextInfo
             * @classdesc Represents a ForwardedNewsletterMessageInfo.
             * @implements IForwardedNewsletterMessageInfo
             * @constructor
             * @param {WAE2E.ContextInfo.IForwardedNewsletterMessageInfo=} [properties] Properties to set
             */
            function ForwardedNewsletterMessageInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ForwardedNewsletterMessageInfo newsletterJID.
             * @member {string} newsletterJID
             * @memberof WAE2E.ContextInfo.ForwardedNewsletterMessageInfo
             * @instance
             */
            ForwardedNewsletterMessageInfo.prototype.newsletterJID = "";

            /**
             * ForwardedNewsletterMessageInfo serverMessageID.
             * @member {number} serverMessageID
             * @memberof WAE2E.ContextInfo.ForwardedNewsletterMessageInfo
             * @instance
             */
            ForwardedNewsletterMessageInfo.prototype.serverMessageID = 0;

            /**
             * ForwardedNewsletterMessageInfo newsletterName.
             * @member {string} newsletterName
             * @memberof WAE2E.ContextInfo.ForwardedNewsletterMessageInfo
             * @instance
             */
            ForwardedNewsletterMessageInfo.prototype.newsletterName = "";

            /**
             * ForwardedNewsletterMessageInfo contentType.
             * @member {WAE2E.ContextInfo.ForwardedNewsletterMessageInfo.ContentType} contentType
             * @memberof WAE2E.ContextInfo.ForwardedNewsletterMessageInfo
             * @instance
             */
            ForwardedNewsletterMessageInfo.prototype.contentType = 1;

            /**
             * ForwardedNewsletterMessageInfo accessibilityText.
             * @member {string} accessibilityText
             * @memberof WAE2E.ContextInfo.ForwardedNewsletterMessageInfo
             * @instance
             */
            ForwardedNewsletterMessageInfo.prototype.accessibilityText = "";

            /**
             * Creates a new ForwardedNewsletterMessageInfo instance using the specified properties.
             * @function create
             * @memberof WAE2E.ContextInfo.ForwardedNewsletterMessageInfo
             * @static
             * @param {WAE2E.ContextInfo.IForwardedNewsletterMessageInfo=} [properties] Properties to set
             * @returns {WAE2E.ContextInfo.ForwardedNewsletterMessageInfo} ForwardedNewsletterMessageInfo instance
             */
            ForwardedNewsletterMessageInfo.create = function create(properties) {
                return new ForwardedNewsletterMessageInfo(properties);
            };

            /**
             * Encodes the specified ForwardedNewsletterMessageInfo message. Does not implicitly {@link WAE2E.ContextInfo.ForwardedNewsletterMessageInfo.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.ContextInfo.ForwardedNewsletterMessageInfo
             * @static
             * @param {WAE2E.ContextInfo.IForwardedNewsletterMessageInfo} message ForwardedNewsletterMessageInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ForwardedNewsletterMessageInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.newsletterJID != null && Object.hasOwnProperty.call(message, "newsletterJID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.newsletterJID);
                if (message.serverMessageID != null && Object.hasOwnProperty.call(message, "serverMessageID"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.serverMessageID);
                if (message.newsletterName != null && Object.hasOwnProperty.call(message, "newsletterName"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.newsletterName);
                if (message.contentType != null && Object.hasOwnProperty.call(message, "contentType"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.contentType);
                if (message.accessibilityText != null && Object.hasOwnProperty.call(message, "accessibilityText"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.accessibilityText);
                return writer;
            };

            /**
             * Encodes the specified ForwardedNewsletterMessageInfo message, length delimited. Does not implicitly {@link WAE2E.ContextInfo.ForwardedNewsletterMessageInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.ContextInfo.ForwardedNewsletterMessageInfo
             * @static
             * @param {WAE2E.ContextInfo.IForwardedNewsletterMessageInfo} message ForwardedNewsletterMessageInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ForwardedNewsletterMessageInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ForwardedNewsletterMessageInfo message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.ContextInfo.ForwardedNewsletterMessageInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.ContextInfo.ForwardedNewsletterMessageInfo} ForwardedNewsletterMessageInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ForwardedNewsletterMessageInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.ContextInfo.ForwardedNewsletterMessageInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.newsletterJID = reader.string();
                            break;
                        }
                    case 2: {
                            message.serverMessageID = reader.int32();
                            break;
                        }
                    case 3: {
                            message.newsletterName = reader.string();
                            break;
                        }
                    case 4: {
                            message.contentType = reader.int32();
                            break;
                        }
                    case 5: {
                            message.accessibilityText = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ForwardedNewsletterMessageInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.ContextInfo.ForwardedNewsletterMessageInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.ContextInfo.ForwardedNewsletterMessageInfo} ForwardedNewsletterMessageInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ForwardedNewsletterMessageInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ForwardedNewsletterMessageInfo message.
             * @function verify
             * @memberof WAE2E.ContextInfo.ForwardedNewsletterMessageInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ForwardedNewsletterMessageInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.newsletterJID != null && message.hasOwnProperty("newsletterJID"))
                    if (!$util.isString(message.newsletterJID))
                        return "newsletterJID: string expected";
                if (message.serverMessageID != null && message.hasOwnProperty("serverMessageID"))
                    if (!$util.isInteger(message.serverMessageID))
                        return "serverMessageID: integer expected";
                if (message.newsletterName != null && message.hasOwnProperty("newsletterName"))
                    if (!$util.isString(message.newsletterName))
                        return "newsletterName: string expected";
                if (message.contentType != null && message.hasOwnProperty("contentType"))
                    switch (message.contentType) {
                    default:
                        return "contentType: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.accessibilityText != null && message.hasOwnProperty("accessibilityText"))
                    if (!$util.isString(message.accessibilityText))
                        return "accessibilityText: string expected";
                return null;
            };

            /**
             * Creates a ForwardedNewsletterMessageInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.ContextInfo.ForwardedNewsletterMessageInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.ContextInfo.ForwardedNewsletterMessageInfo} ForwardedNewsletterMessageInfo
             */
            ForwardedNewsletterMessageInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.ContextInfo.ForwardedNewsletterMessageInfo)
                    return object;
                var message = new $root.WAE2E.ContextInfo.ForwardedNewsletterMessageInfo();
                if (object.newsletterJID != null)
                    message.newsletterJID = String(object.newsletterJID);
                if (object.serverMessageID != null)
                    message.serverMessageID = object.serverMessageID | 0;
                if (object.newsletterName != null)
                    message.newsletterName = String(object.newsletterName);
                switch (object.contentType) {
                default:
                    if (typeof object.contentType === "number") {
                        message.contentType = object.contentType;
                        break;
                    }
                    break;
                case "UPDATE":
                case 1:
                    message.contentType = 1;
                    break;
                case "UPDATE_CARD":
                case 2:
                    message.contentType = 2;
                    break;
                case "LINK_CARD":
                case 3:
                    message.contentType = 3;
                    break;
                }
                if (object.accessibilityText != null)
                    message.accessibilityText = String(object.accessibilityText);
                return message;
            };

            /**
             * Creates a plain object from a ForwardedNewsletterMessageInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.ContextInfo.ForwardedNewsletterMessageInfo
             * @static
             * @param {WAE2E.ContextInfo.ForwardedNewsletterMessageInfo} message ForwardedNewsletterMessageInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ForwardedNewsletterMessageInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.newsletterJID = "";
                    object.serverMessageID = 0;
                    object.newsletterName = "";
                    object.contentType = options.enums === String ? "UPDATE" : 1;
                    object.accessibilityText = "";
                }
                if (message.newsletterJID != null && message.hasOwnProperty("newsletterJID"))
                    object.newsletterJID = message.newsletterJID;
                if (message.serverMessageID != null && message.hasOwnProperty("serverMessageID"))
                    object.serverMessageID = message.serverMessageID;
                if (message.newsletterName != null && message.hasOwnProperty("newsletterName"))
                    object.newsletterName = message.newsletterName;
                if (message.contentType != null && message.hasOwnProperty("contentType"))
                    object.contentType = options.enums === String ? $root.WAE2E.ContextInfo.ForwardedNewsletterMessageInfo.ContentType[message.contentType] === undefined ? message.contentType : $root.WAE2E.ContextInfo.ForwardedNewsletterMessageInfo.ContentType[message.contentType] : message.contentType;
                if (message.accessibilityText != null && message.hasOwnProperty("accessibilityText"))
                    object.accessibilityText = message.accessibilityText;
                return object;
            };

            /**
             * Converts this ForwardedNewsletterMessageInfo to JSON.
             * @function toJSON
             * @memberof WAE2E.ContextInfo.ForwardedNewsletterMessageInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ForwardedNewsletterMessageInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ForwardedNewsletterMessageInfo
             * @function getTypeUrl
             * @memberof WAE2E.ContextInfo.ForwardedNewsletterMessageInfo
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ForwardedNewsletterMessageInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.ContextInfo.ForwardedNewsletterMessageInfo";
            };

            /**
             * ContentType enum.
             * @name WAE2E.ContextInfo.ForwardedNewsletterMessageInfo.ContentType
             * @enum {number}
             * @property {number} UPDATE=1 UPDATE value
             * @property {number} UPDATE_CARD=2 UPDATE_CARD value
             * @property {number} LINK_CARD=3 LINK_CARD value
             */
            ForwardedNewsletterMessageInfo.ContentType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "UPDATE"] = 1;
                values[valuesById[2] = "UPDATE_CARD"] = 2;
                values[valuesById[3] = "LINK_CARD"] = 3;
                return values;
            })();

            return ForwardedNewsletterMessageInfo;
        })();

        ContextInfo.ExternalAdReplyInfo = (function() {

            /**
             * Properties of an ExternalAdReplyInfo.
             * @memberof WAE2E.ContextInfo
             * @interface IExternalAdReplyInfo
             * @property {string|null} [title] ExternalAdReplyInfo title
             * @property {string|null} [body] ExternalAdReplyInfo body
             * @property {WAE2E.ContextInfo.ExternalAdReplyInfo.MediaType|null} [mediaType] ExternalAdReplyInfo mediaType
             * @property {string|null} [thumbnailURL] ExternalAdReplyInfo thumbnailURL
             * @property {string|null} [mediaURL] ExternalAdReplyInfo mediaURL
             * @property {Uint8Array|null} [thumbnail] ExternalAdReplyInfo thumbnail
             * @property {string|null} [sourceType] ExternalAdReplyInfo sourceType
             * @property {string|null} [sourceID] ExternalAdReplyInfo sourceID
             * @property {string|null} [sourceURL] ExternalAdReplyInfo sourceURL
             * @property {boolean|null} [containsAutoReply] ExternalAdReplyInfo containsAutoReply
             * @property {boolean|null} [renderLargerThumbnail] ExternalAdReplyInfo renderLargerThumbnail
             * @property {boolean|null} [showAdAttribution] ExternalAdReplyInfo showAdAttribution
             * @property {string|null} [ctwaClid] ExternalAdReplyInfo ctwaClid
             * @property {string|null} [ref] ExternalAdReplyInfo ref
             * @property {boolean|null} [clickToWhatsappCall] ExternalAdReplyInfo clickToWhatsappCall
             * @property {boolean|null} [adContextPreviewDismissed] ExternalAdReplyInfo adContextPreviewDismissed
             */

            /**
             * Constructs a new ExternalAdReplyInfo.
             * @memberof WAE2E.ContextInfo
             * @classdesc Represents an ExternalAdReplyInfo.
             * @implements IExternalAdReplyInfo
             * @constructor
             * @param {WAE2E.ContextInfo.IExternalAdReplyInfo=} [properties] Properties to set
             */
            function ExternalAdReplyInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ExternalAdReplyInfo title.
             * @member {string} title
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @instance
             */
            ExternalAdReplyInfo.prototype.title = "";

            /**
             * ExternalAdReplyInfo body.
             * @member {string} body
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @instance
             */
            ExternalAdReplyInfo.prototype.body = "";

            /**
             * ExternalAdReplyInfo mediaType.
             * @member {WAE2E.ContextInfo.ExternalAdReplyInfo.MediaType} mediaType
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @instance
             */
            ExternalAdReplyInfo.prototype.mediaType = 0;

            /**
             * ExternalAdReplyInfo thumbnailURL.
             * @member {string} thumbnailURL
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @instance
             */
            ExternalAdReplyInfo.prototype.thumbnailURL = "";

            /**
             * ExternalAdReplyInfo mediaURL.
             * @member {string} mediaURL
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @instance
             */
            ExternalAdReplyInfo.prototype.mediaURL = "";

            /**
             * ExternalAdReplyInfo thumbnail.
             * @member {Uint8Array} thumbnail
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @instance
             */
            ExternalAdReplyInfo.prototype.thumbnail = $util.newBuffer([]);

            /**
             * ExternalAdReplyInfo sourceType.
             * @member {string} sourceType
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @instance
             */
            ExternalAdReplyInfo.prototype.sourceType = "";

            /**
             * ExternalAdReplyInfo sourceID.
             * @member {string} sourceID
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @instance
             */
            ExternalAdReplyInfo.prototype.sourceID = "";

            /**
             * ExternalAdReplyInfo sourceURL.
             * @member {string} sourceURL
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @instance
             */
            ExternalAdReplyInfo.prototype.sourceURL = "";

            /**
             * ExternalAdReplyInfo containsAutoReply.
             * @member {boolean} containsAutoReply
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @instance
             */
            ExternalAdReplyInfo.prototype.containsAutoReply = false;

            /**
             * ExternalAdReplyInfo renderLargerThumbnail.
             * @member {boolean} renderLargerThumbnail
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @instance
             */
            ExternalAdReplyInfo.prototype.renderLargerThumbnail = false;

            /**
             * ExternalAdReplyInfo showAdAttribution.
             * @member {boolean} showAdAttribution
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @instance
             */
            ExternalAdReplyInfo.prototype.showAdAttribution = false;

            /**
             * ExternalAdReplyInfo ctwaClid.
             * @member {string} ctwaClid
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @instance
             */
            ExternalAdReplyInfo.prototype.ctwaClid = "";

            /**
             * ExternalAdReplyInfo ref.
             * @member {string} ref
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @instance
             */
            ExternalAdReplyInfo.prototype.ref = "";

            /**
             * ExternalAdReplyInfo clickToWhatsappCall.
             * @member {boolean} clickToWhatsappCall
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @instance
             */
            ExternalAdReplyInfo.prototype.clickToWhatsappCall = false;

            /**
             * ExternalAdReplyInfo adContextPreviewDismissed.
             * @member {boolean} adContextPreviewDismissed
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @instance
             */
            ExternalAdReplyInfo.prototype.adContextPreviewDismissed = false;

            /**
             * Creates a new ExternalAdReplyInfo instance using the specified properties.
             * @function create
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @static
             * @param {WAE2E.ContextInfo.IExternalAdReplyInfo=} [properties] Properties to set
             * @returns {WAE2E.ContextInfo.ExternalAdReplyInfo} ExternalAdReplyInfo instance
             */
            ExternalAdReplyInfo.create = function create(properties) {
                return new ExternalAdReplyInfo(properties);
            };

            /**
             * Encodes the specified ExternalAdReplyInfo message. Does not implicitly {@link WAE2E.ContextInfo.ExternalAdReplyInfo.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @static
             * @param {WAE2E.ContextInfo.IExternalAdReplyInfo} message ExternalAdReplyInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExternalAdReplyInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.body);
                if (message.mediaType != null && Object.hasOwnProperty.call(message, "mediaType"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.mediaType);
                if (message.thumbnailURL != null && Object.hasOwnProperty.call(message, "thumbnailURL"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.thumbnailURL);
                if (message.mediaURL != null && Object.hasOwnProperty.call(message, "mediaURL"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.mediaURL);
                if (message.thumbnail != null && Object.hasOwnProperty.call(message, "thumbnail"))
                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.thumbnail);
                if (message.sourceType != null && Object.hasOwnProperty.call(message, "sourceType"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.sourceType);
                if (message.sourceID != null && Object.hasOwnProperty.call(message, "sourceID"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.sourceID);
                if (message.sourceURL != null && Object.hasOwnProperty.call(message, "sourceURL"))
                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.sourceURL);
                if (message.containsAutoReply != null && Object.hasOwnProperty.call(message, "containsAutoReply"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.containsAutoReply);
                if (message.renderLargerThumbnail != null && Object.hasOwnProperty.call(message, "renderLargerThumbnail"))
                    writer.uint32(/* id 11, wireType 0 =*/88).bool(message.renderLargerThumbnail);
                if (message.showAdAttribution != null && Object.hasOwnProperty.call(message, "showAdAttribution"))
                    writer.uint32(/* id 12, wireType 0 =*/96).bool(message.showAdAttribution);
                if (message.ctwaClid != null && Object.hasOwnProperty.call(message, "ctwaClid"))
                    writer.uint32(/* id 13, wireType 2 =*/106).string(message.ctwaClid);
                if (message.ref != null && Object.hasOwnProperty.call(message, "ref"))
                    writer.uint32(/* id 14, wireType 2 =*/114).string(message.ref);
                if (message.clickToWhatsappCall != null && Object.hasOwnProperty.call(message, "clickToWhatsappCall"))
                    writer.uint32(/* id 15, wireType 0 =*/120).bool(message.clickToWhatsappCall);
                if (message.adContextPreviewDismissed != null && Object.hasOwnProperty.call(message, "adContextPreviewDismissed"))
                    writer.uint32(/* id 16, wireType 0 =*/128).bool(message.adContextPreviewDismissed);
                return writer;
            };

            /**
             * Encodes the specified ExternalAdReplyInfo message, length delimited. Does not implicitly {@link WAE2E.ContextInfo.ExternalAdReplyInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @static
             * @param {WAE2E.ContextInfo.IExternalAdReplyInfo} message ExternalAdReplyInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExternalAdReplyInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ExternalAdReplyInfo message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.ContextInfo.ExternalAdReplyInfo} ExternalAdReplyInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExternalAdReplyInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.ContextInfo.ExternalAdReplyInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.title = reader.string();
                            break;
                        }
                    case 2: {
                            message.body = reader.string();
                            break;
                        }
                    case 3: {
                            message.mediaType = reader.int32();
                            break;
                        }
                    case 4: {
                            message.thumbnailURL = reader.string();
                            break;
                        }
                    case 5: {
                            message.mediaURL = reader.string();
                            break;
                        }
                    case 6: {
                            message.thumbnail = reader.bytes();
                            break;
                        }
                    case 7: {
                            message.sourceType = reader.string();
                            break;
                        }
                    case 8: {
                            message.sourceID = reader.string();
                            break;
                        }
                    case 9: {
                            message.sourceURL = reader.string();
                            break;
                        }
                    case 10: {
                            message.containsAutoReply = reader.bool();
                            break;
                        }
                    case 11: {
                            message.renderLargerThumbnail = reader.bool();
                            break;
                        }
                    case 12: {
                            message.showAdAttribution = reader.bool();
                            break;
                        }
                    case 13: {
                            message.ctwaClid = reader.string();
                            break;
                        }
                    case 14: {
                            message.ref = reader.string();
                            break;
                        }
                    case 15: {
                            message.clickToWhatsappCall = reader.bool();
                            break;
                        }
                    case 16: {
                            message.adContextPreviewDismissed = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ExternalAdReplyInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.ContextInfo.ExternalAdReplyInfo} ExternalAdReplyInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExternalAdReplyInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ExternalAdReplyInfo message.
             * @function verify
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ExternalAdReplyInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.title != null && message.hasOwnProperty("title"))
                    if (!$util.isString(message.title))
                        return "title: string expected";
                if (message.body != null && message.hasOwnProperty("body"))
                    if (!$util.isString(message.body))
                        return "body: string expected";
                if (message.mediaType != null && message.hasOwnProperty("mediaType"))
                    switch (message.mediaType) {
                    default:
                        return "mediaType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.thumbnailURL != null && message.hasOwnProperty("thumbnailURL"))
                    if (!$util.isString(message.thumbnailURL))
                        return "thumbnailURL: string expected";
                if (message.mediaURL != null && message.hasOwnProperty("mediaURL"))
                    if (!$util.isString(message.mediaURL))
                        return "mediaURL: string expected";
                if (message.thumbnail != null && message.hasOwnProperty("thumbnail"))
                    if (!(message.thumbnail && typeof message.thumbnail.length === "number" || $util.isString(message.thumbnail)))
                        return "thumbnail: buffer expected";
                if (message.sourceType != null && message.hasOwnProperty("sourceType"))
                    if (!$util.isString(message.sourceType))
                        return "sourceType: string expected";
                if (message.sourceID != null && message.hasOwnProperty("sourceID"))
                    if (!$util.isString(message.sourceID))
                        return "sourceID: string expected";
                if (message.sourceURL != null && message.hasOwnProperty("sourceURL"))
                    if (!$util.isString(message.sourceURL))
                        return "sourceURL: string expected";
                if (message.containsAutoReply != null && message.hasOwnProperty("containsAutoReply"))
                    if (typeof message.containsAutoReply !== "boolean")
                        return "containsAutoReply: boolean expected";
                if (message.renderLargerThumbnail != null && message.hasOwnProperty("renderLargerThumbnail"))
                    if (typeof message.renderLargerThumbnail !== "boolean")
                        return "renderLargerThumbnail: boolean expected";
                if (message.showAdAttribution != null && message.hasOwnProperty("showAdAttribution"))
                    if (typeof message.showAdAttribution !== "boolean")
                        return "showAdAttribution: boolean expected";
                if (message.ctwaClid != null && message.hasOwnProperty("ctwaClid"))
                    if (!$util.isString(message.ctwaClid))
                        return "ctwaClid: string expected";
                if (message.ref != null && message.hasOwnProperty("ref"))
                    if (!$util.isString(message.ref))
                        return "ref: string expected";
                if (message.clickToWhatsappCall != null && message.hasOwnProperty("clickToWhatsappCall"))
                    if (typeof message.clickToWhatsappCall !== "boolean")
                        return "clickToWhatsappCall: boolean expected";
                if (message.adContextPreviewDismissed != null && message.hasOwnProperty("adContextPreviewDismissed"))
                    if (typeof message.adContextPreviewDismissed !== "boolean")
                        return "adContextPreviewDismissed: boolean expected";
                return null;
            };

            /**
             * Creates an ExternalAdReplyInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.ContextInfo.ExternalAdReplyInfo} ExternalAdReplyInfo
             */
            ExternalAdReplyInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.ContextInfo.ExternalAdReplyInfo)
                    return object;
                var message = new $root.WAE2E.ContextInfo.ExternalAdReplyInfo();
                if (object.title != null)
                    message.title = String(object.title);
                if (object.body != null)
                    message.body = String(object.body);
                switch (object.mediaType) {
                default:
                    if (typeof object.mediaType === "number") {
                        message.mediaType = object.mediaType;
                        break;
                    }
                    break;
                case "NONE":
                case 0:
                    message.mediaType = 0;
                    break;
                case "IMAGE":
                case 1:
                    message.mediaType = 1;
                    break;
                case "VIDEO":
                case 2:
                    message.mediaType = 2;
                    break;
                }
                if (object.thumbnailURL != null)
                    message.thumbnailURL = String(object.thumbnailURL);
                if (object.mediaURL != null)
                    message.mediaURL = String(object.mediaURL);
                if (object.thumbnail != null)
                    if (typeof object.thumbnail === "string")
                        $util.base64.decode(object.thumbnail, message.thumbnail = $util.newBuffer($util.base64.length(object.thumbnail)), 0);
                    else if (object.thumbnail.length >= 0)
                        message.thumbnail = object.thumbnail;
                if (object.sourceType != null)
                    message.sourceType = String(object.sourceType);
                if (object.sourceID != null)
                    message.sourceID = String(object.sourceID);
                if (object.sourceURL != null)
                    message.sourceURL = String(object.sourceURL);
                if (object.containsAutoReply != null)
                    message.containsAutoReply = Boolean(object.containsAutoReply);
                if (object.renderLargerThumbnail != null)
                    message.renderLargerThumbnail = Boolean(object.renderLargerThumbnail);
                if (object.showAdAttribution != null)
                    message.showAdAttribution = Boolean(object.showAdAttribution);
                if (object.ctwaClid != null)
                    message.ctwaClid = String(object.ctwaClid);
                if (object.ref != null)
                    message.ref = String(object.ref);
                if (object.clickToWhatsappCall != null)
                    message.clickToWhatsappCall = Boolean(object.clickToWhatsappCall);
                if (object.adContextPreviewDismissed != null)
                    message.adContextPreviewDismissed = Boolean(object.adContextPreviewDismissed);
                return message;
            };

            /**
             * Creates a plain object from an ExternalAdReplyInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @static
             * @param {WAE2E.ContextInfo.ExternalAdReplyInfo} message ExternalAdReplyInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ExternalAdReplyInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.title = "";
                    object.body = "";
                    object.mediaType = options.enums === String ? "NONE" : 0;
                    object.thumbnailURL = "";
                    object.mediaURL = "";
                    if (options.bytes === String)
                        object.thumbnail = "";
                    else {
                        object.thumbnail = [];
                        if (options.bytes !== Array)
                            object.thumbnail = $util.newBuffer(object.thumbnail);
                    }
                    object.sourceType = "";
                    object.sourceID = "";
                    object.sourceURL = "";
                    object.containsAutoReply = false;
                    object.renderLargerThumbnail = false;
                    object.showAdAttribution = false;
                    object.ctwaClid = "";
                    object.ref = "";
                    object.clickToWhatsappCall = false;
                    object.adContextPreviewDismissed = false;
                }
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                if (message.body != null && message.hasOwnProperty("body"))
                    object.body = message.body;
                if (message.mediaType != null && message.hasOwnProperty("mediaType"))
                    object.mediaType = options.enums === String ? $root.WAE2E.ContextInfo.ExternalAdReplyInfo.MediaType[message.mediaType] === undefined ? message.mediaType : $root.WAE2E.ContextInfo.ExternalAdReplyInfo.MediaType[message.mediaType] : message.mediaType;
                if (message.thumbnailURL != null && message.hasOwnProperty("thumbnailURL"))
                    object.thumbnailURL = message.thumbnailURL;
                if (message.mediaURL != null && message.hasOwnProperty("mediaURL"))
                    object.mediaURL = message.mediaURL;
                if (message.thumbnail != null && message.hasOwnProperty("thumbnail"))
                    object.thumbnail = options.bytes === String ? $util.base64.encode(message.thumbnail, 0, message.thumbnail.length) : options.bytes === Array ? Array.prototype.slice.call(message.thumbnail) : message.thumbnail;
                if (message.sourceType != null && message.hasOwnProperty("sourceType"))
                    object.sourceType = message.sourceType;
                if (message.sourceID != null && message.hasOwnProperty("sourceID"))
                    object.sourceID = message.sourceID;
                if (message.sourceURL != null && message.hasOwnProperty("sourceURL"))
                    object.sourceURL = message.sourceURL;
                if (message.containsAutoReply != null && message.hasOwnProperty("containsAutoReply"))
                    object.containsAutoReply = message.containsAutoReply;
                if (message.renderLargerThumbnail != null && message.hasOwnProperty("renderLargerThumbnail"))
                    object.renderLargerThumbnail = message.renderLargerThumbnail;
                if (message.showAdAttribution != null && message.hasOwnProperty("showAdAttribution"))
                    object.showAdAttribution = message.showAdAttribution;
                if (message.ctwaClid != null && message.hasOwnProperty("ctwaClid"))
                    object.ctwaClid = message.ctwaClid;
                if (message.ref != null && message.hasOwnProperty("ref"))
                    object.ref = message.ref;
                if (message.clickToWhatsappCall != null && message.hasOwnProperty("clickToWhatsappCall"))
                    object.clickToWhatsappCall = message.clickToWhatsappCall;
                if (message.adContextPreviewDismissed != null && message.hasOwnProperty("adContextPreviewDismissed"))
                    object.adContextPreviewDismissed = message.adContextPreviewDismissed;
                return object;
            };

            /**
             * Converts this ExternalAdReplyInfo to JSON.
             * @function toJSON
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ExternalAdReplyInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ExternalAdReplyInfo
             * @function getTypeUrl
             * @memberof WAE2E.ContextInfo.ExternalAdReplyInfo
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ExternalAdReplyInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.ContextInfo.ExternalAdReplyInfo";
            };

            /**
             * MediaType enum.
             * @name WAE2E.ContextInfo.ExternalAdReplyInfo.MediaType
             * @enum {number}
             * @property {number} NONE=0 NONE value
             * @property {number} IMAGE=1 IMAGE value
             * @property {number} VIDEO=2 VIDEO value
             */
            ExternalAdReplyInfo.MediaType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NONE"] = 0;
                values[valuesById[1] = "IMAGE"] = 1;
                values[valuesById[2] = "VIDEO"] = 2;
                return values;
            })();

            return ExternalAdReplyInfo;
        })();

        ContextInfo.AdReplyInfo = (function() {

            /**
             * Properties of an AdReplyInfo.
             * @memberof WAE2E.ContextInfo
             * @interface IAdReplyInfo
             * @property {string|null} [advertiserName] AdReplyInfo advertiserName
             * @property {WAE2E.ContextInfo.AdReplyInfo.MediaType|null} [mediaType] AdReplyInfo mediaType
             * @property {Uint8Array|null} [JPEGThumbnail] AdReplyInfo JPEGThumbnail
             * @property {string|null} [caption] AdReplyInfo caption
             */

            /**
             * Constructs a new AdReplyInfo.
             * @memberof WAE2E.ContextInfo
             * @classdesc Represents an AdReplyInfo.
             * @implements IAdReplyInfo
             * @constructor
             * @param {WAE2E.ContextInfo.IAdReplyInfo=} [properties] Properties to set
             */
            function AdReplyInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AdReplyInfo advertiserName.
             * @member {string} advertiserName
             * @memberof WAE2E.ContextInfo.AdReplyInfo
             * @instance
             */
            AdReplyInfo.prototype.advertiserName = "";

            /**
             * AdReplyInfo mediaType.
             * @member {WAE2E.ContextInfo.AdReplyInfo.MediaType} mediaType
             * @memberof WAE2E.ContextInfo.AdReplyInfo
             * @instance
             */
            AdReplyInfo.prototype.mediaType = 0;

            /**
             * AdReplyInfo JPEGThumbnail.
             * @member {Uint8Array} JPEGThumbnail
             * @memberof WAE2E.ContextInfo.AdReplyInfo
             * @instance
             */
            AdReplyInfo.prototype.JPEGThumbnail = $util.newBuffer([]);

            /**
             * AdReplyInfo caption.
             * @member {string} caption
             * @memberof WAE2E.ContextInfo.AdReplyInfo
             * @instance
             */
            AdReplyInfo.prototype.caption = "";

            /**
             * Creates a new AdReplyInfo instance using the specified properties.
             * @function create
             * @memberof WAE2E.ContextInfo.AdReplyInfo
             * @static
             * @param {WAE2E.ContextInfo.IAdReplyInfo=} [properties] Properties to set
             * @returns {WAE2E.ContextInfo.AdReplyInfo} AdReplyInfo instance
             */
            AdReplyInfo.create = function create(properties) {
                return new AdReplyInfo(properties);
            };

            /**
             * Encodes the specified AdReplyInfo message. Does not implicitly {@link WAE2E.ContextInfo.AdReplyInfo.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.ContextInfo.AdReplyInfo
             * @static
             * @param {WAE2E.ContextInfo.IAdReplyInfo} message AdReplyInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AdReplyInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.advertiserName != null && Object.hasOwnProperty.call(message, "advertiserName"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.advertiserName);
                if (message.mediaType != null && Object.hasOwnProperty.call(message, "mediaType"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mediaType);
                if (message.JPEGThumbnail != null && Object.hasOwnProperty.call(message, "JPEGThumbnail"))
                    writer.uint32(/* id 16, wireType 2 =*/130).bytes(message.JPEGThumbnail);
                if (message.caption != null && Object.hasOwnProperty.call(message, "caption"))
                    writer.uint32(/* id 17, wireType 2 =*/138).string(message.caption);
                return writer;
            };

            /**
             * Encodes the specified AdReplyInfo message, length delimited. Does not implicitly {@link WAE2E.ContextInfo.AdReplyInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.ContextInfo.AdReplyInfo
             * @static
             * @param {WAE2E.ContextInfo.IAdReplyInfo} message AdReplyInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AdReplyInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AdReplyInfo message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.ContextInfo.AdReplyInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.ContextInfo.AdReplyInfo} AdReplyInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AdReplyInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.ContextInfo.AdReplyInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.advertiserName = reader.string();
                            break;
                        }
                    case 2: {
                            message.mediaType = reader.int32();
                            break;
                        }
                    case 16: {
                            message.JPEGThumbnail = reader.bytes();
                            break;
                        }
                    case 17: {
                            message.caption = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AdReplyInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.ContextInfo.AdReplyInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.ContextInfo.AdReplyInfo} AdReplyInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AdReplyInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AdReplyInfo message.
             * @function verify
             * @memberof WAE2E.ContextInfo.AdReplyInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AdReplyInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.advertiserName != null && message.hasOwnProperty("advertiserName"))
                    if (!$util.isString(message.advertiserName))
                        return "advertiserName: string expected";
                if (message.mediaType != null && message.hasOwnProperty("mediaType"))
                    switch (message.mediaType) {
                    default:
                        return "mediaType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail"))
                    if (!(message.JPEGThumbnail && typeof message.JPEGThumbnail.length === "number" || $util.isString(message.JPEGThumbnail)))
                        return "JPEGThumbnail: buffer expected";
                if (message.caption != null && message.hasOwnProperty("caption"))
                    if (!$util.isString(message.caption))
                        return "caption: string expected";
                return null;
            };

            /**
             * Creates an AdReplyInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.ContextInfo.AdReplyInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.ContextInfo.AdReplyInfo} AdReplyInfo
             */
            AdReplyInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.ContextInfo.AdReplyInfo)
                    return object;
                var message = new $root.WAE2E.ContextInfo.AdReplyInfo();
                if (object.advertiserName != null)
                    message.advertiserName = String(object.advertiserName);
                switch (object.mediaType) {
                default:
                    if (typeof object.mediaType === "number") {
                        message.mediaType = object.mediaType;
                        break;
                    }
                    break;
                case "NONE":
                case 0:
                    message.mediaType = 0;
                    break;
                case "IMAGE":
                case 1:
                    message.mediaType = 1;
                    break;
                case "VIDEO":
                case 2:
                    message.mediaType = 2;
                    break;
                }
                if (object.JPEGThumbnail != null)
                    if (typeof object.JPEGThumbnail === "string")
                        $util.base64.decode(object.JPEGThumbnail, message.JPEGThumbnail = $util.newBuffer($util.base64.length(object.JPEGThumbnail)), 0);
                    else if (object.JPEGThumbnail.length >= 0)
                        message.JPEGThumbnail = object.JPEGThumbnail;
                if (object.caption != null)
                    message.caption = String(object.caption);
                return message;
            };

            /**
             * Creates a plain object from an AdReplyInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.ContextInfo.AdReplyInfo
             * @static
             * @param {WAE2E.ContextInfo.AdReplyInfo} message AdReplyInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AdReplyInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.advertiserName = "";
                    object.mediaType = options.enums === String ? "NONE" : 0;
                    if (options.bytes === String)
                        object.JPEGThumbnail = "";
                    else {
                        object.JPEGThumbnail = [];
                        if (options.bytes !== Array)
                            object.JPEGThumbnail = $util.newBuffer(object.JPEGThumbnail);
                    }
                    object.caption = "";
                }
                if (message.advertiserName != null && message.hasOwnProperty("advertiserName"))
                    object.advertiserName = message.advertiserName;
                if (message.mediaType != null && message.hasOwnProperty("mediaType"))
                    object.mediaType = options.enums === String ? $root.WAE2E.ContextInfo.AdReplyInfo.MediaType[message.mediaType] === undefined ? message.mediaType : $root.WAE2E.ContextInfo.AdReplyInfo.MediaType[message.mediaType] : message.mediaType;
                if (message.JPEGThumbnail != null && message.hasOwnProperty("JPEGThumbnail"))
                    object.JPEGThumbnail = options.bytes === String ? $util.base64.encode(message.JPEGThumbnail, 0, message.JPEGThumbnail.length) : options.bytes === Array ? Array.prototype.slice.call(message.JPEGThumbnail) : message.JPEGThumbnail;
                if (message.caption != null && message.hasOwnProperty("caption"))
                    object.caption = message.caption;
                return object;
            };

            /**
             * Converts this AdReplyInfo to JSON.
             * @function toJSON
             * @memberof WAE2E.ContextInfo.AdReplyInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AdReplyInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for AdReplyInfo
             * @function getTypeUrl
             * @memberof WAE2E.ContextInfo.AdReplyInfo
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            AdReplyInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.ContextInfo.AdReplyInfo";
            };

            /**
             * MediaType enum.
             * @name WAE2E.ContextInfo.AdReplyInfo.MediaType
             * @enum {number}
             * @property {number} NONE=0 NONE value
             * @property {number} IMAGE=1 IMAGE value
             * @property {number} VIDEO=2 VIDEO value
             */
            AdReplyInfo.MediaType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NONE"] = 0;
                values[valuesById[1] = "IMAGE"] = 1;
                values[valuesById[2] = "VIDEO"] = 2;
                return values;
            })();

            return AdReplyInfo;
        })();

        ContextInfo.FeatureEligibilities = (function() {

            /**
             * Properties of a FeatureEligibilities.
             * @memberof WAE2E.ContextInfo
             * @interface IFeatureEligibilities
             * @property {boolean|null} [cannotBeReactedTo] FeatureEligibilities cannotBeReactedTo
             * @property {boolean|null} [canRequestFeedback] FeatureEligibilities canRequestFeedback
             */

            /**
             * Constructs a new FeatureEligibilities.
             * @memberof WAE2E.ContextInfo
             * @classdesc Represents a FeatureEligibilities.
             * @implements IFeatureEligibilities
             * @constructor
             * @param {WAE2E.ContextInfo.IFeatureEligibilities=} [properties] Properties to set
             */
            function FeatureEligibilities(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FeatureEligibilities cannotBeReactedTo.
             * @member {boolean} cannotBeReactedTo
             * @memberof WAE2E.ContextInfo.FeatureEligibilities
             * @instance
             */
            FeatureEligibilities.prototype.cannotBeReactedTo = false;

            /**
             * FeatureEligibilities canRequestFeedback.
             * @member {boolean} canRequestFeedback
             * @memberof WAE2E.ContextInfo.FeatureEligibilities
             * @instance
             */
            FeatureEligibilities.prototype.canRequestFeedback = false;

            /**
             * Creates a new FeatureEligibilities instance using the specified properties.
             * @function create
             * @memberof WAE2E.ContextInfo.FeatureEligibilities
             * @static
             * @param {WAE2E.ContextInfo.IFeatureEligibilities=} [properties] Properties to set
             * @returns {WAE2E.ContextInfo.FeatureEligibilities} FeatureEligibilities instance
             */
            FeatureEligibilities.create = function create(properties) {
                return new FeatureEligibilities(properties);
            };

            /**
             * Encodes the specified FeatureEligibilities message. Does not implicitly {@link WAE2E.ContextInfo.FeatureEligibilities.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.ContextInfo.FeatureEligibilities
             * @static
             * @param {WAE2E.ContextInfo.IFeatureEligibilities} message FeatureEligibilities message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FeatureEligibilities.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.cannotBeReactedTo != null && Object.hasOwnProperty.call(message, "cannotBeReactedTo"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.cannotBeReactedTo);
                if (message.canRequestFeedback != null && Object.hasOwnProperty.call(message, "canRequestFeedback"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.canRequestFeedback);
                return writer;
            };

            /**
             * Encodes the specified FeatureEligibilities message, length delimited. Does not implicitly {@link WAE2E.ContextInfo.FeatureEligibilities.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.ContextInfo.FeatureEligibilities
             * @static
             * @param {WAE2E.ContextInfo.IFeatureEligibilities} message FeatureEligibilities message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FeatureEligibilities.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FeatureEligibilities message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.ContextInfo.FeatureEligibilities
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.ContextInfo.FeatureEligibilities} FeatureEligibilities
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FeatureEligibilities.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.ContextInfo.FeatureEligibilities();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.cannotBeReactedTo = reader.bool();
                            break;
                        }
                    case 2: {
                            message.canRequestFeedback = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FeatureEligibilities message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.ContextInfo.FeatureEligibilities
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.ContextInfo.FeatureEligibilities} FeatureEligibilities
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FeatureEligibilities.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FeatureEligibilities message.
             * @function verify
             * @memberof WAE2E.ContextInfo.FeatureEligibilities
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FeatureEligibilities.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.cannotBeReactedTo != null && message.hasOwnProperty("cannotBeReactedTo"))
                    if (typeof message.cannotBeReactedTo !== "boolean")
                        return "cannotBeReactedTo: boolean expected";
                if (message.canRequestFeedback != null && message.hasOwnProperty("canRequestFeedback"))
                    if (typeof message.canRequestFeedback !== "boolean")
                        return "canRequestFeedback: boolean expected";
                return null;
            };

            /**
             * Creates a FeatureEligibilities message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.ContextInfo.FeatureEligibilities
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.ContextInfo.FeatureEligibilities} FeatureEligibilities
             */
            FeatureEligibilities.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.ContextInfo.FeatureEligibilities)
                    return object;
                var message = new $root.WAE2E.ContextInfo.FeatureEligibilities();
                if (object.cannotBeReactedTo != null)
                    message.cannotBeReactedTo = Boolean(object.cannotBeReactedTo);
                if (object.canRequestFeedback != null)
                    message.canRequestFeedback = Boolean(object.canRequestFeedback);
                return message;
            };

            /**
             * Creates a plain object from a FeatureEligibilities message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.ContextInfo.FeatureEligibilities
             * @static
             * @param {WAE2E.ContextInfo.FeatureEligibilities} message FeatureEligibilities
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FeatureEligibilities.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.cannotBeReactedTo = false;
                    object.canRequestFeedback = false;
                }
                if (message.cannotBeReactedTo != null && message.hasOwnProperty("cannotBeReactedTo"))
                    object.cannotBeReactedTo = message.cannotBeReactedTo;
                if (message.canRequestFeedback != null && message.hasOwnProperty("canRequestFeedback"))
                    object.canRequestFeedback = message.canRequestFeedback;
                return object;
            };

            /**
             * Converts this FeatureEligibilities to JSON.
             * @function toJSON
             * @memberof WAE2E.ContextInfo.FeatureEligibilities
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FeatureEligibilities.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for FeatureEligibilities
             * @function getTypeUrl
             * @memberof WAE2E.ContextInfo.FeatureEligibilities
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            FeatureEligibilities.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.ContextInfo.FeatureEligibilities";
            };

            return FeatureEligibilities;
        })();

        ContextInfo.DataSharingContext = (function() {

            /**
             * Properties of a DataSharingContext.
             * @memberof WAE2E.ContextInfo
             * @interface IDataSharingContext
             * @property {boolean|null} [showMmDisclosure] DataSharingContext showMmDisclosure
             * @property {string|null} [encryptedSignalTokenConsented] DataSharingContext encryptedSignalTokenConsented
             */

            /**
             * Constructs a new DataSharingContext.
             * @memberof WAE2E.ContextInfo
             * @classdesc Represents a DataSharingContext.
             * @implements IDataSharingContext
             * @constructor
             * @param {WAE2E.ContextInfo.IDataSharingContext=} [properties] Properties to set
             */
            function DataSharingContext(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DataSharingContext showMmDisclosure.
             * @member {boolean} showMmDisclosure
             * @memberof WAE2E.ContextInfo.DataSharingContext
             * @instance
             */
            DataSharingContext.prototype.showMmDisclosure = false;

            /**
             * DataSharingContext encryptedSignalTokenConsented.
             * @member {string} encryptedSignalTokenConsented
             * @memberof WAE2E.ContextInfo.DataSharingContext
             * @instance
             */
            DataSharingContext.prototype.encryptedSignalTokenConsented = "";

            /**
             * Creates a new DataSharingContext instance using the specified properties.
             * @function create
             * @memberof WAE2E.ContextInfo.DataSharingContext
             * @static
             * @param {WAE2E.ContextInfo.IDataSharingContext=} [properties] Properties to set
             * @returns {WAE2E.ContextInfo.DataSharingContext} DataSharingContext instance
             */
            DataSharingContext.create = function create(properties) {
                return new DataSharingContext(properties);
            };

            /**
             * Encodes the specified DataSharingContext message. Does not implicitly {@link WAE2E.ContextInfo.DataSharingContext.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.ContextInfo.DataSharingContext
             * @static
             * @param {WAE2E.ContextInfo.IDataSharingContext} message DataSharingContext message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DataSharingContext.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.showMmDisclosure != null && Object.hasOwnProperty.call(message, "showMmDisclosure"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.showMmDisclosure);
                if (message.encryptedSignalTokenConsented != null && Object.hasOwnProperty.call(message, "encryptedSignalTokenConsented"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.encryptedSignalTokenConsented);
                return writer;
            };

            /**
             * Encodes the specified DataSharingContext message, length delimited. Does not implicitly {@link WAE2E.ContextInfo.DataSharingContext.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.ContextInfo.DataSharingContext
             * @static
             * @param {WAE2E.ContextInfo.IDataSharingContext} message DataSharingContext message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DataSharingContext.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DataSharingContext message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.ContextInfo.DataSharingContext
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.ContextInfo.DataSharingContext} DataSharingContext
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DataSharingContext.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.ContextInfo.DataSharingContext();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.showMmDisclosure = reader.bool();
                            break;
                        }
                    case 2: {
                            message.encryptedSignalTokenConsented = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DataSharingContext message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.ContextInfo.DataSharingContext
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.ContextInfo.DataSharingContext} DataSharingContext
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DataSharingContext.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DataSharingContext message.
             * @function verify
             * @memberof WAE2E.ContextInfo.DataSharingContext
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DataSharingContext.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.showMmDisclosure != null && message.hasOwnProperty("showMmDisclosure"))
                    if (typeof message.showMmDisclosure !== "boolean")
                        return "showMmDisclosure: boolean expected";
                if (message.encryptedSignalTokenConsented != null && message.hasOwnProperty("encryptedSignalTokenConsented"))
                    if (!$util.isString(message.encryptedSignalTokenConsented))
                        return "encryptedSignalTokenConsented: string expected";
                return null;
            };

            /**
             * Creates a DataSharingContext message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.ContextInfo.DataSharingContext
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.ContextInfo.DataSharingContext} DataSharingContext
             */
            DataSharingContext.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.ContextInfo.DataSharingContext)
                    return object;
                var message = new $root.WAE2E.ContextInfo.DataSharingContext();
                if (object.showMmDisclosure != null)
                    message.showMmDisclosure = Boolean(object.showMmDisclosure);
                if (object.encryptedSignalTokenConsented != null)
                    message.encryptedSignalTokenConsented = String(object.encryptedSignalTokenConsented);
                return message;
            };

            /**
             * Creates a plain object from a DataSharingContext message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.ContextInfo.DataSharingContext
             * @static
             * @param {WAE2E.ContextInfo.DataSharingContext} message DataSharingContext
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DataSharingContext.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.showMmDisclosure = false;
                    object.encryptedSignalTokenConsented = "";
                }
                if (message.showMmDisclosure != null && message.hasOwnProperty("showMmDisclosure"))
                    object.showMmDisclosure = message.showMmDisclosure;
                if (message.encryptedSignalTokenConsented != null && message.hasOwnProperty("encryptedSignalTokenConsented"))
                    object.encryptedSignalTokenConsented = message.encryptedSignalTokenConsented;
                return object;
            };

            /**
             * Converts this DataSharingContext to JSON.
             * @function toJSON
             * @memberof WAE2E.ContextInfo.DataSharingContext
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DataSharingContext.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for DataSharingContext
             * @function getTypeUrl
             * @memberof WAE2E.ContextInfo.DataSharingContext
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            DataSharingContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.ContextInfo.DataSharingContext";
            };

            return DataSharingContext;
        })();

        ContextInfo.UTMInfo = (function() {

            /**
             * Properties of a UTMInfo.
             * @memberof WAE2E.ContextInfo
             * @interface IUTMInfo
             * @property {string|null} [utmSource] UTMInfo utmSource
             * @property {string|null} [utmCampaign] UTMInfo utmCampaign
             */

            /**
             * Constructs a new UTMInfo.
             * @memberof WAE2E.ContextInfo
             * @classdesc Represents a UTMInfo.
             * @implements IUTMInfo
             * @constructor
             * @param {WAE2E.ContextInfo.IUTMInfo=} [properties] Properties to set
             */
            function UTMInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UTMInfo utmSource.
             * @member {string} utmSource
             * @memberof WAE2E.ContextInfo.UTMInfo
             * @instance
             */
            UTMInfo.prototype.utmSource = "";

            /**
             * UTMInfo utmCampaign.
             * @member {string} utmCampaign
             * @memberof WAE2E.ContextInfo.UTMInfo
             * @instance
             */
            UTMInfo.prototype.utmCampaign = "";

            /**
             * Creates a new UTMInfo instance using the specified properties.
             * @function create
             * @memberof WAE2E.ContextInfo.UTMInfo
             * @static
             * @param {WAE2E.ContextInfo.IUTMInfo=} [properties] Properties to set
             * @returns {WAE2E.ContextInfo.UTMInfo} UTMInfo instance
             */
            UTMInfo.create = function create(properties) {
                return new UTMInfo(properties);
            };

            /**
             * Encodes the specified UTMInfo message. Does not implicitly {@link WAE2E.ContextInfo.UTMInfo.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.ContextInfo.UTMInfo
             * @static
             * @param {WAE2E.ContextInfo.IUTMInfo} message UTMInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UTMInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.utmSource != null && Object.hasOwnProperty.call(message, "utmSource"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.utmSource);
                if (message.utmCampaign != null && Object.hasOwnProperty.call(message, "utmCampaign"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.utmCampaign);
                return writer;
            };

            /**
             * Encodes the specified UTMInfo message, length delimited. Does not implicitly {@link WAE2E.ContextInfo.UTMInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.ContextInfo.UTMInfo
             * @static
             * @param {WAE2E.ContextInfo.IUTMInfo} message UTMInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UTMInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a UTMInfo message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.ContextInfo.UTMInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.ContextInfo.UTMInfo} UTMInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UTMInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.ContextInfo.UTMInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.utmSource = reader.string();
                            break;
                        }
                    case 2: {
                            message.utmCampaign = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a UTMInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.ContextInfo.UTMInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.ContextInfo.UTMInfo} UTMInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UTMInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a UTMInfo message.
             * @function verify
             * @memberof WAE2E.ContextInfo.UTMInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UTMInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.utmSource != null && message.hasOwnProperty("utmSource"))
                    if (!$util.isString(message.utmSource))
                        return "utmSource: string expected";
                if (message.utmCampaign != null && message.hasOwnProperty("utmCampaign"))
                    if (!$util.isString(message.utmCampaign))
                        return "utmCampaign: string expected";
                return null;
            };

            /**
             * Creates a UTMInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.ContextInfo.UTMInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.ContextInfo.UTMInfo} UTMInfo
             */
            UTMInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.ContextInfo.UTMInfo)
                    return object;
                var message = new $root.WAE2E.ContextInfo.UTMInfo();
                if (object.utmSource != null)
                    message.utmSource = String(object.utmSource);
                if (object.utmCampaign != null)
                    message.utmCampaign = String(object.utmCampaign);
                return message;
            };

            /**
             * Creates a plain object from a UTMInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.ContextInfo.UTMInfo
             * @static
             * @param {WAE2E.ContextInfo.UTMInfo} message UTMInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UTMInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.utmSource = "";
                    object.utmCampaign = "";
                }
                if (message.utmSource != null && message.hasOwnProperty("utmSource"))
                    object.utmSource = message.utmSource;
                if (message.utmCampaign != null && message.hasOwnProperty("utmCampaign"))
                    object.utmCampaign = message.utmCampaign;
                return object;
            };

            /**
             * Converts this UTMInfo to JSON.
             * @function toJSON
             * @memberof WAE2E.ContextInfo.UTMInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UTMInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for UTMInfo
             * @function getTypeUrl
             * @memberof WAE2E.ContextInfo.UTMInfo
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            UTMInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.ContextInfo.UTMInfo";
            };

            return UTMInfo;
        })();

        ContextInfo.BusinessMessageForwardInfo = (function() {

            /**
             * Properties of a BusinessMessageForwardInfo.
             * @memberof WAE2E.ContextInfo
             * @interface IBusinessMessageForwardInfo
             * @property {string|null} [businessOwnerJID] BusinessMessageForwardInfo businessOwnerJID
             */

            /**
             * Constructs a new BusinessMessageForwardInfo.
             * @memberof WAE2E.ContextInfo
             * @classdesc Represents a BusinessMessageForwardInfo.
             * @implements IBusinessMessageForwardInfo
             * @constructor
             * @param {WAE2E.ContextInfo.IBusinessMessageForwardInfo=} [properties] Properties to set
             */
            function BusinessMessageForwardInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BusinessMessageForwardInfo businessOwnerJID.
             * @member {string} businessOwnerJID
             * @memberof WAE2E.ContextInfo.BusinessMessageForwardInfo
             * @instance
             */
            BusinessMessageForwardInfo.prototype.businessOwnerJID = "";

            /**
             * Creates a new BusinessMessageForwardInfo instance using the specified properties.
             * @function create
             * @memberof WAE2E.ContextInfo.BusinessMessageForwardInfo
             * @static
             * @param {WAE2E.ContextInfo.IBusinessMessageForwardInfo=} [properties] Properties to set
             * @returns {WAE2E.ContextInfo.BusinessMessageForwardInfo} BusinessMessageForwardInfo instance
             */
            BusinessMessageForwardInfo.create = function create(properties) {
                return new BusinessMessageForwardInfo(properties);
            };

            /**
             * Encodes the specified BusinessMessageForwardInfo message. Does not implicitly {@link WAE2E.ContextInfo.BusinessMessageForwardInfo.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.ContextInfo.BusinessMessageForwardInfo
             * @static
             * @param {WAE2E.ContextInfo.IBusinessMessageForwardInfo} message BusinessMessageForwardInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BusinessMessageForwardInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.businessOwnerJID != null && Object.hasOwnProperty.call(message, "businessOwnerJID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.businessOwnerJID);
                return writer;
            };

            /**
             * Encodes the specified BusinessMessageForwardInfo message, length delimited. Does not implicitly {@link WAE2E.ContextInfo.BusinessMessageForwardInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.ContextInfo.BusinessMessageForwardInfo
             * @static
             * @param {WAE2E.ContextInfo.IBusinessMessageForwardInfo} message BusinessMessageForwardInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BusinessMessageForwardInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BusinessMessageForwardInfo message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.ContextInfo.BusinessMessageForwardInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.ContextInfo.BusinessMessageForwardInfo} BusinessMessageForwardInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BusinessMessageForwardInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.ContextInfo.BusinessMessageForwardInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.businessOwnerJID = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BusinessMessageForwardInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.ContextInfo.BusinessMessageForwardInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.ContextInfo.BusinessMessageForwardInfo} BusinessMessageForwardInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BusinessMessageForwardInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BusinessMessageForwardInfo message.
             * @function verify
             * @memberof WAE2E.ContextInfo.BusinessMessageForwardInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BusinessMessageForwardInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.businessOwnerJID != null && message.hasOwnProperty("businessOwnerJID"))
                    if (!$util.isString(message.businessOwnerJID))
                        return "businessOwnerJID: string expected";
                return null;
            };

            /**
             * Creates a BusinessMessageForwardInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.ContextInfo.BusinessMessageForwardInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.ContextInfo.BusinessMessageForwardInfo} BusinessMessageForwardInfo
             */
            BusinessMessageForwardInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.ContextInfo.BusinessMessageForwardInfo)
                    return object;
                var message = new $root.WAE2E.ContextInfo.BusinessMessageForwardInfo();
                if (object.businessOwnerJID != null)
                    message.businessOwnerJID = String(object.businessOwnerJID);
                return message;
            };

            /**
             * Creates a plain object from a BusinessMessageForwardInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.ContextInfo.BusinessMessageForwardInfo
             * @static
             * @param {WAE2E.ContextInfo.BusinessMessageForwardInfo} message BusinessMessageForwardInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BusinessMessageForwardInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.businessOwnerJID = "";
                if (message.businessOwnerJID != null && message.hasOwnProperty("businessOwnerJID"))
                    object.businessOwnerJID = message.businessOwnerJID;
                return object;
            };

            /**
             * Converts this BusinessMessageForwardInfo to JSON.
             * @function toJSON
             * @memberof WAE2E.ContextInfo.BusinessMessageForwardInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BusinessMessageForwardInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for BusinessMessageForwardInfo
             * @function getTypeUrl
             * @memberof WAE2E.ContextInfo.BusinessMessageForwardInfo
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            BusinessMessageForwardInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.ContextInfo.BusinessMessageForwardInfo";
            };

            return BusinessMessageForwardInfo;
        })();

        return ContextInfo;
    })();

    WAE2E.BotPluginMetadata = (function() {

        /**
         * Properties of a BotPluginMetadata.
         * @memberof WAE2E
         * @interface IBotPluginMetadata
         * @property {WAE2E.BotPluginMetadata.SearchProvider|null} [provider] BotPluginMetadata provider
         * @property {WAE2E.BotPluginMetadata.PluginType|null} [pluginType] BotPluginMetadata pluginType
         * @property {string|null} [thumbnailCDNURL] BotPluginMetadata thumbnailCDNURL
         * @property {string|null} [profilePhotoCDNURL] BotPluginMetadata profilePhotoCDNURL
         * @property {string|null} [searchProviderURL] BotPluginMetadata searchProviderURL
         * @property {number|null} [referenceIndex] BotPluginMetadata referenceIndex
         * @property {number|null} [expectedLinksCount] BotPluginMetadata expectedLinksCount
         * @property {string|null} [searchQuery] BotPluginMetadata searchQuery
         * @property {WAProtocol.IMessageKey|null} [parentPluginMessageKey] BotPluginMetadata parentPluginMessageKey
         * @property {WAE2E.BotPluginMetadata.PluginType|null} [parentPluginType] BotPluginMetadata parentPluginType
         */

        /**
         * Constructs a new BotPluginMetadata.
         * @memberof WAE2E
         * @classdesc Represents a BotPluginMetadata.
         * @implements IBotPluginMetadata
         * @constructor
         * @param {WAE2E.IBotPluginMetadata=} [properties] Properties to set
         */
        function BotPluginMetadata(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BotPluginMetadata provider.
         * @member {WAE2E.BotPluginMetadata.SearchProvider} provider
         * @memberof WAE2E.BotPluginMetadata
         * @instance
         */
        BotPluginMetadata.prototype.provider = 1;

        /**
         * BotPluginMetadata pluginType.
         * @member {WAE2E.BotPluginMetadata.PluginType} pluginType
         * @memberof WAE2E.BotPluginMetadata
         * @instance
         */
        BotPluginMetadata.prototype.pluginType = 1;

        /**
         * BotPluginMetadata thumbnailCDNURL.
         * @member {string} thumbnailCDNURL
         * @memberof WAE2E.BotPluginMetadata
         * @instance
         */
        BotPluginMetadata.prototype.thumbnailCDNURL = "";

        /**
         * BotPluginMetadata profilePhotoCDNURL.
         * @member {string} profilePhotoCDNURL
         * @memberof WAE2E.BotPluginMetadata
         * @instance
         */
        BotPluginMetadata.prototype.profilePhotoCDNURL = "";

        /**
         * BotPluginMetadata searchProviderURL.
         * @member {string} searchProviderURL
         * @memberof WAE2E.BotPluginMetadata
         * @instance
         */
        BotPluginMetadata.prototype.searchProviderURL = "";

        /**
         * BotPluginMetadata referenceIndex.
         * @member {number} referenceIndex
         * @memberof WAE2E.BotPluginMetadata
         * @instance
         */
        BotPluginMetadata.prototype.referenceIndex = 0;

        /**
         * BotPluginMetadata expectedLinksCount.
         * @member {number} expectedLinksCount
         * @memberof WAE2E.BotPluginMetadata
         * @instance
         */
        BotPluginMetadata.prototype.expectedLinksCount = 0;

        /**
         * BotPluginMetadata searchQuery.
         * @member {string} searchQuery
         * @memberof WAE2E.BotPluginMetadata
         * @instance
         */
        BotPluginMetadata.prototype.searchQuery = "";

        /**
         * BotPluginMetadata parentPluginMessageKey.
         * @member {WAProtocol.IMessageKey|null|undefined} parentPluginMessageKey
         * @memberof WAE2E.BotPluginMetadata
         * @instance
         */
        BotPluginMetadata.prototype.parentPluginMessageKey = null;

        /**
         * BotPluginMetadata parentPluginType.
         * @member {WAE2E.BotPluginMetadata.PluginType} parentPluginType
         * @memberof WAE2E.BotPluginMetadata
         * @instance
         */
        BotPluginMetadata.prototype.parentPluginType = 1;

        /**
         * Creates a new BotPluginMetadata instance using the specified properties.
         * @function create
         * @memberof WAE2E.BotPluginMetadata
         * @static
         * @param {WAE2E.IBotPluginMetadata=} [properties] Properties to set
         * @returns {WAE2E.BotPluginMetadata} BotPluginMetadata instance
         */
        BotPluginMetadata.create = function create(properties) {
            return new BotPluginMetadata(properties);
        };

        /**
         * Encodes the specified BotPluginMetadata message. Does not implicitly {@link WAE2E.BotPluginMetadata.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.BotPluginMetadata
         * @static
         * @param {WAE2E.IBotPluginMetadata} message BotPluginMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BotPluginMetadata.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.provider != null && Object.hasOwnProperty.call(message, "provider"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.provider);
            if (message.pluginType != null && Object.hasOwnProperty.call(message, "pluginType"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pluginType);
            if (message.thumbnailCDNURL != null && Object.hasOwnProperty.call(message, "thumbnailCDNURL"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.thumbnailCDNURL);
            if (message.profilePhotoCDNURL != null && Object.hasOwnProperty.call(message, "profilePhotoCDNURL"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.profilePhotoCDNURL);
            if (message.searchProviderURL != null && Object.hasOwnProperty.call(message, "searchProviderURL"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.searchProviderURL);
            if (message.referenceIndex != null && Object.hasOwnProperty.call(message, "referenceIndex"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.referenceIndex);
            if (message.expectedLinksCount != null && Object.hasOwnProperty.call(message, "expectedLinksCount"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.expectedLinksCount);
            if (message.searchQuery != null && Object.hasOwnProperty.call(message, "searchQuery"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.searchQuery);
            if (message.parentPluginMessageKey != null && Object.hasOwnProperty.call(message, "parentPluginMessageKey"))
                $root.WAProtocol.MessageKey.encode(message.parentPluginMessageKey, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.parentPluginType != null && Object.hasOwnProperty.call(message, "parentPluginType"))
                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.parentPluginType);
            return writer;
        };

        /**
         * Encodes the specified BotPluginMetadata message, length delimited. Does not implicitly {@link WAE2E.BotPluginMetadata.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.BotPluginMetadata
         * @static
         * @param {WAE2E.IBotPluginMetadata} message BotPluginMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BotPluginMetadata.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BotPluginMetadata message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.BotPluginMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.BotPluginMetadata} BotPluginMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BotPluginMetadata.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.BotPluginMetadata();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.provider = reader.int32();
                        break;
                    }
                case 2: {
                        message.pluginType = reader.int32();
                        break;
                    }
                case 3: {
                        message.thumbnailCDNURL = reader.string();
                        break;
                    }
                case 4: {
                        message.profilePhotoCDNURL = reader.string();
                        break;
                    }
                case 5: {
                        message.searchProviderURL = reader.string();
                        break;
                    }
                case 6: {
                        message.referenceIndex = reader.uint32();
                        break;
                    }
                case 7: {
                        message.expectedLinksCount = reader.uint32();
                        break;
                    }
                case 9: {
                        message.searchQuery = reader.string();
                        break;
                    }
                case 10: {
                        message.parentPluginMessageKey = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                        break;
                    }
                case 11: {
                        message.parentPluginType = reader.int32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BotPluginMetadata message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.BotPluginMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.BotPluginMetadata} BotPluginMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BotPluginMetadata.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BotPluginMetadata message.
         * @function verify
         * @memberof WAE2E.BotPluginMetadata
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BotPluginMetadata.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.provider != null && message.hasOwnProperty("provider"))
                switch (message.provider) {
                default:
                    return "provider: enum value expected";
                case 1:
                case 2:
                    break;
                }
            if (message.pluginType != null && message.hasOwnProperty("pluginType"))
                switch (message.pluginType) {
                default:
                    return "pluginType: enum value expected";
                case 1:
                case 2:
                    break;
                }
            if (message.thumbnailCDNURL != null && message.hasOwnProperty("thumbnailCDNURL"))
                if (!$util.isString(message.thumbnailCDNURL))
                    return "thumbnailCDNURL: string expected";
            if (message.profilePhotoCDNURL != null && message.hasOwnProperty("profilePhotoCDNURL"))
                if (!$util.isString(message.profilePhotoCDNURL))
                    return "profilePhotoCDNURL: string expected";
            if (message.searchProviderURL != null && message.hasOwnProperty("searchProviderURL"))
                if (!$util.isString(message.searchProviderURL))
                    return "searchProviderURL: string expected";
            if (message.referenceIndex != null && message.hasOwnProperty("referenceIndex"))
                if (!$util.isInteger(message.referenceIndex))
                    return "referenceIndex: integer expected";
            if (message.expectedLinksCount != null && message.hasOwnProperty("expectedLinksCount"))
                if (!$util.isInteger(message.expectedLinksCount))
                    return "expectedLinksCount: integer expected";
            if (message.searchQuery != null && message.hasOwnProperty("searchQuery"))
                if (!$util.isString(message.searchQuery))
                    return "searchQuery: string expected";
            if (message.parentPluginMessageKey != null && message.hasOwnProperty("parentPluginMessageKey")) {
                var error = $root.WAProtocol.MessageKey.verify(message.parentPluginMessageKey);
                if (error)
                    return "parentPluginMessageKey." + error;
            }
            if (message.parentPluginType != null && message.hasOwnProperty("parentPluginType"))
                switch (message.parentPluginType) {
                default:
                    return "parentPluginType: enum value expected";
                case 1:
                case 2:
                    break;
                }
            return null;
        };

        /**
         * Creates a BotPluginMetadata message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.BotPluginMetadata
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.BotPluginMetadata} BotPluginMetadata
         */
        BotPluginMetadata.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.BotPluginMetadata)
                return object;
            var message = new $root.WAE2E.BotPluginMetadata();
            switch (object.provider) {
            default:
                if (typeof object.provider === "number") {
                    message.provider = object.provider;
                    break;
                }
                break;
            case "BING":
            case 1:
                message.provider = 1;
                break;
            case "GOOGLE":
            case 2:
                message.provider = 2;
                break;
            }
            switch (object.pluginType) {
            default:
                if (typeof object.pluginType === "number") {
                    message.pluginType = object.pluginType;
                    break;
                }
                break;
            case "REELS":
            case 1:
                message.pluginType = 1;
                break;
            case "SEARCH":
            case 2:
                message.pluginType = 2;
                break;
            }
            if (object.thumbnailCDNURL != null)
                message.thumbnailCDNURL = String(object.thumbnailCDNURL);
            if (object.profilePhotoCDNURL != null)
                message.profilePhotoCDNURL = String(object.profilePhotoCDNURL);
            if (object.searchProviderURL != null)
                message.searchProviderURL = String(object.searchProviderURL);
            if (object.referenceIndex != null)
                message.referenceIndex = object.referenceIndex >>> 0;
            if (object.expectedLinksCount != null)
                message.expectedLinksCount = object.expectedLinksCount >>> 0;
            if (object.searchQuery != null)
                message.searchQuery = String(object.searchQuery);
            if (object.parentPluginMessageKey != null) {
                if (typeof object.parentPluginMessageKey !== "object")
                    throw TypeError(".WAE2E.BotPluginMetadata.parentPluginMessageKey: object expected");
                message.parentPluginMessageKey = $root.WAProtocol.MessageKey.fromObject(object.parentPluginMessageKey);
            }
            switch (object.parentPluginType) {
            default:
                if (typeof object.parentPluginType === "number") {
                    message.parentPluginType = object.parentPluginType;
                    break;
                }
                break;
            case "REELS":
            case 1:
                message.parentPluginType = 1;
                break;
            case "SEARCH":
            case 2:
                message.parentPluginType = 2;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a BotPluginMetadata message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.BotPluginMetadata
         * @static
         * @param {WAE2E.BotPluginMetadata} message BotPluginMetadata
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BotPluginMetadata.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.provider = options.enums === String ? "BING" : 1;
                object.pluginType = options.enums === String ? "REELS" : 1;
                object.thumbnailCDNURL = "";
                object.profilePhotoCDNURL = "";
                object.searchProviderURL = "";
                object.referenceIndex = 0;
                object.expectedLinksCount = 0;
                object.searchQuery = "";
                object.parentPluginMessageKey = null;
                object.parentPluginType = options.enums === String ? "REELS" : 1;
            }
            if (message.provider != null && message.hasOwnProperty("provider"))
                object.provider = options.enums === String ? $root.WAE2E.BotPluginMetadata.SearchProvider[message.provider] === undefined ? message.provider : $root.WAE2E.BotPluginMetadata.SearchProvider[message.provider] : message.provider;
            if (message.pluginType != null && message.hasOwnProperty("pluginType"))
                object.pluginType = options.enums === String ? $root.WAE2E.BotPluginMetadata.PluginType[message.pluginType] === undefined ? message.pluginType : $root.WAE2E.BotPluginMetadata.PluginType[message.pluginType] : message.pluginType;
            if (message.thumbnailCDNURL != null && message.hasOwnProperty("thumbnailCDNURL"))
                object.thumbnailCDNURL = message.thumbnailCDNURL;
            if (message.profilePhotoCDNURL != null && message.hasOwnProperty("profilePhotoCDNURL"))
                object.profilePhotoCDNURL = message.profilePhotoCDNURL;
            if (message.searchProviderURL != null && message.hasOwnProperty("searchProviderURL"))
                object.searchProviderURL = message.searchProviderURL;
            if (message.referenceIndex != null && message.hasOwnProperty("referenceIndex"))
                object.referenceIndex = message.referenceIndex;
            if (message.expectedLinksCount != null && message.hasOwnProperty("expectedLinksCount"))
                object.expectedLinksCount = message.expectedLinksCount;
            if (message.searchQuery != null && message.hasOwnProperty("searchQuery"))
                object.searchQuery = message.searchQuery;
            if (message.parentPluginMessageKey != null && message.hasOwnProperty("parentPluginMessageKey"))
                object.parentPluginMessageKey = $root.WAProtocol.MessageKey.toObject(message.parentPluginMessageKey, options);
            if (message.parentPluginType != null && message.hasOwnProperty("parentPluginType"))
                object.parentPluginType = options.enums === String ? $root.WAE2E.BotPluginMetadata.PluginType[message.parentPluginType] === undefined ? message.parentPluginType : $root.WAE2E.BotPluginMetadata.PluginType[message.parentPluginType] : message.parentPluginType;
            return object;
        };

        /**
         * Converts this BotPluginMetadata to JSON.
         * @function toJSON
         * @memberof WAE2E.BotPluginMetadata
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BotPluginMetadata.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for BotPluginMetadata
         * @function getTypeUrl
         * @memberof WAE2E.BotPluginMetadata
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        BotPluginMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.BotPluginMetadata";
        };

        /**
         * PluginType enum.
         * @name WAE2E.BotPluginMetadata.PluginType
         * @enum {number}
         * @property {number} REELS=1 REELS value
         * @property {number} SEARCH=2 SEARCH value
         */
        BotPluginMetadata.PluginType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "REELS"] = 1;
            values[valuesById[2] = "SEARCH"] = 2;
            return values;
        })();

        /**
         * SearchProvider enum.
         * @name WAE2E.BotPluginMetadata.SearchProvider
         * @enum {number}
         * @property {number} BING=1 BING value
         * @property {number} GOOGLE=2 GOOGLE value
         */
        BotPluginMetadata.SearchProvider = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "BING"] = 1;
            values[valuesById[2] = "GOOGLE"] = 2;
            return values;
        })();

        return BotPluginMetadata;
    })();

    WAE2E.BotSearchMetadata = (function() {

        /**
         * Properties of a BotSearchMetadata.
         * @memberof WAE2E
         * @interface IBotSearchMetadata
         * @property {string|null} [sessionID] BotSearchMetadata sessionID
         * @property {WAE2E.BotSearchMetadata.SessionSource|null} [sessionSource] BotSearchMetadata sessionSource
         */

        /**
         * Constructs a new BotSearchMetadata.
         * @memberof WAE2E
         * @classdesc Represents a BotSearchMetadata.
         * @implements IBotSearchMetadata
         * @constructor
         * @param {WAE2E.IBotSearchMetadata=} [properties] Properties to set
         */
        function BotSearchMetadata(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BotSearchMetadata sessionID.
         * @member {string} sessionID
         * @memberof WAE2E.BotSearchMetadata
         * @instance
         */
        BotSearchMetadata.prototype.sessionID = "";

        /**
         * BotSearchMetadata sessionSource.
         * @member {WAE2E.BotSearchMetadata.SessionSource} sessionSource
         * @memberof WAE2E.BotSearchMetadata
         * @instance
         */
        BotSearchMetadata.prototype.sessionSource = 1;

        /**
         * Creates a new BotSearchMetadata instance using the specified properties.
         * @function create
         * @memberof WAE2E.BotSearchMetadata
         * @static
         * @param {WAE2E.IBotSearchMetadata=} [properties] Properties to set
         * @returns {WAE2E.BotSearchMetadata} BotSearchMetadata instance
         */
        BotSearchMetadata.create = function create(properties) {
            return new BotSearchMetadata(properties);
        };

        /**
         * Encodes the specified BotSearchMetadata message. Does not implicitly {@link WAE2E.BotSearchMetadata.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.BotSearchMetadata
         * @static
         * @param {WAE2E.IBotSearchMetadata} message BotSearchMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BotSearchMetadata.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sessionID != null && Object.hasOwnProperty.call(message, "sessionID"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.sessionID);
            if (message.sessionSource != null && Object.hasOwnProperty.call(message, "sessionSource"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.sessionSource);
            return writer;
        };

        /**
         * Encodes the specified BotSearchMetadata message, length delimited. Does not implicitly {@link WAE2E.BotSearchMetadata.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.BotSearchMetadata
         * @static
         * @param {WAE2E.IBotSearchMetadata} message BotSearchMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BotSearchMetadata.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BotSearchMetadata message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.BotSearchMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.BotSearchMetadata} BotSearchMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BotSearchMetadata.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.BotSearchMetadata();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.sessionID = reader.string();
                        break;
                    }
                case 2: {
                        message.sessionSource = reader.int32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BotSearchMetadata message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.BotSearchMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.BotSearchMetadata} BotSearchMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BotSearchMetadata.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BotSearchMetadata message.
         * @function verify
         * @memberof WAE2E.BotSearchMetadata
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BotSearchMetadata.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.sessionID != null && message.hasOwnProperty("sessionID"))
                if (!$util.isString(message.sessionID))
                    return "sessionID: string expected";
            if (message.sessionSource != null && message.hasOwnProperty("sessionSource"))
                switch (message.sessionSource) {
                default:
                    return "sessionSource: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            return null;
        };

        /**
         * Creates a BotSearchMetadata message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.BotSearchMetadata
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.BotSearchMetadata} BotSearchMetadata
         */
        BotSearchMetadata.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.BotSearchMetadata)
                return object;
            var message = new $root.WAE2E.BotSearchMetadata();
            if (object.sessionID != null)
                message.sessionID = String(object.sessionID);
            switch (object.sessionSource) {
            default:
                if (typeof object.sessionSource === "number") {
                    message.sessionSource = object.sessionSource;
                    break;
                }
                break;
            case "NULL_STATE":
            case 1:
                message.sessionSource = 1;
                break;
            case "TYPEAHEAD":
            case 2:
                message.sessionSource = 2;
                break;
            case "USER_INPUT":
            case 3:
                message.sessionSource = 3;
                break;
            case "EMU_FLASH":
            case 4:
                message.sessionSource = 4;
                break;
            case "EMU_FLASH_FOLLOWUP":
            case 5:
                message.sessionSource = 5;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a BotSearchMetadata message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.BotSearchMetadata
         * @static
         * @param {WAE2E.BotSearchMetadata} message BotSearchMetadata
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BotSearchMetadata.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.sessionID = "";
                object.sessionSource = options.enums === String ? "NULL_STATE" : 1;
            }
            if (message.sessionID != null && message.hasOwnProperty("sessionID"))
                object.sessionID = message.sessionID;
            if (message.sessionSource != null && message.hasOwnProperty("sessionSource"))
                object.sessionSource = options.enums === String ? $root.WAE2E.BotSearchMetadata.SessionSource[message.sessionSource] === undefined ? message.sessionSource : $root.WAE2E.BotSearchMetadata.SessionSource[message.sessionSource] : message.sessionSource;
            return object;
        };

        /**
         * Converts this BotSearchMetadata to JSON.
         * @function toJSON
         * @memberof WAE2E.BotSearchMetadata
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BotSearchMetadata.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for BotSearchMetadata
         * @function getTypeUrl
         * @memberof WAE2E.BotSearchMetadata
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        BotSearchMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.BotSearchMetadata";
        };

        /**
         * SessionSource enum.
         * @name WAE2E.BotSearchMetadata.SessionSource
         * @enum {number}
         * @property {number} NULL_STATE=1 NULL_STATE value
         * @property {number} TYPEAHEAD=2 TYPEAHEAD value
         * @property {number} USER_INPUT=3 USER_INPUT value
         * @property {number} EMU_FLASH=4 EMU_FLASH value
         * @property {number} EMU_FLASH_FOLLOWUP=5 EMU_FLASH_FOLLOWUP value
         */
        BotSearchMetadata.SessionSource = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "NULL_STATE"] = 1;
            values[valuesById[2] = "TYPEAHEAD"] = 2;
            values[valuesById[3] = "USER_INPUT"] = 3;
            values[valuesById[4] = "EMU_FLASH"] = 4;
            values[valuesById[5] = "EMU_FLASH_FOLLOWUP"] = 5;
            return values;
        })();

        return BotSearchMetadata;
    })();

    WAE2E.BotReminderMetadata = (function() {

        /**
         * Properties of a BotReminderMetadata.
         * @memberof WAE2E
         * @interface IBotReminderMetadata
         * @property {WAProtocol.IMessageKey|null} [requestMessageKey] BotReminderMetadata requestMessageKey
         * @property {WAE2E.BotReminderMetadata.ReminderAction|null} [action] BotReminderMetadata action
         * @property {string|null} [name] BotReminderMetadata name
         * @property {number|Long|null} [nextTriggerTimestamp] BotReminderMetadata nextTriggerTimestamp
         * @property {WAE2E.BotReminderMetadata.ReminderFrequency|null} [frequency] BotReminderMetadata frequency
         */

        /**
         * Constructs a new BotReminderMetadata.
         * @memberof WAE2E
         * @classdesc Represents a BotReminderMetadata.
         * @implements IBotReminderMetadata
         * @constructor
         * @param {WAE2E.IBotReminderMetadata=} [properties] Properties to set
         */
        function BotReminderMetadata(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BotReminderMetadata requestMessageKey.
         * @member {WAProtocol.IMessageKey|null|undefined} requestMessageKey
         * @memberof WAE2E.BotReminderMetadata
         * @instance
         */
        BotReminderMetadata.prototype.requestMessageKey = null;

        /**
         * BotReminderMetadata action.
         * @member {WAE2E.BotReminderMetadata.ReminderAction} action
         * @memberof WAE2E.BotReminderMetadata
         * @instance
         */
        BotReminderMetadata.prototype.action = 1;

        /**
         * BotReminderMetadata name.
         * @member {string} name
         * @memberof WAE2E.BotReminderMetadata
         * @instance
         */
        BotReminderMetadata.prototype.name = "";

        /**
         * BotReminderMetadata nextTriggerTimestamp.
         * @member {number|Long} nextTriggerTimestamp
         * @memberof WAE2E.BotReminderMetadata
         * @instance
         */
        BotReminderMetadata.prototype.nextTriggerTimestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * BotReminderMetadata frequency.
         * @member {WAE2E.BotReminderMetadata.ReminderFrequency} frequency
         * @memberof WAE2E.BotReminderMetadata
         * @instance
         */
        BotReminderMetadata.prototype.frequency = 1;

        /**
         * Creates a new BotReminderMetadata instance using the specified properties.
         * @function create
         * @memberof WAE2E.BotReminderMetadata
         * @static
         * @param {WAE2E.IBotReminderMetadata=} [properties] Properties to set
         * @returns {WAE2E.BotReminderMetadata} BotReminderMetadata instance
         */
        BotReminderMetadata.create = function create(properties) {
            return new BotReminderMetadata(properties);
        };

        /**
         * Encodes the specified BotReminderMetadata message. Does not implicitly {@link WAE2E.BotReminderMetadata.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.BotReminderMetadata
         * @static
         * @param {WAE2E.IBotReminderMetadata} message BotReminderMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BotReminderMetadata.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.requestMessageKey != null && Object.hasOwnProperty.call(message, "requestMessageKey"))
                $root.WAProtocol.MessageKey.encode(message.requestMessageKey, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.action);
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
            if (message.nextTriggerTimestamp != null && Object.hasOwnProperty.call(message, "nextTriggerTimestamp"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.nextTriggerTimestamp);
            if (message.frequency != null && Object.hasOwnProperty.call(message, "frequency"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.frequency);
            return writer;
        };

        /**
         * Encodes the specified BotReminderMetadata message, length delimited. Does not implicitly {@link WAE2E.BotReminderMetadata.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.BotReminderMetadata
         * @static
         * @param {WAE2E.IBotReminderMetadata} message BotReminderMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BotReminderMetadata.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BotReminderMetadata message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.BotReminderMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.BotReminderMetadata} BotReminderMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BotReminderMetadata.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.BotReminderMetadata();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.requestMessageKey = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        message.action = reader.int32();
                        break;
                    }
                case 3: {
                        message.name = reader.string();
                        break;
                    }
                case 4: {
                        message.nextTriggerTimestamp = reader.uint64();
                        break;
                    }
                case 5: {
                        message.frequency = reader.int32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BotReminderMetadata message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.BotReminderMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.BotReminderMetadata} BotReminderMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BotReminderMetadata.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BotReminderMetadata message.
         * @function verify
         * @memberof WAE2E.BotReminderMetadata
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BotReminderMetadata.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.requestMessageKey != null && message.hasOwnProperty("requestMessageKey")) {
                var error = $root.WAProtocol.MessageKey.verify(message.requestMessageKey);
                if (error)
                    return "requestMessageKey." + error;
            }
            if (message.action != null && message.hasOwnProperty("action"))
                switch (message.action) {
                default:
                    return "action: enum value expected";
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.nextTriggerTimestamp != null && message.hasOwnProperty("nextTriggerTimestamp"))
                if (!$util.isInteger(message.nextTriggerTimestamp) && !(message.nextTriggerTimestamp && $util.isInteger(message.nextTriggerTimestamp.low) && $util.isInteger(message.nextTriggerTimestamp.high)))
                    return "nextTriggerTimestamp: integer|Long expected";
            if (message.frequency != null && message.hasOwnProperty("frequency"))
                switch (message.frequency) {
                default:
                    return "frequency: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            return null;
        };

        /**
         * Creates a BotReminderMetadata message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.BotReminderMetadata
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.BotReminderMetadata} BotReminderMetadata
         */
        BotReminderMetadata.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.BotReminderMetadata)
                return object;
            var message = new $root.WAE2E.BotReminderMetadata();
            if (object.requestMessageKey != null) {
                if (typeof object.requestMessageKey !== "object")
                    throw TypeError(".WAE2E.BotReminderMetadata.requestMessageKey: object expected");
                message.requestMessageKey = $root.WAProtocol.MessageKey.fromObject(object.requestMessageKey);
            }
            switch (object.action) {
            default:
                if (typeof object.action === "number") {
                    message.action = object.action;
                    break;
                }
                break;
            case "NOTIFY":
            case 1:
                message.action = 1;
                break;
            case "CREATE":
            case 2:
                message.action = 2;
                break;
            case "DELETE":
            case 3:
                message.action = 3;
                break;
            }
            if (object.name != null)
                message.name = String(object.name);
            if (object.nextTriggerTimestamp != null)
                if ($util.Long)
                    (message.nextTriggerTimestamp = $util.Long.fromValue(object.nextTriggerTimestamp)).unsigned = true;
                else if (typeof object.nextTriggerTimestamp === "string")
                    message.nextTriggerTimestamp = parseInt(object.nextTriggerTimestamp, 10);
                else if (typeof object.nextTriggerTimestamp === "number")
                    message.nextTriggerTimestamp = object.nextTriggerTimestamp;
                else if (typeof object.nextTriggerTimestamp === "object")
                    message.nextTriggerTimestamp = new $util.LongBits(object.nextTriggerTimestamp.low >>> 0, object.nextTriggerTimestamp.high >>> 0).toNumber(true);
            switch (object.frequency) {
            default:
                if (typeof object.frequency === "number") {
                    message.frequency = object.frequency;
                    break;
                }
                break;
            case "ONCE":
            case 1:
                message.frequency = 1;
                break;
            case "DAILY":
            case 2:
                message.frequency = 2;
                break;
            case "WEEKLY":
            case 3:
                message.frequency = 3;
                break;
            case "BIWEEKLY":
            case 4:
                message.frequency = 4;
                break;
            case "MONTHLY":
            case 5:
                message.frequency = 5;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a BotReminderMetadata message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.BotReminderMetadata
         * @static
         * @param {WAE2E.BotReminderMetadata} message BotReminderMetadata
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BotReminderMetadata.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.requestMessageKey = null;
                object.action = options.enums === String ? "NOTIFY" : 1;
                object.name = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.nextTriggerTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.nextTriggerTimestamp = options.longs === String ? "0" : 0;
                object.frequency = options.enums === String ? "ONCE" : 1;
            }
            if (message.requestMessageKey != null && message.hasOwnProperty("requestMessageKey"))
                object.requestMessageKey = $root.WAProtocol.MessageKey.toObject(message.requestMessageKey, options);
            if (message.action != null && message.hasOwnProperty("action"))
                object.action = options.enums === String ? $root.WAE2E.BotReminderMetadata.ReminderAction[message.action] === undefined ? message.action : $root.WAE2E.BotReminderMetadata.ReminderAction[message.action] : message.action;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.nextTriggerTimestamp != null && message.hasOwnProperty("nextTriggerTimestamp"))
                if (typeof message.nextTriggerTimestamp === "number")
                    object.nextTriggerTimestamp = options.longs === String ? String(message.nextTriggerTimestamp) : message.nextTriggerTimestamp;
                else
                    object.nextTriggerTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.nextTriggerTimestamp) : options.longs === Number ? new $util.LongBits(message.nextTriggerTimestamp.low >>> 0, message.nextTriggerTimestamp.high >>> 0).toNumber(true) : message.nextTriggerTimestamp;
            if (message.frequency != null && message.hasOwnProperty("frequency"))
                object.frequency = options.enums === String ? $root.WAE2E.BotReminderMetadata.ReminderFrequency[message.frequency] === undefined ? message.frequency : $root.WAE2E.BotReminderMetadata.ReminderFrequency[message.frequency] : message.frequency;
            return object;
        };

        /**
         * Converts this BotReminderMetadata to JSON.
         * @function toJSON
         * @memberof WAE2E.BotReminderMetadata
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BotReminderMetadata.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for BotReminderMetadata
         * @function getTypeUrl
         * @memberof WAE2E.BotReminderMetadata
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        BotReminderMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.BotReminderMetadata";
        };

        /**
         * ReminderFrequency enum.
         * @name WAE2E.BotReminderMetadata.ReminderFrequency
         * @enum {number}
         * @property {number} ONCE=1 ONCE value
         * @property {number} DAILY=2 DAILY value
         * @property {number} WEEKLY=3 WEEKLY value
         * @property {number} BIWEEKLY=4 BIWEEKLY value
         * @property {number} MONTHLY=5 MONTHLY value
         */
        BotReminderMetadata.ReminderFrequency = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ONCE"] = 1;
            values[valuesById[2] = "DAILY"] = 2;
            values[valuesById[3] = "WEEKLY"] = 3;
            values[valuesById[4] = "BIWEEKLY"] = 4;
            values[valuesById[5] = "MONTHLY"] = 5;
            return values;
        })();

        /**
         * ReminderAction enum.
         * @name WAE2E.BotReminderMetadata.ReminderAction
         * @enum {number}
         * @property {number} NOTIFY=1 NOTIFY value
         * @property {number} CREATE=2 CREATE value
         * @property {number} DELETE=3 DELETE value
         */
        BotReminderMetadata.ReminderAction = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "NOTIFY"] = 1;
            values[valuesById[2] = "CREATE"] = 2;
            values[valuesById[3] = "DELETE"] = 3;
            return values;
        })();

        return BotReminderMetadata;
    })();

    WAE2E.BotModelMetadata = (function() {

        /**
         * Properties of a BotModelMetadata.
         * @memberof WAE2E
         * @interface IBotModelMetadata
         * @property {WAE2E.BotModelMetadata.ModelType|null} [modelType] BotModelMetadata modelType
         * @property {WAE2E.BotModelMetadata.PremiumModelStatus|null} [premiumModelStatus] BotModelMetadata premiumModelStatus
         */

        /**
         * Constructs a new BotModelMetadata.
         * @memberof WAE2E
         * @classdesc Represents a BotModelMetadata.
         * @implements IBotModelMetadata
         * @constructor
         * @param {WAE2E.IBotModelMetadata=} [properties] Properties to set
         */
        function BotModelMetadata(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BotModelMetadata modelType.
         * @member {WAE2E.BotModelMetadata.ModelType} modelType
         * @memberof WAE2E.BotModelMetadata
         * @instance
         */
        BotModelMetadata.prototype.modelType = 1;

        /**
         * BotModelMetadata premiumModelStatus.
         * @member {WAE2E.BotModelMetadata.PremiumModelStatus} premiumModelStatus
         * @memberof WAE2E.BotModelMetadata
         * @instance
         */
        BotModelMetadata.prototype.premiumModelStatus = 1;

        /**
         * Creates a new BotModelMetadata instance using the specified properties.
         * @function create
         * @memberof WAE2E.BotModelMetadata
         * @static
         * @param {WAE2E.IBotModelMetadata=} [properties] Properties to set
         * @returns {WAE2E.BotModelMetadata} BotModelMetadata instance
         */
        BotModelMetadata.create = function create(properties) {
            return new BotModelMetadata(properties);
        };

        /**
         * Encodes the specified BotModelMetadata message. Does not implicitly {@link WAE2E.BotModelMetadata.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.BotModelMetadata
         * @static
         * @param {WAE2E.IBotModelMetadata} message BotModelMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BotModelMetadata.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.modelType != null && Object.hasOwnProperty.call(message, "modelType"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.modelType);
            if (message.premiumModelStatus != null && Object.hasOwnProperty.call(message, "premiumModelStatus"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.premiumModelStatus);
            return writer;
        };

        /**
         * Encodes the specified BotModelMetadata message, length delimited. Does not implicitly {@link WAE2E.BotModelMetadata.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.BotModelMetadata
         * @static
         * @param {WAE2E.IBotModelMetadata} message BotModelMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BotModelMetadata.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BotModelMetadata message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.BotModelMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.BotModelMetadata} BotModelMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BotModelMetadata.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.BotModelMetadata();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.modelType = reader.int32();
                        break;
                    }
                case 2: {
                        message.premiumModelStatus = reader.int32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BotModelMetadata message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.BotModelMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.BotModelMetadata} BotModelMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BotModelMetadata.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BotModelMetadata message.
         * @function verify
         * @memberof WAE2E.BotModelMetadata
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BotModelMetadata.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.modelType != null && message.hasOwnProperty("modelType"))
                switch (message.modelType) {
                default:
                    return "modelType: enum value expected";
                case 1:
                case 2:
                    break;
                }
            if (message.premiumModelStatus != null && message.hasOwnProperty("premiumModelStatus"))
                switch (message.premiumModelStatus) {
                default:
                    return "premiumModelStatus: enum value expected";
                case 1:
                case 2:
                    break;
                }
            return null;
        };

        /**
         * Creates a BotModelMetadata message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.BotModelMetadata
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.BotModelMetadata} BotModelMetadata
         */
        BotModelMetadata.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.BotModelMetadata)
                return object;
            var message = new $root.WAE2E.BotModelMetadata();
            switch (object.modelType) {
            default:
                if (typeof object.modelType === "number") {
                    message.modelType = object.modelType;
                    break;
                }
                break;
            case "LLAMA_PROD":
            case 1:
                message.modelType = 1;
                break;
            case "LLAMA_PROD_PREMIUM":
            case 2:
                message.modelType = 2;
                break;
            }
            switch (object.premiumModelStatus) {
            default:
                if (typeof object.premiumModelStatus === "number") {
                    message.premiumModelStatus = object.premiumModelStatus;
                    break;
                }
                break;
            case "AVAILABLE":
            case 1:
                message.premiumModelStatus = 1;
                break;
            case "QUOTA_EXCEED_LIMIT":
            case 2:
                message.premiumModelStatus = 2;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a BotModelMetadata message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.BotModelMetadata
         * @static
         * @param {WAE2E.BotModelMetadata} message BotModelMetadata
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BotModelMetadata.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.modelType = options.enums === String ? "LLAMA_PROD" : 1;
                object.premiumModelStatus = options.enums === String ? "AVAILABLE" : 1;
            }
            if (message.modelType != null && message.hasOwnProperty("modelType"))
                object.modelType = options.enums === String ? $root.WAE2E.BotModelMetadata.ModelType[message.modelType] === undefined ? message.modelType : $root.WAE2E.BotModelMetadata.ModelType[message.modelType] : message.modelType;
            if (message.premiumModelStatus != null && message.hasOwnProperty("premiumModelStatus"))
                object.premiumModelStatus = options.enums === String ? $root.WAE2E.BotModelMetadata.PremiumModelStatus[message.premiumModelStatus] === undefined ? message.premiumModelStatus : $root.WAE2E.BotModelMetadata.PremiumModelStatus[message.premiumModelStatus] : message.premiumModelStatus;
            return object;
        };

        /**
         * Converts this BotModelMetadata to JSON.
         * @function toJSON
         * @memberof WAE2E.BotModelMetadata
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BotModelMetadata.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for BotModelMetadata
         * @function getTypeUrl
         * @memberof WAE2E.BotModelMetadata
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        BotModelMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.BotModelMetadata";
        };

        /**
         * PremiumModelStatus enum.
         * @name WAE2E.BotModelMetadata.PremiumModelStatus
         * @enum {number}
         * @property {number} AVAILABLE=1 AVAILABLE value
         * @property {number} QUOTA_EXCEED_LIMIT=2 QUOTA_EXCEED_LIMIT value
         */
        BotModelMetadata.PremiumModelStatus = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "AVAILABLE"] = 1;
            values[valuesById[2] = "QUOTA_EXCEED_LIMIT"] = 2;
            return values;
        })();

        /**
         * ModelType enum.
         * @name WAE2E.BotModelMetadata.ModelType
         * @enum {number}
         * @property {number} LLAMA_PROD=1 LLAMA_PROD value
         * @property {number} LLAMA_PROD_PREMIUM=2 LLAMA_PROD_PREMIUM value
         */
        BotModelMetadata.ModelType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "LLAMA_PROD"] = 1;
            values[valuesById[2] = "LLAMA_PROD_PREMIUM"] = 2;
            return values;
        })();

        return BotModelMetadata;
    })();

    WAE2E.MessageAssociation = (function() {

        /**
         * Properties of a MessageAssociation.
         * @memberof WAE2E
         * @interface IMessageAssociation
         * @property {WAE2E.MessageAssociation.AssociationType|null} [associationType] MessageAssociation associationType
         * @property {WAProtocol.IMessageKey|null} [parentMessageKey] MessageAssociation parentMessageKey
         */

        /**
         * Constructs a new MessageAssociation.
         * @memberof WAE2E
         * @classdesc Represents a MessageAssociation.
         * @implements IMessageAssociation
         * @constructor
         * @param {WAE2E.IMessageAssociation=} [properties] Properties to set
         */
        function MessageAssociation(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MessageAssociation associationType.
         * @member {WAE2E.MessageAssociation.AssociationType} associationType
         * @memberof WAE2E.MessageAssociation
         * @instance
         */
        MessageAssociation.prototype.associationType = 0;

        /**
         * MessageAssociation parentMessageKey.
         * @member {WAProtocol.IMessageKey|null|undefined} parentMessageKey
         * @memberof WAE2E.MessageAssociation
         * @instance
         */
        MessageAssociation.prototype.parentMessageKey = null;

        /**
         * Creates a new MessageAssociation instance using the specified properties.
         * @function create
         * @memberof WAE2E.MessageAssociation
         * @static
         * @param {WAE2E.IMessageAssociation=} [properties] Properties to set
         * @returns {WAE2E.MessageAssociation} MessageAssociation instance
         */
        MessageAssociation.create = function create(properties) {
            return new MessageAssociation(properties);
        };

        /**
         * Encodes the specified MessageAssociation message. Does not implicitly {@link WAE2E.MessageAssociation.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.MessageAssociation
         * @static
         * @param {WAE2E.IMessageAssociation} message MessageAssociation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MessageAssociation.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.associationType != null && Object.hasOwnProperty.call(message, "associationType"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.associationType);
            if (message.parentMessageKey != null && Object.hasOwnProperty.call(message, "parentMessageKey"))
                $root.WAProtocol.MessageKey.encode(message.parentMessageKey, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MessageAssociation message, length delimited. Does not implicitly {@link WAE2E.MessageAssociation.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.MessageAssociation
         * @static
         * @param {WAE2E.IMessageAssociation} message MessageAssociation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MessageAssociation.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MessageAssociation message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.MessageAssociation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.MessageAssociation} MessageAssociation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MessageAssociation.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.MessageAssociation();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.associationType = reader.int32();
                        break;
                    }
                case 2: {
                        message.parentMessageKey = $root.WAProtocol.MessageKey.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MessageAssociation message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.MessageAssociation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.MessageAssociation} MessageAssociation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MessageAssociation.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MessageAssociation message.
         * @function verify
         * @memberof WAE2E.MessageAssociation
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MessageAssociation.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.associationType != null && message.hasOwnProperty("associationType"))
                switch (message.associationType) {
                default:
                    return "associationType: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.parentMessageKey != null && message.hasOwnProperty("parentMessageKey")) {
                var error = $root.WAProtocol.MessageKey.verify(message.parentMessageKey);
                if (error)
                    return "parentMessageKey." + error;
            }
            return null;
        };

        /**
         * Creates a MessageAssociation message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.MessageAssociation
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.MessageAssociation} MessageAssociation
         */
        MessageAssociation.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.MessageAssociation)
                return object;
            var message = new $root.WAE2E.MessageAssociation();
            switch (object.associationType) {
            default:
                if (typeof object.associationType === "number") {
                    message.associationType = object.associationType;
                    break;
                }
                break;
            case "UNKNOWN":
            case 0:
                message.associationType = 0;
                break;
            case "MEDIA_ALBUM":
            case 1:
                message.associationType = 1;
                break;
            case "BOT_PLUGIN":
            case 2:
                message.associationType = 2;
                break;
            case "EVENT_COVER_IMAGE":
            case 3:
                message.associationType = 3;
                break;
            }
            if (object.parentMessageKey != null) {
                if (typeof object.parentMessageKey !== "object")
                    throw TypeError(".WAE2E.MessageAssociation.parentMessageKey: object expected");
                message.parentMessageKey = $root.WAProtocol.MessageKey.fromObject(object.parentMessageKey);
            }
            return message;
        };

        /**
         * Creates a plain object from a MessageAssociation message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.MessageAssociation
         * @static
         * @param {WAE2E.MessageAssociation} message MessageAssociation
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MessageAssociation.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.associationType = options.enums === String ? "UNKNOWN" : 0;
                object.parentMessageKey = null;
            }
            if (message.associationType != null && message.hasOwnProperty("associationType"))
                object.associationType = options.enums === String ? $root.WAE2E.MessageAssociation.AssociationType[message.associationType] === undefined ? message.associationType : $root.WAE2E.MessageAssociation.AssociationType[message.associationType] : message.associationType;
            if (message.parentMessageKey != null && message.hasOwnProperty("parentMessageKey"))
                object.parentMessageKey = $root.WAProtocol.MessageKey.toObject(message.parentMessageKey, options);
            return object;
        };

        /**
         * Converts this MessageAssociation to JSON.
         * @function toJSON
         * @memberof WAE2E.MessageAssociation
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MessageAssociation.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for MessageAssociation
         * @function getTypeUrl
         * @memberof WAE2E.MessageAssociation
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        MessageAssociation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.MessageAssociation";
        };

        /**
         * AssociationType enum.
         * @name WAE2E.MessageAssociation.AssociationType
         * @enum {number}
         * @property {number} UNKNOWN=0 UNKNOWN value
         * @property {number} MEDIA_ALBUM=1 MEDIA_ALBUM value
         * @property {number} BOT_PLUGIN=2 BOT_PLUGIN value
         * @property {number} EVENT_COVER_IMAGE=3 EVENT_COVER_IMAGE value
         */
        MessageAssociation.AssociationType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "UNKNOWN"] = 0;
            values[valuesById[1] = "MEDIA_ALBUM"] = 1;
            values[valuesById[2] = "BOT_PLUGIN"] = 2;
            values[valuesById[3] = "EVENT_COVER_IMAGE"] = 3;
            return values;
        })();

        return MessageAssociation;
    })();

    WAE2E.MessageContextInfo = (function() {

        /**
         * Properties of a MessageContextInfo.
         * @memberof WAE2E
         * @interface IMessageContextInfo
         * @property {WAE2E.IDeviceListMetadata|null} [deviceListMetadata] MessageContextInfo deviceListMetadata
         * @property {number|null} [deviceListMetadataVersion] MessageContextInfo deviceListMetadataVersion
         * @property {Uint8Array|null} [messageSecret] MessageContextInfo messageSecret
         * @property {Uint8Array|null} [paddingBytes] MessageContextInfo paddingBytes
         * @property {number|null} [messageAddOnDurationInSecs] MessageContextInfo messageAddOnDurationInSecs
         * @property {Uint8Array|null} [botMessageSecret] MessageContextInfo botMessageSecret
         * @property {WAE2E.IBotMetadata|null} [botMetadata] MessageContextInfo botMetadata
         * @property {number|null} [reportingTokenVersion] MessageContextInfo reportingTokenVersion
         * @property {WAE2E.MessageContextInfo.MessageAddonExpiryType|null} [messageAddOnExpiryType] MessageContextInfo messageAddOnExpiryType
         * @property {WAE2E.IMessageAssociation|null} [messageAssociation] MessageContextInfo messageAssociation
         */

        /**
         * Constructs a new MessageContextInfo.
         * @memberof WAE2E
         * @classdesc Represents a MessageContextInfo.
         * @implements IMessageContextInfo
         * @constructor
         * @param {WAE2E.IMessageContextInfo=} [properties] Properties to set
         */
        function MessageContextInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MessageContextInfo deviceListMetadata.
         * @member {WAE2E.IDeviceListMetadata|null|undefined} deviceListMetadata
         * @memberof WAE2E.MessageContextInfo
         * @instance
         */
        MessageContextInfo.prototype.deviceListMetadata = null;

        /**
         * MessageContextInfo deviceListMetadataVersion.
         * @member {number} deviceListMetadataVersion
         * @memberof WAE2E.MessageContextInfo
         * @instance
         */
        MessageContextInfo.prototype.deviceListMetadataVersion = 0;

        /**
         * MessageContextInfo messageSecret.
         * @member {Uint8Array} messageSecret
         * @memberof WAE2E.MessageContextInfo
         * @instance
         */
        MessageContextInfo.prototype.messageSecret = $util.newBuffer([]);

        /**
         * MessageContextInfo paddingBytes.
         * @member {Uint8Array} paddingBytes
         * @memberof WAE2E.MessageContextInfo
         * @instance
         */
        MessageContextInfo.prototype.paddingBytes = $util.newBuffer([]);

        /**
         * MessageContextInfo messageAddOnDurationInSecs.
         * @member {number} messageAddOnDurationInSecs
         * @memberof WAE2E.MessageContextInfo
         * @instance
         */
        MessageContextInfo.prototype.messageAddOnDurationInSecs = 0;

        /**
         * MessageContextInfo botMessageSecret.
         * @member {Uint8Array} botMessageSecret
         * @memberof WAE2E.MessageContextInfo
         * @instance
         */
        MessageContextInfo.prototype.botMessageSecret = $util.newBuffer([]);

        /**
         * MessageContextInfo botMetadata.
         * @member {WAE2E.IBotMetadata|null|undefined} botMetadata
         * @memberof WAE2E.MessageContextInfo
         * @instance
         */
        MessageContextInfo.prototype.botMetadata = null;

        /**
         * MessageContextInfo reportingTokenVersion.
         * @member {number} reportingTokenVersion
         * @memberof WAE2E.MessageContextInfo
         * @instance
         */
        MessageContextInfo.prototype.reportingTokenVersion = 0;

        /**
         * MessageContextInfo messageAddOnExpiryType.
         * @member {WAE2E.MessageContextInfo.MessageAddonExpiryType} messageAddOnExpiryType
         * @memberof WAE2E.MessageContextInfo
         * @instance
         */
        MessageContextInfo.prototype.messageAddOnExpiryType = 1;

        /**
         * MessageContextInfo messageAssociation.
         * @member {WAE2E.IMessageAssociation|null|undefined} messageAssociation
         * @memberof WAE2E.MessageContextInfo
         * @instance
         */
        MessageContextInfo.prototype.messageAssociation = null;

        /**
         * Creates a new MessageContextInfo instance using the specified properties.
         * @function create
         * @memberof WAE2E.MessageContextInfo
         * @static
         * @param {WAE2E.IMessageContextInfo=} [properties] Properties to set
         * @returns {WAE2E.MessageContextInfo} MessageContextInfo instance
         */
        MessageContextInfo.create = function create(properties) {
            return new MessageContextInfo(properties);
        };

        /**
         * Encodes the specified MessageContextInfo message. Does not implicitly {@link WAE2E.MessageContextInfo.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.MessageContextInfo
         * @static
         * @param {WAE2E.IMessageContextInfo} message MessageContextInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MessageContextInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.deviceListMetadata != null && Object.hasOwnProperty.call(message, "deviceListMetadata"))
                $root.WAE2E.DeviceListMetadata.encode(message.deviceListMetadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.deviceListMetadataVersion != null && Object.hasOwnProperty.call(message, "deviceListMetadataVersion"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.deviceListMetadataVersion);
            if (message.messageSecret != null && Object.hasOwnProperty.call(message, "messageSecret"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.messageSecret);
            if (message.paddingBytes != null && Object.hasOwnProperty.call(message, "paddingBytes"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.paddingBytes);
            if (message.messageAddOnDurationInSecs != null && Object.hasOwnProperty.call(message, "messageAddOnDurationInSecs"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.messageAddOnDurationInSecs);
            if (message.botMessageSecret != null && Object.hasOwnProperty.call(message, "botMessageSecret"))
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.botMessageSecret);
            if (message.botMetadata != null && Object.hasOwnProperty.call(message, "botMetadata"))
                $root.WAE2E.BotMetadata.encode(message.botMetadata, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.reportingTokenVersion != null && Object.hasOwnProperty.call(message, "reportingTokenVersion"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.reportingTokenVersion);
            if (message.messageAddOnExpiryType != null && Object.hasOwnProperty.call(message, "messageAddOnExpiryType"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.messageAddOnExpiryType);
            if (message.messageAssociation != null && Object.hasOwnProperty.call(message, "messageAssociation"))
                $root.WAE2E.MessageAssociation.encode(message.messageAssociation, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MessageContextInfo message, length delimited. Does not implicitly {@link WAE2E.MessageContextInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.MessageContextInfo
         * @static
         * @param {WAE2E.IMessageContextInfo} message MessageContextInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MessageContextInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MessageContextInfo message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.MessageContextInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.MessageContextInfo} MessageContextInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MessageContextInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.MessageContextInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.deviceListMetadata = $root.WAE2E.DeviceListMetadata.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        message.deviceListMetadataVersion = reader.int32();
                        break;
                    }
                case 3: {
                        message.messageSecret = reader.bytes();
                        break;
                    }
                case 4: {
                        message.paddingBytes = reader.bytes();
                        break;
                    }
                case 5: {
                        message.messageAddOnDurationInSecs = reader.uint32();
                        break;
                    }
                case 6: {
                        message.botMessageSecret = reader.bytes();
                        break;
                    }
                case 7: {
                        message.botMetadata = $root.WAE2E.BotMetadata.decode(reader, reader.uint32());
                        break;
                    }
                case 8: {
                        message.reportingTokenVersion = reader.int32();
                        break;
                    }
                case 9: {
                        message.messageAddOnExpiryType = reader.int32();
                        break;
                    }
                case 10: {
                        message.messageAssociation = $root.WAE2E.MessageAssociation.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MessageContextInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.MessageContextInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.MessageContextInfo} MessageContextInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MessageContextInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MessageContextInfo message.
         * @function verify
         * @memberof WAE2E.MessageContextInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MessageContextInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.deviceListMetadata != null && message.hasOwnProperty("deviceListMetadata")) {
                var error = $root.WAE2E.DeviceListMetadata.verify(message.deviceListMetadata);
                if (error)
                    return "deviceListMetadata." + error;
            }
            if (message.deviceListMetadataVersion != null && message.hasOwnProperty("deviceListMetadataVersion"))
                if (!$util.isInteger(message.deviceListMetadataVersion))
                    return "deviceListMetadataVersion: integer expected";
            if (message.messageSecret != null && message.hasOwnProperty("messageSecret"))
                if (!(message.messageSecret && typeof message.messageSecret.length === "number" || $util.isString(message.messageSecret)))
                    return "messageSecret: buffer expected";
            if (message.paddingBytes != null && message.hasOwnProperty("paddingBytes"))
                if (!(message.paddingBytes && typeof message.paddingBytes.length === "number" || $util.isString(message.paddingBytes)))
                    return "paddingBytes: buffer expected";
            if (message.messageAddOnDurationInSecs != null && message.hasOwnProperty("messageAddOnDurationInSecs"))
                if (!$util.isInteger(message.messageAddOnDurationInSecs))
                    return "messageAddOnDurationInSecs: integer expected";
            if (message.botMessageSecret != null && message.hasOwnProperty("botMessageSecret"))
                if (!(message.botMessageSecret && typeof message.botMessageSecret.length === "number" || $util.isString(message.botMessageSecret)))
                    return "botMessageSecret: buffer expected";
            if (message.botMetadata != null && message.hasOwnProperty("botMetadata")) {
                var error = $root.WAE2E.BotMetadata.verify(message.botMetadata);
                if (error)
                    return "botMetadata." + error;
            }
            if (message.reportingTokenVersion != null && message.hasOwnProperty("reportingTokenVersion"))
                if (!$util.isInteger(message.reportingTokenVersion))
                    return "reportingTokenVersion: integer expected";
            if (message.messageAddOnExpiryType != null && message.hasOwnProperty("messageAddOnExpiryType"))
                switch (message.messageAddOnExpiryType) {
                default:
                    return "messageAddOnExpiryType: enum value expected";
                case 1:
                case 2:
                    break;
                }
            if (message.messageAssociation != null && message.hasOwnProperty("messageAssociation")) {
                var error = $root.WAE2E.MessageAssociation.verify(message.messageAssociation);
                if (error)
                    return "messageAssociation." + error;
            }
            return null;
        };

        /**
         * Creates a MessageContextInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.MessageContextInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.MessageContextInfo} MessageContextInfo
         */
        MessageContextInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.MessageContextInfo)
                return object;
            var message = new $root.WAE2E.MessageContextInfo();
            if (object.deviceListMetadata != null) {
                if (typeof object.deviceListMetadata !== "object")
                    throw TypeError(".WAE2E.MessageContextInfo.deviceListMetadata: object expected");
                message.deviceListMetadata = $root.WAE2E.DeviceListMetadata.fromObject(object.deviceListMetadata);
            }
            if (object.deviceListMetadataVersion != null)
                message.deviceListMetadataVersion = object.deviceListMetadataVersion | 0;
            if (object.messageSecret != null)
                if (typeof object.messageSecret === "string")
                    $util.base64.decode(object.messageSecret, message.messageSecret = $util.newBuffer($util.base64.length(object.messageSecret)), 0);
                else if (object.messageSecret.length >= 0)
                    message.messageSecret = object.messageSecret;
            if (object.paddingBytes != null)
                if (typeof object.paddingBytes === "string")
                    $util.base64.decode(object.paddingBytes, message.paddingBytes = $util.newBuffer($util.base64.length(object.paddingBytes)), 0);
                else if (object.paddingBytes.length >= 0)
                    message.paddingBytes = object.paddingBytes;
            if (object.messageAddOnDurationInSecs != null)
                message.messageAddOnDurationInSecs = object.messageAddOnDurationInSecs >>> 0;
            if (object.botMessageSecret != null)
                if (typeof object.botMessageSecret === "string")
                    $util.base64.decode(object.botMessageSecret, message.botMessageSecret = $util.newBuffer($util.base64.length(object.botMessageSecret)), 0);
                else if (object.botMessageSecret.length >= 0)
                    message.botMessageSecret = object.botMessageSecret;
            if (object.botMetadata != null) {
                if (typeof object.botMetadata !== "object")
                    throw TypeError(".WAE2E.MessageContextInfo.botMetadata: object expected");
                message.botMetadata = $root.WAE2E.BotMetadata.fromObject(object.botMetadata);
            }
            if (object.reportingTokenVersion != null)
                message.reportingTokenVersion = object.reportingTokenVersion | 0;
            switch (object.messageAddOnExpiryType) {
            default:
                if (typeof object.messageAddOnExpiryType === "number") {
                    message.messageAddOnExpiryType = object.messageAddOnExpiryType;
                    break;
                }
                break;
            case "STATIC":
            case 1:
                message.messageAddOnExpiryType = 1;
                break;
            case "DEPENDENT_ON_PARENT":
            case 2:
                message.messageAddOnExpiryType = 2;
                break;
            }
            if (object.messageAssociation != null) {
                if (typeof object.messageAssociation !== "object")
                    throw TypeError(".WAE2E.MessageContextInfo.messageAssociation: object expected");
                message.messageAssociation = $root.WAE2E.MessageAssociation.fromObject(object.messageAssociation);
            }
            return message;
        };

        /**
         * Creates a plain object from a MessageContextInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.MessageContextInfo
         * @static
         * @param {WAE2E.MessageContextInfo} message MessageContextInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MessageContextInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.deviceListMetadata = null;
                object.deviceListMetadataVersion = 0;
                if (options.bytes === String)
                    object.messageSecret = "";
                else {
                    object.messageSecret = [];
                    if (options.bytes !== Array)
                        object.messageSecret = $util.newBuffer(object.messageSecret);
                }
                if (options.bytes === String)
                    object.paddingBytes = "";
                else {
                    object.paddingBytes = [];
                    if (options.bytes !== Array)
                        object.paddingBytes = $util.newBuffer(object.paddingBytes);
                }
                object.messageAddOnDurationInSecs = 0;
                if (options.bytes === String)
                    object.botMessageSecret = "";
                else {
                    object.botMessageSecret = [];
                    if (options.bytes !== Array)
                        object.botMessageSecret = $util.newBuffer(object.botMessageSecret);
                }
                object.botMetadata = null;
                object.reportingTokenVersion = 0;
                object.messageAddOnExpiryType = options.enums === String ? "STATIC" : 1;
                object.messageAssociation = null;
            }
            if (message.deviceListMetadata != null && message.hasOwnProperty("deviceListMetadata"))
                object.deviceListMetadata = $root.WAE2E.DeviceListMetadata.toObject(message.deviceListMetadata, options);
            if (message.deviceListMetadataVersion != null && message.hasOwnProperty("deviceListMetadataVersion"))
                object.deviceListMetadataVersion = message.deviceListMetadataVersion;
            if (message.messageSecret != null && message.hasOwnProperty("messageSecret"))
                object.messageSecret = options.bytes === String ? $util.base64.encode(message.messageSecret, 0, message.messageSecret.length) : options.bytes === Array ? Array.prototype.slice.call(message.messageSecret) : message.messageSecret;
            if (message.paddingBytes != null && message.hasOwnProperty("paddingBytes"))
                object.paddingBytes = options.bytes === String ? $util.base64.encode(message.paddingBytes, 0, message.paddingBytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.paddingBytes) : message.paddingBytes;
            if (message.messageAddOnDurationInSecs != null && message.hasOwnProperty("messageAddOnDurationInSecs"))
                object.messageAddOnDurationInSecs = message.messageAddOnDurationInSecs;
            if (message.botMessageSecret != null && message.hasOwnProperty("botMessageSecret"))
                object.botMessageSecret = options.bytes === String ? $util.base64.encode(message.botMessageSecret, 0, message.botMessageSecret.length) : options.bytes === Array ? Array.prototype.slice.call(message.botMessageSecret) : message.botMessageSecret;
            if (message.botMetadata != null && message.hasOwnProperty("botMetadata"))
                object.botMetadata = $root.WAE2E.BotMetadata.toObject(message.botMetadata, options);
            if (message.reportingTokenVersion != null && message.hasOwnProperty("reportingTokenVersion"))
                object.reportingTokenVersion = message.reportingTokenVersion;
            if (message.messageAddOnExpiryType != null && message.hasOwnProperty("messageAddOnExpiryType"))
                object.messageAddOnExpiryType = options.enums === String ? $root.WAE2E.MessageContextInfo.MessageAddonExpiryType[message.messageAddOnExpiryType] === undefined ? message.messageAddOnExpiryType : $root.WAE2E.MessageContextInfo.MessageAddonExpiryType[message.messageAddOnExpiryType] : message.messageAddOnExpiryType;
            if (message.messageAssociation != null && message.hasOwnProperty("messageAssociation"))
                object.messageAssociation = $root.WAE2E.MessageAssociation.toObject(message.messageAssociation, options);
            return object;
        };

        /**
         * Converts this MessageContextInfo to JSON.
         * @function toJSON
         * @memberof WAE2E.MessageContextInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MessageContextInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for MessageContextInfo
         * @function getTypeUrl
         * @memberof WAE2E.MessageContextInfo
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        MessageContextInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.MessageContextInfo";
        };

        /**
         * MessageAddonExpiryType enum.
         * @name WAE2E.MessageContextInfo.MessageAddonExpiryType
         * @enum {number}
         * @property {number} STATIC=1 STATIC value
         * @property {number} DEPENDENT_ON_PARENT=2 DEPENDENT_ON_PARENT value
         */
        MessageContextInfo.MessageAddonExpiryType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "STATIC"] = 1;
            values[valuesById[2] = "DEPENDENT_ON_PARENT"] = 2;
            return values;
        })();

        return MessageContextInfo;
    })();

    WAE2E.HydratedTemplateButton = (function() {

        /**
         * Properties of a HydratedTemplateButton.
         * @memberof WAE2E
         * @interface IHydratedTemplateButton
         * @property {WAE2E.HydratedTemplateButton.IHydratedQuickReplyButton|null} [quickReplyButton] HydratedTemplateButton quickReplyButton
         * @property {WAE2E.HydratedTemplateButton.IHydratedURLButton|null} [urlButton] HydratedTemplateButton urlButton
         * @property {WAE2E.HydratedTemplateButton.IHydratedCallButton|null} [callButton] HydratedTemplateButton callButton
         * @property {number|null} [index] HydratedTemplateButton index
         */

        /**
         * Constructs a new HydratedTemplateButton.
         * @memberof WAE2E
         * @classdesc Represents a HydratedTemplateButton.
         * @implements IHydratedTemplateButton
         * @constructor
         * @param {WAE2E.IHydratedTemplateButton=} [properties] Properties to set
         */
        function HydratedTemplateButton(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * HydratedTemplateButton quickReplyButton.
         * @member {WAE2E.HydratedTemplateButton.IHydratedQuickReplyButton|null|undefined} quickReplyButton
         * @memberof WAE2E.HydratedTemplateButton
         * @instance
         */
        HydratedTemplateButton.prototype.quickReplyButton = null;

        /**
         * HydratedTemplateButton urlButton.
         * @member {WAE2E.HydratedTemplateButton.IHydratedURLButton|null|undefined} urlButton
         * @memberof WAE2E.HydratedTemplateButton
         * @instance
         */
        HydratedTemplateButton.prototype.urlButton = null;

        /**
         * HydratedTemplateButton callButton.
         * @member {WAE2E.HydratedTemplateButton.IHydratedCallButton|null|undefined} callButton
         * @memberof WAE2E.HydratedTemplateButton
         * @instance
         */
        HydratedTemplateButton.prototype.callButton = null;

        /**
         * HydratedTemplateButton index.
         * @member {number} index
         * @memberof WAE2E.HydratedTemplateButton
         * @instance
         */
        HydratedTemplateButton.prototype.index = 0;

        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;

        /**
         * HydratedTemplateButton hydratedButton.
         * @member {"quickReplyButton"|"urlButton"|"callButton"|undefined} hydratedButton
         * @memberof WAE2E.HydratedTemplateButton
         * @instance
         */
        Object.defineProperty(HydratedTemplateButton.prototype, "hydratedButton", {
            get: $util.oneOfGetter($oneOfFields = ["quickReplyButton", "urlButton", "callButton"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Creates a new HydratedTemplateButton instance using the specified properties.
         * @function create
         * @memberof WAE2E.HydratedTemplateButton
         * @static
         * @param {WAE2E.IHydratedTemplateButton=} [properties] Properties to set
         * @returns {WAE2E.HydratedTemplateButton} HydratedTemplateButton instance
         */
        HydratedTemplateButton.create = function create(properties) {
            return new HydratedTemplateButton(properties);
        };

        /**
         * Encodes the specified HydratedTemplateButton message. Does not implicitly {@link WAE2E.HydratedTemplateButton.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.HydratedTemplateButton
         * @static
         * @param {WAE2E.IHydratedTemplateButton} message HydratedTemplateButton message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        HydratedTemplateButton.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.quickReplyButton != null && Object.hasOwnProperty.call(message, "quickReplyButton"))
                $root.WAE2E.HydratedTemplateButton.HydratedQuickReplyButton.encode(message.quickReplyButton, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.urlButton != null && Object.hasOwnProperty.call(message, "urlButton"))
                $root.WAE2E.HydratedTemplateButton.HydratedURLButton.encode(message.urlButton, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.callButton != null && Object.hasOwnProperty.call(message, "callButton"))
                $root.WAE2E.HydratedTemplateButton.HydratedCallButton.encode(message.callButton, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.index);
            return writer;
        };

        /**
         * Encodes the specified HydratedTemplateButton message, length delimited. Does not implicitly {@link WAE2E.HydratedTemplateButton.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.HydratedTemplateButton
         * @static
         * @param {WAE2E.IHydratedTemplateButton} message HydratedTemplateButton message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        HydratedTemplateButton.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a HydratedTemplateButton message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.HydratedTemplateButton
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.HydratedTemplateButton} HydratedTemplateButton
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        HydratedTemplateButton.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.HydratedTemplateButton();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.quickReplyButton = $root.WAE2E.HydratedTemplateButton.HydratedQuickReplyButton.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        message.urlButton = $root.WAE2E.HydratedTemplateButton.HydratedURLButton.decode(reader, reader.uint32());
                        break;
                    }
                case 3: {
                        message.callButton = $root.WAE2E.HydratedTemplateButton.HydratedCallButton.decode(reader, reader.uint32());
                        break;
                    }
                case 4: {
                        message.index = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a HydratedTemplateButton message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.HydratedTemplateButton
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.HydratedTemplateButton} HydratedTemplateButton
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        HydratedTemplateButton.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a HydratedTemplateButton message.
         * @function verify
         * @memberof WAE2E.HydratedTemplateButton
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        HydratedTemplateButton.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.quickReplyButton != null && message.hasOwnProperty("quickReplyButton")) {
                properties.hydratedButton = 1;
                {
                    var error = $root.WAE2E.HydratedTemplateButton.HydratedQuickReplyButton.verify(message.quickReplyButton);
                    if (error)
                        return "quickReplyButton." + error;
                }
            }
            if (message.urlButton != null && message.hasOwnProperty("urlButton")) {
                if (properties.hydratedButton === 1)
                    return "hydratedButton: multiple values";
                properties.hydratedButton = 1;
                {
                    var error = $root.WAE2E.HydratedTemplateButton.HydratedURLButton.verify(message.urlButton);
                    if (error)
                        return "urlButton." + error;
                }
            }
            if (message.callButton != null && message.hasOwnProperty("callButton")) {
                if (properties.hydratedButton === 1)
                    return "hydratedButton: multiple values";
                properties.hydratedButton = 1;
                {
                    var error = $root.WAE2E.HydratedTemplateButton.HydratedCallButton.verify(message.callButton);
                    if (error)
                        return "callButton." + error;
                }
            }
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            return null;
        };

        /**
         * Creates a HydratedTemplateButton message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.HydratedTemplateButton
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.HydratedTemplateButton} HydratedTemplateButton
         */
        HydratedTemplateButton.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.HydratedTemplateButton)
                return object;
            var message = new $root.WAE2E.HydratedTemplateButton();
            if (object.quickReplyButton != null) {
                if (typeof object.quickReplyButton !== "object")
                    throw TypeError(".WAE2E.HydratedTemplateButton.quickReplyButton: object expected");
                message.quickReplyButton = $root.WAE2E.HydratedTemplateButton.HydratedQuickReplyButton.fromObject(object.quickReplyButton);
            }
            if (object.urlButton != null) {
                if (typeof object.urlButton !== "object")
                    throw TypeError(".WAE2E.HydratedTemplateButton.urlButton: object expected");
                message.urlButton = $root.WAE2E.HydratedTemplateButton.HydratedURLButton.fromObject(object.urlButton);
            }
            if (object.callButton != null) {
                if (typeof object.callButton !== "object")
                    throw TypeError(".WAE2E.HydratedTemplateButton.callButton: object expected");
                message.callButton = $root.WAE2E.HydratedTemplateButton.HydratedCallButton.fromObject(object.callButton);
            }
            if (object.index != null)
                message.index = object.index >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a HydratedTemplateButton message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.HydratedTemplateButton
         * @static
         * @param {WAE2E.HydratedTemplateButton} message HydratedTemplateButton
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        HydratedTemplateButton.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.index = 0;
            if (message.quickReplyButton != null && message.hasOwnProperty("quickReplyButton")) {
                object.quickReplyButton = $root.WAE2E.HydratedTemplateButton.HydratedQuickReplyButton.toObject(message.quickReplyButton, options);
                if (options.oneofs)
                    object.hydratedButton = "quickReplyButton";
            }
            if (message.urlButton != null && message.hasOwnProperty("urlButton")) {
                object.urlButton = $root.WAE2E.HydratedTemplateButton.HydratedURLButton.toObject(message.urlButton, options);
                if (options.oneofs)
                    object.hydratedButton = "urlButton";
            }
            if (message.callButton != null && message.hasOwnProperty("callButton")) {
                object.callButton = $root.WAE2E.HydratedTemplateButton.HydratedCallButton.toObject(message.callButton, options);
                if (options.oneofs)
                    object.hydratedButton = "callButton";
            }
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            return object;
        };

        /**
         * Converts this HydratedTemplateButton to JSON.
         * @function toJSON
         * @memberof WAE2E.HydratedTemplateButton
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        HydratedTemplateButton.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for HydratedTemplateButton
         * @function getTypeUrl
         * @memberof WAE2E.HydratedTemplateButton
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        HydratedTemplateButton.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.HydratedTemplateButton";
        };

        HydratedTemplateButton.HydratedURLButton = (function() {

            /**
             * Properties of a HydratedURLButton.
             * @memberof WAE2E.HydratedTemplateButton
             * @interface IHydratedURLButton
             * @property {string|null} [displayText] HydratedURLButton displayText
             * @property {string|null} [URL] HydratedURLButton URL
             * @property {string|null} [consentedUsersURL] HydratedURLButton consentedUsersURL
             * @property {WAE2E.HydratedTemplateButton.HydratedURLButton.WebviewPresentationType|null} [webviewPresentation] HydratedURLButton webviewPresentation
             */

            /**
             * Constructs a new HydratedURLButton.
             * @memberof WAE2E.HydratedTemplateButton
             * @classdesc Represents a HydratedURLButton.
             * @implements IHydratedURLButton
             * @constructor
             * @param {WAE2E.HydratedTemplateButton.IHydratedURLButton=} [properties] Properties to set
             */
            function HydratedURLButton(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HydratedURLButton displayText.
             * @member {string} displayText
             * @memberof WAE2E.HydratedTemplateButton.HydratedURLButton
             * @instance
             */
            HydratedURLButton.prototype.displayText = "";

            /**
             * HydratedURLButton URL.
             * @member {string} URL
             * @memberof WAE2E.HydratedTemplateButton.HydratedURLButton
             * @instance
             */
            HydratedURLButton.prototype.URL = "";

            /**
             * HydratedURLButton consentedUsersURL.
             * @member {string} consentedUsersURL
             * @memberof WAE2E.HydratedTemplateButton.HydratedURLButton
             * @instance
             */
            HydratedURLButton.prototype.consentedUsersURL = "";

            /**
             * HydratedURLButton webviewPresentation.
             * @member {WAE2E.HydratedTemplateButton.HydratedURLButton.WebviewPresentationType} webviewPresentation
             * @memberof WAE2E.HydratedTemplateButton.HydratedURLButton
             * @instance
             */
            HydratedURLButton.prototype.webviewPresentation = 1;

            /**
             * Creates a new HydratedURLButton instance using the specified properties.
             * @function create
             * @memberof WAE2E.HydratedTemplateButton.HydratedURLButton
             * @static
             * @param {WAE2E.HydratedTemplateButton.IHydratedURLButton=} [properties] Properties to set
             * @returns {WAE2E.HydratedTemplateButton.HydratedURLButton} HydratedURLButton instance
             */
            HydratedURLButton.create = function create(properties) {
                return new HydratedURLButton(properties);
            };

            /**
             * Encodes the specified HydratedURLButton message. Does not implicitly {@link WAE2E.HydratedTemplateButton.HydratedURLButton.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.HydratedTemplateButton.HydratedURLButton
             * @static
             * @param {WAE2E.HydratedTemplateButton.IHydratedURLButton} message HydratedURLButton message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HydratedURLButton.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.displayText != null && Object.hasOwnProperty.call(message, "displayText"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.displayText);
                if (message.URL != null && Object.hasOwnProperty.call(message, "URL"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.URL);
                if (message.consentedUsersURL != null && Object.hasOwnProperty.call(message, "consentedUsersURL"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.consentedUsersURL);
                if (message.webviewPresentation != null && Object.hasOwnProperty.call(message, "webviewPresentation"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.webviewPresentation);
                return writer;
            };

            /**
             * Encodes the specified HydratedURLButton message, length delimited. Does not implicitly {@link WAE2E.HydratedTemplateButton.HydratedURLButton.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.HydratedTemplateButton.HydratedURLButton
             * @static
             * @param {WAE2E.HydratedTemplateButton.IHydratedURLButton} message HydratedURLButton message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HydratedURLButton.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HydratedURLButton message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.HydratedTemplateButton.HydratedURLButton
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.HydratedTemplateButton.HydratedURLButton} HydratedURLButton
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HydratedURLButton.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.HydratedTemplateButton.HydratedURLButton();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.displayText = reader.string();
                            break;
                        }
                    case 2: {
                            message.URL = reader.string();
                            break;
                        }
                    case 3: {
                            message.consentedUsersURL = reader.string();
                            break;
                        }
                    case 4: {
                            message.webviewPresentation = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HydratedURLButton message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.HydratedTemplateButton.HydratedURLButton
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.HydratedTemplateButton.HydratedURLButton} HydratedURLButton
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HydratedURLButton.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HydratedURLButton message.
             * @function verify
             * @memberof WAE2E.HydratedTemplateButton.HydratedURLButton
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HydratedURLButton.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.displayText != null && message.hasOwnProperty("displayText"))
                    if (!$util.isString(message.displayText))
                        return "displayText: string expected";
                if (message.URL != null && message.hasOwnProperty("URL"))
                    if (!$util.isString(message.URL))
                        return "URL: string expected";
                if (message.consentedUsersURL != null && message.hasOwnProperty("consentedUsersURL"))
                    if (!$util.isString(message.consentedUsersURL))
                        return "consentedUsersURL: string expected";
                if (message.webviewPresentation != null && message.hasOwnProperty("webviewPresentation"))
                    switch (message.webviewPresentation) {
                    default:
                        return "webviewPresentation: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                return null;
            };

            /**
             * Creates a HydratedURLButton message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.HydratedTemplateButton.HydratedURLButton
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.HydratedTemplateButton.HydratedURLButton} HydratedURLButton
             */
            HydratedURLButton.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.HydratedTemplateButton.HydratedURLButton)
                    return object;
                var message = new $root.WAE2E.HydratedTemplateButton.HydratedURLButton();
                if (object.displayText != null)
                    message.displayText = String(object.displayText);
                if (object.URL != null)
                    message.URL = String(object.URL);
                if (object.consentedUsersURL != null)
                    message.consentedUsersURL = String(object.consentedUsersURL);
                switch (object.webviewPresentation) {
                default:
                    if (typeof object.webviewPresentation === "number") {
                        message.webviewPresentation = object.webviewPresentation;
                        break;
                    }
                    break;
                case "FULL":
                case 1:
                    message.webviewPresentation = 1;
                    break;
                case "TALL":
                case 2:
                    message.webviewPresentation = 2;
                    break;
                case "COMPACT":
                case 3:
                    message.webviewPresentation = 3;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a HydratedURLButton message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.HydratedTemplateButton.HydratedURLButton
             * @static
             * @param {WAE2E.HydratedTemplateButton.HydratedURLButton} message HydratedURLButton
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HydratedURLButton.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.displayText = "";
                    object.URL = "";
                    object.consentedUsersURL = "";
                    object.webviewPresentation = options.enums === String ? "FULL" : 1;
                }
                if (message.displayText != null && message.hasOwnProperty("displayText"))
                    object.displayText = message.displayText;
                if (message.URL != null && message.hasOwnProperty("URL"))
                    object.URL = message.URL;
                if (message.consentedUsersURL != null && message.hasOwnProperty("consentedUsersURL"))
                    object.consentedUsersURL = message.consentedUsersURL;
                if (message.webviewPresentation != null && message.hasOwnProperty("webviewPresentation"))
                    object.webviewPresentation = options.enums === String ? $root.WAE2E.HydratedTemplateButton.HydratedURLButton.WebviewPresentationType[message.webviewPresentation] === undefined ? message.webviewPresentation : $root.WAE2E.HydratedTemplateButton.HydratedURLButton.WebviewPresentationType[message.webviewPresentation] : message.webviewPresentation;
                return object;
            };

            /**
             * Converts this HydratedURLButton to JSON.
             * @function toJSON
             * @memberof WAE2E.HydratedTemplateButton.HydratedURLButton
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HydratedURLButton.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for HydratedURLButton
             * @function getTypeUrl
             * @memberof WAE2E.HydratedTemplateButton.HydratedURLButton
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            HydratedURLButton.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.HydratedTemplateButton.HydratedURLButton";
            };

            /**
             * WebviewPresentationType enum.
             * @name WAE2E.HydratedTemplateButton.HydratedURLButton.WebviewPresentationType
             * @enum {number}
             * @property {number} FULL=1 FULL value
             * @property {number} TALL=2 TALL value
             * @property {number} COMPACT=3 COMPACT value
             */
            HydratedURLButton.WebviewPresentationType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "FULL"] = 1;
                values[valuesById[2] = "TALL"] = 2;
                values[valuesById[3] = "COMPACT"] = 3;
                return values;
            })();

            return HydratedURLButton;
        })();

        HydratedTemplateButton.HydratedCallButton = (function() {

            /**
             * Properties of a HydratedCallButton.
             * @memberof WAE2E.HydratedTemplateButton
             * @interface IHydratedCallButton
             * @property {string|null} [displayText] HydratedCallButton displayText
             * @property {string|null} [phoneNumber] HydratedCallButton phoneNumber
             */

            /**
             * Constructs a new HydratedCallButton.
             * @memberof WAE2E.HydratedTemplateButton
             * @classdesc Represents a HydratedCallButton.
             * @implements IHydratedCallButton
             * @constructor
             * @param {WAE2E.HydratedTemplateButton.IHydratedCallButton=} [properties] Properties to set
             */
            function HydratedCallButton(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HydratedCallButton displayText.
             * @member {string} displayText
             * @memberof WAE2E.HydratedTemplateButton.HydratedCallButton
             * @instance
             */
            HydratedCallButton.prototype.displayText = "";

            /**
             * HydratedCallButton phoneNumber.
             * @member {string} phoneNumber
             * @memberof WAE2E.HydratedTemplateButton.HydratedCallButton
             * @instance
             */
            HydratedCallButton.prototype.phoneNumber = "";

            /**
             * Creates a new HydratedCallButton instance using the specified properties.
             * @function create
             * @memberof WAE2E.HydratedTemplateButton.HydratedCallButton
             * @static
             * @param {WAE2E.HydratedTemplateButton.IHydratedCallButton=} [properties] Properties to set
             * @returns {WAE2E.HydratedTemplateButton.HydratedCallButton} HydratedCallButton instance
             */
            HydratedCallButton.create = function create(properties) {
                return new HydratedCallButton(properties);
            };

            /**
             * Encodes the specified HydratedCallButton message. Does not implicitly {@link WAE2E.HydratedTemplateButton.HydratedCallButton.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.HydratedTemplateButton.HydratedCallButton
             * @static
             * @param {WAE2E.HydratedTemplateButton.IHydratedCallButton} message HydratedCallButton message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HydratedCallButton.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.displayText != null && Object.hasOwnProperty.call(message, "displayText"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.displayText);
                if (message.phoneNumber != null && Object.hasOwnProperty.call(message, "phoneNumber"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.phoneNumber);
                return writer;
            };

            /**
             * Encodes the specified HydratedCallButton message, length delimited. Does not implicitly {@link WAE2E.HydratedTemplateButton.HydratedCallButton.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.HydratedTemplateButton.HydratedCallButton
             * @static
             * @param {WAE2E.HydratedTemplateButton.IHydratedCallButton} message HydratedCallButton message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HydratedCallButton.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HydratedCallButton message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.HydratedTemplateButton.HydratedCallButton
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.HydratedTemplateButton.HydratedCallButton} HydratedCallButton
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HydratedCallButton.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.HydratedTemplateButton.HydratedCallButton();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.displayText = reader.string();
                            break;
                        }
                    case 2: {
                            message.phoneNumber = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HydratedCallButton message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.HydratedTemplateButton.HydratedCallButton
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.HydratedTemplateButton.HydratedCallButton} HydratedCallButton
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HydratedCallButton.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HydratedCallButton message.
             * @function verify
             * @memberof WAE2E.HydratedTemplateButton.HydratedCallButton
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HydratedCallButton.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.displayText != null && message.hasOwnProperty("displayText"))
                    if (!$util.isString(message.displayText))
                        return "displayText: string expected";
                if (message.phoneNumber != null && message.hasOwnProperty("phoneNumber"))
                    if (!$util.isString(message.phoneNumber))
                        return "phoneNumber: string expected";
                return null;
            };

            /**
             * Creates a HydratedCallButton message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.HydratedTemplateButton.HydratedCallButton
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.HydratedTemplateButton.HydratedCallButton} HydratedCallButton
             */
            HydratedCallButton.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.HydratedTemplateButton.HydratedCallButton)
                    return object;
                var message = new $root.WAE2E.HydratedTemplateButton.HydratedCallButton();
                if (object.displayText != null)
                    message.displayText = String(object.displayText);
                if (object.phoneNumber != null)
                    message.phoneNumber = String(object.phoneNumber);
                return message;
            };

            /**
             * Creates a plain object from a HydratedCallButton message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.HydratedTemplateButton.HydratedCallButton
             * @static
             * @param {WAE2E.HydratedTemplateButton.HydratedCallButton} message HydratedCallButton
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HydratedCallButton.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.displayText = "";
                    object.phoneNumber = "";
                }
                if (message.displayText != null && message.hasOwnProperty("displayText"))
                    object.displayText = message.displayText;
                if (message.phoneNumber != null && message.hasOwnProperty("phoneNumber"))
                    object.phoneNumber = message.phoneNumber;
                return object;
            };

            /**
             * Converts this HydratedCallButton to JSON.
             * @function toJSON
             * @memberof WAE2E.HydratedTemplateButton.HydratedCallButton
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HydratedCallButton.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for HydratedCallButton
             * @function getTypeUrl
             * @memberof WAE2E.HydratedTemplateButton.HydratedCallButton
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            HydratedCallButton.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.HydratedTemplateButton.HydratedCallButton";
            };

            return HydratedCallButton;
        })();

        HydratedTemplateButton.HydratedQuickReplyButton = (function() {

            /**
             * Properties of a HydratedQuickReplyButton.
             * @memberof WAE2E.HydratedTemplateButton
             * @interface IHydratedQuickReplyButton
             * @property {string|null} [displayText] HydratedQuickReplyButton displayText
             * @property {string|null} [ID] HydratedQuickReplyButton ID
             */

            /**
             * Constructs a new HydratedQuickReplyButton.
             * @memberof WAE2E.HydratedTemplateButton
             * @classdesc Represents a HydratedQuickReplyButton.
             * @implements IHydratedQuickReplyButton
             * @constructor
             * @param {WAE2E.HydratedTemplateButton.IHydratedQuickReplyButton=} [properties] Properties to set
             */
            function HydratedQuickReplyButton(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HydratedQuickReplyButton displayText.
             * @member {string} displayText
             * @memberof WAE2E.HydratedTemplateButton.HydratedQuickReplyButton
             * @instance
             */
            HydratedQuickReplyButton.prototype.displayText = "";

            /**
             * HydratedQuickReplyButton ID.
             * @member {string} ID
             * @memberof WAE2E.HydratedTemplateButton.HydratedQuickReplyButton
             * @instance
             */
            HydratedQuickReplyButton.prototype.ID = "";

            /**
             * Creates a new HydratedQuickReplyButton instance using the specified properties.
             * @function create
             * @memberof WAE2E.HydratedTemplateButton.HydratedQuickReplyButton
             * @static
             * @param {WAE2E.HydratedTemplateButton.IHydratedQuickReplyButton=} [properties] Properties to set
             * @returns {WAE2E.HydratedTemplateButton.HydratedQuickReplyButton} HydratedQuickReplyButton instance
             */
            HydratedQuickReplyButton.create = function create(properties) {
                return new HydratedQuickReplyButton(properties);
            };

            /**
             * Encodes the specified HydratedQuickReplyButton message. Does not implicitly {@link WAE2E.HydratedTemplateButton.HydratedQuickReplyButton.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.HydratedTemplateButton.HydratedQuickReplyButton
             * @static
             * @param {WAE2E.HydratedTemplateButton.IHydratedQuickReplyButton} message HydratedQuickReplyButton message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HydratedQuickReplyButton.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.displayText != null && Object.hasOwnProperty.call(message, "displayText"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.displayText);
                if (message.ID != null && Object.hasOwnProperty.call(message, "ID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.ID);
                return writer;
            };

            /**
             * Encodes the specified HydratedQuickReplyButton message, length delimited. Does not implicitly {@link WAE2E.HydratedTemplateButton.HydratedQuickReplyButton.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.HydratedTemplateButton.HydratedQuickReplyButton
             * @static
             * @param {WAE2E.HydratedTemplateButton.IHydratedQuickReplyButton} message HydratedQuickReplyButton message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HydratedQuickReplyButton.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HydratedQuickReplyButton message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.HydratedTemplateButton.HydratedQuickReplyButton
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.HydratedTemplateButton.HydratedQuickReplyButton} HydratedQuickReplyButton
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HydratedQuickReplyButton.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.HydratedTemplateButton.HydratedQuickReplyButton();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.displayText = reader.string();
                            break;
                        }
                    case 2: {
                            message.ID = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HydratedQuickReplyButton message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.HydratedTemplateButton.HydratedQuickReplyButton
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.HydratedTemplateButton.HydratedQuickReplyButton} HydratedQuickReplyButton
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HydratedQuickReplyButton.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HydratedQuickReplyButton message.
             * @function verify
             * @memberof WAE2E.HydratedTemplateButton.HydratedQuickReplyButton
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HydratedQuickReplyButton.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.displayText != null && message.hasOwnProperty("displayText"))
                    if (!$util.isString(message.displayText))
                        return "displayText: string expected";
                if (message.ID != null && message.hasOwnProperty("ID"))
                    if (!$util.isString(message.ID))
                        return "ID: string expected";
                return null;
            };

            /**
             * Creates a HydratedQuickReplyButton message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.HydratedTemplateButton.HydratedQuickReplyButton
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.HydratedTemplateButton.HydratedQuickReplyButton} HydratedQuickReplyButton
             */
            HydratedQuickReplyButton.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.HydratedTemplateButton.HydratedQuickReplyButton)
                    return object;
                var message = new $root.WAE2E.HydratedTemplateButton.HydratedQuickReplyButton();
                if (object.displayText != null)
                    message.displayText = String(object.displayText);
                if (object.ID != null)
                    message.ID = String(object.ID);
                return message;
            };

            /**
             * Creates a plain object from a HydratedQuickReplyButton message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.HydratedTemplateButton.HydratedQuickReplyButton
             * @static
             * @param {WAE2E.HydratedTemplateButton.HydratedQuickReplyButton} message HydratedQuickReplyButton
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HydratedQuickReplyButton.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.displayText = "";
                    object.ID = "";
                }
                if (message.displayText != null && message.hasOwnProperty("displayText"))
                    object.displayText = message.displayText;
                if (message.ID != null && message.hasOwnProperty("ID"))
                    object.ID = message.ID;
                return object;
            };

            /**
             * Converts this HydratedQuickReplyButton to JSON.
             * @function toJSON
             * @memberof WAE2E.HydratedTemplateButton.HydratedQuickReplyButton
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HydratedQuickReplyButton.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for HydratedQuickReplyButton
             * @function getTypeUrl
             * @memberof WAE2E.HydratedTemplateButton.HydratedQuickReplyButton
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            HydratedQuickReplyButton.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.HydratedTemplateButton.HydratedQuickReplyButton";
            };

            return HydratedQuickReplyButton;
        })();

        return HydratedTemplateButton;
    })();

    WAE2E.PaymentBackground = (function() {

        /**
         * Properties of a PaymentBackground.
         * @memberof WAE2E
         * @interface IPaymentBackground
         * @property {string|null} [ID] PaymentBackground ID
         * @property {number|Long|null} [fileLength] PaymentBackground fileLength
         * @property {number|null} [width] PaymentBackground width
         * @property {number|null} [height] PaymentBackground height
         * @property {string|null} [mimetype] PaymentBackground mimetype
         * @property {number|null} [placeholderArgb] PaymentBackground placeholderArgb
         * @property {number|null} [textArgb] PaymentBackground textArgb
         * @property {number|null} [subtextArgb] PaymentBackground subtextArgb
         * @property {WAE2E.PaymentBackground.IMediaData|null} [mediaData] PaymentBackground mediaData
         * @property {WAE2E.PaymentBackground.Type|null} [type] PaymentBackground type
         */

        /**
         * Constructs a new PaymentBackground.
         * @memberof WAE2E
         * @classdesc Represents a PaymentBackground.
         * @implements IPaymentBackground
         * @constructor
         * @param {WAE2E.IPaymentBackground=} [properties] Properties to set
         */
        function PaymentBackground(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PaymentBackground ID.
         * @member {string} ID
         * @memberof WAE2E.PaymentBackground
         * @instance
         */
        PaymentBackground.prototype.ID = "";

        /**
         * PaymentBackground fileLength.
         * @member {number|Long} fileLength
         * @memberof WAE2E.PaymentBackground
         * @instance
         */
        PaymentBackground.prototype.fileLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * PaymentBackground width.
         * @member {number} width
         * @memberof WAE2E.PaymentBackground
         * @instance
         */
        PaymentBackground.prototype.width = 0;

        /**
         * PaymentBackground height.
         * @member {number} height
         * @memberof WAE2E.PaymentBackground
         * @instance
         */
        PaymentBackground.prototype.height = 0;

        /**
         * PaymentBackground mimetype.
         * @member {string} mimetype
         * @memberof WAE2E.PaymentBackground
         * @instance
         */
        PaymentBackground.prototype.mimetype = "";

        /**
         * PaymentBackground placeholderArgb.
         * @member {number} placeholderArgb
         * @memberof WAE2E.PaymentBackground
         * @instance
         */
        PaymentBackground.prototype.placeholderArgb = 0;

        /**
         * PaymentBackground textArgb.
         * @member {number} textArgb
         * @memberof WAE2E.PaymentBackground
         * @instance
         */
        PaymentBackground.prototype.textArgb = 0;

        /**
         * PaymentBackground subtextArgb.
         * @member {number} subtextArgb
         * @memberof WAE2E.PaymentBackground
         * @instance
         */
        PaymentBackground.prototype.subtextArgb = 0;

        /**
         * PaymentBackground mediaData.
         * @member {WAE2E.PaymentBackground.IMediaData|null|undefined} mediaData
         * @memberof WAE2E.PaymentBackground
         * @instance
         */
        PaymentBackground.prototype.mediaData = null;

        /**
         * PaymentBackground type.
         * @member {WAE2E.PaymentBackground.Type} type
         * @memberof WAE2E.PaymentBackground
         * @instance
         */
        PaymentBackground.prototype.type = 0;

        /**
         * Creates a new PaymentBackground instance using the specified properties.
         * @function create
         * @memberof WAE2E.PaymentBackground
         * @static
         * @param {WAE2E.IPaymentBackground=} [properties] Properties to set
         * @returns {WAE2E.PaymentBackground} PaymentBackground instance
         */
        PaymentBackground.create = function create(properties) {
            return new PaymentBackground(properties);
        };

        /**
         * Encodes the specified PaymentBackground message. Does not implicitly {@link WAE2E.PaymentBackground.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.PaymentBackground
         * @static
         * @param {WAE2E.IPaymentBackground} message PaymentBackground message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PaymentBackground.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ID != null && Object.hasOwnProperty.call(message, "ID"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.ID);
            if (message.fileLength != null && Object.hasOwnProperty.call(message, "fileLength"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.fileLength);
            if (message.width != null && Object.hasOwnProperty.call(message, "width"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.width);
            if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.height);
            if (message.mimetype != null && Object.hasOwnProperty.call(message, "mimetype"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.mimetype);
            if (message.placeholderArgb != null && Object.hasOwnProperty.call(message, "placeholderArgb"))
                writer.uint32(/* id 6, wireType 5 =*/53).fixed32(message.placeholderArgb);
            if (message.textArgb != null && Object.hasOwnProperty.call(message, "textArgb"))
                writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.textArgb);
            if (message.subtextArgb != null && Object.hasOwnProperty.call(message, "subtextArgb"))
                writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.subtextArgb);
            if (message.mediaData != null && Object.hasOwnProperty.call(message, "mediaData"))
                $root.WAE2E.PaymentBackground.MediaData.encode(message.mediaData, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.type);
            return writer;
        };

        /**
         * Encodes the specified PaymentBackground message, length delimited. Does not implicitly {@link WAE2E.PaymentBackground.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.PaymentBackground
         * @static
         * @param {WAE2E.IPaymentBackground} message PaymentBackground message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PaymentBackground.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PaymentBackground message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.PaymentBackground
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.PaymentBackground} PaymentBackground
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PaymentBackground.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.PaymentBackground();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.ID = reader.string();
                        break;
                    }
                case 2: {
                        message.fileLength = reader.uint64();
                        break;
                    }
                case 3: {
                        message.width = reader.uint32();
                        break;
                    }
                case 4: {
                        message.height = reader.uint32();
                        break;
                    }
                case 5: {
                        message.mimetype = reader.string();
                        break;
                    }
                case 6: {
                        message.placeholderArgb = reader.fixed32();
                        break;
                    }
                case 7: {
                        message.textArgb = reader.fixed32();
                        break;
                    }
                case 8: {
                        message.subtextArgb = reader.fixed32();
                        break;
                    }
                case 9: {
                        message.mediaData = $root.WAE2E.PaymentBackground.MediaData.decode(reader, reader.uint32());
                        break;
                    }
                case 10: {
                        message.type = reader.int32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PaymentBackground message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.PaymentBackground
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.PaymentBackground} PaymentBackground
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PaymentBackground.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PaymentBackground message.
         * @function verify
         * @memberof WAE2E.PaymentBackground
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PaymentBackground.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ID != null && message.hasOwnProperty("ID"))
                if (!$util.isString(message.ID))
                    return "ID: string expected";
            if (message.fileLength != null && message.hasOwnProperty("fileLength"))
                if (!$util.isInteger(message.fileLength) && !(message.fileLength && $util.isInteger(message.fileLength.low) && $util.isInteger(message.fileLength.high)))
                    return "fileLength: integer|Long expected";
            if (message.width != null && message.hasOwnProperty("width"))
                if (!$util.isInteger(message.width))
                    return "width: integer expected";
            if (message.height != null && message.hasOwnProperty("height"))
                if (!$util.isInteger(message.height))
                    return "height: integer expected";
            if (message.mimetype != null && message.hasOwnProperty("mimetype"))
                if (!$util.isString(message.mimetype))
                    return "mimetype: string expected";
            if (message.placeholderArgb != null && message.hasOwnProperty("placeholderArgb"))
                if (!$util.isInteger(message.placeholderArgb))
                    return "placeholderArgb: integer expected";
            if (message.textArgb != null && message.hasOwnProperty("textArgb"))
                if (!$util.isInteger(message.textArgb))
                    return "textArgb: integer expected";
            if (message.subtextArgb != null && message.hasOwnProperty("subtextArgb"))
                if (!$util.isInteger(message.subtextArgb))
                    return "subtextArgb: integer expected";
            if (message.mediaData != null && message.hasOwnProperty("mediaData")) {
                var error = $root.WAE2E.PaymentBackground.MediaData.verify(message.mediaData);
                if (error)
                    return "mediaData." + error;
            }
            if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                default:
                    return "type: enum value expected";
                case 0:
                case 1:
                    break;
                }
            return null;
        };

        /**
         * Creates a PaymentBackground message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.PaymentBackground
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.PaymentBackground} PaymentBackground
         */
        PaymentBackground.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.PaymentBackground)
                return object;
            var message = new $root.WAE2E.PaymentBackground();
            if (object.ID != null)
                message.ID = String(object.ID);
            if (object.fileLength != null)
                if ($util.Long)
                    (message.fileLength = $util.Long.fromValue(object.fileLength)).unsigned = true;
                else if (typeof object.fileLength === "string")
                    message.fileLength = parseInt(object.fileLength, 10);
                else if (typeof object.fileLength === "number")
                    message.fileLength = object.fileLength;
                else if (typeof object.fileLength === "object")
                    message.fileLength = new $util.LongBits(object.fileLength.low >>> 0, object.fileLength.high >>> 0).toNumber(true);
            if (object.width != null)
                message.width = object.width >>> 0;
            if (object.height != null)
                message.height = object.height >>> 0;
            if (object.mimetype != null)
                message.mimetype = String(object.mimetype);
            if (object.placeholderArgb != null)
                message.placeholderArgb = object.placeholderArgb >>> 0;
            if (object.textArgb != null)
                message.textArgb = object.textArgb >>> 0;
            if (object.subtextArgb != null)
                message.subtextArgb = object.subtextArgb >>> 0;
            if (object.mediaData != null) {
                if (typeof object.mediaData !== "object")
                    throw TypeError(".WAE2E.PaymentBackground.mediaData: object expected");
                message.mediaData = $root.WAE2E.PaymentBackground.MediaData.fromObject(object.mediaData);
            }
            switch (object.type) {
            default:
                if (typeof object.type === "number") {
                    message.type = object.type;
                    break;
                }
                break;
            case "UNKNOWN":
            case 0:
                message.type = 0;
                break;
            case "DEFAULT":
            case 1:
                message.type = 1;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a PaymentBackground message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.PaymentBackground
         * @static
         * @param {WAE2E.PaymentBackground} message PaymentBackground
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PaymentBackground.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ID = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.fileLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.fileLength = options.longs === String ? "0" : 0;
                object.width = 0;
                object.height = 0;
                object.mimetype = "";
                object.placeholderArgb = 0;
                object.textArgb = 0;
                object.subtextArgb = 0;
                object.mediaData = null;
                object.type = options.enums === String ? "UNKNOWN" : 0;
            }
            if (message.ID != null && message.hasOwnProperty("ID"))
                object.ID = message.ID;
            if (message.fileLength != null && message.hasOwnProperty("fileLength"))
                if (typeof message.fileLength === "number")
                    object.fileLength = options.longs === String ? String(message.fileLength) : message.fileLength;
                else
                    object.fileLength = options.longs === String ? $util.Long.prototype.toString.call(message.fileLength) : options.longs === Number ? new $util.LongBits(message.fileLength.low >>> 0, message.fileLength.high >>> 0).toNumber(true) : message.fileLength;
            if (message.width != null && message.hasOwnProperty("width"))
                object.width = message.width;
            if (message.height != null && message.hasOwnProperty("height"))
                object.height = message.height;
            if (message.mimetype != null && message.hasOwnProperty("mimetype"))
                object.mimetype = message.mimetype;
            if (message.placeholderArgb != null && message.hasOwnProperty("placeholderArgb"))
                object.placeholderArgb = message.placeholderArgb;
            if (message.textArgb != null && message.hasOwnProperty("textArgb"))
                object.textArgb = message.textArgb;
            if (message.subtextArgb != null && message.hasOwnProperty("subtextArgb"))
                object.subtextArgb = message.subtextArgb;
            if (message.mediaData != null && message.hasOwnProperty("mediaData"))
                object.mediaData = $root.WAE2E.PaymentBackground.MediaData.toObject(message.mediaData, options);
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.WAE2E.PaymentBackground.Type[message.type] === undefined ? message.type : $root.WAE2E.PaymentBackground.Type[message.type] : message.type;
            return object;
        };

        /**
         * Converts this PaymentBackground to JSON.
         * @function toJSON
         * @memberof WAE2E.PaymentBackground
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PaymentBackground.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for PaymentBackground
         * @function getTypeUrl
         * @memberof WAE2E.PaymentBackground
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        PaymentBackground.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.PaymentBackground";
        };

        /**
         * Type enum.
         * @name WAE2E.PaymentBackground.Type
         * @enum {number}
         * @property {number} UNKNOWN=0 UNKNOWN value
         * @property {number} DEFAULT=1 DEFAULT value
         */
        PaymentBackground.Type = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "UNKNOWN"] = 0;
            values[valuesById[1] = "DEFAULT"] = 1;
            return values;
        })();

        PaymentBackground.MediaData = (function() {

            /**
             * Properties of a MediaData.
             * @memberof WAE2E.PaymentBackground
             * @interface IMediaData
             * @property {Uint8Array|null} [mediaKey] MediaData mediaKey
             * @property {number|Long|null} [mediaKeyTimestamp] MediaData mediaKeyTimestamp
             * @property {Uint8Array|null} [fileSHA256] MediaData fileSHA256
             * @property {Uint8Array|null} [fileEncSHA256] MediaData fileEncSHA256
             * @property {string|null} [directPath] MediaData directPath
             */

            /**
             * Constructs a new MediaData.
             * @memberof WAE2E.PaymentBackground
             * @classdesc Represents a MediaData.
             * @implements IMediaData
             * @constructor
             * @param {WAE2E.PaymentBackground.IMediaData=} [properties] Properties to set
             */
            function MediaData(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MediaData mediaKey.
             * @member {Uint8Array} mediaKey
             * @memberof WAE2E.PaymentBackground.MediaData
             * @instance
             */
            MediaData.prototype.mediaKey = $util.newBuffer([]);

            /**
             * MediaData mediaKeyTimestamp.
             * @member {number|Long} mediaKeyTimestamp
             * @memberof WAE2E.PaymentBackground.MediaData
             * @instance
             */
            MediaData.prototype.mediaKeyTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * MediaData fileSHA256.
             * @member {Uint8Array} fileSHA256
             * @memberof WAE2E.PaymentBackground.MediaData
             * @instance
             */
            MediaData.prototype.fileSHA256 = $util.newBuffer([]);

            /**
             * MediaData fileEncSHA256.
             * @member {Uint8Array} fileEncSHA256
             * @memberof WAE2E.PaymentBackground.MediaData
             * @instance
             */
            MediaData.prototype.fileEncSHA256 = $util.newBuffer([]);

            /**
             * MediaData directPath.
             * @member {string} directPath
             * @memberof WAE2E.PaymentBackground.MediaData
             * @instance
             */
            MediaData.prototype.directPath = "";

            /**
             * Creates a new MediaData instance using the specified properties.
             * @function create
             * @memberof WAE2E.PaymentBackground.MediaData
             * @static
             * @param {WAE2E.PaymentBackground.IMediaData=} [properties] Properties to set
             * @returns {WAE2E.PaymentBackground.MediaData} MediaData instance
             */
            MediaData.create = function create(properties) {
                return new MediaData(properties);
            };

            /**
             * Encodes the specified MediaData message. Does not implicitly {@link WAE2E.PaymentBackground.MediaData.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.PaymentBackground.MediaData
             * @static
             * @param {WAE2E.PaymentBackground.IMediaData} message MediaData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MediaData.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mediaKey != null && Object.hasOwnProperty.call(message, "mediaKey"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.mediaKey);
                if (message.mediaKeyTimestamp != null && Object.hasOwnProperty.call(message, "mediaKeyTimestamp"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.mediaKeyTimestamp);
                if (message.fileSHA256 != null && Object.hasOwnProperty.call(message, "fileSHA256"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.fileSHA256);
                if (message.fileEncSHA256 != null && Object.hasOwnProperty.call(message, "fileEncSHA256"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.fileEncSHA256);
                if (message.directPath != null && Object.hasOwnProperty.call(message, "directPath"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.directPath);
                return writer;
            };

            /**
             * Encodes the specified MediaData message, length delimited. Does not implicitly {@link WAE2E.PaymentBackground.MediaData.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.PaymentBackground.MediaData
             * @static
             * @param {WAE2E.PaymentBackground.IMediaData} message MediaData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MediaData.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MediaData message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.PaymentBackground.MediaData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.PaymentBackground.MediaData} MediaData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MediaData.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.PaymentBackground.MediaData();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mediaKey = reader.bytes();
                            break;
                        }
                    case 2: {
                            message.mediaKeyTimestamp = reader.int64();
                            break;
                        }
                    case 3: {
                            message.fileSHA256 = reader.bytes();
                            break;
                        }
                    case 4: {
                            message.fileEncSHA256 = reader.bytes();
                            break;
                        }
                    case 5: {
                            message.directPath = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MediaData message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.PaymentBackground.MediaData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.PaymentBackground.MediaData} MediaData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MediaData.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MediaData message.
             * @function verify
             * @memberof WAE2E.PaymentBackground.MediaData
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MediaData.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                    if (!(message.mediaKey && typeof message.mediaKey.length === "number" || $util.isString(message.mediaKey)))
                        return "mediaKey: buffer expected";
                if (message.mediaKeyTimestamp != null && message.hasOwnProperty("mediaKeyTimestamp"))
                    if (!$util.isInteger(message.mediaKeyTimestamp) && !(message.mediaKeyTimestamp && $util.isInteger(message.mediaKeyTimestamp.low) && $util.isInteger(message.mediaKeyTimestamp.high)))
                        return "mediaKeyTimestamp: integer|Long expected";
                if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                    if (!(message.fileSHA256 && typeof message.fileSHA256.length === "number" || $util.isString(message.fileSHA256)))
                        return "fileSHA256: buffer expected";
                if (message.fileEncSHA256 != null && message.hasOwnProperty("fileEncSHA256"))
                    if (!(message.fileEncSHA256 && typeof message.fileEncSHA256.length === "number" || $util.isString(message.fileEncSHA256)))
                        return "fileEncSHA256: buffer expected";
                if (message.directPath != null && message.hasOwnProperty("directPath"))
                    if (!$util.isString(message.directPath))
                        return "directPath: string expected";
                return null;
            };

            /**
             * Creates a MediaData message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.PaymentBackground.MediaData
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.PaymentBackground.MediaData} MediaData
             */
            MediaData.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.PaymentBackground.MediaData)
                    return object;
                var message = new $root.WAE2E.PaymentBackground.MediaData();
                if (object.mediaKey != null)
                    if (typeof object.mediaKey === "string")
                        $util.base64.decode(object.mediaKey, message.mediaKey = $util.newBuffer($util.base64.length(object.mediaKey)), 0);
                    else if (object.mediaKey.length >= 0)
                        message.mediaKey = object.mediaKey;
                if (object.mediaKeyTimestamp != null)
                    if ($util.Long)
                        (message.mediaKeyTimestamp = $util.Long.fromValue(object.mediaKeyTimestamp)).unsigned = false;
                    else if (typeof object.mediaKeyTimestamp === "string")
                        message.mediaKeyTimestamp = parseInt(object.mediaKeyTimestamp, 10);
                    else if (typeof object.mediaKeyTimestamp === "number")
                        message.mediaKeyTimestamp = object.mediaKeyTimestamp;
                    else if (typeof object.mediaKeyTimestamp === "object")
                        message.mediaKeyTimestamp = new $util.LongBits(object.mediaKeyTimestamp.low >>> 0, object.mediaKeyTimestamp.high >>> 0).toNumber();
                if (object.fileSHA256 != null)
                    if (typeof object.fileSHA256 === "string")
                        $util.base64.decode(object.fileSHA256, message.fileSHA256 = $util.newBuffer($util.base64.length(object.fileSHA256)), 0);
                    else if (object.fileSHA256.length >= 0)
                        message.fileSHA256 = object.fileSHA256;
                if (object.fileEncSHA256 != null)
                    if (typeof object.fileEncSHA256 === "string")
                        $util.base64.decode(object.fileEncSHA256, message.fileEncSHA256 = $util.newBuffer($util.base64.length(object.fileEncSHA256)), 0);
                    else if (object.fileEncSHA256.length >= 0)
                        message.fileEncSHA256 = object.fileEncSHA256;
                if (object.directPath != null)
                    message.directPath = String(object.directPath);
                return message;
            };

            /**
             * Creates a plain object from a MediaData message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.PaymentBackground.MediaData
             * @static
             * @param {WAE2E.PaymentBackground.MediaData} message MediaData
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MediaData.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.mediaKey = "";
                    else {
                        object.mediaKey = [];
                        if (options.bytes !== Array)
                            object.mediaKey = $util.newBuffer(object.mediaKey);
                    }
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.mediaKeyTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.mediaKeyTimestamp = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.fileSHA256 = "";
                    else {
                        object.fileSHA256 = [];
                        if (options.bytes !== Array)
                            object.fileSHA256 = $util.newBuffer(object.fileSHA256);
                    }
                    if (options.bytes === String)
                        object.fileEncSHA256 = "";
                    else {
                        object.fileEncSHA256 = [];
                        if (options.bytes !== Array)
                            object.fileEncSHA256 = $util.newBuffer(object.fileEncSHA256);
                    }
                    object.directPath = "";
                }
                if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                    object.mediaKey = options.bytes === String ? $util.base64.encode(message.mediaKey, 0, message.mediaKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.mediaKey) : message.mediaKey;
                if (message.mediaKeyTimestamp != null && message.hasOwnProperty("mediaKeyTimestamp"))
                    if (typeof message.mediaKeyTimestamp === "number")
                        object.mediaKeyTimestamp = options.longs === String ? String(message.mediaKeyTimestamp) : message.mediaKeyTimestamp;
                    else
                        object.mediaKeyTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.mediaKeyTimestamp) : options.longs === Number ? new $util.LongBits(message.mediaKeyTimestamp.low >>> 0, message.mediaKeyTimestamp.high >>> 0).toNumber() : message.mediaKeyTimestamp;
                if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                    object.fileSHA256 = options.bytes === String ? $util.base64.encode(message.fileSHA256, 0, message.fileSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.fileSHA256) : message.fileSHA256;
                if (message.fileEncSHA256 != null && message.hasOwnProperty("fileEncSHA256"))
                    object.fileEncSHA256 = options.bytes === String ? $util.base64.encode(message.fileEncSHA256, 0, message.fileEncSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.fileEncSHA256) : message.fileEncSHA256;
                if (message.directPath != null && message.hasOwnProperty("directPath"))
                    object.directPath = message.directPath;
                return object;
            };

            /**
             * Converts this MediaData to JSON.
             * @function toJSON
             * @memberof WAE2E.PaymentBackground.MediaData
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MediaData.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for MediaData
             * @function getTypeUrl
             * @memberof WAE2E.PaymentBackground.MediaData
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            MediaData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.PaymentBackground.MediaData";
            };

            return MediaData;
        })();

        return PaymentBackground;
    })();

    WAE2E.DisappearingMode = (function() {

        /**
         * Properties of a DisappearingMode.
         * @memberof WAE2E
         * @interface IDisappearingMode
         * @property {WAE2E.DisappearingMode.Initiator|null} [initiator] DisappearingMode initiator
         * @property {WAE2E.DisappearingMode.Trigger|null} [trigger] DisappearingMode trigger
         * @property {string|null} [initiatorDeviceJID] DisappearingMode initiatorDeviceJID
         * @property {boolean|null} [initiatedByMe] DisappearingMode initiatedByMe
         */

        /**
         * Constructs a new DisappearingMode.
         * @memberof WAE2E
         * @classdesc Represents a DisappearingMode.
         * @implements IDisappearingMode
         * @constructor
         * @param {WAE2E.IDisappearingMode=} [properties] Properties to set
         */
        function DisappearingMode(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DisappearingMode initiator.
         * @member {WAE2E.DisappearingMode.Initiator} initiator
         * @memberof WAE2E.DisappearingMode
         * @instance
         */
        DisappearingMode.prototype.initiator = 0;

        /**
         * DisappearingMode trigger.
         * @member {WAE2E.DisappearingMode.Trigger} trigger
         * @memberof WAE2E.DisappearingMode
         * @instance
         */
        DisappearingMode.prototype.trigger = 0;

        /**
         * DisappearingMode initiatorDeviceJID.
         * @member {string} initiatorDeviceJID
         * @memberof WAE2E.DisappearingMode
         * @instance
         */
        DisappearingMode.prototype.initiatorDeviceJID = "";

        /**
         * DisappearingMode initiatedByMe.
         * @member {boolean} initiatedByMe
         * @memberof WAE2E.DisappearingMode
         * @instance
         */
        DisappearingMode.prototype.initiatedByMe = false;

        /**
         * Creates a new DisappearingMode instance using the specified properties.
         * @function create
         * @memberof WAE2E.DisappearingMode
         * @static
         * @param {WAE2E.IDisappearingMode=} [properties] Properties to set
         * @returns {WAE2E.DisappearingMode} DisappearingMode instance
         */
        DisappearingMode.create = function create(properties) {
            return new DisappearingMode(properties);
        };

        /**
         * Encodes the specified DisappearingMode message. Does not implicitly {@link WAE2E.DisappearingMode.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.DisappearingMode
         * @static
         * @param {WAE2E.IDisappearingMode} message DisappearingMode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DisappearingMode.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.initiator != null && Object.hasOwnProperty.call(message, "initiator"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.initiator);
            if (message.trigger != null && Object.hasOwnProperty.call(message, "trigger"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.trigger);
            if (message.initiatorDeviceJID != null && Object.hasOwnProperty.call(message, "initiatorDeviceJID"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.initiatorDeviceJID);
            if (message.initiatedByMe != null && Object.hasOwnProperty.call(message, "initiatedByMe"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.initiatedByMe);
            return writer;
        };

        /**
         * Encodes the specified DisappearingMode message, length delimited. Does not implicitly {@link WAE2E.DisappearingMode.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.DisappearingMode
         * @static
         * @param {WAE2E.IDisappearingMode} message DisappearingMode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DisappearingMode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DisappearingMode message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.DisappearingMode
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.DisappearingMode} DisappearingMode
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DisappearingMode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.DisappearingMode();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.initiator = reader.int32();
                        break;
                    }
                case 2: {
                        message.trigger = reader.int32();
                        break;
                    }
                case 3: {
                        message.initiatorDeviceJID = reader.string();
                        break;
                    }
                case 4: {
                        message.initiatedByMe = reader.bool();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DisappearingMode message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.DisappearingMode
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.DisappearingMode} DisappearingMode
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DisappearingMode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DisappearingMode message.
         * @function verify
         * @memberof WAE2E.DisappearingMode
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DisappearingMode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.initiator != null && message.hasOwnProperty("initiator"))
                switch (message.initiator) {
                default:
                    return "initiator: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.trigger != null && message.hasOwnProperty("trigger"))
                switch (message.trigger) {
                default:
                    return "trigger: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            if (message.initiatorDeviceJID != null && message.hasOwnProperty("initiatorDeviceJID"))
                if (!$util.isString(message.initiatorDeviceJID))
                    return "initiatorDeviceJID: string expected";
            if (message.initiatedByMe != null && message.hasOwnProperty("initiatedByMe"))
                if (typeof message.initiatedByMe !== "boolean")
                    return "initiatedByMe: boolean expected";
            return null;
        };

        /**
         * Creates a DisappearingMode message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.DisappearingMode
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.DisappearingMode} DisappearingMode
         */
        DisappearingMode.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.DisappearingMode)
                return object;
            var message = new $root.WAE2E.DisappearingMode();
            switch (object.initiator) {
            default:
                if (typeof object.initiator === "number") {
                    message.initiator = object.initiator;
                    break;
                }
                break;
            case "CHANGED_IN_CHAT":
            case 0:
                message.initiator = 0;
                break;
            case "INITIATED_BY_ME":
            case 1:
                message.initiator = 1;
                break;
            case "INITIATED_BY_OTHER":
            case 2:
                message.initiator = 2;
                break;
            case "BIZ_UPGRADE_FB_HOSTING":
            case 3:
                message.initiator = 3;
                break;
            }
            switch (object.trigger) {
            default:
                if (typeof object.trigger === "number") {
                    message.trigger = object.trigger;
                    break;
                }
                break;
            case "UNKNOWN":
            case 0:
                message.trigger = 0;
                break;
            case "CHAT_SETTING":
            case 1:
                message.trigger = 1;
                break;
            case "ACCOUNT_SETTING":
            case 2:
                message.trigger = 2;
                break;
            case "BULK_CHANGE":
            case 3:
                message.trigger = 3;
                break;
            case "BIZ_SUPPORTS_FB_HOSTING":
            case 4:
                message.trigger = 4;
                break;
            }
            if (object.initiatorDeviceJID != null)
                message.initiatorDeviceJID = String(object.initiatorDeviceJID);
            if (object.initiatedByMe != null)
                message.initiatedByMe = Boolean(object.initiatedByMe);
            return message;
        };

        /**
         * Creates a plain object from a DisappearingMode message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.DisappearingMode
         * @static
         * @param {WAE2E.DisappearingMode} message DisappearingMode
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DisappearingMode.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.initiator = options.enums === String ? "CHANGED_IN_CHAT" : 0;
                object.trigger = options.enums === String ? "UNKNOWN" : 0;
                object.initiatorDeviceJID = "";
                object.initiatedByMe = false;
            }
            if (message.initiator != null && message.hasOwnProperty("initiator"))
                object.initiator = options.enums === String ? $root.WAE2E.DisappearingMode.Initiator[message.initiator] === undefined ? message.initiator : $root.WAE2E.DisappearingMode.Initiator[message.initiator] : message.initiator;
            if (message.trigger != null && message.hasOwnProperty("trigger"))
                object.trigger = options.enums === String ? $root.WAE2E.DisappearingMode.Trigger[message.trigger] === undefined ? message.trigger : $root.WAE2E.DisappearingMode.Trigger[message.trigger] : message.trigger;
            if (message.initiatorDeviceJID != null && message.hasOwnProperty("initiatorDeviceJID"))
                object.initiatorDeviceJID = message.initiatorDeviceJID;
            if (message.initiatedByMe != null && message.hasOwnProperty("initiatedByMe"))
                object.initiatedByMe = message.initiatedByMe;
            return object;
        };

        /**
         * Converts this DisappearingMode to JSON.
         * @function toJSON
         * @memberof WAE2E.DisappearingMode
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DisappearingMode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for DisappearingMode
         * @function getTypeUrl
         * @memberof WAE2E.DisappearingMode
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        DisappearingMode.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.DisappearingMode";
        };

        /**
         * Trigger enum.
         * @name WAE2E.DisappearingMode.Trigger
         * @enum {number}
         * @property {number} UNKNOWN=0 UNKNOWN value
         * @property {number} CHAT_SETTING=1 CHAT_SETTING value
         * @property {number} ACCOUNT_SETTING=2 ACCOUNT_SETTING value
         * @property {number} BULK_CHANGE=3 BULK_CHANGE value
         * @property {number} BIZ_SUPPORTS_FB_HOSTING=4 BIZ_SUPPORTS_FB_HOSTING value
         */
        DisappearingMode.Trigger = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "UNKNOWN"] = 0;
            values[valuesById[1] = "CHAT_SETTING"] = 1;
            values[valuesById[2] = "ACCOUNT_SETTING"] = 2;
            values[valuesById[3] = "BULK_CHANGE"] = 3;
            values[valuesById[4] = "BIZ_SUPPORTS_FB_HOSTING"] = 4;
            return values;
        })();

        /**
         * Initiator enum.
         * @name WAE2E.DisappearingMode.Initiator
         * @enum {number}
         * @property {number} CHANGED_IN_CHAT=0 CHANGED_IN_CHAT value
         * @property {number} INITIATED_BY_ME=1 INITIATED_BY_ME value
         * @property {number} INITIATED_BY_OTHER=2 INITIATED_BY_OTHER value
         * @property {number} BIZ_UPGRADE_FB_HOSTING=3 BIZ_UPGRADE_FB_HOSTING value
         */
        DisappearingMode.Initiator = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "CHANGED_IN_CHAT"] = 0;
            values[valuesById[1] = "INITIATED_BY_ME"] = 1;
            values[valuesById[2] = "INITIATED_BY_OTHER"] = 2;
            values[valuesById[3] = "BIZ_UPGRADE_FB_HOSTING"] = 3;
            return values;
        })();

        return DisappearingMode;
    })();

    WAE2E.ProcessedVideo = (function() {

        /**
         * Properties of a ProcessedVideo.
         * @memberof WAE2E
         * @interface IProcessedVideo
         * @property {string|null} [directPath] ProcessedVideo directPath
         * @property {Uint8Array|null} [fileSHA256] ProcessedVideo fileSHA256
         * @property {number|null} [height] ProcessedVideo height
         * @property {number|null} [width] ProcessedVideo width
         * @property {number|Long|null} [fileLength] ProcessedVideo fileLength
         * @property {number|null} [bitrate] ProcessedVideo bitrate
         * @property {WAE2E.ProcessedVideo.VideoQuality|null} [quality] ProcessedVideo quality
         * @property {Array.<string>|null} [capabilities] ProcessedVideo capabilities
         */

        /**
         * Constructs a new ProcessedVideo.
         * @memberof WAE2E
         * @classdesc Represents a ProcessedVideo.
         * @implements IProcessedVideo
         * @constructor
         * @param {WAE2E.IProcessedVideo=} [properties] Properties to set
         */
        function ProcessedVideo(properties) {
            this.capabilities = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProcessedVideo directPath.
         * @member {string} directPath
         * @memberof WAE2E.ProcessedVideo
         * @instance
         */
        ProcessedVideo.prototype.directPath = "";

        /**
         * ProcessedVideo fileSHA256.
         * @member {Uint8Array} fileSHA256
         * @memberof WAE2E.ProcessedVideo
         * @instance
         */
        ProcessedVideo.prototype.fileSHA256 = $util.newBuffer([]);

        /**
         * ProcessedVideo height.
         * @member {number} height
         * @memberof WAE2E.ProcessedVideo
         * @instance
         */
        ProcessedVideo.prototype.height = 0;

        /**
         * ProcessedVideo width.
         * @member {number} width
         * @memberof WAE2E.ProcessedVideo
         * @instance
         */
        ProcessedVideo.prototype.width = 0;

        /**
         * ProcessedVideo fileLength.
         * @member {number|Long} fileLength
         * @memberof WAE2E.ProcessedVideo
         * @instance
         */
        ProcessedVideo.prototype.fileLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * ProcessedVideo bitrate.
         * @member {number} bitrate
         * @memberof WAE2E.ProcessedVideo
         * @instance
         */
        ProcessedVideo.prototype.bitrate = 0;

        /**
         * ProcessedVideo quality.
         * @member {WAE2E.ProcessedVideo.VideoQuality} quality
         * @memberof WAE2E.ProcessedVideo
         * @instance
         */
        ProcessedVideo.prototype.quality = 0;

        /**
         * ProcessedVideo capabilities.
         * @member {Array.<string>} capabilities
         * @memberof WAE2E.ProcessedVideo
         * @instance
         */
        ProcessedVideo.prototype.capabilities = $util.emptyArray;

        /**
         * Creates a new ProcessedVideo instance using the specified properties.
         * @function create
         * @memberof WAE2E.ProcessedVideo
         * @static
         * @param {WAE2E.IProcessedVideo=} [properties] Properties to set
         * @returns {WAE2E.ProcessedVideo} ProcessedVideo instance
         */
        ProcessedVideo.create = function create(properties) {
            return new ProcessedVideo(properties);
        };

        /**
         * Encodes the specified ProcessedVideo message. Does not implicitly {@link WAE2E.ProcessedVideo.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.ProcessedVideo
         * @static
         * @param {WAE2E.IProcessedVideo} message ProcessedVideo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProcessedVideo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.directPath != null && Object.hasOwnProperty.call(message, "directPath"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.directPath);
            if (message.fileSHA256 != null && Object.hasOwnProperty.call(message, "fileSHA256"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.fileSHA256);
            if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.height);
            if (message.width != null && Object.hasOwnProperty.call(message, "width"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.width);
            if (message.fileLength != null && Object.hasOwnProperty.call(message, "fileLength"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.fileLength);
            if (message.bitrate != null && Object.hasOwnProperty.call(message, "bitrate"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.bitrate);
            if (message.quality != null && Object.hasOwnProperty.call(message, "quality"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.quality);
            if (message.capabilities != null && message.capabilities.length)
                for (var i = 0; i < message.capabilities.length; ++i)
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.capabilities[i]);
            return writer;
        };

        /**
         * Encodes the specified ProcessedVideo message, length delimited. Does not implicitly {@link WAE2E.ProcessedVideo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.ProcessedVideo
         * @static
         * @param {WAE2E.IProcessedVideo} message ProcessedVideo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProcessedVideo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProcessedVideo message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.ProcessedVideo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.ProcessedVideo} ProcessedVideo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProcessedVideo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.ProcessedVideo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.directPath = reader.string();
                        break;
                    }
                case 2: {
                        message.fileSHA256 = reader.bytes();
                        break;
                    }
                case 3: {
                        message.height = reader.uint32();
                        break;
                    }
                case 4: {
                        message.width = reader.uint32();
                        break;
                    }
                case 5: {
                        message.fileLength = reader.uint64();
                        break;
                    }
                case 6: {
                        message.bitrate = reader.uint32();
                        break;
                    }
                case 7: {
                        message.quality = reader.int32();
                        break;
                    }
                case 8: {
                        if (!(message.capabilities && message.capabilities.length))
                            message.capabilities = [];
                        message.capabilities.push(reader.string());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProcessedVideo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.ProcessedVideo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.ProcessedVideo} ProcessedVideo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProcessedVideo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProcessedVideo message.
         * @function verify
         * @memberof WAE2E.ProcessedVideo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProcessedVideo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.directPath != null && message.hasOwnProperty("directPath"))
                if (!$util.isString(message.directPath))
                    return "directPath: string expected";
            if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                if (!(message.fileSHA256 && typeof message.fileSHA256.length === "number" || $util.isString(message.fileSHA256)))
                    return "fileSHA256: buffer expected";
            if (message.height != null && message.hasOwnProperty("height"))
                if (!$util.isInteger(message.height))
                    return "height: integer expected";
            if (message.width != null && message.hasOwnProperty("width"))
                if (!$util.isInteger(message.width))
                    return "width: integer expected";
            if (message.fileLength != null && message.hasOwnProperty("fileLength"))
                if (!$util.isInteger(message.fileLength) && !(message.fileLength && $util.isInteger(message.fileLength.low) && $util.isInteger(message.fileLength.high)))
                    return "fileLength: integer|Long expected";
            if (message.bitrate != null && message.hasOwnProperty("bitrate"))
                if (!$util.isInteger(message.bitrate))
                    return "bitrate: integer expected";
            if (message.quality != null && message.hasOwnProperty("quality"))
                switch (message.quality) {
                default:
                    return "quality: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.capabilities != null && message.hasOwnProperty("capabilities")) {
                if (!Array.isArray(message.capabilities))
                    return "capabilities: array expected";
                for (var i = 0; i < message.capabilities.length; ++i)
                    if (!$util.isString(message.capabilities[i]))
                        return "capabilities: string[] expected";
            }
            return null;
        };

        /**
         * Creates a ProcessedVideo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.ProcessedVideo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.ProcessedVideo} ProcessedVideo
         */
        ProcessedVideo.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.ProcessedVideo)
                return object;
            var message = new $root.WAE2E.ProcessedVideo();
            if (object.directPath != null)
                message.directPath = String(object.directPath);
            if (object.fileSHA256 != null)
                if (typeof object.fileSHA256 === "string")
                    $util.base64.decode(object.fileSHA256, message.fileSHA256 = $util.newBuffer($util.base64.length(object.fileSHA256)), 0);
                else if (object.fileSHA256.length >= 0)
                    message.fileSHA256 = object.fileSHA256;
            if (object.height != null)
                message.height = object.height >>> 0;
            if (object.width != null)
                message.width = object.width >>> 0;
            if (object.fileLength != null)
                if ($util.Long)
                    (message.fileLength = $util.Long.fromValue(object.fileLength)).unsigned = true;
                else if (typeof object.fileLength === "string")
                    message.fileLength = parseInt(object.fileLength, 10);
                else if (typeof object.fileLength === "number")
                    message.fileLength = object.fileLength;
                else if (typeof object.fileLength === "object")
                    message.fileLength = new $util.LongBits(object.fileLength.low >>> 0, object.fileLength.high >>> 0).toNumber(true);
            if (object.bitrate != null)
                message.bitrate = object.bitrate >>> 0;
            switch (object.quality) {
            default:
                if (typeof object.quality === "number") {
                    message.quality = object.quality;
                    break;
                }
                break;
            case "UNDEFINED":
            case 0:
                message.quality = 0;
                break;
            case "LOW":
            case 1:
                message.quality = 1;
                break;
            case "MID":
            case 2:
                message.quality = 2;
                break;
            case "HIGH":
            case 3:
                message.quality = 3;
                break;
            }
            if (object.capabilities) {
                if (!Array.isArray(object.capabilities))
                    throw TypeError(".WAE2E.ProcessedVideo.capabilities: array expected");
                message.capabilities = [];
                for (var i = 0; i < object.capabilities.length; ++i)
                    message.capabilities[i] = String(object.capabilities[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from a ProcessedVideo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.ProcessedVideo
         * @static
         * @param {WAE2E.ProcessedVideo} message ProcessedVideo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProcessedVideo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.capabilities = [];
            if (options.defaults) {
                object.directPath = "";
                if (options.bytes === String)
                    object.fileSHA256 = "";
                else {
                    object.fileSHA256 = [];
                    if (options.bytes !== Array)
                        object.fileSHA256 = $util.newBuffer(object.fileSHA256);
                }
                object.height = 0;
                object.width = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.fileLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.fileLength = options.longs === String ? "0" : 0;
                object.bitrate = 0;
                object.quality = options.enums === String ? "UNDEFINED" : 0;
            }
            if (message.directPath != null && message.hasOwnProperty("directPath"))
                object.directPath = message.directPath;
            if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                object.fileSHA256 = options.bytes === String ? $util.base64.encode(message.fileSHA256, 0, message.fileSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.fileSHA256) : message.fileSHA256;
            if (message.height != null && message.hasOwnProperty("height"))
                object.height = message.height;
            if (message.width != null && message.hasOwnProperty("width"))
                object.width = message.width;
            if (message.fileLength != null && message.hasOwnProperty("fileLength"))
                if (typeof message.fileLength === "number")
                    object.fileLength = options.longs === String ? String(message.fileLength) : message.fileLength;
                else
                    object.fileLength = options.longs === String ? $util.Long.prototype.toString.call(message.fileLength) : options.longs === Number ? new $util.LongBits(message.fileLength.low >>> 0, message.fileLength.high >>> 0).toNumber(true) : message.fileLength;
            if (message.bitrate != null && message.hasOwnProperty("bitrate"))
                object.bitrate = message.bitrate;
            if (message.quality != null && message.hasOwnProperty("quality"))
                object.quality = options.enums === String ? $root.WAE2E.ProcessedVideo.VideoQuality[message.quality] === undefined ? message.quality : $root.WAE2E.ProcessedVideo.VideoQuality[message.quality] : message.quality;
            if (message.capabilities && message.capabilities.length) {
                object.capabilities = [];
                for (var j = 0; j < message.capabilities.length; ++j)
                    object.capabilities[j] = message.capabilities[j];
            }
            return object;
        };

        /**
         * Converts this ProcessedVideo to JSON.
         * @function toJSON
         * @memberof WAE2E.ProcessedVideo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProcessedVideo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for ProcessedVideo
         * @function getTypeUrl
         * @memberof WAE2E.ProcessedVideo
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        ProcessedVideo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.ProcessedVideo";
        };

        /**
         * VideoQuality enum.
         * @name WAE2E.ProcessedVideo.VideoQuality
         * @enum {number}
         * @property {number} UNDEFINED=0 UNDEFINED value
         * @property {number} LOW=1 LOW value
         * @property {number} MID=2 MID value
         * @property {number} HIGH=3 HIGH value
         */
        ProcessedVideo.VideoQuality = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "UNDEFINED"] = 0;
            values[valuesById[1] = "LOW"] = 1;
            values[valuesById[2] = "MID"] = 2;
            values[valuesById[3] = "HIGH"] = 3;
            return values;
        })();

        return ProcessedVideo;
    })();

    WAE2E.BotAvatarMetadata = (function() {

        /**
         * Properties of a BotAvatarMetadata.
         * @memberof WAE2E
         * @interface IBotAvatarMetadata
         * @property {number|null} [sentiment] BotAvatarMetadata sentiment
         * @property {string|null} [behaviorGraph] BotAvatarMetadata behaviorGraph
         * @property {number|null} [action] BotAvatarMetadata action
         * @property {number|null} [intensity] BotAvatarMetadata intensity
         * @property {number|null} [wordCount] BotAvatarMetadata wordCount
         */

        /**
         * Constructs a new BotAvatarMetadata.
         * @memberof WAE2E
         * @classdesc Represents a BotAvatarMetadata.
         * @implements IBotAvatarMetadata
         * @constructor
         * @param {WAE2E.IBotAvatarMetadata=} [properties] Properties to set
         */
        function BotAvatarMetadata(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BotAvatarMetadata sentiment.
         * @member {number} sentiment
         * @memberof WAE2E.BotAvatarMetadata
         * @instance
         */
        BotAvatarMetadata.prototype.sentiment = 0;

        /**
         * BotAvatarMetadata behaviorGraph.
         * @member {string} behaviorGraph
         * @memberof WAE2E.BotAvatarMetadata
         * @instance
         */
        BotAvatarMetadata.prototype.behaviorGraph = "";

        /**
         * BotAvatarMetadata action.
         * @member {number} action
         * @memberof WAE2E.BotAvatarMetadata
         * @instance
         */
        BotAvatarMetadata.prototype.action = 0;

        /**
         * BotAvatarMetadata intensity.
         * @member {number} intensity
         * @memberof WAE2E.BotAvatarMetadata
         * @instance
         */
        BotAvatarMetadata.prototype.intensity = 0;

        /**
         * BotAvatarMetadata wordCount.
         * @member {number} wordCount
         * @memberof WAE2E.BotAvatarMetadata
         * @instance
         */
        BotAvatarMetadata.prototype.wordCount = 0;

        /**
         * Creates a new BotAvatarMetadata instance using the specified properties.
         * @function create
         * @memberof WAE2E.BotAvatarMetadata
         * @static
         * @param {WAE2E.IBotAvatarMetadata=} [properties] Properties to set
         * @returns {WAE2E.BotAvatarMetadata} BotAvatarMetadata instance
         */
        BotAvatarMetadata.create = function create(properties) {
            return new BotAvatarMetadata(properties);
        };

        /**
         * Encodes the specified BotAvatarMetadata message. Does not implicitly {@link WAE2E.BotAvatarMetadata.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.BotAvatarMetadata
         * @static
         * @param {WAE2E.IBotAvatarMetadata} message BotAvatarMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BotAvatarMetadata.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sentiment != null && Object.hasOwnProperty.call(message, "sentiment"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.sentiment);
            if (message.behaviorGraph != null && Object.hasOwnProperty.call(message, "behaviorGraph"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.behaviorGraph);
            if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.action);
            if (message.intensity != null && Object.hasOwnProperty.call(message, "intensity"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.intensity);
            if (message.wordCount != null && Object.hasOwnProperty.call(message, "wordCount"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.wordCount);
            return writer;
        };

        /**
         * Encodes the specified BotAvatarMetadata message, length delimited. Does not implicitly {@link WAE2E.BotAvatarMetadata.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.BotAvatarMetadata
         * @static
         * @param {WAE2E.IBotAvatarMetadata} message BotAvatarMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BotAvatarMetadata.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BotAvatarMetadata message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.BotAvatarMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.BotAvatarMetadata} BotAvatarMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BotAvatarMetadata.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.BotAvatarMetadata();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.sentiment = reader.uint32();
                        break;
                    }
                case 2: {
                        message.behaviorGraph = reader.string();
                        break;
                    }
                case 3: {
                        message.action = reader.uint32();
                        break;
                    }
                case 4: {
                        message.intensity = reader.uint32();
                        break;
                    }
                case 5: {
                        message.wordCount = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BotAvatarMetadata message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.BotAvatarMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.BotAvatarMetadata} BotAvatarMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BotAvatarMetadata.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BotAvatarMetadata message.
         * @function verify
         * @memberof WAE2E.BotAvatarMetadata
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BotAvatarMetadata.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.sentiment != null && message.hasOwnProperty("sentiment"))
                if (!$util.isInteger(message.sentiment))
                    return "sentiment: integer expected";
            if (message.behaviorGraph != null && message.hasOwnProperty("behaviorGraph"))
                if (!$util.isString(message.behaviorGraph))
                    return "behaviorGraph: string expected";
            if (message.action != null && message.hasOwnProperty("action"))
                if (!$util.isInteger(message.action))
                    return "action: integer expected";
            if (message.intensity != null && message.hasOwnProperty("intensity"))
                if (!$util.isInteger(message.intensity))
                    return "intensity: integer expected";
            if (message.wordCount != null && message.hasOwnProperty("wordCount"))
                if (!$util.isInteger(message.wordCount))
                    return "wordCount: integer expected";
            return null;
        };

        /**
         * Creates a BotAvatarMetadata message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.BotAvatarMetadata
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.BotAvatarMetadata} BotAvatarMetadata
         */
        BotAvatarMetadata.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.BotAvatarMetadata)
                return object;
            var message = new $root.WAE2E.BotAvatarMetadata();
            if (object.sentiment != null)
                message.sentiment = object.sentiment >>> 0;
            if (object.behaviorGraph != null)
                message.behaviorGraph = String(object.behaviorGraph);
            if (object.action != null)
                message.action = object.action >>> 0;
            if (object.intensity != null)
                message.intensity = object.intensity >>> 0;
            if (object.wordCount != null)
                message.wordCount = object.wordCount >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a BotAvatarMetadata message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.BotAvatarMetadata
         * @static
         * @param {WAE2E.BotAvatarMetadata} message BotAvatarMetadata
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BotAvatarMetadata.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.sentiment = 0;
                object.behaviorGraph = "";
                object.action = 0;
                object.intensity = 0;
                object.wordCount = 0;
            }
            if (message.sentiment != null && message.hasOwnProperty("sentiment"))
                object.sentiment = message.sentiment;
            if (message.behaviorGraph != null && message.hasOwnProperty("behaviorGraph"))
                object.behaviorGraph = message.behaviorGraph;
            if (message.action != null && message.hasOwnProperty("action"))
                object.action = message.action;
            if (message.intensity != null && message.hasOwnProperty("intensity"))
                object.intensity = message.intensity;
            if (message.wordCount != null && message.hasOwnProperty("wordCount"))
                object.wordCount = message.wordCount;
            return object;
        };

        /**
         * Converts this BotAvatarMetadata to JSON.
         * @function toJSON
         * @memberof WAE2E.BotAvatarMetadata
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BotAvatarMetadata.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for BotAvatarMetadata
         * @function getTypeUrl
         * @memberof WAE2E.BotAvatarMetadata
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        BotAvatarMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.BotAvatarMetadata";
        };

        return BotAvatarMetadata;
    })();

    WAE2E.BotSuggestedPromptMetadata = (function() {

        /**
         * Properties of a BotSuggestedPromptMetadata.
         * @memberof WAE2E
         * @interface IBotSuggestedPromptMetadata
         * @property {Array.<string>|null} [suggestedPrompts] BotSuggestedPromptMetadata suggestedPrompts
         * @property {number|null} [selectedPromptIndex] BotSuggestedPromptMetadata selectedPromptIndex
         */

        /**
         * Constructs a new BotSuggestedPromptMetadata.
         * @memberof WAE2E
         * @classdesc Represents a BotSuggestedPromptMetadata.
         * @implements IBotSuggestedPromptMetadata
         * @constructor
         * @param {WAE2E.IBotSuggestedPromptMetadata=} [properties] Properties to set
         */
        function BotSuggestedPromptMetadata(properties) {
            this.suggestedPrompts = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BotSuggestedPromptMetadata suggestedPrompts.
         * @member {Array.<string>} suggestedPrompts
         * @memberof WAE2E.BotSuggestedPromptMetadata
         * @instance
         */
        BotSuggestedPromptMetadata.prototype.suggestedPrompts = $util.emptyArray;

        /**
         * BotSuggestedPromptMetadata selectedPromptIndex.
         * @member {number} selectedPromptIndex
         * @memberof WAE2E.BotSuggestedPromptMetadata
         * @instance
         */
        BotSuggestedPromptMetadata.prototype.selectedPromptIndex = 0;

        /**
         * Creates a new BotSuggestedPromptMetadata instance using the specified properties.
         * @function create
         * @memberof WAE2E.BotSuggestedPromptMetadata
         * @static
         * @param {WAE2E.IBotSuggestedPromptMetadata=} [properties] Properties to set
         * @returns {WAE2E.BotSuggestedPromptMetadata} BotSuggestedPromptMetadata instance
         */
        BotSuggestedPromptMetadata.create = function create(properties) {
            return new BotSuggestedPromptMetadata(properties);
        };

        /**
         * Encodes the specified BotSuggestedPromptMetadata message. Does not implicitly {@link WAE2E.BotSuggestedPromptMetadata.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.BotSuggestedPromptMetadata
         * @static
         * @param {WAE2E.IBotSuggestedPromptMetadata} message BotSuggestedPromptMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BotSuggestedPromptMetadata.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.suggestedPrompts != null && message.suggestedPrompts.length)
                for (var i = 0; i < message.suggestedPrompts.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.suggestedPrompts[i]);
            if (message.selectedPromptIndex != null && Object.hasOwnProperty.call(message, "selectedPromptIndex"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.selectedPromptIndex);
            return writer;
        };

        /**
         * Encodes the specified BotSuggestedPromptMetadata message, length delimited. Does not implicitly {@link WAE2E.BotSuggestedPromptMetadata.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.BotSuggestedPromptMetadata
         * @static
         * @param {WAE2E.IBotSuggestedPromptMetadata} message BotSuggestedPromptMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BotSuggestedPromptMetadata.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BotSuggestedPromptMetadata message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.BotSuggestedPromptMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.BotSuggestedPromptMetadata} BotSuggestedPromptMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BotSuggestedPromptMetadata.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.BotSuggestedPromptMetadata();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        if (!(message.suggestedPrompts && message.suggestedPrompts.length))
                            message.suggestedPrompts = [];
                        message.suggestedPrompts.push(reader.string());
                        break;
                    }
                case 2: {
                        message.selectedPromptIndex = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BotSuggestedPromptMetadata message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.BotSuggestedPromptMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.BotSuggestedPromptMetadata} BotSuggestedPromptMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BotSuggestedPromptMetadata.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BotSuggestedPromptMetadata message.
         * @function verify
         * @memberof WAE2E.BotSuggestedPromptMetadata
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BotSuggestedPromptMetadata.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.suggestedPrompts != null && message.hasOwnProperty("suggestedPrompts")) {
                if (!Array.isArray(message.suggestedPrompts))
                    return "suggestedPrompts: array expected";
                for (var i = 0; i < message.suggestedPrompts.length; ++i)
                    if (!$util.isString(message.suggestedPrompts[i]))
                        return "suggestedPrompts: string[] expected";
            }
            if (message.selectedPromptIndex != null && message.hasOwnProperty("selectedPromptIndex"))
                if (!$util.isInteger(message.selectedPromptIndex))
                    return "selectedPromptIndex: integer expected";
            return null;
        };

        /**
         * Creates a BotSuggestedPromptMetadata message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.BotSuggestedPromptMetadata
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.BotSuggestedPromptMetadata} BotSuggestedPromptMetadata
         */
        BotSuggestedPromptMetadata.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.BotSuggestedPromptMetadata)
                return object;
            var message = new $root.WAE2E.BotSuggestedPromptMetadata();
            if (object.suggestedPrompts) {
                if (!Array.isArray(object.suggestedPrompts))
                    throw TypeError(".WAE2E.BotSuggestedPromptMetadata.suggestedPrompts: array expected");
                message.suggestedPrompts = [];
                for (var i = 0; i < object.suggestedPrompts.length; ++i)
                    message.suggestedPrompts[i] = String(object.suggestedPrompts[i]);
            }
            if (object.selectedPromptIndex != null)
                message.selectedPromptIndex = object.selectedPromptIndex >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a BotSuggestedPromptMetadata message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.BotSuggestedPromptMetadata
         * @static
         * @param {WAE2E.BotSuggestedPromptMetadata} message BotSuggestedPromptMetadata
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BotSuggestedPromptMetadata.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.suggestedPrompts = [];
            if (options.defaults)
                object.selectedPromptIndex = 0;
            if (message.suggestedPrompts && message.suggestedPrompts.length) {
                object.suggestedPrompts = [];
                for (var j = 0; j < message.suggestedPrompts.length; ++j)
                    object.suggestedPrompts[j] = message.suggestedPrompts[j];
            }
            if (message.selectedPromptIndex != null && message.hasOwnProperty("selectedPromptIndex"))
                object.selectedPromptIndex = message.selectedPromptIndex;
            return object;
        };

        /**
         * Converts this BotSuggestedPromptMetadata to JSON.
         * @function toJSON
         * @memberof WAE2E.BotSuggestedPromptMetadata
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BotSuggestedPromptMetadata.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for BotSuggestedPromptMetadata
         * @function getTypeUrl
         * @memberof WAE2E.BotSuggestedPromptMetadata
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        BotSuggestedPromptMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.BotSuggestedPromptMetadata";
        };

        return BotSuggestedPromptMetadata;
    })();

    WAE2E.BotMediaMetadata = (function() {

        /**
         * Properties of a BotMediaMetadata.
         * @memberof WAE2E
         * @interface IBotMediaMetadata
         * @property {string|null} [fileSHA256] BotMediaMetadata fileSHA256
         * @property {string|null} [mediaKey] BotMediaMetadata mediaKey
         * @property {string|null} [fileEncSHA256] BotMediaMetadata fileEncSHA256
         * @property {string|null} [directPath] BotMediaMetadata directPath
         * @property {number|Long|null} [mediaKeyTimestamp] BotMediaMetadata mediaKeyTimestamp
         * @property {string|null} [mimetype] BotMediaMetadata mimetype
         */

        /**
         * Constructs a new BotMediaMetadata.
         * @memberof WAE2E
         * @classdesc Represents a BotMediaMetadata.
         * @implements IBotMediaMetadata
         * @constructor
         * @param {WAE2E.IBotMediaMetadata=} [properties] Properties to set
         */
        function BotMediaMetadata(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BotMediaMetadata fileSHA256.
         * @member {string} fileSHA256
         * @memberof WAE2E.BotMediaMetadata
         * @instance
         */
        BotMediaMetadata.prototype.fileSHA256 = "";

        /**
         * BotMediaMetadata mediaKey.
         * @member {string} mediaKey
         * @memberof WAE2E.BotMediaMetadata
         * @instance
         */
        BotMediaMetadata.prototype.mediaKey = "";

        /**
         * BotMediaMetadata fileEncSHA256.
         * @member {string} fileEncSHA256
         * @memberof WAE2E.BotMediaMetadata
         * @instance
         */
        BotMediaMetadata.prototype.fileEncSHA256 = "";

        /**
         * BotMediaMetadata directPath.
         * @member {string} directPath
         * @memberof WAE2E.BotMediaMetadata
         * @instance
         */
        BotMediaMetadata.prototype.directPath = "";

        /**
         * BotMediaMetadata mediaKeyTimestamp.
         * @member {number|Long} mediaKeyTimestamp
         * @memberof WAE2E.BotMediaMetadata
         * @instance
         */
        BotMediaMetadata.prototype.mediaKeyTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BotMediaMetadata mimetype.
         * @member {string} mimetype
         * @memberof WAE2E.BotMediaMetadata
         * @instance
         */
        BotMediaMetadata.prototype.mimetype = "";

        /**
         * Creates a new BotMediaMetadata instance using the specified properties.
         * @function create
         * @memberof WAE2E.BotMediaMetadata
         * @static
         * @param {WAE2E.IBotMediaMetadata=} [properties] Properties to set
         * @returns {WAE2E.BotMediaMetadata} BotMediaMetadata instance
         */
        BotMediaMetadata.create = function create(properties) {
            return new BotMediaMetadata(properties);
        };

        /**
         * Encodes the specified BotMediaMetadata message. Does not implicitly {@link WAE2E.BotMediaMetadata.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.BotMediaMetadata
         * @static
         * @param {WAE2E.IBotMediaMetadata} message BotMediaMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BotMediaMetadata.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.fileSHA256 != null && Object.hasOwnProperty.call(message, "fileSHA256"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.fileSHA256);
            if (message.mediaKey != null && Object.hasOwnProperty.call(message, "mediaKey"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.mediaKey);
            if (message.fileEncSHA256 != null && Object.hasOwnProperty.call(message, "fileEncSHA256"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.fileEncSHA256);
            if (message.directPath != null && Object.hasOwnProperty.call(message, "directPath"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.directPath);
            if (message.mediaKeyTimestamp != null && Object.hasOwnProperty.call(message, "mediaKeyTimestamp"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.mediaKeyTimestamp);
            if (message.mimetype != null && Object.hasOwnProperty.call(message, "mimetype"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.mimetype);
            return writer;
        };

        /**
         * Encodes the specified BotMediaMetadata message, length delimited. Does not implicitly {@link WAE2E.BotMediaMetadata.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.BotMediaMetadata
         * @static
         * @param {WAE2E.IBotMediaMetadata} message BotMediaMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BotMediaMetadata.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BotMediaMetadata message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.BotMediaMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.BotMediaMetadata} BotMediaMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BotMediaMetadata.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.BotMediaMetadata();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.fileSHA256 = reader.string();
                        break;
                    }
                case 2: {
                        message.mediaKey = reader.string();
                        break;
                    }
                case 3: {
                        message.fileEncSHA256 = reader.string();
                        break;
                    }
                case 4: {
                        message.directPath = reader.string();
                        break;
                    }
                case 5: {
                        message.mediaKeyTimestamp = reader.int64();
                        break;
                    }
                case 6: {
                        message.mimetype = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BotMediaMetadata message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.BotMediaMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.BotMediaMetadata} BotMediaMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BotMediaMetadata.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BotMediaMetadata message.
         * @function verify
         * @memberof WAE2E.BotMediaMetadata
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BotMediaMetadata.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                if (!$util.isString(message.fileSHA256))
                    return "fileSHA256: string expected";
            if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                if (!$util.isString(message.mediaKey))
                    return "mediaKey: string expected";
            if (message.fileEncSHA256 != null && message.hasOwnProperty("fileEncSHA256"))
                if (!$util.isString(message.fileEncSHA256))
                    return "fileEncSHA256: string expected";
            if (message.directPath != null && message.hasOwnProperty("directPath"))
                if (!$util.isString(message.directPath))
                    return "directPath: string expected";
            if (message.mediaKeyTimestamp != null && message.hasOwnProperty("mediaKeyTimestamp"))
                if (!$util.isInteger(message.mediaKeyTimestamp) && !(message.mediaKeyTimestamp && $util.isInteger(message.mediaKeyTimestamp.low) && $util.isInteger(message.mediaKeyTimestamp.high)))
                    return "mediaKeyTimestamp: integer|Long expected";
            if (message.mimetype != null && message.hasOwnProperty("mimetype"))
                if (!$util.isString(message.mimetype))
                    return "mimetype: string expected";
            return null;
        };

        /**
         * Creates a BotMediaMetadata message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.BotMediaMetadata
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.BotMediaMetadata} BotMediaMetadata
         */
        BotMediaMetadata.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.BotMediaMetadata)
                return object;
            var message = new $root.WAE2E.BotMediaMetadata();
            if (object.fileSHA256 != null)
                message.fileSHA256 = String(object.fileSHA256);
            if (object.mediaKey != null)
                message.mediaKey = String(object.mediaKey);
            if (object.fileEncSHA256 != null)
                message.fileEncSHA256 = String(object.fileEncSHA256);
            if (object.directPath != null)
                message.directPath = String(object.directPath);
            if (object.mediaKeyTimestamp != null)
                if ($util.Long)
                    (message.mediaKeyTimestamp = $util.Long.fromValue(object.mediaKeyTimestamp)).unsigned = false;
                else if (typeof object.mediaKeyTimestamp === "string")
                    message.mediaKeyTimestamp = parseInt(object.mediaKeyTimestamp, 10);
                else if (typeof object.mediaKeyTimestamp === "number")
                    message.mediaKeyTimestamp = object.mediaKeyTimestamp;
                else if (typeof object.mediaKeyTimestamp === "object")
                    message.mediaKeyTimestamp = new $util.LongBits(object.mediaKeyTimestamp.low >>> 0, object.mediaKeyTimestamp.high >>> 0).toNumber();
            if (object.mimetype != null)
                message.mimetype = String(object.mimetype);
            return message;
        };

        /**
         * Creates a plain object from a BotMediaMetadata message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.BotMediaMetadata
         * @static
         * @param {WAE2E.BotMediaMetadata} message BotMediaMetadata
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BotMediaMetadata.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.fileSHA256 = "";
                object.mediaKey = "";
                object.fileEncSHA256 = "";
                object.directPath = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.mediaKeyTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.mediaKeyTimestamp = options.longs === String ? "0" : 0;
                object.mimetype = "";
            }
            if (message.fileSHA256 != null && message.hasOwnProperty("fileSHA256"))
                object.fileSHA256 = message.fileSHA256;
            if (message.mediaKey != null && message.hasOwnProperty("mediaKey"))
                object.mediaKey = message.mediaKey;
            if (message.fileEncSHA256 != null && message.hasOwnProperty("fileEncSHA256"))
                object.fileEncSHA256 = message.fileEncSHA256;
            if (message.directPath != null && message.hasOwnProperty("directPath"))
                object.directPath = message.directPath;
            if (message.mediaKeyTimestamp != null && message.hasOwnProperty("mediaKeyTimestamp"))
                if (typeof message.mediaKeyTimestamp === "number")
                    object.mediaKeyTimestamp = options.longs === String ? String(message.mediaKeyTimestamp) : message.mediaKeyTimestamp;
                else
                    object.mediaKeyTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.mediaKeyTimestamp) : options.longs === Number ? new $util.LongBits(message.mediaKeyTimestamp.low >>> 0, message.mediaKeyTimestamp.high >>> 0).toNumber() : message.mediaKeyTimestamp;
            if (message.mimetype != null && message.hasOwnProperty("mimetype"))
                object.mimetype = message.mimetype;
            return object;
        };

        /**
         * Converts this BotMediaMetadata to JSON.
         * @function toJSON
         * @memberof WAE2E.BotMediaMetadata
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BotMediaMetadata.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for BotMediaMetadata
         * @function getTypeUrl
         * @memberof WAE2E.BotMediaMetadata
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        BotMediaMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.BotMediaMetadata";
        };

        return BotMediaMetadata;
    })();

    WAE2E.BotMemuMetadata = (function() {

        /**
         * Properties of a BotMemuMetadata.
         * @memberof WAE2E
         * @interface IBotMemuMetadata
         * @property {Array.<WAE2E.IBotMediaMetadata>|null} [faceImages] BotMemuMetadata faceImages
         */

        /**
         * Constructs a new BotMemuMetadata.
         * @memberof WAE2E
         * @classdesc Represents a BotMemuMetadata.
         * @implements IBotMemuMetadata
         * @constructor
         * @param {WAE2E.IBotMemuMetadata=} [properties] Properties to set
         */
        function BotMemuMetadata(properties) {
            this.faceImages = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BotMemuMetadata faceImages.
         * @member {Array.<WAE2E.IBotMediaMetadata>} faceImages
         * @memberof WAE2E.BotMemuMetadata
         * @instance
         */
        BotMemuMetadata.prototype.faceImages = $util.emptyArray;

        /**
         * Creates a new BotMemuMetadata instance using the specified properties.
         * @function create
         * @memberof WAE2E.BotMemuMetadata
         * @static
         * @param {WAE2E.IBotMemuMetadata=} [properties] Properties to set
         * @returns {WAE2E.BotMemuMetadata} BotMemuMetadata instance
         */
        BotMemuMetadata.create = function create(properties) {
            return new BotMemuMetadata(properties);
        };

        /**
         * Encodes the specified BotMemuMetadata message. Does not implicitly {@link WAE2E.BotMemuMetadata.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.BotMemuMetadata
         * @static
         * @param {WAE2E.IBotMemuMetadata} message BotMemuMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BotMemuMetadata.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.faceImages != null && message.faceImages.length)
                for (var i = 0; i < message.faceImages.length; ++i)
                    $root.WAE2E.BotMediaMetadata.encode(message.faceImages[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BotMemuMetadata message, length delimited. Does not implicitly {@link WAE2E.BotMemuMetadata.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.BotMemuMetadata
         * @static
         * @param {WAE2E.IBotMemuMetadata} message BotMemuMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BotMemuMetadata.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BotMemuMetadata message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.BotMemuMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.BotMemuMetadata} BotMemuMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BotMemuMetadata.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.BotMemuMetadata();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        if (!(message.faceImages && message.faceImages.length))
                            message.faceImages = [];
                        message.faceImages.push($root.WAE2E.BotMediaMetadata.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BotMemuMetadata message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.BotMemuMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.BotMemuMetadata} BotMemuMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BotMemuMetadata.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BotMemuMetadata message.
         * @function verify
         * @memberof WAE2E.BotMemuMetadata
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BotMemuMetadata.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.faceImages != null && message.hasOwnProperty("faceImages")) {
                if (!Array.isArray(message.faceImages))
                    return "faceImages: array expected";
                for (var i = 0; i < message.faceImages.length; ++i) {
                    var error = $root.WAE2E.BotMediaMetadata.verify(message.faceImages[i]);
                    if (error)
                        return "faceImages." + error;
                }
            }
            return null;
        };

        /**
         * Creates a BotMemuMetadata message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.BotMemuMetadata
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.BotMemuMetadata} BotMemuMetadata
         */
        BotMemuMetadata.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.BotMemuMetadata)
                return object;
            var message = new $root.WAE2E.BotMemuMetadata();
            if (object.faceImages) {
                if (!Array.isArray(object.faceImages))
                    throw TypeError(".WAE2E.BotMemuMetadata.faceImages: array expected");
                message.faceImages = [];
                for (var i = 0; i < object.faceImages.length; ++i) {
                    if (typeof object.faceImages[i] !== "object")
                        throw TypeError(".WAE2E.BotMemuMetadata.faceImages: object expected");
                    message.faceImages[i] = $root.WAE2E.BotMediaMetadata.fromObject(object.faceImages[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a BotMemuMetadata message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.BotMemuMetadata
         * @static
         * @param {WAE2E.BotMemuMetadata} message BotMemuMetadata
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BotMemuMetadata.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.faceImages = [];
            if (message.faceImages && message.faceImages.length) {
                object.faceImages = [];
                for (var j = 0; j < message.faceImages.length; ++j)
                    object.faceImages[j] = $root.WAE2E.BotMediaMetadata.toObject(message.faceImages[j], options);
            }
            return object;
        };

        /**
         * Converts this BotMemuMetadata to JSON.
         * @function toJSON
         * @memberof WAE2E.BotMemuMetadata
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BotMemuMetadata.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for BotMemuMetadata
         * @function getTypeUrl
         * @memberof WAE2E.BotMemuMetadata
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        BotMemuMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.BotMemuMetadata";
        };

        return BotMemuMetadata;
    })();

    WAE2E.BotMetadata = (function() {

        /**
         * Properties of a BotMetadata.
         * @memberof WAE2E
         * @interface IBotMetadata
         * @property {WAE2E.IBotAvatarMetadata|null} [avatarMetadata] BotMetadata avatarMetadata
         * @property {string|null} [personaID] BotMetadata personaID
         * @property {WAE2E.IBotPluginMetadata|null} [pluginMetadata] BotMetadata pluginMetadata
         * @property {WAE2E.IBotSuggestedPromptMetadata|null} [suggestedPromptMetadata] BotMetadata suggestedPromptMetadata
         * @property {string|null} [invokerJID] BotMetadata invokerJID
         * @property {WAE2E.IBotSearchMetadata|null} [searchMetadata] BotMetadata searchMetadata
         * @property {WAE2E.IBotMemuMetadata|null} [memuMetadata] BotMetadata memuMetadata
         * @property {string|null} [timezone] BotMetadata timezone
         * @property {WAE2E.IBotReminderMetadata|null} [reminderMetadata] BotMetadata reminderMetadata
         * @property {WAE2E.IBotModelMetadata|null} [modelMetadata] BotMetadata modelMetadata
         */

        /**
         * Constructs a new BotMetadata.
         * @memberof WAE2E
         * @classdesc Represents a BotMetadata.
         * @implements IBotMetadata
         * @constructor
         * @param {WAE2E.IBotMetadata=} [properties] Properties to set
         */
        function BotMetadata(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BotMetadata avatarMetadata.
         * @member {WAE2E.IBotAvatarMetadata|null|undefined} avatarMetadata
         * @memberof WAE2E.BotMetadata
         * @instance
         */
        BotMetadata.prototype.avatarMetadata = null;

        /**
         * BotMetadata personaID.
         * @member {string} personaID
         * @memberof WAE2E.BotMetadata
         * @instance
         */
        BotMetadata.prototype.personaID = "";

        /**
         * BotMetadata pluginMetadata.
         * @member {WAE2E.IBotPluginMetadata|null|undefined} pluginMetadata
         * @memberof WAE2E.BotMetadata
         * @instance
         */
        BotMetadata.prototype.pluginMetadata = null;

        /**
         * BotMetadata suggestedPromptMetadata.
         * @member {WAE2E.IBotSuggestedPromptMetadata|null|undefined} suggestedPromptMetadata
         * @memberof WAE2E.BotMetadata
         * @instance
         */
        BotMetadata.prototype.suggestedPromptMetadata = null;

        /**
         * BotMetadata invokerJID.
         * @member {string} invokerJID
         * @memberof WAE2E.BotMetadata
         * @instance
         */
        BotMetadata.prototype.invokerJID = "";

        /**
         * BotMetadata searchMetadata.
         * @member {WAE2E.IBotSearchMetadata|null|undefined} searchMetadata
         * @memberof WAE2E.BotMetadata
         * @instance
         */
        BotMetadata.prototype.searchMetadata = null;

        /**
         * BotMetadata memuMetadata.
         * @member {WAE2E.IBotMemuMetadata|null|undefined} memuMetadata
         * @memberof WAE2E.BotMetadata
         * @instance
         */
        BotMetadata.prototype.memuMetadata = null;

        /**
         * BotMetadata timezone.
         * @member {string} timezone
         * @memberof WAE2E.BotMetadata
         * @instance
         */
        BotMetadata.prototype.timezone = "";

        /**
         * BotMetadata reminderMetadata.
         * @member {WAE2E.IBotReminderMetadata|null|undefined} reminderMetadata
         * @memberof WAE2E.BotMetadata
         * @instance
         */
        BotMetadata.prototype.reminderMetadata = null;

        /**
         * BotMetadata modelMetadata.
         * @member {WAE2E.IBotModelMetadata|null|undefined} modelMetadata
         * @memberof WAE2E.BotMetadata
         * @instance
         */
        BotMetadata.prototype.modelMetadata = null;

        /**
         * Creates a new BotMetadata instance using the specified properties.
         * @function create
         * @memberof WAE2E.BotMetadata
         * @static
         * @param {WAE2E.IBotMetadata=} [properties] Properties to set
         * @returns {WAE2E.BotMetadata} BotMetadata instance
         */
        BotMetadata.create = function create(properties) {
            return new BotMetadata(properties);
        };

        /**
         * Encodes the specified BotMetadata message. Does not implicitly {@link WAE2E.BotMetadata.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.BotMetadata
         * @static
         * @param {WAE2E.IBotMetadata} message BotMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BotMetadata.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.avatarMetadata != null && Object.hasOwnProperty.call(message, "avatarMetadata"))
                $root.WAE2E.BotAvatarMetadata.encode(message.avatarMetadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.personaID != null && Object.hasOwnProperty.call(message, "personaID"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.personaID);
            if (message.pluginMetadata != null && Object.hasOwnProperty.call(message, "pluginMetadata"))
                $root.WAE2E.BotPluginMetadata.encode(message.pluginMetadata, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.suggestedPromptMetadata != null && Object.hasOwnProperty.call(message, "suggestedPromptMetadata"))
                $root.WAE2E.BotSuggestedPromptMetadata.encode(message.suggestedPromptMetadata, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.invokerJID != null && Object.hasOwnProperty.call(message, "invokerJID"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.invokerJID);
            if (message.searchMetadata != null && Object.hasOwnProperty.call(message, "searchMetadata"))
                $root.WAE2E.BotSearchMetadata.encode(message.searchMetadata, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.memuMetadata != null && Object.hasOwnProperty.call(message, "memuMetadata"))
                $root.WAE2E.BotMemuMetadata.encode(message.memuMetadata, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.timezone != null && Object.hasOwnProperty.call(message, "timezone"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.timezone);
            if (message.reminderMetadata != null && Object.hasOwnProperty.call(message, "reminderMetadata"))
                $root.WAE2E.BotReminderMetadata.encode(message.reminderMetadata, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.modelMetadata != null && Object.hasOwnProperty.call(message, "modelMetadata"))
                $root.WAE2E.BotModelMetadata.encode(message.modelMetadata, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BotMetadata message, length delimited. Does not implicitly {@link WAE2E.BotMetadata.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.BotMetadata
         * @static
         * @param {WAE2E.IBotMetadata} message BotMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BotMetadata.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BotMetadata message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.BotMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.BotMetadata} BotMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BotMetadata.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.BotMetadata();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.avatarMetadata = $root.WAE2E.BotAvatarMetadata.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        message.personaID = reader.string();
                        break;
                    }
                case 3: {
                        message.pluginMetadata = $root.WAE2E.BotPluginMetadata.decode(reader, reader.uint32());
                        break;
                    }
                case 4: {
                        message.suggestedPromptMetadata = $root.WAE2E.BotSuggestedPromptMetadata.decode(reader, reader.uint32());
                        break;
                    }
                case 5: {
                        message.invokerJID = reader.string();
                        break;
                    }
                case 6: {
                        message.searchMetadata = $root.WAE2E.BotSearchMetadata.decode(reader, reader.uint32());
                        break;
                    }
                case 7: {
                        message.memuMetadata = $root.WAE2E.BotMemuMetadata.decode(reader, reader.uint32());
                        break;
                    }
                case 8: {
                        message.timezone = reader.string();
                        break;
                    }
                case 9: {
                        message.reminderMetadata = $root.WAE2E.BotReminderMetadata.decode(reader, reader.uint32());
                        break;
                    }
                case 10: {
                        message.modelMetadata = $root.WAE2E.BotModelMetadata.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BotMetadata message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.BotMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.BotMetadata} BotMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BotMetadata.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BotMetadata message.
         * @function verify
         * @memberof WAE2E.BotMetadata
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BotMetadata.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.avatarMetadata != null && message.hasOwnProperty("avatarMetadata")) {
                var error = $root.WAE2E.BotAvatarMetadata.verify(message.avatarMetadata);
                if (error)
                    return "avatarMetadata." + error;
            }
            if (message.personaID != null && message.hasOwnProperty("personaID"))
                if (!$util.isString(message.personaID))
                    return "personaID: string expected";
            if (message.pluginMetadata != null && message.hasOwnProperty("pluginMetadata")) {
                var error = $root.WAE2E.BotPluginMetadata.verify(message.pluginMetadata);
                if (error)
                    return "pluginMetadata." + error;
            }
            if (message.suggestedPromptMetadata != null && message.hasOwnProperty("suggestedPromptMetadata")) {
                var error = $root.WAE2E.BotSuggestedPromptMetadata.verify(message.suggestedPromptMetadata);
                if (error)
                    return "suggestedPromptMetadata." + error;
            }
            if (message.invokerJID != null && message.hasOwnProperty("invokerJID"))
                if (!$util.isString(message.invokerJID))
                    return "invokerJID: string expected";
            if (message.searchMetadata != null && message.hasOwnProperty("searchMetadata")) {
                var error = $root.WAE2E.BotSearchMetadata.verify(message.searchMetadata);
                if (error)
                    return "searchMetadata." + error;
            }
            if (message.memuMetadata != null && message.hasOwnProperty("memuMetadata")) {
                var error = $root.WAE2E.BotMemuMetadata.verify(message.memuMetadata);
                if (error)
                    return "memuMetadata." + error;
            }
            if (message.timezone != null && message.hasOwnProperty("timezone"))
                if (!$util.isString(message.timezone))
                    return "timezone: string expected";
            if (message.reminderMetadata != null && message.hasOwnProperty("reminderMetadata")) {
                var error = $root.WAE2E.BotReminderMetadata.verify(message.reminderMetadata);
                if (error)
                    return "reminderMetadata." + error;
            }
            if (message.modelMetadata != null && message.hasOwnProperty("modelMetadata")) {
                var error = $root.WAE2E.BotModelMetadata.verify(message.modelMetadata);
                if (error)
                    return "modelMetadata." + error;
            }
            return null;
        };

        /**
         * Creates a BotMetadata message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.BotMetadata
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.BotMetadata} BotMetadata
         */
        BotMetadata.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.BotMetadata)
                return object;
            var message = new $root.WAE2E.BotMetadata();
            if (object.avatarMetadata != null) {
                if (typeof object.avatarMetadata !== "object")
                    throw TypeError(".WAE2E.BotMetadata.avatarMetadata: object expected");
                message.avatarMetadata = $root.WAE2E.BotAvatarMetadata.fromObject(object.avatarMetadata);
            }
            if (object.personaID != null)
                message.personaID = String(object.personaID);
            if (object.pluginMetadata != null) {
                if (typeof object.pluginMetadata !== "object")
                    throw TypeError(".WAE2E.BotMetadata.pluginMetadata: object expected");
                message.pluginMetadata = $root.WAE2E.BotPluginMetadata.fromObject(object.pluginMetadata);
            }
            if (object.suggestedPromptMetadata != null) {
                if (typeof object.suggestedPromptMetadata !== "object")
                    throw TypeError(".WAE2E.BotMetadata.suggestedPromptMetadata: object expected");
                message.suggestedPromptMetadata = $root.WAE2E.BotSuggestedPromptMetadata.fromObject(object.suggestedPromptMetadata);
            }
            if (object.invokerJID != null)
                message.invokerJID = String(object.invokerJID);
            if (object.searchMetadata != null) {
                if (typeof object.searchMetadata !== "object")
                    throw TypeError(".WAE2E.BotMetadata.searchMetadata: object expected");
                message.searchMetadata = $root.WAE2E.BotSearchMetadata.fromObject(object.searchMetadata);
            }
            if (object.memuMetadata != null) {
                if (typeof object.memuMetadata !== "object")
                    throw TypeError(".WAE2E.BotMetadata.memuMetadata: object expected");
                message.memuMetadata = $root.WAE2E.BotMemuMetadata.fromObject(object.memuMetadata);
            }
            if (object.timezone != null)
                message.timezone = String(object.timezone);
            if (object.reminderMetadata != null) {
                if (typeof object.reminderMetadata !== "object")
                    throw TypeError(".WAE2E.BotMetadata.reminderMetadata: object expected");
                message.reminderMetadata = $root.WAE2E.BotReminderMetadata.fromObject(object.reminderMetadata);
            }
            if (object.modelMetadata != null) {
                if (typeof object.modelMetadata !== "object")
                    throw TypeError(".WAE2E.BotMetadata.modelMetadata: object expected");
                message.modelMetadata = $root.WAE2E.BotModelMetadata.fromObject(object.modelMetadata);
            }
            return message;
        };

        /**
         * Creates a plain object from a BotMetadata message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.BotMetadata
         * @static
         * @param {WAE2E.BotMetadata} message BotMetadata
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BotMetadata.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.avatarMetadata = null;
                object.personaID = "";
                object.pluginMetadata = null;
                object.suggestedPromptMetadata = null;
                object.invokerJID = "";
                object.searchMetadata = null;
                object.memuMetadata = null;
                object.timezone = "";
                object.reminderMetadata = null;
                object.modelMetadata = null;
            }
            if (message.avatarMetadata != null && message.hasOwnProperty("avatarMetadata"))
                object.avatarMetadata = $root.WAE2E.BotAvatarMetadata.toObject(message.avatarMetadata, options);
            if (message.personaID != null && message.hasOwnProperty("personaID"))
                object.personaID = message.personaID;
            if (message.pluginMetadata != null && message.hasOwnProperty("pluginMetadata"))
                object.pluginMetadata = $root.WAE2E.BotPluginMetadata.toObject(message.pluginMetadata, options);
            if (message.suggestedPromptMetadata != null && message.hasOwnProperty("suggestedPromptMetadata"))
                object.suggestedPromptMetadata = $root.WAE2E.BotSuggestedPromptMetadata.toObject(message.suggestedPromptMetadata, options);
            if (message.invokerJID != null && message.hasOwnProperty("invokerJID"))
                object.invokerJID = message.invokerJID;
            if (message.searchMetadata != null && message.hasOwnProperty("searchMetadata"))
                object.searchMetadata = $root.WAE2E.BotSearchMetadata.toObject(message.searchMetadata, options);
            if (message.memuMetadata != null && message.hasOwnProperty("memuMetadata"))
                object.memuMetadata = $root.WAE2E.BotMemuMetadata.toObject(message.memuMetadata, options);
            if (message.timezone != null && message.hasOwnProperty("timezone"))
                object.timezone = message.timezone;
            if (message.reminderMetadata != null && message.hasOwnProperty("reminderMetadata"))
                object.reminderMetadata = $root.WAE2E.BotReminderMetadata.toObject(message.reminderMetadata, options);
            if (message.modelMetadata != null && message.hasOwnProperty("modelMetadata"))
                object.modelMetadata = $root.WAE2E.BotModelMetadata.toObject(message.modelMetadata, options);
            return object;
        };

        /**
         * Converts this BotMetadata to JSON.
         * @function toJSON
         * @memberof WAE2E.BotMetadata
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BotMetadata.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for BotMetadata
         * @function getTypeUrl
         * @memberof WAE2E.BotMetadata
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        BotMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.BotMetadata";
        };

        return BotMetadata;
    })();

    WAE2E.DeviceListMetadata = (function() {

        /**
         * Properties of a DeviceListMetadata.
         * @memberof WAE2E
         * @interface IDeviceListMetadata
         * @property {Uint8Array|null} [senderKeyHash] DeviceListMetadata senderKeyHash
         * @property {number|Long|null} [senderTimestamp] DeviceListMetadata senderTimestamp
         * @property {Array.<number>|null} [senderKeyIndexes] DeviceListMetadata senderKeyIndexes
         * @property {WAAdv.ADVEncryptionType|null} [senderAccountType] DeviceListMetadata senderAccountType
         * @property {WAAdv.ADVEncryptionType|null} [receiverAccountType] DeviceListMetadata receiverAccountType
         * @property {Uint8Array|null} [recipientKeyHash] DeviceListMetadata recipientKeyHash
         * @property {number|Long|null} [recipientTimestamp] DeviceListMetadata recipientTimestamp
         * @property {Array.<number>|null} [recipientKeyIndexes] DeviceListMetadata recipientKeyIndexes
         */

        /**
         * Constructs a new DeviceListMetadata.
         * @memberof WAE2E
         * @classdesc Represents a DeviceListMetadata.
         * @implements IDeviceListMetadata
         * @constructor
         * @param {WAE2E.IDeviceListMetadata=} [properties] Properties to set
         */
        function DeviceListMetadata(properties) {
            this.senderKeyIndexes = [];
            this.recipientKeyIndexes = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DeviceListMetadata senderKeyHash.
         * @member {Uint8Array} senderKeyHash
         * @memberof WAE2E.DeviceListMetadata
         * @instance
         */
        DeviceListMetadata.prototype.senderKeyHash = $util.newBuffer([]);

        /**
         * DeviceListMetadata senderTimestamp.
         * @member {number|Long} senderTimestamp
         * @memberof WAE2E.DeviceListMetadata
         * @instance
         */
        DeviceListMetadata.prototype.senderTimestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * DeviceListMetadata senderKeyIndexes.
         * @member {Array.<number>} senderKeyIndexes
         * @memberof WAE2E.DeviceListMetadata
         * @instance
         */
        DeviceListMetadata.prototype.senderKeyIndexes = $util.emptyArray;

        /**
         * DeviceListMetadata senderAccountType.
         * @member {WAAdv.ADVEncryptionType} senderAccountType
         * @memberof WAE2E.DeviceListMetadata
         * @instance
         */
        DeviceListMetadata.prototype.senderAccountType = 0;

        /**
         * DeviceListMetadata receiverAccountType.
         * @member {WAAdv.ADVEncryptionType} receiverAccountType
         * @memberof WAE2E.DeviceListMetadata
         * @instance
         */
        DeviceListMetadata.prototype.receiverAccountType = 0;

        /**
         * DeviceListMetadata recipientKeyHash.
         * @member {Uint8Array} recipientKeyHash
         * @memberof WAE2E.DeviceListMetadata
         * @instance
         */
        DeviceListMetadata.prototype.recipientKeyHash = $util.newBuffer([]);

        /**
         * DeviceListMetadata recipientTimestamp.
         * @member {number|Long} recipientTimestamp
         * @memberof WAE2E.DeviceListMetadata
         * @instance
         */
        DeviceListMetadata.prototype.recipientTimestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * DeviceListMetadata recipientKeyIndexes.
         * @member {Array.<number>} recipientKeyIndexes
         * @memberof WAE2E.DeviceListMetadata
         * @instance
         */
        DeviceListMetadata.prototype.recipientKeyIndexes = $util.emptyArray;

        /**
         * Creates a new DeviceListMetadata instance using the specified properties.
         * @function create
         * @memberof WAE2E.DeviceListMetadata
         * @static
         * @param {WAE2E.IDeviceListMetadata=} [properties] Properties to set
         * @returns {WAE2E.DeviceListMetadata} DeviceListMetadata instance
         */
        DeviceListMetadata.create = function create(properties) {
            return new DeviceListMetadata(properties);
        };

        /**
         * Encodes the specified DeviceListMetadata message. Does not implicitly {@link WAE2E.DeviceListMetadata.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.DeviceListMetadata
         * @static
         * @param {WAE2E.IDeviceListMetadata} message DeviceListMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeviceListMetadata.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.senderKeyHash != null && Object.hasOwnProperty.call(message, "senderKeyHash"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.senderKeyHash);
            if (message.senderTimestamp != null && Object.hasOwnProperty.call(message, "senderTimestamp"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.senderTimestamp);
            if (message.senderKeyIndexes != null && message.senderKeyIndexes.length) {
                writer.uint32(/* id 3, wireType 2 =*/26).fork();
                for (var i = 0; i < message.senderKeyIndexes.length; ++i)
                    writer.uint32(message.senderKeyIndexes[i]);
                writer.ldelim();
            }
            if (message.senderAccountType != null && Object.hasOwnProperty.call(message, "senderAccountType"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.senderAccountType);
            if (message.receiverAccountType != null && Object.hasOwnProperty.call(message, "receiverAccountType"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.receiverAccountType);
            if (message.recipientKeyHash != null && Object.hasOwnProperty.call(message, "recipientKeyHash"))
                writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.recipientKeyHash);
            if (message.recipientTimestamp != null && Object.hasOwnProperty.call(message, "recipientTimestamp"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.recipientTimestamp);
            if (message.recipientKeyIndexes != null && message.recipientKeyIndexes.length) {
                writer.uint32(/* id 10, wireType 2 =*/82).fork();
                for (var i = 0; i < message.recipientKeyIndexes.length; ++i)
                    writer.uint32(message.recipientKeyIndexes[i]);
                writer.ldelim();
            }
            return writer;
        };

        /**
         * Encodes the specified DeviceListMetadata message, length delimited. Does not implicitly {@link WAE2E.DeviceListMetadata.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.DeviceListMetadata
         * @static
         * @param {WAE2E.IDeviceListMetadata} message DeviceListMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeviceListMetadata.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DeviceListMetadata message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.DeviceListMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.DeviceListMetadata} DeviceListMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeviceListMetadata.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.DeviceListMetadata();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.senderKeyHash = reader.bytes();
                        break;
                    }
                case 2: {
                        message.senderTimestamp = reader.uint64();
                        break;
                    }
                case 3: {
                        if (!(message.senderKeyIndexes && message.senderKeyIndexes.length))
                            message.senderKeyIndexes = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.senderKeyIndexes.push(reader.uint32());
                        } else
                            message.senderKeyIndexes.push(reader.uint32());
                        break;
                    }
                case 4: {
                        message.senderAccountType = reader.int32();
                        break;
                    }
                case 5: {
                        message.receiverAccountType = reader.int32();
                        break;
                    }
                case 8: {
                        message.recipientKeyHash = reader.bytes();
                        break;
                    }
                case 9: {
                        message.recipientTimestamp = reader.uint64();
                        break;
                    }
                case 10: {
                        if (!(message.recipientKeyIndexes && message.recipientKeyIndexes.length))
                            message.recipientKeyIndexes = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.recipientKeyIndexes.push(reader.uint32());
                        } else
                            message.recipientKeyIndexes.push(reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DeviceListMetadata message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.DeviceListMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.DeviceListMetadata} DeviceListMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeviceListMetadata.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DeviceListMetadata message.
         * @function verify
         * @memberof WAE2E.DeviceListMetadata
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DeviceListMetadata.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.senderKeyHash != null && message.hasOwnProperty("senderKeyHash"))
                if (!(message.senderKeyHash && typeof message.senderKeyHash.length === "number" || $util.isString(message.senderKeyHash)))
                    return "senderKeyHash: buffer expected";
            if (message.senderTimestamp != null && message.hasOwnProperty("senderTimestamp"))
                if (!$util.isInteger(message.senderTimestamp) && !(message.senderTimestamp && $util.isInteger(message.senderTimestamp.low) && $util.isInteger(message.senderTimestamp.high)))
                    return "senderTimestamp: integer|Long expected";
            if (message.senderKeyIndexes != null && message.hasOwnProperty("senderKeyIndexes")) {
                if (!Array.isArray(message.senderKeyIndexes))
                    return "senderKeyIndexes: array expected";
                for (var i = 0; i < message.senderKeyIndexes.length; ++i)
                    if (!$util.isInteger(message.senderKeyIndexes[i]))
                        return "senderKeyIndexes: integer[] expected";
            }
            if (message.senderAccountType != null && message.hasOwnProperty("senderAccountType"))
                switch (message.senderAccountType) {
                default:
                    return "senderAccountType: enum value expected";
                case 0:
                case 1:
                    break;
                }
            if (message.receiverAccountType != null && message.hasOwnProperty("receiverAccountType"))
                switch (message.receiverAccountType) {
                default:
                    return "receiverAccountType: enum value expected";
                case 0:
                case 1:
                    break;
                }
            if (message.recipientKeyHash != null && message.hasOwnProperty("recipientKeyHash"))
                if (!(message.recipientKeyHash && typeof message.recipientKeyHash.length === "number" || $util.isString(message.recipientKeyHash)))
                    return "recipientKeyHash: buffer expected";
            if (message.recipientTimestamp != null && message.hasOwnProperty("recipientTimestamp"))
                if (!$util.isInteger(message.recipientTimestamp) && !(message.recipientTimestamp && $util.isInteger(message.recipientTimestamp.low) && $util.isInteger(message.recipientTimestamp.high)))
                    return "recipientTimestamp: integer|Long expected";
            if (message.recipientKeyIndexes != null && message.hasOwnProperty("recipientKeyIndexes")) {
                if (!Array.isArray(message.recipientKeyIndexes))
                    return "recipientKeyIndexes: array expected";
                for (var i = 0; i < message.recipientKeyIndexes.length; ++i)
                    if (!$util.isInteger(message.recipientKeyIndexes[i]))
                        return "recipientKeyIndexes: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a DeviceListMetadata message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.DeviceListMetadata
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.DeviceListMetadata} DeviceListMetadata
         */
        DeviceListMetadata.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.DeviceListMetadata)
                return object;
            var message = new $root.WAE2E.DeviceListMetadata();
            if (object.senderKeyHash != null)
                if (typeof object.senderKeyHash === "string")
                    $util.base64.decode(object.senderKeyHash, message.senderKeyHash = $util.newBuffer($util.base64.length(object.senderKeyHash)), 0);
                else if (object.senderKeyHash.length >= 0)
                    message.senderKeyHash = object.senderKeyHash;
            if (object.senderTimestamp != null)
                if ($util.Long)
                    (message.senderTimestamp = $util.Long.fromValue(object.senderTimestamp)).unsigned = true;
                else if (typeof object.senderTimestamp === "string")
                    message.senderTimestamp = parseInt(object.senderTimestamp, 10);
                else if (typeof object.senderTimestamp === "number")
                    message.senderTimestamp = object.senderTimestamp;
                else if (typeof object.senderTimestamp === "object")
                    message.senderTimestamp = new $util.LongBits(object.senderTimestamp.low >>> 0, object.senderTimestamp.high >>> 0).toNumber(true);
            if (object.senderKeyIndexes) {
                if (!Array.isArray(object.senderKeyIndexes))
                    throw TypeError(".WAE2E.DeviceListMetadata.senderKeyIndexes: array expected");
                message.senderKeyIndexes = [];
                for (var i = 0; i < object.senderKeyIndexes.length; ++i)
                    message.senderKeyIndexes[i] = object.senderKeyIndexes[i] >>> 0;
            }
            switch (object.senderAccountType) {
            default:
                if (typeof object.senderAccountType === "number") {
                    message.senderAccountType = object.senderAccountType;
                    break;
                }
                break;
            case "E2EE":
            case 0:
                message.senderAccountType = 0;
                break;
            case "HOSTED":
            case 1:
                message.senderAccountType = 1;
                break;
            }
            switch (object.receiverAccountType) {
            default:
                if (typeof object.receiverAccountType === "number") {
                    message.receiverAccountType = object.receiverAccountType;
                    break;
                }
                break;
            case "E2EE":
            case 0:
                message.receiverAccountType = 0;
                break;
            case "HOSTED":
            case 1:
                message.receiverAccountType = 1;
                break;
            }
            if (object.recipientKeyHash != null)
                if (typeof object.recipientKeyHash === "string")
                    $util.base64.decode(object.recipientKeyHash, message.recipientKeyHash = $util.newBuffer($util.base64.length(object.recipientKeyHash)), 0);
                else if (object.recipientKeyHash.length >= 0)
                    message.recipientKeyHash = object.recipientKeyHash;
            if (object.recipientTimestamp != null)
                if ($util.Long)
                    (message.recipientTimestamp = $util.Long.fromValue(object.recipientTimestamp)).unsigned = true;
                else if (typeof object.recipientTimestamp === "string")
                    message.recipientTimestamp = parseInt(object.recipientTimestamp, 10);
                else if (typeof object.recipientTimestamp === "number")
                    message.recipientTimestamp = object.recipientTimestamp;
                else if (typeof object.recipientTimestamp === "object")
                    message.recipientTimestamp = new $util.LongBits(object.recipientTimestamp.low >>> 0, object.recipientTimestamp.high >>> 0).toNumber(true);
            if (object.recipientKeyIndexes) {
                if (!Array.isArray(object.recipientKeyIndexes))
                    throw TypeError(".WAE2E.DeviceListMetadata.recipientKeyIndexes: array expected");
                message.recipientKeyIndexes = [];
                for (var i = 0; i < object.recipientKeyIndexes.length; ++i)
                    message.recipientKeyIndexes[i] = object.recipientKeyIndexes[i] >>> 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a DeviceListMetadata message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.DeviceListMetadata
         * @static
         * @param {WAE2E.DeviceListMetadata} message DeviceListMetadata
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DeviceListMetadata.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.senderKeyIndexes = [];
                object.recipientKeyIndexes = [];
            }
            if (options.defaults) {
                if (options.bytes === String)
                    object.senderKeyHash = "";
                else {
                    object.senderKeyHash = [];
                    if (options.bytes !== Array)
                        object.senderKeyHash = $util.newBuffer(object.senderKeyHash);
                }
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.senderTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.senderTimestamp = options.longs === String ? "0" : 0;
                object.senderAccountType = options.enums === String ? "E2EE" : 0;
                object.receiverAccountType = options.enums === String ? "E2EE" : 0;
                if (options.bytes === String)
                    object.recipientKeyHash = "";
                else {
                    object.recipientKeyHash = [];
                    if (options.bytes !== Array)
                        object.recipientKeyHash = $util.newBuffer(object.recipientKeyHash);
                }
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.recipientTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.recipientTimestamp = options.longs === String ? "0" : 0;
            }
            if (message.senderKeyHash != null && message.hasOwnProperty("senderKeyHash"))
                object.senderKeyHash = options.bytes === String ? $util.base64.encode(message.senderKeyHash, 0, message.senderKeyHash.length) : options.bytes === Array ? Array.prototype.slice.call(message.senderKeyHash) : message.senderKeyHash;
            if (message.senderTimestamp != null && message.hasOwnProperty("senderTimestamp"))
                if (typeof message.senderTimestamp === "number")
                    object.senderTimestamp = options.longs === String ? String(message.senderTimestamp) : message.senderTimestamp;
                else
                    object.senderTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.senderTimestamp) : options.longs === Number ? new $util.LongBits(message.senderTimestamp.low >>> 0, message.senderTimestamp.high >>> 0).toNumber(true) : message.senderTimestamp;
            if (message.senderKeyIndexes && message.senderKeyIndexes.length) {
                object.senderKeyIndexes = [];
                for (var j = 0; j < message.senderKeyIndexes.length; ++j)
                    object.senderKeyIndexes[j] = message.senderKeyIndexes[j];
            }
            if (message.senderAccountType != null && message.hasOwnProperty("senderAccountType"))
                object.senderAccountType = options.enums === String ? $root.WAAdv.ADVEncryptionType[message.senderAccountType] === undefined ? message.senderAccountType : $root.WAAdv.ADVEncryptionType[message.senderAccountType] : message.senderAccountType;
            if (message.receiverAccountType != null && message.hasOwnProperty("receiverAccountType"))
                object.receiverAccountType = options.enums === String ? $root.WAAdv.ADVEncryptionType[message.receiverAccountType] === undefined ? message.receiverAccountType : $root.WAAdv.ADVEncryptionType[message.receiverAccountType] : message.receiverAccountType;
            if (message.recipientKeyHash != null && message.hasOwnProperty("recipientKeyHash"))
                object.recipientKeyHash = options.bytes === String ? $util.base64.encode(message.recipientKeyHash, 0, message.recipientKeyHash.length) : options.bytes === Array ? Array.prototype.slice.call(message.recipientKeyHash) : message.recipientKeyHash;
            if (message.recipientTimestamp != null && message.hasOwnProperty("recipientTimestamp"))
                if (typeof message.recipientTimestamp === "number")
                    object.recipientTimestamp = options.longs === String ? String(message.recipientTimestamp) : message.recipientTimestamp;
                else
                    object.recipientTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.recipientTimestamp) : options.longs === Number ? new $util.LongBits(message.recipientTimestamp.low >>> 0, message.recipientTimestamp.high >>> 0).toNumber(true) : message.recipientTimestamp;
            if (message.recipientKeyIndexes && message.recipientKeyIndexes.length) {
                object.recipientKeyIndexes = [];
                for (var j = 0; j < message.recipientKeyIndexes.length; ++j)
                    object.recipientKeyIndexes[j] = message.recipientKeyIndexes[j];
            }
            return object;
        };

        /**
         * Converts this DeviceListMetadata to JSON.
         * @function toJSON
         * @memberof WAE2E.DeviceListMetadata
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DeviceListMetadata.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for DeviceListMetadata
         * @function getTypeUrl
         * @memberof WAE2E.DeviceListMetadata
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        DeviceListMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.DeviceListMetadata";
        };

        return DeviceListMetadata;
    })();

    WAE2E.GroupInfoMetadata = (function() {

        /**
         * Properties of a GroupInfoMetadata.
         * @memberof WAE2E
         * @interface IGroupInfoMetadata
         * @property {boolean|null} [createdByCapi] GroupInfoMetadata createdByCapi
         */

        /**
         * Constructs a new GroupInfoMetadata.
         * @memberof WAE2E
         * @classdesc Represents a GroupInfoMetadata.
         * @implements IGroupInfoMetadata
         * @constructor
         * @param {WAE2E.IGroupInfoMetadata=} [properties] Properties to set
         */
        function GroupInfoMetadata(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GroupInfoMetadata createdByCapi.
         * @member {boolean} createdByCapi
         * @memberof WAE2E.GroupInfoMetadata
         * @instance
         */
        GroupInfoMetadata.prototype.createdByCapi = false;

        /**
         * Creates a new GroupInfoMetadata instance using the specified properties.
         * @function create
         * @memberof WAE2E.GroupInfoMetadata
         * @static
         * @param {WAE2E.IGroupInfoMetadata=} [properties] Properties to set
         * @returns {WAE2E.GroupInfoMetadata} GroupInfoMetadata instance
         */
        GroupInfoMetadata.create = function create(properties) {
            return new GroupInfoMetadata(properties);
        };

        /**
         * Encodes the specified GroupInfoMetadata message. Does not implicitly {@link WAE2E.GroupInfoMetadata.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.GroupInfoMetadata
         * @static
         * @param {WAE2E.IGroupInfoMetadata} message GroupInfoMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroupInfoMetadata.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.createdByCapi != null && Object.hasOwnProperty.call(message, "createdByCapi"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.createdByCapi);
            return writer;
        };

        /**
         * Encodes the specified GroupInfoMetadata message, length delimited. Does not implicitly {@link WAE2E.GroupInfoMetadata.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.GroupInfoMetadata
         * @static
         * @param {WAE2E.IGroupInfoMetadata} message GroupInfoMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroupInfoMetadata.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GroupInfoMetadata message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.GroupInfoMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.GroupInfoMetadata} GroupInfoMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroupInfoMetadata.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.GroupInfoMetadata();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.createdByCapi = reader.bool();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GroupInfoMetadata message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.GroupInfoMetadata
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.GroupInfoMetadata} GroupInfoMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroupInfoMetadata.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GroupInfoMetadata message.
         * @function verify
         * @memberof WAE2E.GroupInfoMetadata
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GroupInfoMetadata.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.createdByCapi != null && message.hasOwnProperty("createdByCapi"))
                if (typeof message.createdByCapi !== "boolean")
                    return "createdByCapi: boolean expected";
            return null;
        };

        /**
         * Creates a GroupInfoMetadata message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.GroupInfoMetadata
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.GroupInfoMetadata} GroupInfoMetadata
         */
        GroupInfoMetadata.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.GroupInfoMetadata)
                return object;
            var message = new $root.WAE2E.GroupInfoMetadata();
            if (object.createdByCapi != null)
                message.createdByCapi = Boolean(object.createdByCapi);
            return message;
        };

        /**
         * Creates a plain object from a GroupInfoMetadata message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.GroupInfoMetadata
         * @static
         * @param {WAE2E.GroupInfoMetadata} message GroupInfoMetadata
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GroupInfoMetadata.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.createdByCapi = false;
            if (message.createdByCapi != null && message.hasOwnProperty("createdByCapi"))
                object.createdByCapi = message.createdByCapi;
            return object;
        };

        /**
         * Converts this GroupInfoMetadata to JSON.
         * @function toJSON
         * @memberof WAE2E.GroupInfoMetadata
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GroupInfoMetadata.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for GroupInfoMetadata
         * @function getTypeUrl
         * @memberof WAE2E.GroupInfoMetadata
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        GroupInfoMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.GroupInfoMetadata";
        };

        return GroupInfoMetadata;
    })();

    WAE2E.InteractiveAnnotation = (function() {

        /**
         * Properties of an InteractiveAnnotation.
         * @memberof WAE2E
         * @interface IInteractiveAnnotation
         * @property {WAE2E.ILocation|null} [location] InteractiveAnnotation location
         * @property {WAE2E.ContextInfo.IForwardedNewsletterMessageInfo|null} [newsletter] InteractiveAnnotation newsletter
         * @property {Array.<WAE2E.IPoint>|null} [polygonVertices] InteractiveAnnotation polygonVertices
         * @property {boolean|null} [shouldSkipConfirmation] InteractiveAnnotation shouldSkipConfirmation
         */

        /**
         * Constructs a new InteractiveAnnotation.
         * @memberof WAE2E
         * @classdesc Represents an InteractiveAnnotation.
         * @implements IInteractiveAnnotation
         * @constructor
         * @param {WAE2E.IInteractiveAnnotation=} [properties] Properties to set
         */
        function InteractiveAnnotation(properties) {
            this.polygonVertices = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * InteractiveAnnotation location.
         * @member {WAE2E.ILocation|null|undefined} location
         * @memberof WAE2E.InteractiveAnnotation
         * @instance
         */
        InteractiveAnnotation.prototype.location = null;

        /**
         * InteractiveAnnotation newsletter.
         * @member {WAE2E.ContextInfo.IForwardedNewsletterMessageInfo|null|undefined} newsletter
         * @memberof WAE2E.InteractiveAnnotation
         * @instance
         */
        InteractiveAnnotation.prototype.newsletter = null;

        /**
         * InteractiveAnnotation polygonVertices.
         * @member {Array.<WAE2E.IPoint>} polygonVertices
         * @memberof WAE2E.InteractiveAnnotation
         * @instance
         */
        InteractiveAnnotation.prototype.polygonVertices = $util.emptyArray;

        /**
         * InteractiveAnnotation shouldSkipConfirmation.
         * @member {boolean} shouldSkipConfirmation
         * @memberof WAE2E.InteractiveAnnotation
         * @instance
         */
        InteractiveAnnotation.prototype.shouldSkipConfirmation = false;

        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;

        /**
         * InteractiveAnnotation action.
         * @member {"location"|"newsletter"|undefined} action
         * @memberof WAE2E.InteractiveAnnotation
         * @instance
         */
        Object.defineProperty(InteractiveAnnotation.prototype, "action", {
            get: $util.oneOfGetter($oneOfFields = ["location", "newsletter"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Creates a new InteractiveAnnotation instance using the specified properties.
         * @function create
         * @memberof WAE2E.InteractiveAnnotation
         * @static
         * @param {WAE2E.IInteractiveAnnotation=} [properties] Properties to set
         * @returns {WAE2E.InteractiveAnnotation} InteractiveAnnotation instance
         */
        InteractiveAnnotation.create = function create(properties) {
            return new InteractiveAnnotation(properties);
        };

        /**
         * Encodes the specified InteractiveAnnotation message. Does not implicitly {@link WAE2E.InteractiveAnnotation.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.InteractiveAnnotation
         * @static
         * @param {WAE2E.IInteractiveAnnotation} message InteractiveAnnotation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InteractiveAnnotation.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.polygonVertices != null && message.polygonVertices.length)
                for (var i = 0; i < message.polygonVertices.length; ++i)
                    $root.WAE2E.Point.encode(message.polygonVertices[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                $root.WAE2E.Location.encode(message.location, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.newsletter != null && Object.hasOwnProperty.call(message, "newsletter"))
                $root.WAE2E.ContextInfo.ForwardedNewsletterMessageInfo.encode(message.newsletter, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.shouldSkipConfirmation != null && Object.hasOwnProperty.call(message, "shouldSkipConfirmation"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.shouldSkipConfirmation);
            return writer;
        };

        /**
         * Encodes the specified InteractiveAnnotation message, length delimited. Does not implicitly {@link WAE2E.InteractiveAnnotation.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.InteractiveAnnotation
         * @static
         * @param {WAE2E.IInteractiveAnnotation} message InteractiveAnnotation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InteractiveAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an InteractiveAnnotation message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.InteractiveAnnotation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.InteractiveAnnotation} InteractiveAnnotation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InteractiveAnnotation.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.InteractiveAnnotation();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2: {
                        message.location = $root.WAE2E.Location.decode(reader, reader.uint32());
                        break;
                    }
                case 3: {
                        message.newsletter = $root.WAE2E.ContextInfo.ForwardedNewsletterMessageInfo.decode(reader, reader.uint32());
                        break;
                    }
                case 1: {
                        if (!(message.polygonVertices && message.polygonVertices.length))
                            message.polygonVertices = [];
                        message.polygonVertices.push($root.WAE2E.Point.decode(reader, reader.uint32()));
                        break;
                    }
                case 4: {
                        message.shouldSkipConfirmation = reader.bool();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an InteractiveAnnotation message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.InteractiveAnnotation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.InteractiveAnnotation} InteractiveAnnotation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InteractiveAnnotation.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an InteractiveAnnotation message.
         * @function verify
         * @memberof WAE2E.InteractiveAnnotation
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        InteractiveAnnotation.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.location != null && message.hasOwnProperty("location")) {
                properties.action = 1;
                {
                    var error = $root.WAE2E.Location.verify(message.location);
                    if (error)
                        return "location." + error;
                }
            }
            if (message.newsletter != null && message.hasOwnProperty("newsletter")) {
                if (properties.action === 1)
                    return "action: multiple values";
                properties.action = 1;
                {
                    var error = $root.WAE2E.ContextInfo.ForwardedNewsletterMessageInfo.verify(message.newsletter);
                    if (error)
                        return "newsletter." + error;
                }
            }
            if (message.polygonVertices != null && message.hasOwnProperty("polygonVertices")) {
                if (!Array.isArray(message.polygonVertices))
                    return "polygonVertices: array expected";
                for (var i = 0; i < message.polygonVertices.length; ++i) {
                    var error = $root.WAE2E.Point.verify(message.polygonVertices[i]);
                    if (error)
                        return "polygonVertices." + error;
                }
            }
            if (message.shouldSkipConfirmation != null && message.hasOwnProperty("shouldSkipConfirmation"))
                if (typeof message.shouldSkipConfirmation !== "boolean")
                    return "shouldSkipConfirmation: boolean expected";
            return null;
        };

        /**
         * Creates an InteractiveAnnotation message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.InteractiveAnnotation
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.InteractiveAnnotation} InteractiveAnnotation
         */
        InteractiveAnnotation.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.InteractiveAnnotation)
                return object;
            var message = new $root.WAE2E.InteractiveAnnotation();
            if (object.location != null) {
                if (typeof object.location !== "object")
                    throw TypeError(".WAE2E.InteractiveAnnotation.location: object expected");
                message.location = $root.WAE2E.Location.fromObject(object.location);
            }
            if (object.newsletter != null) {
                if (typeof object.newsletter !== "object")
                    throw TypeError(".WAE2E.InteractiveAnnotation.newsletter: object expected");
                message.newsletter = $root.WAE2E.ContextInfo.ForwardedNewsletterMessageInfo.fromObject(object.newsletter);
            }
            if (object.polygonVertices) {
                if (!Array.isArray(object.polygonVertices))
                    throw TypeError(".WAE2E.InteractiveAnnotation.polygonVertices: array expected");
                message.polygonVertices = [];
                for (var i = 0; i < object.polygonVertices.length; ++i) {
                    if (typeof object.polygonVertices[i] !== "object")
                        throw TypeError(".WAE2E.InteractiveAnnotation.polygonVertices: object expected");
                    message.polygonVertices[i] = $root.WAE2E.Point.fromObject(object.polygonVertices[i]);
                }
            }
            if (object.shouldSkipConfirmation != null)
                message.shouldSkipConfirmation = Boolean(object.shouldSkipConfirmation);
            return message;
        };

        /**
         * Creates a plain object from an InteractiveAnnotation message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.InteractiveAnnotation
         * @static
         * @param {WAE2E.InteractiveAnnotation} message InteractiveAnnotation
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        InteractiveAnnotation.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.polygonVertices = [];
            if (options.defaults)
                object.shouldSkipConfirmation = false;
            if (message.polygonVertices && message.polygonVertices.length) {
                object.polygonVertices = [];
                for (var j = 0; j < message.polygonVertices.length; ++j)
                    object.polygonVertices[j] = $root.WAE2E.Point.toObject(message.polygonVertices[j], options);
            }
            if (message.location != null && message.hasOwnProperty("location")) {
                object.location = $root.WAE2E.Location.toObject(message.location, options);
                if (options.oneofs)
                    object.action = "location";
            }
            if (message.newsletter != null && message.hasOwnProperty("newsletter")) {
                object.newsletter = $root.WAE2E.ContextInfo.ForwardedNewsletterMessageInfo.toObject(message.newsletter, options);
                if (options.oneofs)
                    object.action = "newsletter";
            }
            if (message.shouldSkipConfirmation != null && message.hasOwnProperty("shouldSkipConfirmation"))
                object.shouldSkipConfirmation = message.shouldSkipConfirmation;
            return object;
        };

        /**
         * Converts this InteractiveAnnotation to JSON.
         * @function toJSON
         * @memberof WAE2E.InteractiveAnnotation
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        InteractiveAnnotation.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for InteractiveAnnotation
         * @function getTypeUrl
         * @memberof WAE2E.InteractiveAnnotation
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        InteractiveAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.InteractiveAnnotation";
        };

        return InteractiveAnnotation;
    })();

    WAE2E.Point = (function() {

        /**
         * Properties of a Point.
         * @memberof WAE2E
         * @interface IPoint
         * @property {number|null} [xDeprecated] Point xDeprecated
         * @property {number|null} [yDeprecated] Point yDeprecated
         * @property {number|null} [x] Point x
         * @property {number|null} [y] Point y
         */

        /**
         * Constructs a new Point.
         * @memberof WAE2E
         * @classdesc Represents a Point.
         * @implements IPoint
         * @constructor
         * @param {WAE2E.IPoint=} [properties] Properties to set
         */
        function Point(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Point xDeprecated.
         * @member {number} xDeprecated
         * @memberof WAE2E.Point
         * @instance
         */
        Point.prototype.xDeprecated = 0;

        /**
         * Point yDeprecated.
         * @member {number} yDeprecated
         * @memberof WAE2E.Point
         * @instance
         */
        Point.prototype.yDeprecated = 0;

        /**
         * Point x.
         * @member {number} x
         * @memberof WAE2E.Point
         * @instance
         */
        Point.prototype.x = 0;

        /**
         * Point y.
         * @member {number} y
         * @memberof WAE2E.Point
         * @instance
         */
        Point.prototype.y = 0;

        /**
         * Creates a new Point instance using the specified properties.
         * @function create
         * @memberof WAE2E.Point
         * @static
         * @param {WAE2E.IPoint=} [properties] Properties to set
         * @returns {WAE2E.Point} Point instance
         */
        Point.create = function create(properties) {
            return new Point(properties);
        };

        /**
         * Encodes the specified Point message. Does not implicitly {@link WAE2E.Point.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.Point
         * @static
         * @param {WAE2E.IPoint} message Point message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Point.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.xDeprecated != null && Object.hasOwnProperty.call(message, "xDeprecated"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.xDeprecated);
            if (message.yDeprecated != null && Object.hasOwnProperty.call(message, "yDeprecated"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.yDeprecated);
            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.x);
            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                writer.uint32(/* id 4, wireType 1 =*/33).double(message.y);
            return writer;
        };

        /**
         * Encodes the specified Point message, length delimited. Does not implicitly {@link WAE2E.Point.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.Point
         * @static
         * @param {WAE2E.IPoint} message Point message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Point.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Point message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.Point
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.Point} Point
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Point.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Point();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.xDeprecated = reader.int32();
                        break;
                    }
                case 2: {
                        message.yDeprecated = reader.int32();
                        break;
                    }
                case 3: {
                        message.x = reader.double();
                        break;
                    }
                case 4: {
                        message.y = reader.double();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Point message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.Point
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.Point} Point
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Point.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Point message.
         * @function verify
         * @memberof WAE2E.Point
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Point.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.xDeprecated != null && message.hasOwnProperty("xDeprecated"))
                if (!$util.isInteger(message.xDeprecated))
                    return "xDeprecated: integer expected";
            if (message.yDeprecated != null && message.hasOwnProperty("yDeprecated"))
                if (!$util.isInteger(message.yDeprecated))
                    return "yDeprecated: integer expected";
            if (message.x != null && message.hasOwnProperty("x"))
                if (typeof message.x !== "number")
                    return "x: number expected";
            if (message.y != null && message.hasOwnProperty("y"))
                if (typeof message.y !== "number")
                    return "y: number expected";
            return null;
        };

        /**
         * Creates a Point message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.Point
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.Point} Point
         */
        Point.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.Point)
                return object;
            var message = new $root.WAE2E.Point();
            if (object.xDeprecated != null)
                message.xDeprecated = object.xDeprecated | 0;
            if (object.yDeprecated != null)
                message.yDeprecated = object.yDeprecated | 0;
            if (object.x != null)
                message.x = Number(object.x);
            if (object.y != null)
                message.y = Number(object.y);
            return message;
        };

        /**
         * Creates a plain object from a Point message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.Point
         * @static
         * @param {WAE2E.Point} message Point
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Point.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.xDeprecated = 0;
                object.yDeprecated = 0;
                object.x = 0;
                object.y = 0;
            }
            if (message.xDeprecated != null && message.hasOwnProperty("xDeprecated"))
                object.xDeprecated = message.xDeprecated;
            if (message.yDeprecated != null && message.hasOwnProperty("yDeprecated"))
                object.yDeprecated = message.yDeprecated;
            if (message.x != null && message.hasOwnProperty("x"))
                object.x = options.json && !isFinite(message.x) ? String(message.x) : message.x;
            if (message.y != null && message.hasOwnProperty("y"))
                object.y = options.json && !isFinite(message.y) ? String(message.y) : message.y;
            return object;
        };

        /**
         * Converts this Point to JSON.
         * @function toJSON
         * @memberof WAE2E.Point
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Point.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Point
         * @function getTypeUrl
         * @memberof WAE2E.Point
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Point.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.Point";
        };

        return Point;
    })();

    WAE2E.Location = (function() {

        /**
         * Properties of a Location.
         * @memberof WAE2E
         * @interface ILocation
         * @property {number|null} [degreesLatitude] Location degreesLatitude
         * @property {number|null} [degreesLongitude] Location degreesLongitude
         * @property {string|null} [name] Location name
         */

        /**
         * Constructs a new Location.
         * @memberof WAE2E
         * @classdesc Represents a Location.
         * @implements ILocation
         * @constructor
         * @param {WAE2E.ILocation=} [properties] Properties to set
         */
        function Location(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Location degreesLatitude.
         * @member {number} degreesLatitude
         * @memberof WAE2E.Location
         * @instance
         */
        Location.prototype.degreesLatitude = 0;

        /**
         * Location degreesLongitude.
         * @member {number} degreesLongitude
         * @memberof WAE2E.Location
         * @instance
         */
        Location.prototype.degreesLongitude = 0;

        /**
         * Location name.
         * @member {string} name
         * @memberof WAE2E.Location
         * @instance
         */
        Location.prototype.name = "";

        /**
         * Creates a new Location instance using the specified properties.
         * @function create
         * @memberof WAE2E.Location
         * @static
         * @param {WAE2E.ILocation=} [properties] Properties to set
         * @returns {WAE2E.Location} Location instance
         */
        Location.create = function create(properties) {
            return new Location(properties);
        };

        /**
         * Encodes the specified Location message. Does not implicitly {@link WAE2E.Location.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.Location
         * @static
         * @param {WAE2E.ILocation} message Location message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Location.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.degreesLatitude != null && Object.hasOwnProperty.call(message, "degreesLatitude"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.degreesLatitude);
            if (message.degreesLongitude != null && Object.hasOwnProperty.call(message, "degreesLongitude"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.degreesLongitude);
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
            return writer;
        };

        /**
         * Encodes the specified Location message, length delimited. Does not implicitly {@link WAE2E.Location.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.Location
         * @static
         * @param {WAE2E.ILocation} message Location message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Location.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Location message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.Location
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.Location} Location
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Location.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Location();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.degreesLatitude = reader.double();
                        break;
                    }
                case 2: {
                        message.degreesLongitude = reader.double();
                        break;
                    }
                case 3: {
                        message.name = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Location message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.Location
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.Location} Location
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Location.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Location message.
         * @function verify
         * @memberof WAE2E.Location
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Location.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.degreesLatitude != null && message.hasOwnProperty("degreesLatitude"))
                if (typeof message.degreesLatitude !== "number")
                    return "degreesLatitude: number expected";
            if (message.degreesLongitude != null && message.hasOwnProperty("degreesLongitude"))
                if (typeof message.degreesLongitude !== "number")
                    return "degreesLongitude: number expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };

        /**
         * Creates a Location message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.Location
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.Location} Location
         */
        Location.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.Location)
                return object;
            var message = new $root.WAE2E.Location();
            if (object.degreesLatitude != null)
                message.degreesLatitude = Number(object.degreesLatitude);
            if (object.degreesLongitude != null)
                message.degreesLongitude = Number(object.degreesLongitude);
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };

        /**
         * Creates a plain object from a Location message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.Location
         * @static
         * @param {WAE2E.Location} message Location
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Location.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.degreesLatitude = 0;
                object.degreesLongitude = 0;
                object.name = "";
            }
            if (message.degreesLatitude != null && message.hasOwnProperty("degreesLatitude"))
                object.degreesLatitude = options.json && !isFinite(message.degreesLatitude) ? String(message.degreesLatitude) : message.degreesLatitude;
            if (message.degreesLongitude != null && message.hasOwnProperty("degreesLongitude"))
                object.degreesLongitude = options.json && !isFinite(message.degreesLongitude) ? String(message.degreesLongitude) : message.degreesLongitude;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };

        /**
         * Converts this Location to JSON.
         * @function toJSON
         * @memberof WAE2E.Location
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Location.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Location
         * @function getTypeUrl
         * @memberof WAE2E.Location
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Location.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.Location";
        };

        return Location;
    })();

    WAE2E.TemplateButton = (function() {

        /**
         * Properties of a TemplateButton.
         * @memberof WAE2E
         * @interface ITemplateButton
         * @property {WAE2E.TemplateButton.IQuickReplyButton|null} [quickReplyButton] TemplateButton quickReplyButton
         * @property {WAE2E.TemplateButton.IURLButton|null} [urlButton] TemplateButton urlButton
         * @property {WAE2E.TemplateButton.ICallButton|null} [callButton] TemplateButton callButton
         * @property {number|null} [index] TemplateButton index
         */

        /**
         * Constructs a new TemplateButton.
         * @memberof WAE2E
         * @classdesc Represents a TemplateButton.
         * @implements ITemplateButton
         * @constructor
         * @param {WAE2E.ITemplateButton=} [properties] Properties to set
         */
        function TemplateButton(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TemplateButton quickReplyButton.
         * @member {WAE2E.TemplateButton.IQuickReplyButton|null|undefined} quickReplyButton
         * @memberof WAE2E.TemplateButton
         * @instance
         */
        TemplateButton.prototype.quickReplyButton = null;

        /**
         * TemplateButton urlButton.
         * @member {WAE2E.TemplateButton.IURLButton|null|undefined} urlButton
         * @memberof WAE2E.TemplateButton
         * @instance
         */
        TemplateButton.prototype.urlButton = null;

        /**
         * TemplateButton callButton.
         * @member {WAE2E.TemplateButton.ICallButton|null|undefined} callButton
         * @memberof WAE2E.TemplateButton
         * @instance
         */
        TemplateButton.prototype.callButton = null;

        /**
         * TemplateButton index.
         * @member {number} index
         * @memberof WAE2E.TemplateButton
         * @instance
         */
        TemplateButton.prototype.index = 0;

        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;

        /**
         * TemplateButton button.
         * @member {"quickReplyButton"|"urlButton"|"callButton"|undefined} button
         * @memberof WAE2E.TemplateButton
         * @instance
         */
        Object.defineProperty(TemplateButton.prototype, "button", {
            get: $util.oneOfGetter($oneOfFields = ["quickReplyButton", "urlButton", "callButton"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Creates a new TemplateButton instance using the specified properties.
         * @function create
         * @memberof WAE2E.TemplateButton
         * @static
         * @param {WAE2E.ITemplateButton=} [properties] Properties to set
         * @returns {WAE2E.TemplateButton} TemplateButton instance
         */
        TemplateButton.create = function create(properties) {
            return new TemplateButton(properties);
        };

        /**
         * Encodes the specified TemplateButton message. Does not implicitly {@link WAE2E.TemplateButton.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.TemplateButton
         * @static
         * @param {WAE2E.ITemplateButton} message TemplateButton message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TemplateButton.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.quickReplyButton != null && Object.hasOwnProperty.call(message, "quickReplyButton"))
                $root.WAE2E.TemplateButton.QuickReplyButton.encode(message.quickReplyButton, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.urlButton != null && Object.hasOwnProperty.call(message, "urlButton"))
                $root.WAE2E.TemplateButton.URLButton.encode(message.urlButton, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.callButton != null && Object.hasOwnProperty.call(message, "callButton"))
                $root.WAE2E.TemplateButton.CallButton.encode(message.callButton, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.index);
            return writer;
        };

        /**
         * Encodes the specified TemplateButton message, length delimited. Does not implicitly {@link WAE2E.TemplateButton.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.TemplateButton
         * @static
         * @param {WAE2E.ITemplateButton} message TemplateButton message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TemplateButton.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TemplateButton message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.TemplateButton
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.TemplateButton} TemplateButton
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TemplateButton.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.TemplateButton();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.quickReplyButton = $root.WAE2E.TemplateButton.QuickReplyButton.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        message.urlButton = $root.WAE2E.TemplateButton.URLButton.decode(reader, reader.uint32());
                        break;
                    }
                case 3: {
                        message.callButton = $root.WAE2E.TemplateButton.CallButton.decode(reader, reader.uint32());
                        break;
                    }
                case 4: {
                        message.index = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TemplateButton message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.TemplateButton
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.TemplateButton} TemplateButton
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TemplateButton.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TemplateButton message.
         * @function verify
         * @memberof WAE2E.TemplateButton
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TemplateButton.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.quickReplyButton != null && message.hasOwnProperty("quickReplyButton")) {
                properties.button = 1;
                {
                    var error = $root.WAE2E.TemplateButton.QuickReplyButton.verify(message.quickReplyButton);
                    if (error)
                        return "quickReplyButton." + error;
                }
            }
            if (message.urlButton != null && message.hasOwnProperty("urlButton")) {
                if (properties.button === 1)
                    return "button: multiple values";
                properties.button = 1;
                {
                    var error = $root.WAE2E.TemplateButton.URLButton.verify(message.urlButton);
                    if (error)
                        return "urlButton." + error;
                }
            }
            if (message.callButton != null && message.hasOwnProperty("callButton")) {
                if (properties.button === 1)
                    return "button: multiple values";
                properties.button = 1;
                {
                    var error = $root.WAE2E.TemplateButton.CallButton.verify(message.callButton);
                    if (error)
                        return "callButton." + error;
                }
            }
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            return null;
        };

        /**
         * Creates a TemplateButton message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.TemplateButton
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.TemplateButton} TemplateButton
         */
        TemplateButton.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.TemplateButton)
                return object;
            var message = new $root.WAE2E.TemplateButton();
            if (object.quickReplyButton != null) {
                if (typeof object.quickReplyButton !== "object")
                    throw TypeError(".WAE2E.TemplateButton.quickReplyButton: object expected");
                message.quickReplyButton = $root.WAE2E.TemplateButton.QuickReplyButton.fromObject(object.quickReplyButton);
            }
            if (object.urlButton != null) {
                if (typeof object.urlButton !== "object")
                    throw TypeError(".WAE2E.TemplateButton.urlButton: object expected");
                message.urlButton = $root.WAE2E.TemplateButton.URLButton.fromObject(object.urlButton);
            }
            if (object.callButton != null) {
                if (typeof object.callButton !== "object")
                    throw TypeError(".WAE2E.TemplateButton.callButton: object expected");
                message.callButton = $root.WAE2E.TemplateButton.CallButton.fromObject(object.callButton);
            }
            if (object.index != null)
                message.index = object.index >>> 0;
            return message;
        };

        /**
         * Creates a plain object from a TemplateButton message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.TemplateButton
         * @static
         * @param {WAE2E.TemplateButton} message TemplateButton
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TemplateButton.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.index = 0;
            if (message.quickReplyButton != null && message.hasOwnProperty("quickReplyButton")) {
                object.quickReplyButton = $root.WAE2E.TemplateButton.QuickReplyButton.toObject(message.quickReplyButton, options);
                if (options.oneofs)
                    object.button = "quickReplyButton";
            }
            if (message.urlButton != null && message.hasOwnProperty("urlButton")) {
                object.urlButton = $root.WAE2E.TemplateButton.URLButton.toObject(message.urlButton, options);
                if (options.oneofs)
                    object.button = "urlButton";
            }
            if (message.callButton != null && message.hasOwnProperty("callButton")) {
                object.callButton = $root.WAE2E.TemplateButton.CallButton.toObject(message.callButton, options);
                if (options.oneofs)
                    object.button = "callButton";
            }
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            return object;
        };

        /**
         * Converts this TemplateButton to JSON.
         * @function toJSON
         * @memberof WAE2E.TemplateButton
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TemplateButton.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for TemplateButton
         * @function getTypeUrl
         * @memberof WAE2E.TemplateButton
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        TemplateButton.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.TemplateButton";
        };

        TemplateButton.CallButton = (function() {

            /**
             * Properties of a CallButton.
             * @memberof WAE2E.TemplateButton
             * @interface ICallButton
             * @property {WAE2E.Message.IHighlyStructuredMessage|null} [displayText] CallButton displayText
             * @property {WAE2E.Message.IHighlyStructuredMessage|null} [phoneNumber] CallButton phoneNumber
             */

            /**
             * Constructs a new CallButton.
             * @memberof WAE2E.TemplateButton
             * @classdesc Represents a CallButton.
             * @implements ICallButton
             * @constructor
             * @param {WAE2E.TemplateButton.ICallButton=} [properties] Properties to set
             */
            function CallButton(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CallButton displayText.
             * @member {WAE2E.Message.IHighlyStructuredMessage|null|undefined} displayText
             * @memberof WAE2E.TemplateButton.CallButton
             * @instance
             */
            CallButton.prototype.displayText = null;

            /**
             * CallButton phoneNumber.
             * @member {WAE2E.Message.IHighlyStructuredMessage|null|undefined} phoneNumber
             * @memberof WAE2E.TemplateButton.CallButton
             * @instance
             */
            CallButton.prototype.phoneNumber = null;

            /**
             * Creates a new CallButton instance using the specified properties.
             * @function create
             * @memberof WAE2E.TemplateButton.CallButton
             * @static
             * @param {WAE2E.TemplateButton.ICallButton=} [properties] Properties to set
             * @returns {WAE2E.TemplateButton.CallButton} CallButton instance
             */
            CallButton.create = function create(properties) {
                return new CallButton(properties);
            };

            /**
             * Encodes the specified CallButton message. Does not implicitly {@link WAE2E.TemplateButton.CallButton.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.TemplateButton.CallButton
             * @static
             * @param {WAE2E.TemplateButton.ICallButton} message CallButton message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CallButton.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.displayText != null && Object.hasOwnProperty.call(message, "displayText"))
                    $root.WAE2E.Message.HighlyStructuredMessage.encode(message.displayText, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.phoneNumber != null && Object.hasOwnProperty.call(message, "phoneNumber"))
                    $root.WAE2E.Message.HighlyStructuredMessage.encode(message.phoneNumber, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CallButton message, length delimited. Does not implicitly {@link WAE2E.TemplateButton.CallButton.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.TemplateButton.CallButton
             * @static
             * @param {WAE2E.TemplateButton.ICallButton} message CallButton message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CallButton.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CallButton message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.TemplateButton.CallButton
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.TemplateButton.CallButton} CallButton
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CallButton.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.TemplateButton.CallButton();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.displayText = $root.WAE2E.Message.HighlyStructuredMessage.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.phoneNumber = $root.WAE2E.Message.HighlyStructuredMessage.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CallButton message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.TemplateButton.CallButton
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.TemplateButton.CallButton} CallButton
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CallButton.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CallButton message.
             * @function verify
             * @memberof WAE2E.TemplateButton.CallButton
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CallButton.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.displayText != null && message.hasOwnProperty("displayText")) {
                    var error = $root.WAE2E.Message.HighlyStructuredMessage.verify(message.displayText);
                    if (error)
                        return "displayText." + error;
                }
                if (message.phoneNumber != null && message.hasOwnProperty("phoneNumber")) {
                    var error = $root.WAE2E.Message.HighlyStructuredMessage.verify(message.phoneNumber);
                    if (error)
                        return "phoneNumber." + error;
                }
                return null;
            };

            /**
             * Creates a CallButton message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.TemplateButton.CallButton
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.TemplateButton.CallButton} CallButton
             */
            CallButton.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.TemplateButton.CallButton)
                    return object;
                var message = new $root.WAE2E.TemplateButton.CallButton();
                if (object.displayText != null) {
                    if (typeof object.displayText !== "object")
                        throw TypeError(".WAE2E.TemplateButton.CallButton.displayText: object expected");
                    message.displayText = $root.WAE2E.Message.HighlyStructuredMessage.fromObject(object.displayText);
                }
                if (object.phoneNumber != null) {
                    if (typeof object.phoneNumber !== "object")
                        throw TypeError(".WAE2E.TemplateButton.CallButton.phoneNumber: object expected");
                    message.phoneNumber = $root.WAE2E.Message.HighlyStructuredMessage.fromObject(object.phoneNumber);
                }
                return message;
            };

            /**
             * Creates a plain object from a CallButton message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.TemplateButton.CallButton
             * @static
             * @param {WAE2E.TemplateButton.CallButton} message CallButton
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CallButton.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.displayText = null;
                    object.phoneNumber = null;
                }
                if (message.displayText != null && message.hasOwnProperty("displayText"))
                    object.displayText = $root.WAE2E.Message.HighlyStructuredMessage.toObject(message.displayText, options);
                if (message.phoneNumber != null && message.hasOwnProperty("phoneNumber"))
                    object.phoneNumber = $root.WAE2E.Message.HighlyStructuredMessage.toObject(message.phoneNumber, options);
                return object;
            };

            /**
             * Converts this CallButton to JSON.
             * @function toJSON
             * @memberof WAE2E.TemplateButton.CallButton
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CallButton.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CallButton
             * @function getTypeUrl
             * @memberof WAE2E.TemplateButton.CallButton
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CallButton.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.TemplateButton.CallButton";
            };

            return CallButton;
        })();

        TemplateButton.URLButton = (function() {

            /**
             * Properties of a URLButton.
             * @memberof WAE2E.TemplateButton
             * @interface IURLButton
             * @property {WAE2E.Message.IHighlyStructuredMessage|null} [displayText] URLButton displayText
             * @property {WAE2E.Message.IHighlyStructuredMessage|null} [URL] URLButton URL
             */

            /**
             * Constructs a new URLButton.
             * @memberof WAE2E.TemplateButton
             * @classdesc Represents a URLButton.
             * @implements IURLButton
             * @constructor
             * @param {WAE2E.TemplateButton.IURLButton=} [properties] Properties to set
             */
            function URLButton(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * URLButton displayText.
             * @member {WAE2E.Message.IHighlyStructuredMessage|null|undefined} displayText
             * @memberof WAE2E.TemplateButton.URLButton
             * @instance
             */
            URLButton.prototype.displayText = null;

            /**
             * URLButton URL.
             * @member {WAE2E.Message.IHighlyStructuredMessage|null|undefined} URL
             * @memberof WAE2E.TemplateButton.URLButton
             * @instance
             */
            URLButton.prototype.URL = null;

            /**
             * Creates a new URLButton instance using the specified properties.
             * @function create
             * @memberof WAE2E.TemplateButton.URLButton
             * @static
             * @param {WAE2E.TemplateButton.IURLButton=} [properties] Properties to set
             * @returns {WAE2E.TemplateButton.URLButton} URLButton instance
             */
            URLButton.create = function create(properties) {
                return new URLButton(properties);
            };

            /**
             * Encodes the specified URLButton message. Does not implicitly {@link WAE2E.TemplateButton.URLButton.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.TemplateButton.URLButton
             * @static
             * @param {WAE2E.TemplateButton.IURLButton} message URLButton message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            URLButton.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.displayText != null && Object.hasOwnProperty.call(message, "displayText"))
                    $root.WAE2E.Message.HighlyStructuredMessage.encode(message.displayText, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.URL != null && Object.hasOwnProperty.call(message, "URL"))
                    $root.WAE2E.Message.HighlyStructuredMessage.encode(message.URL, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified URLButton message, length delimited. Does not implicitly {@link WAE2E.TemplateButton.URLButton.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.TemplateButton.URLButton
             * @static
             * @param {WAE2E.TemplateButton.IURLButton} message URLButton message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            URLButton.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a URLButton message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.TemplateButton.URLButton
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.TemplateButton.URLButton} URLButton
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            URLButton.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.TemplateButton.URLButton();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.displayText = $root.WAE2E.Message.HighlyStructuredMessage.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.URL = $root.WAE2E.Message.HighlyStructuredMessage.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a URLButton message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.TemplateButton.URLButton
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.TemplateButton.URLButton} URLButton
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            URLButton.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a URLButton message.
             * @function verify
             * @memberof WAE2E.TemplateButton.URLButton
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            URLButton.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.displayText != null && message.hasOwnProperty("displayText")) {
                    var error = $root.WAE2E.Message.HighlyStructuredMessage.verify(message.displayText);
                    if (error)
                        return "displayText." + error;
                }
                if (message.URL != null && message.hasOwnProperty("URL")) {
                    var error = $root.WAE2E.Message.HighlyStructuredMessage.verify(message.URL);
                    if (error)
                        return "URL." + error;
                }
                return null;
            };

            /**
             * Creates a URLButton message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.TemplateButton.URLButton
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.TemplateButton.URLButton} URLButton
             */
            URLButton.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.TemplateButton.URLButton)
                    return object;
                var message = new $root.WAE2E.TemplateButton.URLButton();
                if (object.displayText != null) {
                    if (typeof object.displayText !== "object")
                        throw TypeError(".WAE2E.TemplateButton.URLButton.displayText: object expected");
                    message.displayText = $root.WAE2E.Message.HighlyStructuredMessage.fromObject(object.displayText);
                }
                if (object.URL != null) {
                    if (typeof object.URL !== "object")
                        throw TypeError(".WAE2E.TemplateButton.URLButton.URL: object expected");
                    message.URL = $root.WAE2E.Message.HighlyStructuredMessage.fromObject(object.URL);
                }
                return message;
            };

            /**
             * Creates a plain object from a URLButton message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.TemplateButton.URLButton
             * @static
             * @param {WAE2E.TemplateButton.URLButton} message URLButton
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            URLButton.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.displayText = null;
                    object.URL = null;
                }
                if (message.displayText != null && message.hasOwnProperty("displayText"))
                    object.displayText = $root.WAE2E.Message.HighlyStructuredMessage.toObject(message.displayText, options);
                if (message.URL != null && message.hasOwnProperty("URL"))
                    object.URL = $root.WAE2E.Message.HighlyStructuredMessage.toObject(message.URL, options);
                return object;
            };

            /**
             * Converts this URLButton to JSON.
             * @function toJSON
             * @memberof WAE2E.TemplateButton.URLButton
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            URLButton.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for URLButton
             * @function getTypeUrl
             * @memberof WAE2E.TemplateButton.URLButton
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            URLButton.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.TemplateButton.URLButton";
            };

            return URLButton;
        })();

        TemplateButton.QuickReplyButton = (function() {

            /**
             * Properties of a QuickReplyButton.
             * @memberof WAE2E.TemplateButton
             * @interface IQuickReplyButton
             * @property {WAE2E.Message.IHighlyStructuredMessage|null} [displayText] QuickReplyButton displayText
             * @property {string|null} [ID] QuickReplyButton ID
             */

            /**
             * Constructs a new QuickReplyButton.
             * @memberof WAE2E.TemplateButton
             * @classdesc Represents a QuickReplyButton.
             * @implements IQuickReplyButton
             * @constructor
             * @param {WAE2E.TemplateButton.IQuickReplyButton=} [properties] Properties to set
             */
            function QuickReplyButton(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * QuickReplyButton displayText.
             * @member {WAE2E.Message.IHighlyStructuredMessage|null|undefined} displayText
             * @memberof WAE2E.TemplateButton.QuickReplyButton
             * @instance
             */
            QuickReplyButton.prototype.displayText = null;

            /**
             * QuickReplyButton ID.
             * @member {string} ID
             * @memberof WAE2E.TemplateButton.QuickReplyButton
             * @instance
             */
            QuickReplyButton.prototype.ID = "";

            /**
             * Creates a new QuickReplyButton instance using the specified properties.
             * @function create
             * @memberof WAE2E.TemplateButton.QuickReplyButton
             * @static
             * @param {WAE2E.TemplateButton.IQuickReplyButton=} [properties] Properties to set
             * @returns {WAE2E.TemplateButton.QuickReplyButton} QuickReplyButton instance
             */
            QuickReplyButton.create = function create(properties) {
                return new QuickReplyButton(properties);
            };

            /**
             * Encodes the specified QuickReplyButton message. Does not implicitly {@link WAE2E.TemplateButton.QuickReplyButton.verify|verify} messages.
             * @function encode
             * @memberof WAE2E.TemplateButton.QuickReplyButton
             * @static
             * @param {WAE2E.TemplateButton.IQuickReplyButton} message QuickReplyButton message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QuickReplyButton.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.displayText != null && Object.hasOwnProperty.call(message, "displayText"))
                    $root.WAE2E.Message.HighlyStructuredMessage.encode(message.displayText, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.ID != null && Object.hasOwnProperty.call(message, "ID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.ID);
                return writer;
            };

            /**
             * Encodes the specified QuickReplyButton message, length delimited. Does not implicitly {@link WAE2E.TemplateButton.QuickReplyButton.verify|verify} messages.
             * @function encodeDelimited
             * @memberof WAE2E.TemplateButton.QuickReplyButton
             * @static
             * @param {WAE2E.TemplateButton.IQuickReplyButton} message QuickReplyButton message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QuickReplyButton.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a QuickReplyButton message from the specified reader or buffer.
             * @function decode
             * @memberof WAE2E.TemplateButton.QuickReplyButton
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {WAE2E.TemplateButton.QuickReplyButton} QuickReplyButton
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QuickReplyButton.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.TemplateButton.QuickReplyButton();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.displayText = $root.WAE2E.Message.HighlyStructuredMessage.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.ID = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a QuickReplyButton message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof WAE2E.TemplateButton.QuickReplyButton
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {WAE2E.TemplateButton.QuickReplyButton} QuickReplyButton
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QuickReplyButton.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a QuickReplyButton message.
             * @function verify
             * @memberof WAE2E.TemplateButton.QuickReplyButton
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QuickReplyButton.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.displayText != null && message.hasOwnProperty("displayText")) {
                    var error = $root.WAE2E.Message.HighlyStructuredMessage.verify(message.displayText);
                    if (error)
                        return "displayText." + error;
                }
                if (message.ID != null && message.hasOwnProperty("ID"))
                    if (!$util.isString(message.ID))
                        return "ID: string expected";
                return null;
            };

            /**
             * Creates a QuickReplyButton message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof WAE2E.TemplateButton.QuickReplyButton
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {WAE2E.TemplateButton.QuickReplyButton} QuickReplyButton
             */
            QuickReplyButton.fromObject = function fromObject(object) {
                if (object instanceof $root.WAE2E.TemplateButton.QuickReplyButton)
                    return object;
                var message = new $root.WAE2E.TemplateButton.QuickReplyButton();
                if (object.displayText != null) {
                    if (typeof object.displayText !== "object")
                        throw TypeError(".WAE2E.TemplateButton.QuickReplyButton.displayText: object expected");
                    message.displayText = $root.WAE2E.Message.HighlyStructuredMessage.fromObject(object.displayText);
                }
                if (object.ID != null)
                    message.ID = String(object.ID);
                return message;
            };

            /**
             * Creates a plain object from a QuickReplyButton message. Also converts values to other types if specified.
             * @function toObject
             * @memberof WAE2E.TemplateButton.QuickReplyButton
             * @static
             * @param {WAE2E.TemplateButton.QuickReplyButton} message QuickReplyButton
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QuickReplyButton.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.displayText = null;
                    object.ID = "";
                }
                if (message.displayText != null && message.hasOwnProperty("displayText"))
                    object.displayText = $root.WAE2E.Message.HighlyStructuredMessage.toObject(message.displayText, options);
                if (message.ID != null && message.hasOwnProperty("ID"))
                    object.ID = message.ID;
                return object;
            };

            /**
             * Converts this QuickReplyButton to JSON.
             * @function toJSON
             * @memberof WAE2E.TemplateButton.QuickReplyButton
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QuickReplyButton.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for QuickReplyButton
             * @function getTypeUrl
             * @memberof WAE2E.TemplateButton.QuickReplyButton
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            QuickReplyButton.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/WAE2E.TemplateButton.QuickReplyButton";
            };

            return QuickReplyButton;
        })();

        return TemplateButton;
    })();

    WAE2E.Money = (function() {

        /**
         * Properties of a Money.
         * @memberof WAE2E
         * @interface IMoney
         * @property {number|Long|null} [value] Money value
         * @property {number|null} [offset] Money offset
         * @property {string|null} [currencyCode] Money currencyCode
         */

        /**
         * Constructs a new Money.
         * @memberof WAE2E
         * @classdesc Represents a Money.
         * @implements IMoney
         * @constructor
         * @param {WAE2E.IMoney=} [properties] Properties to set
         */
        function Money(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Money value.
         * @member {number|Long} value
         * @memberof WAE2E.Money
         * @instance
         */
        Money.prototype.value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Money offset.
         * @member {number} offset
         * @memberof WAE2E.Money
         * @instance
         */
        Money.prototype.offset = 0;

        /**
         * Money currencyCode.
         * @member {string} currencyCode
         * @memberof WAE2E.Money
         * @instance
         */
        Money.prototype.currencyCode = "";

        /**
         * Creates a new Money instance using the specified properties.
         * @function create
         * @memberof WAE2E.Money
         * @static
         * @param {WAE2E.IMoney=} [properties] Properties to set
         * @returns {WAE2E.Money} Money instance
         */
        Money.create = function create(properties) {
            return new Money(properties);
        };

        /**
         * Encodes the specified Money message. Does not implicitly {@link WAE2E.Money.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.Money
         * @static
         * @param {WAE2E.IMoney} message Money message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Money.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.value);
            if (message.offset != null && Object.hasOwnProperty.call(message, "offset"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.offset);
            if (message.currencyCode != null && Object.hasOwnProperty.call(message, "currencyCode"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.currencyCode);
            return writer;
        };

        /**
         * Encodes the specified Money message, length delimited. Does not implicitly {@link WAE2E.Money.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.Money
         * @static
         * @param {WAE2E.IMoney} message Money message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Money.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Money message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.Money
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.Money} Money
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Money.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.Money();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.value = reader.int64();
                        break;
                    }
                case 2: {
                        message.offset = reader.uint32();
                        break;
                    }
                case 3: {
                        message.currencyCode = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Money message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.Money
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.Money} Money
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Money.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Money message.
         * @function verify
         * @memberof WAE2E.Money
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Money.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                if (!$util.isInteger(message.value) && !(message.value && $util.isInteger(message.value.low) && $util.isInteger(message.value.high)))
                    return "value: integer|Long expected";
            if (message.offset != null && message.hasOwnProperty("offset"))
                if (!$util.isInteger(message.offset))
                    return "offset: integer expected";
            if (message.currencyCode != null && message.hasOwnProperty("currencyCode"))
                if (!$util.isString(message.currencyCode))
                    return "currencyCode: string expected";
            return null;
        };

        /**
         * Creates a Money message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.Money
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.Money} Money
         */
        Money.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.Money)
                return object;
            var message = new $root.WAE2E.Money();
            if (object.value != null)
                if ($util.Long)
                    (message.value = $util.Long.fromValue(object.value)).unsigned = false;
                else if (typeof object.value === "string")
                    message.value = parseInt(object.value, 10);
                else if (typeof object.value === "number")
                    message.value = object.value;
                else if (typeof object.value === "object")
                    message.value = new $util.LongBits(object.value.low >>> 0, object.value.high >>> 0).toNumber();
            if (object.offset != null)
                message.offset = object.offset >>> 0;
            if (object.currencyCode != null)
                message.currencyCode = String(object.currencyCode);
            return message;
        };

        /**
         * Creates a plain object from a Money message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.Money
         * @static
         * @param {WAE2E.Money} message Money
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Money.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.value = options.longs === String ? "0" : 0;
                object.offset = 0;
                object.currencyCode = "";
            }
            if (message.value != null && message.hasOwnProperty("value"))
                if (typeof message.value === "number")
                    object.value = options.longs === String ? String(message.value) : message.value;
                else
                    object.value = options.longs === String ? $util.Long.prototype.toString.call(message.value) : options.longs === Number ? new $util.LongBits(message.value.low >>> 0, message.value.high >>> 0).toNumber() : message.value;
            if (message.offset != null && message.hasOwnProperty("offset"))
                object.offset = message.offset;
            if (message.currencyCode != null && message.hasOwnProperty("currencyCode"))
                object.currencyCode = message.currencyCode;
            return object;
        };

        /**
         * Converts this Money to JSON.
         * @function toJSON
         * @memberof WAE2E.Money
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Money.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for Money
         * @function getTypeUrl
         * @memberof WAE2E.Money
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        Money.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.Money";
        };

        return Money;
    })();

    WAE2E.ActionLink = (function() {

        /**
         * Properties of an ActionLink.
         * @memberof WAE2E
         * @interface IActionLink
         * @property {string|null} [URL] ActionLink URL
         * @property {string|null} [buttonTitle] ActionLink buttonTitle
         */

        /**
         * Constructs a new ActionLink.
         * @memberof WAE2E
         * @classdesc Represents an ActionLink.
         * @implements IActionLink
         * @constructor
         * @param {WAE2E.IActionLink=} [properties] Properties to set
         */
        function ActionLink(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ActionLink URL.
         * @member {string} URL
         * @memberof WAE2E.ActionLink
         * @instance
         */
        ActionLink.prototype.URL = "";

        /**
         * ActionLink buttonTitle.
         * @member {string} buttonTitle
         * @memberof WAE2E.ActionLink
         * @instance
         */
        ActionLink.prototype.buttonTitle = "";

        /**
         * Creates a new ActionLink instance using the specified properties.
         * @function create
         * @memberof WAE2E.ActionLink
         * @static
         * @param {WAE2E.IActionLink=} [properties] Properties to set
         * @returns {WAE2E.ActionLink} ActionLink instance
         */
        ActionLink.create = function create(properties) {
            return new ActionLink(properties);
        };

        /**
         * Encodes the specified ActionLink message. Does not implicitly {@link WAE2E.ActionLink.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.ActionLink
         * @static
         * @param {WAE2E.IActionLink} message ActionLink message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ActionLink.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.URL != null && Object.hasOwnProperty.call(message, "URL"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.URL);
            if (message.buttonTitle != null && Object.hasOwnProperty.call(message, "buttonTitle"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.buttonTitle);
            return writer;
        };

        /**
         * Encodes the specified ActionLink message, length delimited. Does not implicitly {@link WAE2E.ActionLink.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.ActionLink
         * @static
         * @param {WAE2E.IActionLink} message ActionLink message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ActionLink.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ActionLink message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.ActionLink
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.ActionLink} ActionLink
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ActionLink.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.ActionLink();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.URL = reader.string();
                        break;
                    }
                case 2: {
                        message.buttonTitle = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ActionLink message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.ActionLink
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.ActionLink} ActionLink
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ActionLink.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ActionLink message.
         * @function verify
         * @memberof WAE2E.ActionLink
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ActionLink.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.URL != null && message.hasOwnProperty("URL"))
                if (!$util.isString(message.URL))
                    return "URL: string expected";
            if (message.buttonTitle != null && message.hasOwnProperty("buttonTitle"))
                if (!$util.isString(message.buttonTitle))
                    return "buttonTitle: string expected";
            return null;
        };

        /**
         * Creates an ActionLink message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.ActionLink
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.ActionLink} ActionLink
         */
        ActionLink.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.ActionLink)
                return object;
            var message = new $root.WAE2E.ActionLink();
            if (object.URL != null)
                message.URL = String(object.URL);
            if (object.buttonTitle != null)
                message.buttonTitle = String(object.buttonTitle);
            return message;
        };

        /**
         * Creates a plain object from an ActionLink message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.ActionLink
         * @static
         * @param {WAE2E.ActionLink} message ActionLink
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ActionLink.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.URL = "";
                object.buttonTitle = "";
            }
            if (message.URL != null && message.hasOwnProperty("URL"))
                object.URL = message.URL;
            if (message.buttonTitle != null && message.hasOwnProperty("buttonTitle"))
                object.buttonTitle = message.buttonTitle;
            return object;
        };

        /**
         * Converts this ActionLink to JSON.
         * @function toJSON
         * @memberof WAE2E.ActionLink
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ActionLink.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for ActionLink
         * @function getTypeUrl
         * @memberof WAE2E.ActionLink
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        ActionLink.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.ActionLink";
        };

        return ActionLink;
    })();

    WAE2E.GroupMention = (function() {

        /**
         * Properties of a GroupMention.
         * @memberof WAE2E
         * @interface IGroupMention
         * @property {string|null} [groupJID] GroupMention groupJID
         * @property {string|null} [groupSubject] GroupMention groupSubject
         */

        /**
         * Constructs a new GroupMention.
         * @memberof WAE2E
         * @classdesc Represents a GroupMention.
         * @implements IGroupMention
         * @constructor
         * @param {WAE2E.IGroupMention=} [properties] Properties to set
         */
        function GroupMention(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GroupMention groupJID.
         * @member {string} groupJID
         * @memberof WAE2E.GroupMention
         * @instance
         */
        GroupMention.prototype.groupJID = "";

        /**
         * GroupMention groupSubject.
         * @member {string} groupSubject
         * @memberof WAE2E.GroupMention
         * @instance
         */
        GroupMention.prototype.groupSubject = "";

        /**
         * Creates a new GroupMention instance using the specified properties.
         * @function create
         * @memberof WAE2E.GroupMention
         * @static
         * @param {WAE2E.IGroupMention=} [properties] Properties to set
         * @returns {WAE2E.GroupMention} GroupMention instance
         */
        GroupMention.create = function create(properties) {
            return new GroupMention(properties);
        };

        /**
         * Encodes the specified GroupMention message. Does not implicitly {@link WAE2E.GroupMention.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.GroupMention
         * @static
         * @param {WAE2E.IGroupMention} message GroupMention message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroupMention.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupJID != null && Object.hasOwnProperty.call(message, "groupJID"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupJID);
            if (message.groupSubject != null && Object.hasOwnProperty.call(message, "groupSubject"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.groupSubject);
            return writer;
        };

        /**
         * Encodes the specified GroupMention message, length delimited. Does not implicitly {@link WAE2E.GroupMention.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.GroupMention
         * @static
         * @param {WAE2E.IGroupMention} message GroupMention message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GroupMention.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GroupMention message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.GroupMention
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.GroupMention} GroupMention
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroupMention.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.GroupMention();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.groupJID = reader.string();
                        break;
                    }
                case 2: {
                        message.groupSubject = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GroupMention message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.GroupMention
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.GroupMention} GroupMention
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GroupMention.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GroupMention message.
         * @function verify
         * @memberof WAE2E.GroupMention
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GroupMention.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupJID != null && message.hasOwnProperty("groupJID"))
                if (!$util.isString(message.groupJID))
                    return "groupJID: string expected";
            if (message.groupSubject != null && message.hasOwnProperty("groupSubject"))
                if (!$util.isString(message.groupSubject))
                    return "groupSubject: string expected";
            return null;
        };

        /**
         * Creates a GroupMention message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.GroupMention
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.GroupMention} GroupMention
         */
        GroupMention.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.GroupMention)
                return object;
            var message = new $root.WAE2E.GroupMention();
            if (object.groupJID != null)
                message.groupJID = String(object.groupJID);
            if (object.groupSubject != null)
                message.groupSubject = String(object.groupSubject);
            return message;
        };

        /**
         * Creates a plain object from a GroupMention message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.GroupMention
         * @static
         * @param {WAE2E.GroupMention} message GroupMention
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GroupMention.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.groupJID = "";
                object.groupSubject = "";
            }
            if (message.groupJID != null && message.hasOwnProperty("groupJID"))
                object.groupJID = message.groupJID;
            if (message.groupSubject != null && message.hasOwnProperty("groupSubject"))
                object.groupSubject = message.groupSubject;
            return object;
        };

        /**
         * Converts this GroupMention to JSON.
         * @function toJSON
         * @memberof WAE2E.GroupMention
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GroupMention.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for GroupMention
         * @function getTypeUrl
         * @memberof WAE2E.GroupMention
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        GroupMention.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.GroupMention";
        };

        return GroupMention;
    })();

    WAE2E.MessageSecretMessage = (function() {

        /**
         * Properties of a MessageSecretMessage.
         * @memberof WAE2E
         * @interface IMessageSecretMessage
         * @property {number|null} [version] MessageSecretMessage version
         * @property {Uint8Array|null} [encIV] MessageSecretMessage encIV
         * @property {Uint8Array|null} [encPayload] MessageSecretMessage encPayload
         */

        /**
         * Constructs a new MessageSecretMessage.
         * @memberof WAE2E
         * @classdesc Represents a MessageSecretMessage.
         * @implements IMessageSecretMessage
         * @constructor
         * @param {WAE2E.IMessageSecretMessage=} [properties] Properties to set
         */
        function MessageSecretMessage(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MessageSecretMessage version.
         * @member {number} version
         * @memberof WAE2E.MessageSecretMessage
         * @instance
         */
        MessageSecretMessage.prototype.version = 0;

        /**
         * MessageSecretMessage encIV.
         * @member {Uint8Array} encIV
         * @memberof WAE2E.MessageSecretMessage
         * @instance
         */
        MessageSecretMessage.prototype.encIV = $util.newBuffer([]);

        /**
         * MessageSecretMessage encPayload.
         * @member {Uint8Array} encPayload
         * @memberof WAE2E.MessageSecretMessage
         * @instance
         */
        MessageSecretMessage.prototype.encPayload = $util.newBuffer([]);

        /**
         * Creates a new MessageSecretMessage instance using the specified properties.
         * @function create
         * @memberof WAE2E.MessageSecretMessage
         * @static
         * @param {WAE2E.IMessageSecretMessage=} [properties] Properties to set
         * @returns {WAE2E.MessageSecretMessage} MessageSecretMessage instance
         */
        MessageSecretMessage.create = function create(properties) {
            return new MessageSecretMessage(properties);
        };

        /**
         * Encodes the specified MessageSecretMessage message. Does not implicitly {@link WAE2E.MessageSecretMessage.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.MessageSecretMessage
         * @static
         * @param {WAE2E.IMessageSecretMessage} message MessageSecretMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MessageSecretMessage.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                writer.uint32(/* id 1, wireType 5 =*/13).sfixed32(message.version);
            if (message.encIV != null && Object.hasOwnProperty.call(message, "encIV"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.encIV);
            if (message.encPayload != null && Object.hasOwnProperty.call(message, "encPayload"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.encPayload);
            return writer;
        };

        /**
         * Encodes the specified MessageSecretMessage message, length delimited. Does not implicitly {@link WAE2E.MessageSecretMessage.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.MessageSecretMessage
         * @static
         * @param {WAE2E.IMessageSecretMessage} message MessageSecretMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MessageSecretMessage.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MessageSecretMessage message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.MessageSecretMessage
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.MessageSecretMessage} MessageSecretMessage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MessageSecretMessage.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.MessageSecretMessage();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.version = reader.sfixed32();
                        break;
                    }
                case 2: {
                        message.encIV = reader.bytes();
                        break;
                    }
                case 3: {
                        message.encPayload = reader.bytes();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MessageSecretMessage message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.MessageSecretMessage
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.MessageSecretMessage} MessageSecretMessage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MessageSecretMessage.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MessageSecretMessage message.
         * @function verify
         * @memberof WAE2E.MessageSecretMessage
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MessageSecretMessage.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.version != null && message.hasOwnProperty("version"))
                if (!$util.isInteger(message.version))
                    return "version: integer expected";
            if (message.encIV != null && message.hasOwnProperty("encIV"))
                if (!(message.encIV && typeof message.encIV.length === "number" || $util.isString(message.encIV)))
                    return "encIV: buffer expected";
            if (message.encPayload != null && message.hasOwnProperty("encPayload"))
                if (!(message.encPayload && typeof message.encPayload.length === "number" || $util.isString(message.encPayload)))
                    return "encPayload: buffer expected";
            return null;
        };

        /**
         * Creates a MessageSecretMessage message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.MessageSecretMessage
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.MessageSecretMessage} MessageSecretMessage
         */
        MessageSecretMessage.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.MessageSecretMessage)
                return object;
            var message = new $root.WAE2E.MessageSecretMessage();
            if (object.version != null)
                message.version = object.version | 0;
            if (object.encIV != null)
                if (typeof object.encIV === "string")
                    $util.base64.decode(object.encIV, message.encIV = $util.newBuffer($util.base64.length(object.encIV)), 0);
                else if (object.encIV.length >= 0)
                    message.encIV = object.encIV;
            if (object.encPayload != null)
                if (typeof object.encPayload === "string")
                    $util.base64.decode(object.encPayload, message.encPayload = $util.newBuffer($util.base64.length(object.encPayload)), 0);
                else if (object.encPayload.length >= 0)
                    message.encPayload = object.encPayload;
            return message;
        };

        /**
         * Creates a plain object from a MessageSecretMessage message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.MessageSecretMessage
         * @static
         * @param {WAE2E.MessageSecretMessage} message MessageSecretMessage
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MessageSecretMessage.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.version = 0;
                if (options.bytes === String)
                    object.encIV = "";
                else {
                    object.encIV = [];
                    if (options.bytes !== Array)
                        object.encIV = $util.newBuffer(object.encIV);
                }
                if (options.bytes === String)
                    object.encPayload = "";
                else {
                    object.encPayload = [];
                    if (options.bytes !== Array)
                        object.encPayload = $util.newBuffer(object.encPayload);
                }
            }
            if (message.version != null && message.hasOwnProperty("version"))
                object.version = message.version;
            if (message.encIV != null && message.hasOwnProperty("encIV"))
                object.encIV = options.bytes === String ? $util.base64.encode(message.encIV, 0, message.encIV.length) : options.bytes === Array ? Array.prototype.slice.call(message.encIV) : message.encIV;
            if (message.encPayload != null && message.hasOwnProperty("encPayload"))
                object.encPayload = options.bytes === String ? $util.base64.encode(message.encPayload, 0, message.encPayload.length) : options.bytes === Array ? Array.prototype.slice.call(message.encPayload) : message.encPayload;
            return object;
        };

        /**
         * Converts this MessageSecretMessage to JSON.
         * @function toJSON
         * @memberof WAE2E.MessageSecretMessage
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MessageSecretMessage.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for MessageSecretMessage
         * @function getTypeUrl
         * @memberof WAE2E.MessageSecretMessage
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        MessageSecretMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.MessageSecretMessage";
        };

        return MessageSecretMessage;
    })();

    WAE2E.MediaNotifyMessage = (function() {

        /**
         * Properties of a MediaNotifyMessage.
         * @memberof WAE2E
         * @interface IMediaNotifyMessage
         * @property {string|null} [expressPathURL] MediaNotifyMessage expressPathURL
         * @property {Uint8Array|null} [fileEncSHA256] MediaNotifyMessage fileEncSHA256
         * @property {number|Long|null} [fileLength] MediaNotifyMessage fileLength
         */

        /**
         * Constructs a new MediaNotifyMessage.
         * @memberof WAE2E
         * @classdesc Represents a MediaNotifyMessage.
         * @implements IMediaNotifyMessage
         * @constructor
         * @param {WAE2E.IMediaNotifyMessage=} [properties] Properties to set
         */
        function MediaNotifyMessage(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MediaNotifyMessage expressPathURL.
         * @member {string} expressPathURL
         * @memberof WAE2E.MediaNotifyMessage
         * @instance
         */
        MediaNotifyMessage.prototype.expressPathURL = "";

        /**
         * MediaNotifyMessage fileEncSHA256.
         * @member {Uint8Array} fileEncSHA256
         * @memberof WAE2E.MediaNotifyMessage
         * @instance
         */
        MediaNotifyMessage.prototype.fileEncSHA256 = $util.newBuffer([]);

        /**
         * MediaNotifyMessage fileLength.
         * @member {number|Long} fileLength
         * @memberof WAE2E.MediaNotifyMessage
         * @instance
         */
        MediaNotifyMessage.prototype.fileLength = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new MediaNotifyMessage instance using the specified properties.
         * @function create
         * @memberof WAE2E.MediaNotifyMessage
         * @static
         * @param {WAE2E.IMediaNotifyMessage=} [properties] Properties to set
         * @returns {WAE2E.MediaNotifyMessage} MediaNotifyMessage instance
         */
        MediaNotifyMessage.create = function create(properties) {
            return new MediaNotifyMessage(properties);
        };

        /**
         * Encodes the specified MediaNotifyMessage message. Does not implicitly {@link WAE2E.MediaNotifyMessage.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.MediaNotifyMessage
         * @static
         * @param {WAE2E.IMediaNotifyMessage} message MediaNotifyMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MediaNotifyMessage.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.expressPathURL != null && Object.hasOwnProperty.call(message, "expressPathURL"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.expressPathURL);
            if (message.fileEncSHA256 != null && Object.hasOwnProperty.call(message, "fileEncSHA256"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.fileEncSHA256);
            if (message.fileLength != null && Object.hasOwnProperty.call(message, "fileLength"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.fileLength);
            return writer;
        };

        /**
         * Encodes the specified MediaNotifyMessage message, length delimited. Does not implicitly {@link WAE2E.MediaNotifyMessage.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.MediaNotifyMessage
         * @static
         * @param {WAE2E.IMediaNotifyMessage} message MediaNotifyMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MediaNotifyMessage.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MediaNotifyMessage message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.MediaNotifyMessage
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.MediaNotifyMessage} MediaNotifyMessage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MediaNotifyMessage.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.MediaNotifyMessage();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.expressPathURL = reader.string();
                        break;
                    }
                case 2: {
                        message.fileEncSHA256 = reader.bytes();
                        break;
                    }
                case 3: {
                        message.fileLength = reader.uint64();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MediaNotifyMessage message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.MediaNotifyMessage
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.MediaNotifyMessage} MediaNotifyMessage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MediaNotifyMessage.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MediaNotifyMessage message.
         * @function verify
         * @memberof WAE2E.MediaNotifyMessage
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MediaNotifyMessage.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.expressPathURL != null && message.hasOwnProperty("expressPathURL"))
                if (!$util.isString(message.expressPathURL))
                    return "expressPathURL: string expected";
            if (message.fileEncSHA256 != null && message.hasOwnProperty("fileEncSHA256"))
                if (!(message.fileEncSHA256 && typeof message.fileEncSHA256.length === "number" || $util.isString(message.fileEncSHA256)))
                    return "fileEncSHA256: buffer expected";
            if (message.fileLength != null && message.hasOwnProperty("fileLength"))
                if (!$util.isInteger(message.fileLength) && !(message.fileLength && $util.isInteger(message.fileLength.low) && $util.isInteger(message.fileLength.high)))
                    return "fileLength: integer|Long expected";
            return null;
        };

        /**
         * Creates a MediaNotifyMessage message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.MediaNotifyMessage
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.MediaNotifyMessage} MediaNotifyMessage
         */
        MediaNotifyMessage.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.MediaNotifyMessage)
                return object;
            var message = new $root.WAE2E.MediaNotifyMessage();
            if (object.expressPathURL != null)
                message.expressPathURL = String(object.expressPathURL);
            if (object.fileEncSHA256 != null)
                if (typeof object.fileEncSHA256 === "string")
                    $util.base64.decode(object.fileEncSHA256, message.fileEncSHA256 = $util.newBuffer($util.base64.length(object.fileEncSHA256)), 0);
                else if (object.fileEncSHA256.length >= 0)
                    message.fileEncSHA256 = object.fileEncSHA256;
            if (object.fileLength != null)
                if ($util.Long)
                    (message.fileLength = $util.Long.fromValue(object.fileLength)).unsigned = true;
                else if (typeof object.fileLength === "string")
                    message.fileLength = parseInt(object.fileLength, 10);
                else if (typeof object.fileLength === "number")
                    message.fileLength = object.fileLength;
                else if (typeof object.fileLength === "object")
                    message.fileLength = new $util.LongBits(object.fileLength.low >>> 0, object.fileLength.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a MediaNotifyMessage message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.MediaNotifyMessage
         * @static
         * @param {WAE2E.MediaNotifyMessage} message MediaNotifyMessage
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MediaNotifyMessage.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.expressPathURL = "";
                if (options.bytes === String)
                    object.fileEncSHA256 = "";
                else {
                    object.fileEncSHA256 = [];
                    if (options.bytes !== Array)
                        object.fileEncSHA256 = $util.newBuffer(object.fileEncSHA256);
                }
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.fileLength = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.fileLength = options.longs === String ? "0" : 0;
            }
            if (message.expressPathURL != null && message.hasOwnProperty("expressPathURL"))
                object.expressPathURL = message.expressPathURL;
            if (message.fileEncSHA256 != null && message.hasOwnProperty("fileEncSHA256"))
                object.fileEncSHA256 = options.bytes === String ? $util.base64.encode(message.fileEncSHA256, 0, message.fileEncSHA256.length) : options.bytes === Array ? Array.prototype.slice.call(message.fileEncSHA256) : message.fileEncSHA256;
            if (message.fileLength != null && message.hasOwnProperty("fileLength"))
                if (typeof message.fileLength === "number")
                    object.fileLength = options.longs === String ? String(message.fileLength) : message.fileLength;
                else
                    object.fileLength = options.longs === String ? $util.Long.prototype.toString.call(message.fileLength) : options.longs === Number ? new $util.LongBits(message.fileLength.low >>> 0, message.fileLength.high >>> 0).toNumber(true) : message.fileLength;
            return object;
        };

        /**
         * Converts this MediaNotifyMessage to JSON.
         * @function toJSON
         * @memberof WAE2E.MediaNotifyMessage
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MediaNotifyMessage.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for MediaNotifyMessage
         * @function getTypeUrl
         * @memberof WAE2E.MediaNotifyMessage
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        MediaNotifyMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.MediaNotifyMessage";
        };

        return MediaNotifyMessage;
    })();

    WAE2E.LIDMigrationMappingSyncMessage = (function() {

        /**
         * Properties of a LIDMigrationMappingSyncMessage.
         * @memberof WAE2E
         * @interface ILIDMigrationMappingSyncMessage
         * @property {Uint8Array|null} [encodedMappingPayload] LIDMigrationMappingSyncMessage encodedMappingPayload
         */

        /**
         * Constructs a new LIDMigrationMappingSyncMessage.
         * @memberof WAE2E
         * @classdesc Represents a LIDMigrationMappingSyncMessage.
         * @implements ILIDMigrationMappingSyncMessage
         * @constructor
         * @param {WAE2E.ILIDMigrationMappingSyncMessage=} [properties] Properties to set
         */
        function LIDMigrationMappingSyncMessage(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LIDMigrationMappingSyncMessage encodedMappingPayload.
         * @member {Uint8Array} encodedMappingPayload
         * @memberof WAE2E.LIDMigrationMappingSyncMessage
         * @instance
         */
        LIDMigrationMappingSyncMessage.prototype.encodedMappingPayload = $util.newBuffer([]);

        /**
         * Creates a new LIDMigrationMappingSyncMessage instance using the specified properties.
         * @function create
         * @memberof WAE2E.LIDMigrationMappingSyncMessage
         * @static
         * @param {WAE2E.ILIDMigrationMappingSyncMessage=} [properties] Properties to set
         * @returns {WAE2E.LIDMigrationMappingSyncMessage} LIDMigrationMappingSyncMessage instance
         */
        LIDMigrationMappingSyncMessage.create = function create(properties) {
            return new LIDMigrationMappingSyncMessage(properties);
        };

        /**
         * Encodes the specified LIDMigrationMappingSyncMessage message. Does not implicitly {@link WAE2E.LIDMigrationMappingSyncMessage.verify|verify} messages.
         * @function encode
         * @memberof WAE2E.LIDMigrationMappingSyncMessage
         * @static
         * @param {WAE2E.ILIDMigrationMappingSyncMessage} message LIDMigrationMappingSyncMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LIDMigrationMappingSyncMessage.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.encodedMappingPayload != null && Object.hasOwnProperty.call(message, "encodedMappingPayload"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.encodedMappingPayload);
            return writer;
        };

        /**
         * Encodes the specified LIDMigrationMappingSyncMessage message, length delimited. Does not implicitly {@link WAE2E.LIDMigrationMappingSyncMessage.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAE2E.LIDMigrationMappingSyncMessage
         * @static
         * @param {WAE2E.ILIDMigrationMappingSyncMessage} message LIDMigrationMappingSyncMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LIDMigrationMappingSyncMessage.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LIDMigrationMappingSyncMessage message from the specified reader or buffer.
         * @function decode
         * @memberof WAE2E.LIDMigrationMappingSyncMessage
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAE2E.LIDMigrationMappingSyncMessage} LIDMigrationMappingSyncMessage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LIDMigrationMappingSyncMessage.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAE2E.LIDMigrationMappingSyncMessage();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.encodedMappingPayload = reader.bytes();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LIDMigrationMappingSyncMessage message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAE2E.LIDMigrationMappingSyncMessage
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAE2E.LIDMigrationMappingSyncMessage} LIDMigrationMappingSyncMessage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LIDMigrationMappingSyncMessage.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LIDMigrationMappingSyncMessage message.
         * @function verify
         * @memberof WAE2E.LIDMigrationMappingSyncMessage
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LIDMigrationMappingSyncMessage.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.encodedMappingPayload != null && message.hasOwnProperty("encodedMappingPayload"))
                if (!(message.encodedMappingPayload && typeof message.encodedMappingPayload.length === "number" || $util.isString(message.encodedMappingPayload)))
                    return "encodedMappingPayload: buffer expected";
            return null;
        };

        /**
         * Creates a LIDMigrationMappingSyncMessage message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAE2E.LIDMigrationMappingSyncMessage
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAE2E.LIDMigrationMappingSyncMessage} LIDMigrationMappingSyncMessage
         */
        LIDMigrationMappingSyncMessage.fromObject = function fromObject(object) {
            if (object instanceof $root.WAE2E.LIDMigrationMappingSyncMessage)
                return object;
            var message = new $root.WAE2E.LIDMigrationMappingSyncMessage();
            if (object.encodedMappingPayload != null)
                if (typeof object.encodedMappingPayload === "string")
                    $util.base64.decode(object.encodedMappingPayload, message.encodedMappingPayload = $util.newBuffer($util.base64.length(object.encodedMappingPayload)), 0);
                else if (object.encodedMappingPayload.length >= 0)
                    message.encodedMappingPayload = object.encodedMappingPayload;
            return message;
        };

        /**
         * Creates a plain object from a LIDMigrationMappingSyncMessage message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAE2E.LIDMigrationMappingSyncMessage
         * @static
         * @param {WAE2E.LIDMigrationMappingSyncMessage} message LIDMigrationMappingSyncMessage
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LIDMigrationMappingSyncMessage.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if (options.bytes === String)
                    object.encodedMappingPayload = "";
                else {
                    object.encodedMappingPayload = [];
                    if (options.bytes !== Array)
                        object.encodedMappingPayload = $util.newBuffer(object.encodedMappingPayload);
                }
            if (message.encodedMappingPayload != null && message.hasOwnProperty("encodedMappingPayload"))
                object.encodedMappingPayload = options.bytes === String ? $util.base64.encode(message.encodedMappingPayload, 0, message.encodedMappingPayload.length) : options.bytes === Array ? Array.prototype.slice.call(message.encodedMappingPayload) : message.encodedMappingPayload;
            return object;
        };

        /**
         * Converts this LIDMigrationMappingSyncMessage to JSON.
         * @function toJSON
         * @memberof WAE2E.LIDMigrationMappingSyncMessage
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LIDMigrationMappingSyncMessage.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for LIDMigrationMappingSyncMessage
         * @function getTypeUrl
         * @memberof WAE2E.LIDMigrationMappingSyncMessage
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        LIDMigrationMappingSyncMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAE2E.LIDMigrationMappingSyncMessage";
        };

        return LIDMigrationMappingSyncMessage;
    })();

    return WAE2E;
})();

$root.WAAdv = (function() {

    /**
     * Namespace WAAdv.
     * @exports WAAdv
     * @namespace
     */
    var WAAdv = {};

    /**
     * ADVEncryptionType enum.
     * @name WAAdv.ADVEncryptionType
     * @enum {number}
     * @property {number} E2EE=0 E2EE value
     * @property {number} HOSTED=1 HOSTED value
     */
    WAAdv.ADVEncryptionType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "E2EE"] = 0;
        values[valuesById[1] = "HOSTED"] = 1;
        return values;
    })();

    WAAdv.ADVKeyIndexList = (function() {

        /**
         * Properties of a ADVKeyIndexList.
         * @memberof WAAdv
         * @interface IADVKeyIndexList
         * @property {number|null} [rawID] ADVKeyIndexList rawID
         * @property {number|Long|null} [timestamp] ADVKeyIndexList timestamp
         * @property {number|null} [currentIndex] ADVKeyIndexList currentIndex
         * @property {Array.<number>|null} [validIndexes] ADVKeyIndexList validIndexes
         * @property {WAAdv.ADVEncryptionType|null} [accountType] ADVKeyIndexList accountType
         */

        /**
         * Constructs a new ADVKeyIndexList.
         * @memberof WAAdv
         * @classdesc Represents a ADVKeyIndexList.
         * @implements IADVKeyIndexList
         * @constructor
         * @param {WAAdv.IADVKeyIndexList=} [properties] Properties to set
         */
        function ADVKeyIndexList(properties) {
            this.validIndexes = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ADVKeyIndexList rawID.
         * @member {number} rawID
         * @memberof WAAdv.ADVKeyIndexList
         * @instance
         */
        ADVKeyIndexList.prototype.rawID = 0;

        /**
         * ADVKeyIndexList timestamp.
         * @member {number|Long} timestamp
         * @memberof WAAdv.ADVKeyIndexList
         * @instance
         */
        ADVKeyIndexList.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * ADVKeyIndexList currentIndex.
         * @member {number} currentIndex
         * @memberof WAAdv.ADVKeyIndexList
         * @instance
         */
        ADVKeyIndexList.prototype.currentIndex = 0;

        /**
         * ADVKeyIndexList validIndexes.
         * @member {Array.<number>} validIndexes
         * @memberof WAAdv.ADVKeyIndexList
         * @instance
         */
        ADVKeyIndexList.prototype.validIndexes = $util.emptyArray;

        /**
         * ADVKeyIndexList accountType.
         * @member {WAAdv.ADVEncryptionType} accountType
         * @memberof WAAdv.ADVKeyIndexList
         * @instance
         */
        ADVKeyIndexList.prototype.accountType = 0;

        /**
         * Creates a new ADVKeyIndexList instance using the specified properties.
         * @function create
         * @memberof WAAdv.ADVKeyIndexList
         * @static
         * @param {WAAdv.IADVKeyIndexList=} [properties] Properties to set
         * @returns {WAAdv.ADVKeyIndexList} ADVKeyIndexList instance
         */
        ADVKeyIndexList.create = function create(properties) {
            return new ADVKeyIndexList(properties);
        };

        /**
         * Encodes the specified ADVKeyIndexList message. Does not implicitly {@link WAAdv.ADVKeyIndexList.verify|verify} messages.
         * @function encode
         * @memberof WAAdv.ADVKeyIndexList
         * @static
         * @param {WAAdv.IADVKeyIndexList} message ADVKeyIndexList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ADVKeyIndexList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rawID != null && Object.hasOwnProperty.call(message, "rawID"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rawID);
            if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.timestamp);
            if (message.currentIndex != null && Object.hasOwnProperty.call(message, "currentIndex"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.currentIndex);
            if (message.validIndexes != null && message.validIndexes.length) {
                writer.uint32(/* id 4, wireType 2 =*/34).fork();
                for (var i = 0; i < message.validIndexes.length; ++i)
                    writer.uint32(message.validIndexes[i]);
                writer.ldelim();
            }
            if (message.accountType != null && Object.hasOwnProperty.call(message, "accountType"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.accountType);
            return writer;
        };

        /**
         * Encodes the specified ADVKeyIndexList message, length delimited. Does not implicitly {@link WAAdv.ADVKeyIndexList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAAdv.ADVKeyIndexList
         * @static
         * @param {WAAdv.IADVKeyIndexList} message ADVKeyIndexList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ADVKeyIndexList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ADVKeyIndexList message from the specified reader or buffer.
         * @function decode
         * @memberof WAAdv.ADVKeyIndexList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAAdv.ADVKeyIndexList} ADVKeyIndexList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ADVKeyIndexList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAAdv.ADVKeyIndexList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.rawID = reader.uint32();
                        break;
                    }
                case 2: {
                        message.timestamp = reader.uint64();
                        break;
                    }
                case 3: {
                        message.currentIndex = reader.uint32();
                        break;
                    }
                case 4: {
                        if (!(message.validIndexes && message.validIndexes.length))
                            message.validIndexes = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.validIndexes.push(reader.uint32());
                        } else
                            message.validIndexes.push(reader.uint32());
                        break;
                    }
                case 5: {
                        message.accountType = reader.int32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ADVKeyIndexList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAAdv.ADVKeyIndexList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAAdv.ADVKeyIndexList} ADVKeyIndexList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ADVKeyIndexList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ADVKeyIndexList message.
         * @function verify
         * @memberof WAAdv.ADVKeyIndexList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ADVKeyIndexList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rawID != null && message.hasOwnProperty("rawID"))
                if (!$util.isInteger(message.rawID))
                    return "rawID: integer expected";
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                    return "timestamp: integer|Long expected";
            if (message.currentIndex != null && message.hasOwnProperty("currentIndex"))
                if (!$util.isInteger(message.currentIndex))
                    return "currentIndex: integer expected";
            if (message.validIndexes != null && message.hasOwnProperty("validIndexes")) {
                if (!Array.isArray(message.validIndexes))
                    return "validIndexes: array expected";
                for (var i = 0; i < message.validIndexes.length; ++i)
                    if (!$util.isInteger(message.validIndexes[i]))
                        return "validIndexes: integer[] expected";
            }
            if (message.accountType != null && message.hasOwnProperty("accountType"))
                switch (message.accountType) {
                default:
                    return "accountType: enum value expected";
                case 0:
                case 1:
                    break;
                }
            return null;
        };

        /**
         * Creates a ADVKeyIndexList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAAdv.ADVKeyIndexList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAAdv.ADVKeyIndexList} ADVKeyIndexList
         */
        ADVKeyIndexList.fromObject = function fromObject(object) {
            if (object instanceof $root.WAAdv.ADVKeyIndexList)
                return object;
            var message = new $root.WAAdv.ADVKeyIndexList();
            if (object.rawID != null)
                message.rawID = object.rawID >>> 0;
            if (object.timestamp != null)
                if ($util.Long)
                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                else if (typeof object.timestamp === "string")
                    message.timestamp = parseInt(object.timestamp, 10);
                else if (typeof object.timestamp === "number")
                    message.timestamp = object.timestamp;
                else if (typeof object.timestamp === "object")
                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
            if (object.currentIndex != null)
                message.currentIndex = object.currentIndex >>> 0;
            if (object.validIndexes) {
                if (!Array.isArray(object.validIndexes))
                    throw TypeError(".WAAdv.ADVKeyIndexList.validIndexes: array expected");
                message.validIndexes = [];
                for (var i = 0; i < object.validIndexes.length; ++i)
                    message.validIndexes[i] = object.validIndexes[i] >>> 0;
            }
            switch (object.accountType) {
            default:
                if (typeof object.accountType === "number") {
                    message.accountType = object.accountType;
                    break;
                }
                break;
            case "E2EE":
            case 0:
                message.accountType = 0;
                break;
            case "HOSTED":
            case 1:
                message.accountType = 1;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a ADVKeyIndexList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAAdv.ADVKeyIndexList
         * @static
         * @param {WAAdv.ADVKeyIndexList} message ADVKeyIndexList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ADVKeyIndexList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.validIndexes = [];
            if (options.defaults) {
                object.rawID = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.timestamp = options.longs === String ? "0" : 0;
                object.currentIndex = 0;
                object.accountType = options.enums === String ? "E2EE" : 0;
            }
            if (message.rawID != null && message.hasOwnProperty("rawID"))
                object.rawID = message.rawID;
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (typeof message.timestamp === "number")
                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                else
                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
            if (message.currentIndex != null && message.hasOwnProperty("currentIndex"))
                object.currentIndex = message.currentIndex;
            if (message.validIndexes && message.validIndexes.length) {
                object.validIndexes = [];
                for (var j = 0; j < message.validIndexes.length; ++j)
                    object.validIndexes[j] = message.validIndexes[j];
            }
            if (message.accountType != null && message.hasOwnProperty("accountType"))
                object.accountType = options.enums === String ? $root.WAAdv.ADVEncryptionType[message.accountType] === undefined ? message.accountType : $root.WAAdv.ADVEncryptionType[message.accountType] : message.accountType;
            return object;
        };

        /**
         * Converts this ADVKeyIndexList to JSON.
         * @function toJSON
         * @memberof WAAdv.ADVKeyIndexList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ADVKeyIndexList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for ADVKeyIndexList
         * @function getTypeUrl
         * @memberof WAAdv.ADVKeyIndexList
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        ADVKeyIndexList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAAdv.ADVKeyIndexList";
        };

        return ADVKeyIndexList;
    })();

    WAAdv.ADVSignedKeyIndexList = (function() {

        /**
         * Properties of a ADVSignedKeyIndexList.
         * @memberof WAAdv
         * @interface IADVSignedKeyIndexList
         * @property {Uint8Array|null} [details] ADVSignedKeyIndexList details
         * @property {Uint8Array|null} [accountSignature] ADVSignedKeyIndexList accountSignature
         * @property {Uint8Array|null} [accountSignatureKey] ADVSignedKeyIndexList accountSignatureKey
         */

        /**
         * Constructs a new ADVSignedKeyIndexList.
         * @memberof WAAdv
         * @classdesc Represents a ADVSignedKeyIndexList.
         * @implements IADVSignedKeyIndexList
         * @constructor
         * @param {WAAdv.IADVSignedKeyIndexList=} [properties] Properties to set
         */
        function ADVSignedKeyIndexList(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ADVSignedKeyIndexList details.
         * @member {Uint8Array} details
         * @memberof WAAdv.ADVSignedKeyIndexList
         * @instance
         */
        ADVSignedKeyIndexList.prototype.details = $util.newBuffer([]);

        /**
         * ADVSignedKeyIndexList accountSignature.
         * @member {Uint8Array} accountSignature
         * @memberof WAAdv.ADVSignedKeyIndexList
         * @instance
         */
        ADVSignedKeyIndexList.prototype.accountSignature = $util.newBuffer([]);

        /**
         * ADVSignedKeyIndexList accountSignatureKey.
         * @member {Uint8Array} accountSignatureKey
         * @memberof WAAdv.ADVSignedKeyIndexList
         * @instance
         */
        ADVSignedKeyIndexList.prototype.accountSignatureKey = $util.newBuffer([]);

        /**
         * Creates a new ADVSignedKeyIndexList instance using the specified properties.
         * @function create
         * @memberof WAAdv.ADVSignedKeyIndexList
         * @static
         * @param {WAAdv.IADVSignedKeyIndexList=} [properties] Properties to set
         * @returns {WAAdv.ADVSignedKeyIndexList} ADVSignedKeyIndexList instance
         */
        ADVSignedKeyIndexList.create = function create(properties) {
            return new ADVSignedKeyIndexList(properties);
        };

        /**
         * Encodes the specified ADVSignedKeyIndexList message. Does not implicitly {@link WAAdv.ADVSignedKeyIndexList.verify|verify} messages.
         * @function encode
         * @memberof WAAdv.ADVSignedKeyIndexList
         * @static
         * @param {WAAdv.IADVSignedKeyIndexList} message ADVSignedKeyIndexList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ADVSignedKeyIndexList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.details != null && Object.hasOwnProperty.call(message, "details"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.details);
            if (message.accountSignature != null && Object.hasOwnProperty.call(message, "accountSignature"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.accountSignature);
            if (message.accountSignatureKey != null && Object.hasOwnProperty.call(message, "accountSignatureKey"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.accountSignatureKey);
            return writer;
        };

        /**
         * Encodes the specified ADVSignedKeyIndexList message, length delimited. Does not implicitly {@link WAAdv.ADVSignedKeyIndexList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAAdv.ADVSignedKeyIndexList
         * @static
         * @param {WAAdv.IADVSignedKeyIndexList} message ADVSignedKeyIndexList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ADVSignedKeyIndexList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ADVSignedKeyIndexList message from the specified reader or buffer.
         * @function decode
         * @memberof WAAdv.ADVSignedKeyIndexList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAAdv.ADVSignedKeyIndexList} ADVSignedKeyIndexList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ADVSignedKeyIndexList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAAdv.ADVSignedKeyIndexList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.details = reader.bytes();
                        break;
                    }
                case 2: {
                        message.accountSignature = reader.bytes();
                        break;
                    }
                case 3: {
                        message.accountSignatureKey = reader.bytes();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ADVSignedKeyIndexList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAAdv.ADVSignedKeyIndexList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAAdv.ADVSignedKeyIndexList} ADVSignedKeyIndexList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ADVSignedKeyIndexList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ADVSignedKeyIndexList message.
         * @function verify
         * @memberof WAAdv.ADVSignedKeyIndexList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ADVSignedKeyIndexList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.details != null && message.hasOwnProperty("details"))
                if (!(message.details && typeof message.details.length === "number" || $util.isString(message.details)))
                    return "details: buffer expected";
            if (message.accountSignature != null && message.hasOwnProperty("accountSignature"))
                if (!(message.accountSignature && typeof message.accountSignature.length === "number" || $util.isString(message.accountSignature)))
                    return "accountSignature: buffer expected";
            if (message.accountSignatureKey != null && message.hasOwnProperty("accountSignatureKey"))
                if (!(message.accountSignatureKey && typeof message.accountSignatureKey.length === "number" || $util.isString(message.accountSignatureKey)))
                    return "accountSignatureKey: buffer expected";
            return null;
        };

        /**
         * Creates a ADVSignedKeyIndexList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAAdv.ADVSignedKeyIndexList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAAdv.ADVSignedKeyIndexList} ADVSignedKeyIndexList
         */
        ADVSignedKeyIndexList.fromObject = function fromObject(object) {
            if (object instanceof $root.WAAdv.ADVSignedKeyIndexList)
                return object;
            var message = new $root.WAAdv.ADVSignedKeyIndexList();
            if (object.details != null)
                if (typeof object.details === "string")
                    $util.base64.decode(object.details, message.details = $util.newBuffer($util.base64.length(object.details)), 0);
                else if (object.details.length >= 0)
                    message.details = object.details;
            if (object.accountSignature != null)
                if (typeof object.accountSignature === "string")
                    $util.base64.decode(object.accountSignature, message.accountSignature = $util.newBuffer($util.base64.length(object.accountSignature)), 0);
                else if (object.accountSignature.length >= 0)
                    message.accountSignature = object.accountSignature;
            if (object.accountSignatureKey != null)
                if (typeof object.accountSignatureKey === "string")
                    $util.base64.decode(object.accountSignatureKey, message.accountSignatureKey = $util.newBuffer($util.base64.length(object.accountSignatureKey)), 0);
                else if (object.accountSignatureKey.length >= 0)
                    message.accountSignatureKey = object.accountSignatureKey;
            return message;
        };

        /**
         * Creates a plain object from a ADVSignedKeyIndexList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAAdv.ADVSignedKeyIndexList
         * @static
         * @param {WAAdv.ADVSignedKeyIndexList} message ADVSignedKeyIndexList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ADVSignedKeyIndexList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if (options.bytes === String)
                    object.details = "";
                else {
                    object.details = [];
                    if (options.bytes !== Array)
                        object.details = $util.newBuffer(object.details);
                }
                if (options.bytes === String)
                    object.accountSignature = "";
                else {
                    object.accountSignature = [];
                    if (options.bytes !== Array)
                        object.accountSignature = $util.newBuffer(object.accountSignature);
                }
                if (options.bytes === String)
                    object.accountSignatureKey = "";
                else {
                    object.accountSignatureKey = [];
                    if (options.bytes !== Array)
                        object.accountSignatureKey = $util.newBuffer(object.accountSignatureKey);
                }
            }
            if (message.details != null && message.hasOwnProperty("details"))
                object.details = options.bytes === String ? $util.base64.encode(message.details, 0, message.details.length) : options.bytes === Array ? Array.prototype.slice.call(message.details) : message.details;
            if (message.accountSignature != null && message.hasOwnProperty("accountSignature"))
                object.accountSignature = options.bytes === String ? $util.base64.encode(message.accountSignature, 0, message.accountSignature.length) : options.bytes === Array ? Array.prototype.slice.call(message.accountSignature) : message.accountSignature;
            if (message.accountSignatureKey != null && message.hasOwnProperty("accountSignatureKey"))
                object.accountSignatureKey = options.bytes === String ? $util.base64.encode(message.accountSignatureKey, 0, message.accountSignatureKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.accountSignatureKey) : message.accountSignatureKey;
            return object;
        };

        /**
         * Converts this ADVSignedKeyIndexList to JSON.
         * @function toJSON
         * @memberof WAAdv.ADVSignedKeyIndexList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ADVSignedKeyIndexList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for ADVSignedKeyIndexList
         * @function getTypeUrl
         * @memberof WAAdv.ADVSignedKeyIndexList
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        ADVSignedKeyIndexList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAAdv.ADVSignedKeyIndexList";
        };

        return ADVSignedKeyIndexList;
    })();

    WAAdv.ADVDeviceIdentity = (function() {

        /**
         * Properties of a ADVDeviceIdentity.
         * @memberof WAAdv
         * @interface IADVDeviceIdentity
         * @property {number|null} [rawID] ADVDeviceIdentity rawID
         * @property {number|Long|null} [timestamp] ADVDeviceIdentity timestamp
         * @property {number|null} [keyIndex] ADVDeviceIdentity keyIndex
         * @property {WAAdv.ADVEncryptionType|null} [accountType] ADVDeviceIdentity accountType
         * @property {WAAdv.ADVEncryptionType|null} [deviceType] ADVDeviceIdentity deviceType
         */

        /**
         * Constructs a new ADVDeviceIdentity.
         * @memberof WAAdv
         * @classdesc Represents a ADVDeviceIdentity.
         * @implements IADVDeviceIdentity
         * @constructor
         * @param {WAAdv.IADVDeviceIdentity=} [properties] Properties to set
         */
        function ADVDeviceIdentity(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ADVDeviceIdentity rawID.
         * @member {number} rawID
         * @memberof WAAdv.ADVDeviceIdentity
         * @instance
         */
        ADVDeviceIdentity.prototype.rawID = 0;

        /**
         * ADVDeviceIdentity timestamp.
         * @member {number|Long} timestamp
         * @memberof WAAdv.ADVDeviceIdentity
         * @instance
         */
        ADVDeviceIdentity.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * ADVDeviceIdentity keyIndex.
         * @member {number} keyIndex
         * @memberof WAAdv.ADVDeviceIdentity
         * @instance
         */
        ADVDeviceIdentity.prototype.keyIndex = 0;

        /**
         * ADVDeviceIdentity accountType.
         * @member {WAAdv.ADVEncryptionType} accountType
         * @memberof WAAdv.ADVDeviceIdentity
         * @instance
         */
        ADVDeviceIdentity.prototype.accountType = 0;

        /**
         * ADVDeviceIdentity deviceType.
         * @member {WAAdv.ADVEncryptionType} deviceType
         * @memberof WAAdv.ADVDeviceIdentity
         * @instance
         */
        ADVDeviceIdentity.prototype.deviceType = 0;

        /**
         * Creates a new ADVDeviceIdentity instance using the specified properties.
         * @function create
         * @memberof WAAdv.ADVDeviceIdentity
         * @static
         * @param {WAAdv.IADVDeviceIdentity=} [properties] Properties to set
         * @returns {WAAdv.ADVDeviceIdentity} ADVDeviceIdentity instance
         */
        ADVDeviceIdentity.create = function create(properties) {
            return new ADVDeviceIdentity(properties);
        };

        /**
         * Encodes the specified ADVDeviceIdentity message. Does not implicitly {@link WAAdv.ADVDeviceIdentity.verify|verify} messages.
         * @function encode
         * @memberof WAAdv.ADVDeviceIdentity
         * @static
         * @param {WAAdv.IADVDeviceIdentity} message ADVDeviceIdentity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ADVDeviceIdentity.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rawID != null && Object.hasOwnProperty.call(message, "rawID"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rawID);
            if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.timestamp);
            if (message.keyIndex != null && Object.hasOwnProperty.call(message, "keyIndex"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.keyIndex);
            if (message.accountType != null && Object.hasOwnProperty.call(message, "accountType"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.accountType);
            if (message.deviceType != null && Object.hasOwnProperty.call(message, "deviceType"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.deviceType);
            return writer;
        };

        /**
         * Encodes the specified ADVDeviceIdentity message, length delimited. Does not implicitly {@link WAAdv.ADVDeviceIdentity.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAAdv.ADVDeviceIdentity
         * @static
         * @param {WAAdv.IADVDeviceIdentity} message ADVDeviceIdentity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ADVDeviceIdentity.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ADVDeviceIdentity message from the specified reader or buffer.
         * @function decode
         * @memberof WAAdv.ADVDeviceIdentity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAAdv.ADVDeviceIdentity} ADVDeviceIdentity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ADVDeviceIdentity.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAAdv.ADVDeviceIdentity();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.rawID = reader.uint32();
                        break;
                    }
                case 2: {
                        message.timestamp = reader.uint64();
                        break;
                    }
                case 3: {
                        message.keyIndex = reader.uint32();
                        break;
                    }
                case 4: {
                        message.accountType = reader.int32();
                        break;
                    }
                case 5: {
                        message.deviceType = reader.int32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ADVDeviceIdentity message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAAdv.ADVDeviceIdentity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAAdv.ADVDeviceIdentity} ADVDeviceIdentity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ADVDeviceIdentity.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ADVDeviceIdentity message.
         * @function verify
         * @memberof WAAdv.ADVDeviceIdentity
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ADVDeviceIdentity.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rawID != null && message.hasOwnProperty("rawID"))
                if (!$util.isInteger(message.rawID))
                    return "rawID: integer expected";
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                    return "timestamp: integer|Long expected";
            if (message.keyIndex != null && message.hasOwnProperty("keyIndex"))
                if (!$util.isInteger(message.keyIndex))
                    return "keyIndex: integer expected";
            if (message.accountType != null && message.hasOwnProperty("accountType"))
                switch (message.accountType) {
                default:
                    return "accountType: enum value expected";
                case 0:
                case 1:
                    break;
                }
            if (message.deviceType != null && message.hasOwnProperty("deviceType"))
                switch (message.deviceType) {
                default:
                    return "deviceType: enum value expected";
                case 0:
                case 1:
                    break;
                }
            return null;
        };

        /**
         * Creates a ADVDeviceIdentity message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAAdv.ADVDeviceIdentity
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAAdv.ADVDeviceIdentity} ADVDeviceIdentity
         */
        ADVDeviceIdentity.fromObject = function fromObject(object) {
            if (object instanceof $root.WAAdv.ADVDeviceIdentity)
                return object;
            var message = new $root.WAAdv.ADVDeviceIdentity();
            if (object.rawID != null)
                message.rawID = object.rawID >>> 0;
            if (object.timestamp != null)
                if ($util.Long)
                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                else if (typeof object.timestamp === "string")
                    message.timestamp = parseInt(object.timestamp, 10);
                else if (typeof object.timestamp === "number")
                    message.timestamp = object.timestamp;
                else if (typeof object.timestamp === "object")
                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
            if (object.keyIndex != null)
                message.keyIndex = object.keyIndex >>> 0;
            switch (object.accountType) {
            default:
                if (typeof object.accountType === "number") {
                    message.accountType = object.accountType;
                    break;
                }
                break;
            case "E2EE":
            case 0:
                message.accountType = 0;
                break;
            case "HOSTED":
            case 1:
                message.accountType = 1;
                break;
            }
            switch (object.deviceType) {
            default:
                if (typeof object.deviceType === "number") {
                    message.deviceType = object.deviceType;
                    break;
                }
                break;
            case "E2EE":
            case 0:
                message.deviceType = 0;
                break;
            case "HOSTED":
            case 1:
                message.deviceType = 1;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a ADVDeviceIdentity message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAAdv.ADVDeviceIdentity
         * @static
         * @param {WAAdv.ADVDeviceIdentity} message ADVDeviceIdentity
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ADVDeviceIdentity.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.rawID = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.timestamp = options.longs === String ? "0" : 0;
                object.keyIndex = 0;
                object.accountType = options.enums === String ? "E2EE" : 0;
                object.deviceType = options.enums === String ? "E2EE" : 0;
            }
            if (message.rawID != null && message.hasOwnProperty("rawID"))
                object.rawID = message.rawID;
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (typeof message.timestamp === "number")
                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                else
                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
            if (message.keyIndex != null && message.hasOwnProperty("keyIndex"))
                object.keyIndex = message.keyIndex;
            if (message.accountType != null && message.hasOwnProperty("accountType"))
                object.accountType = options.enums === String ? $root.WAAdv.ADVEncryptionType[message.accountType] === undefined ? message.accountType : $root.WAAdv.ADVEncryptionType[message.accountType] : message.accountType;
            if (message.deviceType != null && message.hasOwnProperty("deviceType"))
                object.deviceType = options.enums === String ? $root.WAAdv.ADVEncryptionType[message.deviceType] === undefined ? message.deviceType : $root.WAAdv.ADVEncryptionType[message.deviceType] : message.deviceType;
            return object;
        };

        /**
         * Converts this ADVDeviceIdentity to JSON.
         * @function toJSON
         * @memberof WAAdv.ADVDeviceIdentity
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ADVDeviceIdentity.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for ADVDeviceIdentity
         * @function getTypeUrl
         * @memberof WAAdv.ADVDeviceIdentity
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        ADVDeviceIdentity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAAdv.ADVDeviceIdentity";
        };

        return ADVDeviceIdentity;
    })();

    WAAdv.ADVSignedDeviceIdentity = (function() {

        /**
         * Properties of a ADVSignedDeviceIdentity.
         * @memberof WAAdv
         * @interface IADVSignedDeviceIdentity
         * @property {Uint8Array|null} [details] ADVSignedDeviceIdentity details
         * @property {Uint8Array|null} [accountSignatureKey] ADVSignedDeviceIdentity accountSignatureKey
         * @property {Uint8Array|null} [accountSignature] ADVSignedDeviceIdentity accountSignature
         * @property {Uint8Array|null} [deviceSignature] ADVSignedDeviceIdentity deviceSignature
         */

        /**
         * Constructs a new ADVSignedDeviceIdentity.
         * @memberof WAAdv
         * @classdesc Represents a ADVSignedDeviceIdentity.
         * @implements IADVSignedDeviceIdentity
         * @constructor
         * @param {WAAdv.IADVSignedDeviceIdentity=} [properties] Properties to set
         */
        function ADVSignedDeviceIdentity(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ADVSignedDeviceIdentity details.
         * @member {Uint8Array} details
         * @memberof WAAdv.ADVSignedDeviceIdentity
         * @instance
         */
        ADVSignedDeviceIdentity.prototype.details = $util.newBuffer([]);

        /**
         * ADVSignedDeviceIdentity accountSignatureKey.
         * @member {Uint8Array} accountSignatureKey
         * @memberof WAAdv.ADVSignedDeviceIdentity
         * @instance
         */
        ADVSignedDeviceIdentity.prototype.accountSignatureKey = $util.newBuffer([]);

        /**
         * ADVSignedDeviceIdentity accountSignature.
         * @member {Uint8Array} accountSignature
         * @memberof WAAdv.ADVSignedDeviceIdentity
         * @instance
         */
        ADVSignedDeviceIdentity.prototype.accountSignature = $util.newBuffer([]);

        /**
         * ADVSignedDeviceIdentity deviceSignature.
         * @member {Uint8Array} deviceSignature
         * @memberof WAAdv.ADVSignedDeviceIdentity
         * @instance
         */
        ADVSignedDeviceIdentity.prototype.deviceSignature = $util.newBuffer([]);

        /**
         * Creates a new ADVSignedDeviceIdentity instance using the specified properties.
         * @function create
         * @memberof WAAdv.ADVSignedDeviceIdentity
         * @static
         * @param {WAAdv.IADVSignedDeviceIdentity=} [properties] Properties to set
         * @returns {WAAdv.ADVSignedDeviceIdentity} ADVSignedDeviceIdentity instance
         */
        ADVSignedDeviceIdentity.create = function create(properties) {
            return new ADVSignedDeviceIdentity(properties);
        };

        /**
         * Encodes the specified ADVSignedDeviceIdentity message. Does not implicitly {@link WAAdv.ADVSignedDeviceIdentity.verify|verify} messages.
         * @function encode
         * @memberof WAAdv.ADVSignedDeviceIdentity
         * @static
         * @param {WAAdv.IADVSignedDeviceIdentity} message ADVSignedDeviceIdentity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ADVSignedDeviceIdentity.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.details != null && Object.hasOwnProperty.call(message, "details"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.details);
            if (message.accountSignatureKey != null && Object.hasOwnProperty.call(message, "accountSignatureKey"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.accountSignatureKey);
            if (message.accountSignature != null && Object.hasOwnProperty.call(message, "accountSignature"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.accountSignature);
            if (message.deviceSignature != null && Object.hasOwnProperty.call(message, "deviceSignature"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.deviceSignature);
            return writer;
        };

        /**
         * Encodes the specified ADVSignedDeviceIdentity message, length delimited. Does not implicitly {@link WAAdv.ADVSignedDeviceIdentity.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAAdv.ADVSignedDeviceIdentity
         * @static
         * @param {WAAdv.IADVSignedDeviceIdentity} message ADVSignedDeviceIdentity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ADVSignedDeviceIdentity.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ADVSignedDeviceIdentity message from the specified reader or buffer.
         * @function decode
         * @memberof WAAdv.ADVSignedDeviceIdentity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAAdv.ADVSignedDeviceIdentity} ADVSignedDeviceIdentity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ADVSignedDeviceIdentity.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAAdv.ADVSignedDeviceIdentity();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.details = reader.bytes();
                        break;
                    }
                case 2: {
                        message.accountSignatureKey = reader.bytes();
                        break;
                    }
                case 3: {
                        message.accountSignature = reader.bytes();
                        break;
                    }
                case 4: {
                        message.deviceSignature = reader.bytes();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ADVSignedDeviceIdentity message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAAdv.ADVSignedDeviceIdentity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAAdv.ADVSignedDeviceIdentity} ADVSignedDeviceIdentity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ADVSignedDeviceIdentity.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ADVSignedDeviceIdentity message.
         * @function verify
         * @memberof WAAdv.ADVSignedDeviceIdentity
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ADVSignedDeviceIdentity.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.details != null && message.hasOwnProperty("details"))
                if (!(message.details && typeof message.details.length === "number" || $util.isString(message.details)))
                    return "details: buffer expected";
            if (message.accountSignatureKey != null && message.hasOwnProperty("accountSignatureKey"))
                if (!(message.accountSignatureKey && typeof message.accountSignatureKey.length === "number" || $util.isString(message.accountSignatureKey)))
                    return "accountSignatureKey: buffer expected";
            if (message.accountSignature != null && message.hasOwnProperty("accountSignature"))
                if (!(message.accountSignature && typeof message.accountSignature.length === "number" || $util.isString(message.accountSignature)))
                    return "accountSignature: buffer expected";
            if (message.deviceSignature != null && message.hasOwnProperty("deviceSignature"))
                if (!(message.deviceSignature && typeof message.deviceSignature.length === "number" || $util.isString(message.deviceSignature)))
                    return "deviceSignature: buffer expected";
            return null;
        };

        /**
         * Creates a ADVSignedDeviceIdentity message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAAdv.ADVSignedDeviceIdentity
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAAdv.ADVSignedDeviceIdentity} ADVSignedDeviceIdentity
         */
        ADVSignedDeviceIdentity.fromObject = function fromObject(object) {
            if (object instanceof $root.WAAdv.ADVSignedDeviceIdentity)
                return object;
            var message = new $root.WAAdv.ADVSignedDeviceIdentity();
            if (object.details != null)
                if (typeof object.details === "string")
                    $util.base64.decode(object.details, message.details = $util.newBuffer($util.base64.length(object.details)), 0);
                else if (object.details.length >= 0)
                    message.details = object.details;
            if (object.accountSignatureKey != null)
                if (typeof object.accountSignatureKey === "string")
                    $util.base64.decode(object.accountSignatureKey, message.accountSignatureKey = $util.newBuffer($util.base64.length(object.accountSignatureKey)), 0);
                else if (object.accountSignatureKey.length >= 0)
                    message.accountSignatureKey = object.accountSignatureKey;
            if (object.accountSignature != null)
                if (typeof object.accountSignature === "string")
                    $util.base64.decode(object.accountSignature, message.accountSignature = $util.newBuffer($util.base64.length(object.accountSignature)), 0);
                else if (object.accountSignature.length >= 0)
                    message.accountSignature = object.accountSignature;
            if (object.deviceSignature != null)
                if (typeof object.deviceSignature === "string")
                    $util.base64.decode(object.deviceSignature, message.deviceSignature = $util.newBuffer($util.base64.length(object.deviceSignature)), 0);
                else if (object.deviceSignature.length >= 0)
                    message.deviceSignature = object.deviceSignature;
            return message;
        };

        /**
         * Creates a plain object from a ADVSignedDeviceIdentity message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAAdv.ADVSignedDeviceIdentity
         * @static
         * @param {WAAdv.ADVSignedDeviceIdentity} message ADVSignedDeviceIdentity
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ADVSignedDeviceIdentity.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if (options.bytes === String)
                    object.details = "";
                else {
                    object.details = [];
                    if (options.bytes !== Array)
                        object.details = $util.newBuffer(object.details);
                }
                if (options.bytes === String)
                    object.accountSignatureKey = "";
                else {
                    object.accountSignatureKey = [];
                    if (options.bytes !== Array)
                        object.accountSignatureKey = $util.newBuffer(object.accountSignatureKey);
                }
                if (options.bytes === String)
                    object.accountSignature = "";
                else {
                    object.accountSignature = [];
                    if (options.bytes !== Array)
                        object.accountSignature = $util.newBuffer(object.accountSignature);
                }
                if (options.bytes === String)
                    object.deviceSignature = "";
                else {
                    object.deviceSignature = [];
                    if (options.bytes !== Array)
                        object.deviceSignature = $util.newBuffer(object.deviceSignature);
                }
            }
            if (message.details != null && message.hasOwnProperty("details"))
                object.details = options.bytes === String ? $util.base64.encode(message.details, 0, message.details.length) : options.bytes === Array ? Array.prototype.slice.call(message.details) : message.details;
            if (message.accountSignatureKey != null && message.hasOwnProperty("accountSignatureKey"))
                object.accountSignatureKey = options.bytes === String ? $util.base64.encode(message.accountSignatureKey, 0, message.accountSignatureKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.accountSignatureKey) : message.accountSignatureKey;
            if (message.accountSignature != null && message.hasOwnProperty("accountSignature"))
                object.accountSignature = options.bytes === String ? $util.base64.encode(message.accountSignature, 0, message.accountSignature.length) : options.bytes === Array ? Array.prototype.slice.call(message.accountSignature) : message.accountSignature;
            if (message.deviceSignature != null && message.hasOwnProperty("deviceSignature"))
                object.deviceSignature = options.bytes === String ? $util.base64.encode(message.deviceSignature, 0, message.deviceSignature.length) : options.bytes === Array ? Array.prototype.slice.call(message.deviceSignature) : message.deviceSignature;
            return object;
        };

        /**
         * Converts this ADVSignedDeviceIdentity to JSON.
         * @function toJSON
         * @memberof WAAdv.ADVSignedDeviceIdentity
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ADVSignedDeviceIdentity.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for ADVSignedDeviceIdentity
         * @function getTypeUrl
         * @memberof WAAdv.ADVSignedDeviceIdentity
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        ADVSignedDeviceIdentity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAAdv.ADVSignedDeviceIdentity";
        };

        return ADVSignedDeviceIdentity;
    })();

    WAAdv.ADVSignedDeviceIdentityHMAC = (function() {

        /**
         * Properties of a ADVSignedDeviceIdentityHMAC.
         * @memberof WAAdv
         * @interface IADVSignedDeviceIdentityHMAC
         * @property {Uint8Array|null} [details] ADVSignedDeviceIdentityHMAC details
         * @property {Uint8Array|null} [HMAC] ADVSignedDeviceIdentityHMAC HMAC
         * @property {WAAdv.ADVEncryptionType|null} [accountType] ADVSignedDeviceIdentityHMAC accountType
         */

        /**
         * Constructs a new ADVSignedDeviceIdentityHMAC.
         * @memberof WAAdv
         * @classdesc Represents a ADVSignedDeviceIdentityHMAC.
         * @implements IADVSignedDeviceIdentityHMAC
         * @constructor
         * @param {WAAdv.IADVSignedDeviceIdentityHMAC=} [properties] Properties to set
         */
        function ADVSignedDeviceIdentityHMAC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ADVSignedDeviceIdentityHMAC details.
         * @member {Uint8Array} details
         * @memberof WAAdv.ADVSignedDeviceIdentityHMAC
         * @instance
         */
        ADVSignedDeviceIdentityHMAC.prototype.details = $util.newBuffer([]);

        /**
         * ADVSignedDeviceIdentityHMAC HMAC.
         * @member {Uint8Array} HMAC
         * @memberof WAAdv.ADVSignedDeviceIdentityHMAC
         * @instance
         */
        ADVSignedDeviceIdentityHMAC.prototype.HMAC = $util.newBuffer([]);

        /**
         * ADVSignedDeviceIdentityHMAC accountType.
         * @member {WAAdv.ADVEncryptionType} accountType
         * @memberof WAAdv.ADVSignedDeviceIdentityHMAC
         * @instance
         */
        ADVSignedDeviceIdentityHMAC.prototype.accountType = 0;

        /**
         * Creates a new ADVSignedDeviceIdentityHMAC instance using the specified properties.
         * @function create
         * @memberof WAAdv.ADVSignedDeviceIdentityHMAC
         * @static
         * @param {WAAdv.IADVSignedDeviceIdentityHMAC=} [properties] Properties to set
         * @returns {WAAdv.ADVSignedDeviceIdentityHMAC} ADVSignedDeviceIdentityHMAC instance
         */
        ADVSignedDeviceIdentityHMAC.create = function create(properties) {
            return new ADVSignedDeviceIdentityHMAC(properties);
        };

        /**
         * Encodes the specified ADVSignedDeviceIdentityHMAC message. Does not implicitly {@link WAAdv.ADVSignedDeviceIdentityHMAC.verify|verify} messages.
         * @function encode
         * @memberof WAAdv.ADVSignedDeviceIdentityHMAC
         * @static
         * @param {WAAdv.IADVSignedDeviceIdentityHMAC} message ADVSignedDeviceIdentityHMAC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ADVSignedDeviceIdentityHMAC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.details != null && Object.hasOwnProperty.call(message, "details"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.details);
            if (message.HMAC != null && Object.hasOwnProperty.call(message, "HMAC"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.HMAC);
            if (message.accountType != null && Object.hasOwnProperty.call(message, "accountType"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.accountType);
            return writer;
        };

        /**
         * Encodes the specified ADVSignedDeviceIdentityHMAC message, length delimited. Does not implicitly {@link WAAdv.ADVSignedDeviceIdentityHMAC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAAdv.ADVSignedDeviceIdentityHMAC
         * @static
         * @param {WAAdv.IADVSignedDeviceIdentityHMAC} message ADVSignedDeviceIdentityHMAC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ADVSignedDeviceIdentityHMAC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ADVSignedDeviceIdentityHMAC message from the specified reader or buffer.
         * @function decode
         * @memberof WAAdv.ADVSignedDeviceIdentityHMAC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAAdv.ADVSignedDeviceIdentityHMAC} ADVSignedDeviceIdentityHMAC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ADVSignedDeviceIdentityHMAC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAAdv.ADVSignedDeviceIdentityHMAC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.details = reader.bytes();
                        break;
                    }
                case 2: {
                        message.HMAC = reader.bytes();
                        break;
                    }
                case 3: {
                        message.accountType = reader.int32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ADVSignedDeviceIdentityHMAC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAAdv.ADVSignedDeviceIdentityHMAC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAAdv.ADVSignedDeviceIdentityHMAC} ADVSignedDeviceIdentityHMAC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ADVSignedDeviceIdentityHMAC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ADVSignedDeviceIdentityHMAC message.
         * @function verify
         * @memberof WAAdv.ADVSignedDeviceIdentityHMAC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ADVSignedDeviceIdentityHMAC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.details != null && message.hasOwnProperty("details"))
                if (!(message.details && typeof message.details.length === "number" || $util.isString(message.details)))
                    return "details: buffer expected";
            if (message.HMAC != null && message.hasOwnProperty("HMAC"))
                if (!(message.HMAC && typeof message.HMAC.length === "number" || $util.isString(message.HMAC)))
                    return "HMAC: buffer expected";
            if (message.accountType != null && message.hasOwnProperty("accountType"))
                switch (message.accountType) {
                default:
                    return "accountType: enum value expected";
                case 0:
                case 1:
                    break;
                }
            return null;
        };

        /**
         * Creates a ADVSignedDeviceIdentityHMAC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAAdv.ADVSignedDeviceIdentityHMAC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAAdv.ADVSignedDeviceIdentityHMAC} ADVSignedDeviceIdentityHMAC
         */
        ADVSignedDeviceIdentityHMAC.fromObject = function fromObject(object) {
            if (object instanceof $root.WAAdv.ADVSignedDeviceIdentityHMAC)
                return object;
            var message = new $root.WAAdv.ADVSignedDeviceIdentityHMAC();
            if (object.details != null)
                if (typeof object.details === "string")
                    $util.base64.decode(object.details, message.details = $util.newBuffer($util.base64.length(object.details)), 0);
                else if (object.details.length >= 0)
                    message.details = object.details;
            if (object.HMAC != null)
                if (typeof object.HMAC === "string")
                    $util.base64.decode(object.HMAC, message.HMAC = $util.newBuffer($util.base64.length(object.HMAC)), 0);
                else if (object.HMAC.length >= 0)
                    message.HMAC = object.HMAC;
            switch (object.accountType) {
            default:
                if (typeof object.accountType === "number") {
                    message.accountType = object.accountType;
                    break;
                }
                break;
            case "E2EE":
            case 0:
                message.accountType = 0;
                break;
            case "HOSTED":
            case 1:
                message.accountType = 1;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a ADVSignedDeviceIdentityHMAC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAAdv.ADVSignedDeviceIdentityHMAC
         * @static
         * @param {WAAdv.ADVSignedDeviceIdentityHMAC} message ADVSignedDeviceIdentityHMAC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ADVSignedDeviceIdentityHMAC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if (options.bytes === String)
                    object.details = "";
                else {
                    object.details = [];
                    if (options.bytes !== Array)
                        object.details = $util.newBuffer(object.details);
                }
                if (options.bytes === String)
                    object.HMAC = "";
                else {
                    object.HMAC = [];
                    if (options.bytes !== Array)
                        object.HMAC = $util.newBuffer(object.HMAC);
                }
                object.accountType = options.enums === String ? "E2EE" : 0;
            }
            if (message.details != null && message.hasOwnProperty("details"))
                object.details = options.bytes === String ? $util.base64.encode(message.details, 0, message.details.length) : options.bytes === Array ? Array.prototype.slice.call(message.details) : message.details;
            if (message.HMAC != null && message.hasOwnProperty("HMAC"))
                object.HMAC = options.bytes === String ? $util.base64.encode(message.HMAC, 0, message.HMAC.length) : options.bytes === Array ? Array.prototype.slice.call(message.HMAC) : message.HMAC;
            if (message.accountType != null && message.hasOwnProperty("accountType"))
                object.accountType = options.enums === String ? $root.WAAdv.ADVEncryptionType[message.accountType] === undefined ? message.accountType : $root.WAAdv.ADVEncryptionType[message.accountType] : message.accountType;
            return object;
        };

        /**
         * Converts this ADVSignedDeviceIdentityHMAC to JSON.
         * @function toJSON
         * @memberof WAAdv.ADVSignedDeviceIdentityHMAC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ADVSignedDeviceIdentityHMAC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for ADVSignedDeviceIdentityHMAC
         * @function getTypeUrl
         * @memberof WAAdv.ADVSignedDeviceIdentityHMAC
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        ADVSignedDeviceIdentityHMAC.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAAdv.ADVSignedDeviceIdentityHMAC";
        };

        return ADVSignedDeviceIdentityHMAC;
    })();

    return WAAdv;
})();

$root.WAMmsRetry = (function() {

    /**
     * Namespace WAMmsRetry.
     * @exports WAMmsRetry
     * @namespace
     */
    var WAMmsRetry = {};

    WAMmsRetry.MediaRetryNotification = (function() {

        /**
         * Properties of a MediaRetryNotification.
         * @memberof WAMmsRetry
         * @interface IMediaRetryNotification
         * @property {string|null} [stanzaID] MediaRetryNotification stanzaID
         * @property {string|null} [directPath] MediaRetryNotification directPath
         * @property {WAMmsRetry.MediaRetryNotification.ResultType|null} [result] MediaRetryNotification result
         */

        /**
         * Constructs a new MediaRetryNotification.
         * @memberof WAMmsRetry
         * @classdesc Represents a MediaRetryNotification.
         * @implements IMediaRetryNotification
         * @constructor
         * @param {WAMmsRetry.IMediaRetryNotification=} [properties] Properties to set
         */
        function MediaRetryNotification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MediaRetryNotification stanzaID.
         * @member {string} stanzaID
         * @memberof WAMmsRetry.MediaRetryNotification
         * @instance
         */
        MediaRetryNotification.prototype.stanzaID = "";

        /**
         * MediaRetryNotification directPath.
         * @member {string} directPath
         * @memberof WAMmsRetry.MediaRetryNotification
         * @instance
         */
        MediaRetryNotification.prototype.directPath = "";

        /**
         * MediaRetryNotification result.
         * @member {WAMmsRetry.MediaRetryNotification.ResultType} result
         * @memberof WAMmsRetry.MediaRetryNotification
         * @instance
         */
        MediaRetryNotification.prototype.result = 0;

        /**
         * Creates a new MediaRetryNotification instance using the specified properties.
         * @function create
         * @memberof WAMmsRetry.MediaRetryNotification
         * @static
         * @param {WAMmsRetry.IMediaRetryNotification=} [properties] Properties to set
         * @returns {WAMmsRetry.MediaRetryNotification} MediaRetryNotification instance
         */
        MediaRetryNotification.create = function create(properties) {
            return new MediaRetryNotification(properties);
        };

        /**
         * Encodes the specified MediaRetryNotification message. Does not implicitly {@link WAMmsRetry.MediaRetryNotification.verify|verify} messages.
         * @function encode
         * @memberof WAMmsRetry.MediaRetryNotification
         * @static
         * @param {WAMmsRetry.IMediaRetryNotification} message MediaRetryNotification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MediaRetryNotification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.stanzaID != null && Object.hasOwnProperty.call(message, "stanzaID"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.stanzaID);
            if (message.directPath != null && Object.hasOwnProperty.call(message, "directPath"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.directPath);
            if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.result);
            return writer;
        };

        /**
         * Encodes the specified MediaRetryNotification message, length delimited. Does not implicitly {@link WAMmsRetry.MediaRetryNotification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAMmsRetry.MediaRetryNotification
         * @static
         * @param {WAMmsRetry.IMediaRetryNotification} message MediaRetryNotification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MediaRetryNotification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MediaRetryNotification message from the specified reader or buffer.
         * @function decode
         * @memberof WAMmsRetry.MediaRetryNotification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAMmsRetry.MediaRetryNotification} MediaRetryNotification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MediaRetryNotification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAMmsRetry.MediaRetryNotification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.stanzaID = reader.string();
                        break;
                    }
                case 2: {
                        message.directPath = reader.string();
                        break;
                    }
                case 3: {
                        message.result = reader.int32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MediaRetryNotification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAMmsRetry.MediaRetryNotification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAMmsRetry.MediaRetryNotification} MediaRetryNotification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MediaRetryNotification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MediaRetryNotification message.
         * @function verify
         * @memberof WAMmsRetry.MediaRetryNotification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MediaRetryNotification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.stanzaID != null && message.hasOwnProperty("stanzaID"))
                if (!$util.isString(message.stanzaID))
                    return "stanzaID: string expected";
            if (message.directPath != null && message.hasOwnProperty("directPath"))
                if (!$util.isString(message.directPath))
                    return "directPath: string expected";
            if (message.result != null && message.hasOwnProperty("result"))
                switch (message.result) {
                default:
                    return "result: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            return null;
        };

        /**
         * Creates a MediaRetryNotification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAMmsRetry.MediaRetryNotification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAMmsRetry.MediaRetryNotification} MediaRetryNotification
         */
        MediaRetryNotification.fromObject = function fromObject(object) {
            if (object instanceof $root.WAMmsRetry.MediaRetryNotification)
                return object;
            var message = new $root.WAMmsRetry.MediaRetryNotification();
            if (object.stanzaID != null)
                message.stanzaID = String(object.stanzaID);
            if (object.directPath != null)
                message.directPath = String(object.directPath);
            switch (object.result) {
            default:
                if (typeof object.result === "number") {
                    message.result = object.result;
                    break;
                }
                break;
            case "GENERAL_ERROR":
            case 0:
                message.result = 0;
                break;
            case "SUCCESS":
            case 1:
                message.result = 1;
                break;
            case "NOT_FOUND":
            case 2:
                message.result = 2;
                break;
            case "DECRYPTION_ERROR":
            case 3:
                message.result = 3;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a MediaRetryNotification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAMmsRetry.MediaRetryNotification
         * @static
         * @param {WAMmsRetry.MediaRetryNotification} message MediaRetryNotification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MediaRetryNotification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.stanzaID = "";
                object.directPath = "";
                object.result = options.enums === String ? "GENERAL_ERROR" : 0;
            }
            if (message.stanzaID != null && message.hasOwnProperty("stanzaID"))
                object.stanzaID = message.stanzaID;
            if (message.directPath != null && message.hasOwnProperty("directPath"))
                object.directPath = message.directPath;
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = options.enums === String ? $root.WAMmsRetry.MediaRetryNotification.ResultType[message.result] === undefined ? message.result : $root.WAMmsRetry.MediaRetryNotification.ResultType[message.result] : message.result;
            return object;
        };

        /**
         * Converts this MediaRetryNotification to JSON.
         * @function toJSON
         * @memberof WAMmsRetry.MediaRetryNotification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MediaRetryNotification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for MediaRetryNotification
         * @function getTypeUrl
         * @memberof WAMmsRetry.MediaRetryNotification
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        MediaRetryNotification.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAMmsRetry.MediaRetryNotification";
        };

        /**
         * ResultType enum.
         * @name WAMmsRetry.MediaRetryNotification.ResultType
         * @enum {number}
         * @property {number} GENERAL_ERROR=0 GENERAL_ERROR value
         * @property {number} SUCCESS=1 SUCCESS value
         * @property {number} NOT_FOUND=2 NOT_FOUND value
         * @property {number} DECRYPTION_ERROR=3 DECRYPTION_ERROR value
         */
        MediaRetryNotification.ResultType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "GENERAL_ERROR"] = 0;
            values[valuesById[1] = "SUCCESS"] = 1;
            values[valuesById[2] = "NOT_FOUND"] = 2;
            values[valuesById[3] = "DECRYPTION_ERROR"] = 3;
            return values;
        })();

        return MediaRetryNotification;
    })();

    WAMmsRetry.ServerErrorReceipt = (function() {

        /**
         * Properties of a ServerErrorReceipt.
         * @memberof WAMmsRetry
         * @interface IServerErrorReceipt
         * @property {string|null} [stanzaID] ServerErrorReceipt stanzaID
         */

        /**
         * Constructs a new ServerErrorReceipt.
         * @memberof WAMmsRetry
         * @classdesc Represents a ServerErrorReceipt.
         * @implements IServerErrorReceipt
         * @constructor
         * @param {WAMmsRetry.IServerErrorReceipt=} [properties] Properties to set
         */
        function ServerErrorReceipt(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ServerErrorReceipt stanzaID.
         * @member {string} stanzaID
         * @memberof WAMmsRetry.ServerErrorReceipt
         * @instance
         */
        ServerErrorReceipt.prototype.stanzaID = "";

        /**
         * Creates a new ServerErrorReceipt instance using the specified properties.
         * @function create
         * @memberof WAMmsRetry.ServerErrorReceipt
         * @static
         * @param {WAMmsRetry.IServerErrorReceipt=} [properties] Properties to set
         * @returns {WAMmsRetry.ServerErrorReceipt} ServerErrorReceipt instance
         */
        ServerErrorReceipt.create = function create(properties) {
            return new ServerErrorReceipt(properties);
        };

        /**
         * Encodes the specified ServerErrorReceipt message. Does not implicitly {@link WAMmsRetry.ServerErrorReceipt.verify|verify} messages.
         * @function encode
         * @memberof WAMmsRetry.ServerErrorReceipt
         * @static
         * @param {WAMmsRetry.IServerErrorReceipt} message ServerErrorReceipt message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ServerErrorReceipt.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.stanzaID != null && Object.hasOwnProperty.call(message, "stanzaID"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.stanzaID);
            return writer;
        };

        /**
         * Encodes the specified ServerErrorReceipt message, length delimited. Does not implicitly {@link WAMmsRetry.ServerErrorReceipt.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAMmsRetry.ServerErrorReceipt
         * @static
         * @param {WAMmsRetry.IServerErrorReceipt} message ServerErrorReceipt message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ServerErrorReceipt.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ServerErrorReceipt message from the specified reader or buffer.
         * @function decode
         * @memberof WAMmsRetry.ServerErrorReceipt
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAMmsRetry.ServerErrorReceipt} ServerErrorReceipt
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ServerErrorReceipt.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAMmsRetry.ServerErrorReceipt();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.stanzaID = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ServerErrorReceipt message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAMmsRetry.ServerErrorReceipt
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAMmsRetry.ServerErrorReceipt} ServerErrorReceipt
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ServerErrorReceipt.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ServerErrorReceipt message.
         * @function verify
         * @memberof WAMmsRetry.ServerErrorReceipt
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ServerErrorReceipt.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.stanzaID != null && message.hasOwnProperty("stanzaID"))
                if (!$util.isString(message.stanzaID))
                    return "stanzaID: string expected";
            return null;
        };

        /**
         * Creates a ServerErrorReceipt message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAMmsRetry.ServerErrorReceipt
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAMmsRetry.ServerErrorReceipt} ServerErrorReceipt
         */
        ServerErrorReceipt.fromObject = function fromObject(object) {
            if (object instanceof $root.WAMmsRetry.ServerErrorReceipt)
                return object;
            var message = new $root.WAMmsRetry.ServerErrorReceipt();
            if (object.stanzaID != null)
                message.stanzaID = String(object.stanzaID);
            return message;
        };

        /**
         * Creates a plain object from a ServerErrorReceipt message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAMmsRetry.ServerErrorReceipt
         * @static
         * @param {WAMmsRetry.ServerErrorReceipt} message ServerErrorReceipt
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ServerErrorReceipt.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.stanzaID = "";
            if (message.stanzaID != null && message.hasOwnProperty("stanzaID"))
                object.stanzaID = message.stanzaID;
            return object;
        };

        /**
         * Converts this ServerErrorReceipt to JSON.
         * @function toJSON
         * @memberof WAMmsRetry.ServerErrorReceipt
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ServerErrorReceipt.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for ServerErrorReceipt
         * @function getTypeUrl
         * @memberof WAMmsRetry.ServerErrorReceipt
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        ServerErrorReceipt.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAMmsRetry.ServerErrorReceipt";
        };

        return ServerErrorReceipt;
    })();

    return WAMmsRetry;
})();

$root.WAProtocol = (function() {

    /**
     * Namespace WAProtocol.
     * @exports WAProtocol
     * @namespace
     */
    var WAProtocol = {};

    WAProtocol.MessageKey = (function() {

        /**
         * Properties of a MessageKey.
         * @memberof WAProtocol
         * @interface IMessageKey
         * @property {string|null} [remoteJID] MessageKey remoteJID
         * @property {boolean|null} [fromMe] MessageKey fromMe
         * @property {string|null} [ID] MessageKey ID
         * @property {string|null} [participant] MessageKey participant
         */

        /**
         * Constructs a new MessageKey.
         * @memberof WAProtocol
         * @classdesc Represents a MessageKey.
         * @implements IMessageKey
         * @constructor
         * @param {WAProtocol.IMessageKey=} [properties] Properties to set
         */
        function MessageKey(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MessageKey remoteJID.
         * @member {string} remoteJID
         * @memberof WAProtocol.MessageKey
         * @instance
         */
        MessageKey.prototype.remoteJID = "";

        /**
         * MessageKey fromMe.
         * @member {boolean} fromMe
         * @memberof WAProtocol.MessageKey
         * @instance
         */
        MessageKey.prototype.fromMe = false;

        /**
         * MessageKey ID.
         * @member {string} ID
         * @memberof WAProtocol.MessageKey
         * @instance
         */
        MessageKey.prototype.ID = "";

        /**
         * MessageKey participant.
         * @member {string} participant
         * @memberof WAProtocol.MessageKey
         * @instance
         */
        MessageKey.prototype.participant = "";

        /**
         * Creates a new MessageKey instance using the specified properties.
         * @function create
         * @memberof WAProtocol.MessageKey
         * @static
         * @param {WAProtocol.IMessageKey=} [properties] Properties to set
         * @returns {WAProtocol.MessageKey} MessageKey instance
         */
        MessageKey.create = function create(properties) {
            return new MessageKey(properties);
        };

        /**
         * Encodes the specified MessageKey message. Does not implicitly {@link WAProtocol.MessageKey.verify|verify} messages.
         * @function encode
         * @memberof WAProtocol.MessageKey
         * @static
         * @param {WAProtocol.IMessageKey} message MessageKey message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MessageKey.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.remoteJID != null && Object.hasOwnProperty.call(message, "remoteJID"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.remoteJID);
            if (message.fromMe != null && Object.hasOwnProperty.call(message, "fromMe"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fromMe);
            if (message.ID != null && Object.hasOwnProperty.call(message, "ID"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.ID);
            if (message.participant != null && Object.hasOwnProperty.call(message, "participant"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.participant);
            return writer;
        };

        /**
         * Encodes the specified MessageKey message, length delimited. Does not implicitly {@link WAProtocol.MessageKey.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WAProtocol.MessageKey
         * @static
         * @param {WAProtocol.IMessageKey} message MessageKey message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MessageKey.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MessageKey message from the specified reader or buffer.
         * @function decode
         * @memberof WAProtocol.MessageKey
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WAProtocol.MessageKey} MessageKey
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MessageKey.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WAProtocol.MessageKey();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.remoteJID = reader.string();
                        break;
                    }
                case 2: {
                        message.fromMe = reader.bool();
                        break;
                    }
                case 3: {
                        message.ID = reader.string();
                        break;
                    }
                case 4: {
                        message.participant = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MessageKey message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WAProtocol.MessageKey
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WAProtocol.MessageKey} MessageKey
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MessageKey.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MessageKey message.
         * @function verify
         * @memberof WAProtocol.MessageKey
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MessageKey.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.remoteJID != null && message.hasOwnProperty("remoteJID"))
                if (!$util.isString(message.remoteJID))
                    return "remoteJID: string expected";
            if (message.fromMe != null && message.hasOwnProperty("fromMe"))
                if (typeof message.fromMe !== "boolean")
                    return "fromMe: boolean expected";
            if (message.ID != null && message.hasOwnProperty("ID"))
                if (!$util.isString(message.ID))
                    return "ID: string expected";
            if (message.participant != null && message.hasOwnProperty("participant"))
                if (!$util.isString(message.participant))
                    return "participant: string expected";
            return null;
        };

        /**
         * Creates a MessageKey message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WAProtocol.MessageKey
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WAProtocol.MessageKey} MessageKey
         */
        MessageKey.fromObject = function fromObject(object) {
            if (object instanceof $root.WAProtocol.MessageKey)
                return object;
            var message = new $root.WAProtocol.MessageKey();
            if (object.remoteJID != null)
                message.remoteJID = String(object.remoteJID);
            if (object.fromMe != null)
                message.fromMe = Boolean(object.fromMe);
            if (object.ID != null)
                message.ID = String(object.ID);
            if (object.participant != null)
                message.participant = String(object.participant);
            return message;
        };

        /**
         * Creates a plain object from a MessageKey message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WAProtocol.MessageKey
         * @static
         * @param {WAProtocol.MessageKey} message MessageKey
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MessageKey.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.remoteJID = "";
                object.fromMe = false;
                object.ID = "";
                object.participant = "";
            }
            if (message.remoteJID != null && message.hasOwnProperty("remoteJID"))
                object.remoteJID = message.remoteJID;
            if (message.fromMe != null && message.hasOwnProperty("fromMe"))
                object.fromMe = message.fromMe;
            if (message.ID != null && message.hasOwnProperty("ID"))
                object.ID = message.ID;
            if (message.participant != null && message.hasOwnProperty("participant"))
                object.participant = message.participant;
            return object;
        };

        /**
         * Converts this MessageKey to JSON.
         * @function toJSON
         * @memberof WAProtocol.MessageKey
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MessageKey.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * Gets the default type url for MessageKey
         * @function getTypeUrl
         * @memberof WAProtocol.MessageKey
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        MessageKey.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/WAProtocol.MessageKey";
        };

        return MessageKey;
    })();

    return WAProtocol;
})();

module.exports = $root;
